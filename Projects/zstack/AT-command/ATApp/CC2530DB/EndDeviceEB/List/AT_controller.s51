///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              23/Feb/2022  09:34:57
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_controller.c
//    Command line       =  
//        -f C:\Users\Administrator\AppData\Local\Temp\EW2D3D.tmp
//        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_controller.c
//        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
//        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
//        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
//        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
//        ISR_KEYINTERRUPT -lC
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        -lA
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=300 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\AT_controller.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AT_controller

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V3
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??ATApp_MessageMSGCB::?relay`
        FUNCTION `??ATApp_MessageMSGCB::?relay`,0203H
        PUBLIC `??AT_Endpoint_Controller::?relay`
        FUNCTION `??AT_Endpoint_Controller::?relay`,0203H
        PUBLIC `??AT_Endpoint_Register::?relay`
        FUNCTION `??AT_Endpoint_Register::?relay`,0203H
        PUBLIC `??AT_SendCmd::?relay`
        FUNCTION `??AT_SendCmd::?relay`,0203H
        PUBLIC `??AT_SendEPCtrl::?relay`
        FUNCTION `??AT_SendEPCtrl::?relay`,0203H
        PUBLIC `??AT_SendEPCtrl_rsp::?relay`
        FUNCTION `??AT_SendEPCtrl_rsp::?relay`,0203H
        PUBLIC `??AT_zclController_Init::?relay`
        FUNCTION `??AT_zclController_Init::?relay`,0203H
        PUBLIC `??AT_zclController_ProcessIncomingMsg::?relay`
        FUNCTION `??AT_zclController_ProcessIncomingMsg::?relay`,0203H
        FUNCTION `??AT_zclCtrl_REpCtrl_req::?relay`,0203H
        FUNCTION `??AT_zclCtrl_REpCtrl_rsp::?relay`,0203H
        FUNCTION `??zclController_ProcessInDiscAttrsRspCmd::?rela`,0203H
        FUNCTION `??zclController_ProcessInDiscCmdsRspCmd::?relay`,0203H
        FUNCTION `??zclController_ProcessInReadRspCmd::?relay`,0203H
        FUNCTION `??zclController_ProcessInWriteRspCmd::?relay`,0203H
        PUBLIC ATApp_MessageMSGCB
        FUNCTION ATApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC AT_Endpoint_Controller
        FUNCTION AT_Endpoint_Controller,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC AT_Endpoint_Register
        FUNCTION AT_Endpoint_Register,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC AT_SendCmd
        FUNCTION AT_SendCmd,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC AT_SendEPCtrl
        FUNCTION AT_SendEPCtrl,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC AT_SendEPCtrl_rsp
        FUNCTION AT_SendEPCtrl_rsp,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC AT_zclController_Init
        FUNCTION AT_zclController_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC AT_zclController_ProcessIncomingMsg
        FUNCTION AT_zclController_ProcessIncomingMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        FUNCTION AT_zclCtrl_REpCtrl_req,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION AT_zclCtrl_REpCtrl_rsp,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC zclController_EP_List
        FUNCTION zclController_ProcessInDiscAttrsRspCmd,0a1203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        FUNCTION zclController_ProcessInDiscCmdsRspCmd,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclController_ProcessInReadRspCmd,0a1203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 39, STACK
        FUNCTION zclController_ProcessInWriteRspCmd,0a1203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 39, STACK
        PUBLIC zclController_SimpleDesc
        PUBLIC zclCtrl_InClusterList
        PUBLIC zclCtrl_OutClusterList
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
AT_GetIEEEAddrStr   SYMBOL "AT_GetIEEEAddrStr"
`??AT_GetIEEEAddrStr::?relay` SYMBOL "?relay", AT_GetIEEEAddrStr
AT_Int16toChar      SYMBOL "AT_Int16toChar"
`??AT_Int16toChar::?relay` SYMBOL "?relay", AT_Int16toChar
AT_Int8toChar       SYMBOL "AT_Int8toChar"
`??AT_Int8toChar::?relay` SYMBOL "?relay", AT_Int8toChar
AT_UARTWriteErrMsg  SYMBOL "AT_UARTWriteErrMsg"
`??AT_UARTWriteErrMsg::?relay` SYMBOL "?relay", AT_UARTWriteErrMsg
AT_Uart0_Send       SYMBOL "AT_Uart0_Send"
`??AT_Uart0_Send::?relay` SYMBOL "?relay", AT_Uart0_Send
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
ATApp_MessageMSGCB  SYMBOL "ATApp_MessageMSGCB"
`??ATApp_MessageMSGCB::?relay` SYMBOL "?relay", ATApp_MessageMSGCB
AT_Endpoint_Controller SYMBOL "AT_Endpoint_Controller"
`??AT_Endpoint_Controller::?relay` SYMBOL "?relay", AT_Endpoint_Controller
AT_Endpoint_Register SYMBOL "AT_Endpoint_Register"
`??AT_Endpoint_Register::?relay` SYMBOL "?relay", AT_Endpoint_Register
AT_SendCmd          SYMBOL "AT_SendCmd"
`??AT_SendCmd::?relay` SYMBOL "?relay", AT_SendCmd
AT_SendEPCtrl       SYMBOL "AT_SendEPCtrl"
`??AT_SendEPCtrl::?relay` SYMBOL "?relay", AT_SendEPCtrl
AT_SendEPCtrl_rsp   SYMBOL "AT_SendEPCtrl_rsp"
`??AT_SendEPCtrl_rsp::?relay` SYMBOL "?relay", AT_SendEPCtrl_rsp
AT_zclController_Init SYMBOL "AT_zclController_Init"
`??AT_zclController_Init::?relay` SYMBOL "?relay", AT_zclController_Init
AT_zclController_ProcessIncomingMsg SYMBOL "AT_zclController_ProcessIncomingMsg"
`??AT_zclController_ProcessIncomingMsg::?relay` SYMBOL "?relay", AT_zclController_ProcessIncomingMsg

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??AT_GetIEEEAddrStr::?relay`
        FUNCTION `??AT_GetIEEEAddrStr::?relay`,00H
        EXTERN `??AT_Int16toChar::?relay`
        FUNCTION `??AT_Int16toChar::?relay`,00H
        EXTERN `??AT_Int8toChar::?relay`
        FUNCTION `??AT_Int8toChar::?relay`,00H
        EXTERN `??AT_UARTWriteErrMsg::?relay`
        FUNCTION `??AT_UARTWriteErrMsg::?relay`,00H
        EXTERN `??AT_Uart0_Send::?relay`
        FUNCTION `??AT_Uart0_Send::?relay`,00H
        EXTERN `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_GetIEEEAddrStr
        FUNCTION AT_GetIEEEAddrStr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Int16toChar
        FUNCTION AT_Int16toChar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Int8toChar
        FUNCTION AT_Int8toChar,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_UARTWriteErrMsg
        FUNCTION AT_UARTWriteErrMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Uart0_Send
        FUNCTION AT_Uart0_Send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_controller.c
//    1 /*********************************************************************
//    2   Filename:       AT_controller.c
//    3 
//    4   Author:         Yasin Zhang
//    5 **********************************************************************/
//    6 
//    7 /*********************************************************************
//    8  * INCLUDES
//    9  */
//   10 #include "ZComDef.h"
//   11 #include "OSAL.h"
//   12 #include "ZDApp.h"
//   13 #include "bdb_interface.h"
//   14 
//   15 #include "zcl.h"
//   16 #include "zcl_ha.h"
//   17 
//   18 #include "onboard.h"
//   19 
//   20 #include "AT_controller.h"
//   21 #include "ATApp.h"
//   22 #include "AT_uart.h"
//   23 #include "AT_printf.h"
//   24 
//   25 /*********************************************************************
//   26 * MACROS
//   27 */
//   28 
//   29 /*********************************************************************
//   30 * CONSTANTS
//   31 */
//   32 
//   33 /*********************************************************************
//   34 * GLOBAL VARIABLES
//   35 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   36 zclController_EP_List_t *zclController_EP_List = NULL;
zclController_EP_List:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   37 
//   38 /*********************************************************************
//   39  * LOCAL VARIABLES
//   40  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 static uint8 zclCtrl_TransID = 0;  // This is the unique message ID (counter)
zclCtrl_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   42 
//   43 /*********************************************************************
//   44  * SIMPLE DESCRIPTOR
//   45  */
//   46 
//   47 // This is the Cluster ID List and should be filled with Application
//   48 // specific cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   49 const cId_t zclCtrl_InClusterList[] =
zclCtrl_InClusterList:
        DATA16
        DW 0
        DW 3
//   50 {
//   51  ZCL_CLUSTER_ID_GEN_BASIC,
//   52  ZCL_CLUSTER_ID_GEN_IDENTIFY,
//   53 
//   54  // ZCL_CONTROLLER_TODO: Add application specific Input Clusters Here.
//   55  //       See zcl.h for Cluster ID definitions
//   56 };
//   57 #define ZCL_CONTROLLER_MAX_INCLUSTERS   0//(sizeof(zclCtrl_InClusterList) / sizeof(zclCtrl_InClusterList[0]))
//   58 
//   59 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   60 const cId_t zclCtrl_OutClusterList[] =
zclCtrl_OutClusterList:
        DW 0
//   61 {
//   62  ZCL_CLUSTER_ID_GEN_BASIC,
//   63 
//   64  // ZCL_CONTROLLER_TODO: Add application specific Output Clusters Here.
//   65  //       See zcl.h for Cluster ID definitions
//   66 };
//   67 #define ZCL_CONTROLLER_MAX_OUTCLUSTERS  0//(sizeof(zclCtrl_OutClusterList) / sizeof(zclCtrl_OutClusterList[0]))
//   68 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   69 SimpleDescriptionFormat_t zclController_SimpleDesc =
zclController_SimpleDesc:
        DATA8
        DS 12
        REQUIRE `?<Initializer for zclController_SimpleDesc>`
        REQUIRE __INIT_XDATA_I
//   70 {
//   71  ZCL_CONTROLLER_ENDPOINT,         //  int Endpoint;
//   72  ZCL_HA_PROFILE_ID,               //  uint16 AppProfId;
//   73  // ZCL_CONTROLLER_TODO: Replace ZCL_HA_DEVICEID_REMOTE_CONTROL with application specific device ID
//   74  ZCL_HA_DEVICEID_REMOTE_CONTROL,  //  uint16 AppDeviceId;
//   75  ZCL_DEVICE_VERSION,              //  int   AppDevVer:4;
//   76  ZCL_FLAGS,                       //  int   AppFlags:4;
//   77  ZCL_CONTROLLER_MAX_INCLUSTERS,   //  byte  AppNumInClusters;
//   78  NULL,//(cId_t *)zclCtrl_InClusterList,  //  byte *pAppInClusterList;
//   79  ZCL_CONTROLLER_MAX_OUTCLUSTERS,  //  byte  AppNumInClusters;
//   80  NULL//(cId_t *)zclCtrl_OutClusterList  //  byte *pAppInClusterList;
//   81 };
//   82 
//   83 /*********************************************************************
//   84  * LOCAL FUNCTIONS
//   85  */
//   86 static void AT_zclCtrl_REpCtrl_CB( afIncomingMSGPacket_t *pkt );
//   87 static void AT_ATF_CMD_CB( afIncomingMSGPacket_t *pkt );
//   88 static void AT_zclCtrl_REpCtrl_req( afIncomingMSGPacket_t *pkt );
//   89 static void AT_zclCtrl_REpCtrl_rsp( afIncomingMSGPacket_t *pkt );
//   90 static void AT_ATF_Cmd_req( afIncomingMSGPacket_t *pkt );
//   91 static uint8 zclCtrlCalcHdrSize( ZCLCtrlCmd_hdr *hdr );
//   92 static uint8* zclCtrlBuildHdr( ZCLCtrlCmd_hdr *hdr, uint8 *pData );
//   93 
//   94 // Functions to process ZCL Foundation incoming Command/Response messages
//   95 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//   96 static void zclController_PrintfAttrData( uint8 dataType, uint8 *attrData );
//   97 #endif
//   98 #ifdef ZCL_READ
//   99 static uint8 zclController_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  100 #endif
//  101 #ifdef ZCL_WRITE
//  102 static uint8 zclController_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  103 #endif
//  104 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  105 static uint8 zclController_ProcessInReadReportCfgRspCmd( zclIncomingMsg_t *pInMsg );
//  106 static uint8 zclController_ProcessInConfigReportRspCmd( zclIncomingMsg_t *pInMsg );
//  107 #endif
//  108 #ifdef ZCL_REPORT_DESTINATION_DEVICE
//  109 static void zclController_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
//  110 #endif
//  111 static uint8 zclController_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  112 #ifdef ZCL_DISCOVER
//  113 static uint8 zclController_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  114 static uint8 zclController_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  115 static uint8 zclController_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  116 #endif
//  117 
//  118 /*********************************************************************
//  119  * @fn          zclController_Init
//  120  *
//  121  * @brief       Initialize the ZCL controller
//  122  *
//  123  * @param       uint8 task_id - the application that ZCL messages send to
//  124  *
//  125  * @return      none
//  126  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  127 void AT_zclController_Init( uint8* task_id )
AT_zclController_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function AT_zclController_Init
        CODE
//  128 {
        FUNCALL AT_zclController_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  129   // This app is part of the Home Automation Profile
//  130   bdb_RegisterSimpleDescriptor( &zclController_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#zclController_SimpleDesc & 0xff
        MOV       R3,#(zclController_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  131 
//  132   // Register the Application to receive the unprocessed Foundation command/response messages
//  133   zcl_registerForMsg( *task_id );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  134 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  135 
//  136 /*********************************************************************
//  137  * @fn          zclEndpoint_Register
//  138  *
//  139  * @brief       Register the endPoint in the controller
//  140  *
//  141  * @param       uint8 endPoint           - the endPoint need to register
//  142  *              zclController_EP_CB cbFc - the endPoint's callback function
//  143  *
//  144  * @return      if register successfule, return true; otherwise return false
//  145  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  146 bool AT_Endpoint_Register( uint8 endPoint, uint8 *epStatus, zclController_EP_CB cbFc )
AT_Endpoint_Register:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function AT_Endpoint_Register
        CODE
//  147 {
        FUNCALL AT_Endpoint_Register, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  148   zclController_EP_List_t *pLoop;
//  149   pLoop = zclController_EP_List;
        MOV       DPTR,#zclController_EP_List
        SJMP      ??AT_Endpoint_Register_0
//  150   while (pLoop) {
//  151     if (endPoint == pLoop->ep) {
//  152       break;
//  153     }
//  154     pLoop = pLoop->next;
??AT_Endpoint_Register_1:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
??AT_Endpoint_Register_0:
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV       A,R0
        ORL       A,R1
        JZ        ??AT_Endpoint_Register_2
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,?V2
        JNZ       ??AT_Endpoint_Register_1
//  155   }
//  156 
//  157   // if found, update the endPoint entry
//  158   if (pLoop) {
//  159     pLoop->ep = endPoint;
        MOV       A,?V2
        MOVX      @DPTR,A
//  160     pLoop->status = epStatus;
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  161     pLoop->CB = cbFc;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        SJMP      ??AT_Endpoint_Register_3
//  162     return true;
//  163   } else {
//  164     //not found, add into the List
//  165     pLoop = osal_mem_alloc(sizeof(zclController_EP_List_t));
??AT_Endpoint_Register_2:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x7
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
//  166     if (pLoop) {
        MOV       A,R2
        ORL       A,R1
        JZ        ??AT_Endpoint_Register_4
//  167       pLoop->ep   = endPoint;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V2
        MOVX      @DPTR,A
//  168       pLoop->status = epStatus;
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  169       pLoop->CB   = cbFc;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  170       pLoop->next = zclController_EP_List;
        MOV       DPTR,#zclController_EP_List
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  171       zclController_EP_List = pLoop;
        MOV       DPTR,#zclController_EP_List
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
??AT_Endpoint_Register_3:
        MOVX      @DPTR,A
//  172       return true;
        MOV       R1,#0x1
        SJMP      ??AT_Endpoint_Register_5
//  173     } else {
//  174       return false;
??AT_Endpoint_Register_4:
        MOV       R1,#0x0
//  175     }
//  176   }
??AT_Endpoint_Register_5:
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  177 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  178 
//  179 /*********************************************************************
//  180  * @fn          zclEndpoint_Controller
//  181  *
//  182  * @brief       Control the ZCL endpoint
//  183  *
//  184  * @param       uint8 endPoint - the controlled endPoint
//  185  *              bool isEnable  - the status of the Endpoint
//  186  *
//  187  * @return      none
//  188  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  189 bool AT_Endpoint_Controller( uint8 endPoint, bool isEnable )
AT_Endpoint_Controller:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function AT_Endpoint_Controller
        CODE
//  190 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
//  191   zclController_EP_List_t *pLoop;
//  192   pLoop = zclController_EP_List;
        MOV       DPTR,#zclController_EP_List
        SJMP      ??AT_Endpoint_Controller_0
//  193   while (pLoop) {
//  194     if (endPoint == pLoop->ep) {
//  195       break;
//  196     }
//  197     pLoop = pLoop->next;
??AT_Endpoint_Controller_1:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
??AT_Endpoint_Controller_0:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??AT_Endpoint_Controller_2
        MOVX      A,@DPTR
        XRL       A,R7
        JNZ       ??AT_Endpoint_Controller_1
//  198   }
//  199 
//  200   // if found, call the endPoint's callback function
//  201   if (pLoop) {
//  202     pLoop->CB(isEnable);
        ; Setup parameters for indirect call
        MOV       A,R2
        MOV       R1,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine26 & 0xFFFF
//  203   } else {
??CrossCallReturnLabel_44:
        LCALL     ?CALL_IND
//  204     return false;
//  205   }
//  206   return true;
        MOV       R1,#0x1
        SJMP      ??AT_Endpoint_Controller_3
??AT_Endpoint_Controller_2:
        MOV       R1,#0x0
??AT_Endpoint_Controller_3:
        LJMP      ?Subroutine0 & 0xFFFF
//  207 }
          CFI EndBlock cfiBlock4
//  208 
//  209 /******************************************************************************
//  210  *
//  211  *  Functions for processing application control incoming Command/Response messages
//  212  *
//  213  *****************************************************************************/
//  214 /*****************************************************************************
//  215 * @fn      ATApp_MessageMSGCB
//  216 *
//  217 * @brief   processing application control incoming Command/Response messages
//  218 *
//  219 * @param   pkt - ZCL control incoming message
//  220 *
//  221 * @return  None
//  222 *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  223 void ATApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
ATApp_MessageMSGCB:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ATApp_MessageMSGCB
        CODE
//  224 {
        FUNCALL ATApp_MessageMSGCB, AT_zclCtrl_REpCtrl_req
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ATApp_MessageMSGCB, AT_zclCtrl_REpCtrl_rsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ATApp_MessageMSGCB, bdb_resetLocalAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  225 
//  226   switch ( pkt->clusterId )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for ATApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        8192
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ATApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ATApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ATApp_MessageMSGCB_2
        CODE
//  227   {
//  228     case ATApp_GENERIC_CLUSTER:
//  229       AT_zclCtrl_REpCtrl_CB(pkt);
??ATApp_MessageMSGCB_1:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_42:
        XRL       A,#0x1
        JNZ       ??ATApp_MessageMSGCB_3
        ; Setup parameters for call to function AT_zclCtrl_REpCtrl_req
        LCALL     `??AT_zclCtrl_REpCtrl_req::?relay`; Banked call to: AT_zclCtrl_REpCtrl_req
        SJMP      ??ATApp_MessageMSGCB_0
??ATApp_MessageMSGCB_3:
        ; Setup parameters for call to function AT_zclCtrl_REpCtrl_rsp
        LCALL     `??AT_zclCtrl_REpCtrl_rsp::?relay`; Banked call to: AT_zclCtrl_REpCtrl_rsp
        SJMP      ??ATApp_MessageMSGCB_0
//  230       break;
//  231 
//  232     case RESET_FACTORY_DEFAULT_CLUSTER:
//  233       AT_ATF_CMD_CB(pkt);
??ATApp_MessageMSGCB_2:
        LCALL     ?Subroutine10 & 0xFFFF
//  234       break;
//  235 
//  236     default:
//  237       break;
//  238   }
??CrossCallReturnLabel_43:
        XRL       A,#0x3
        JNZ       ??ATApp_MessageMSGCB_0
        ; Setup parameters for call to function bdb_resetLocalAction
        LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
//  239 }
??ATApp_MessageMSGCB_0:
          CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function ATApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function ATApp_MessageMSGCB
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_36:
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function ATApp_MessageMSGCB
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function ATApp_MessageMSGCB
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_45:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function AT_Endpoint_Controller
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function ATApp_MessageMSGCB
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_42
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function ATApp_MessageMSGCB
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_43
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-4
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_40
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-4
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_41
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-4
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
//  240 
//  241 /*****************************************************************************
//  242 * @fn      AT_zclCtrl_REpCtrl_CB
//  243 *
//  244 * @brief   processing remote endpoint control incoming messages
//  245 *
//  246 * @param   pkt - incoming message
//  247 *
//  248 * @return  None
//  249 *****************************************************************************/
//  250 void AT_zclCtrl_REpCtrl_CB( afIncomingMSGPacket_t *pkt )
//  251 {
//  252   uint8 cmdID = pkt->cmd.Data[0];
//  253   if (cmdID == ZCL_EPCtrl_Cmd_req) {
//  254     AT_zclCtrl_REpCtrl_req(pkt);
//  255   } else {
//  256     AT_zclCtrl_REpCtrl_rsp(pkt);
//  257   }
//  258 }
//  259 
//  260 /*****************************************************************************
//  261 * @fn      AT_ATF_CMD_CB
//  262 *
//  263 * @brief   processing remote ATF command messages
//  264 *
//  265 * @param   pkt - incoming message
//  266 *
//  267 * @return  None
//  268 *****************************************************************************/
//  269 void AT_ATF_CMD_CB( afIncomingMSGPacket_t *pkt )
//  270 {
//  271   uint8 cmdID = pkt->cmd.Data[0];
//  272   if (cmdID == ATF_Cmd_req) {
//  273     AT_ATF_Cmd_req(pkt);
//  274   }
//  275 }
//  276 
//  277 /*****************************************************************************
//  278 * @fn      AT_zclCtrl_REpCtrl_req
//  279 *
//  280 * @brief   processing remote endpoint control incoming request messages
//  281 *
//  282 * @param   pkt - incoming message
//  283 *
//  284 * @return  None
//  285 *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  286 void AT_zclCtrl_REpCtrl_req( afIncomingMSGPacket_t *pkt )
AT_zclCtrl_REpCtrl_req:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function AT_zclCtrl_REpCtrl_req
        CODE
//  287 {
        FUNCALL AT_zclCtrl_REpCtrl_req, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_req, AT_SendEPCtrl_rsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_req, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_req, AT_UARTWriteErrMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  288   uint8 state;
//  289   EPCtrlCmd_t *epCtrlCmd = (EPCtrlCmd_t*) &(pkt->cmd.Data[1]);
        MOV       A,R2
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R7,A
//  290   EPCtrlCmd_rsp *epCtrlCmd_rsp = (EPCtrlCmd_rsp*) osal_mem_alloc(sizeof(EPCtrlCmd_rsp));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
//  291 
//  292   uint8 endPoint = epCtrlCmd->ep;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
//  293   uint8 isEnable = epCtrlCmd->isEnable;
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
//  294   if (isEnable != 0) isEnable = 1;
        JZ        ??AT_zclCtrl_REpCtrl_req_0
        MOV       R0,#0x1
//  295 
//  296   epCtrlCmd_rsp->ep = endPoint;
??AT_zclCtrl_REpCtrl_req_0:
        MOV       A,R1
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  297   if (isEnable == 0 || isEnable == 1) {
        INC       DPTR
        MOV       A,R0
        JZ        ??AT_zclCtrl_REpCtrl_req_1
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??AT_zclCtrl_REpCtrl_req_2
//  298     if (isEnable) {
//  299       epCtrlCmd_rsp->status = EndpointEnabled;
        MOV       A,#0x1
        SJMP      ??AT_zclCtrl_REpCtrl_req_3
//  300     } else {
//  301       epCtrlCmd_rsp->status = EndpointDisabled;
??AT_zclCtrl_REpCtrl_req_1:
        CLR       A
        SJMP      ??AT_zclCtrl_REpCtrl_req_3
//  302     }
//  303   } else {
//  304     epCtrlCmd_rsp->status = EndpointUnknown;
??AT_zclCtrl_REpCtrl_req_2:
        MOV       A,#0x2
??AT_zclCtrl_REpCtrl_req_3:
        MOVX      @DPTR,A
//  305   }
//  306 
//  307   state = AT_SendEPCtrl_rsp( ATApp_ENDPOINT, &(pkt->srcAddr),
//  308                             ATApp_GENERIC_CLUSTER, epCtrlCmd_rsp );
        ; Setup parameters for call to function AT_SendEPCtrl_rsp
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x20
        MOV       A,?V0
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        MOV       R1,#-0x6a
        LCALL     `??AT_SendEPCtrl_rsp::?relay`; Banked call to: AT_SendEPCtrl_rsp
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
//  309   osal_mem_free ( epCtrlCmd_rsp );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  310   if(state != afStatus_SUCCESS) AT_ERROR(state);
        MOV       A,R6
        JZ        ??AT_zclCtrl_REpCtrl_req_4
        ; Setup parameters for call to function AT_UARTWriteErrMsg
        MOV       R2,#0x1
        MOV       R1,A
        LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
//  311 }
??AT_zclCtrl_REpCtrl_req_4:
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock21
//  312 
//  313 /*****************************************************************************
//  314 * @fn      AT_zclCtrl_REpCtrl_rsp
//  315 *
//  316 * @brief   processing remote endpoint control incoming response messages
//  317 *
//  318 * @param   pkt - incoming message
//  319 *
//  320 * @return  None
//  321 *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  322 void AT_zclCtrl_REpCtrl_rsp( afIncomingMSGPacket_t *pkt )
AT_zclCtrl_REpCtrl_rsp:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function AT_zclCtrl_REpCtrl_rsp
        CODE
//  323 {
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Int8toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Int8toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclCtrl_REpCtrl_rsp, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  324   EPCtrlCmd_rsp *epCtrlCmd_rsp = (EPCtrlCmd_rsp*) &(pkt->cmd.Data[1]);
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       DPL,R0
        MOV       DPH,A
//  325 
//  326   uint8 ep     = epCtrlCmd_rsp->ep;
        MOVX      A,@DPTR
        MOV       ?V0,A
//  327   uint8 status = epCtrlCmd_rsp->status;
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  328 
//  329   uint8 str[3];
//  330   AT_NEW_LINE();
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  331   AT_RESP("REMOTE RESPONSE:", 16);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "REMOTE RESPONSE:">` & 0xff
        MOV       R3,#(`?<Constant "REMOTE RESPONSE:">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  332   if (status == EndpointEnabled) {
        MOV       A,#0x1
        XRL       A,?V1
        JNZ       ??AT_zclCtrl_REpCtrl_rsp_0
//  333     AT_NEW_LINE();
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  334     AT_RESP("ENABLED:", sizeof("ENABLED:")-1);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "ENABLED:">` & 0xff
        MOV       R3,#(`?<Constant "ENABLED:">` >> 8) & 0xff
        SJMP      ??AT_zclCtrl_REpCtrl_rsp_1
//  335     AT_Int8toChar(ep, str);
//  336     AT_RESP(str, 2);
//  337     AT_NEW_LINE();
//  338   } else if (status == EndpointDisabled) {
??AT_zclCtrl_REpCtrl_rsp_0:
        MOV       A,?V1
        JNZ       ??AT_zclCtrl_REpCtrl_rsp_2
//  339     AT_NEW_LINE();
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  340     AT_RESP("DISABLED:", sizeof("DISABLED:")-1);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x9
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "DISABLED:">` & 0xff
        MOV       R3,#(`?<Constant "DISABLED:">` >> 8) & 0xff
//  341     AT_Int8toChar(ep, str);
//  342     AT_RESP(str, 2);
//  343     AT_NEW_LINE();
//  344   } else if (status == EndpointUnknown) {
??AT_zclCtrl_REpCtrl_rsp_1:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV       R1,?V0
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_58:
        SJMP      ??AT_zclCtrl_REpCtrl_rsp_3
??AT_zclCtrl_REpCtrl_rsp_2:
        MOV       A,#0x2
        XRL       A,?V1
        JNZ       ??CrossCallReturnLabel_16
//  345     AT_NEW_LINE();
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  346     AT_RESP("UNKNOWNEP ERROR", sizeof("UNKNOWNEP ERROR")-1);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0xf
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "UNKNOWNEP ERROR">` & 0xff
        MOV       R3,#(`?<Constant "UNKNOWNEP ERROR">` >> 8) & 0xff
//  347     AT_NEW_LINE();
//  348   }
??AT_zclCtrl_REpCtrl_rsp_3:
        LCALL     ?Subroutine18 & 0xFFFF
//  349   AT_OK();
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  350 }
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function ATApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function ATApp_MessageMSGCB
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_43
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function AT_zclCtrl_REpCtrl_rsp
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOV       A,R2
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
//  351 
//  352 /*****************************************************************************
//  353 * @fn      AT_ATF_Cmd_req
//  354 *
//  355 * @brief   processing remote ATF command incoming request messages
//  356 *
//  357 * @param   pkt - incoming message
//  358 *
//  359 * @return  None
//  360 *****************************************************************************/
//  361 void AT_ATF_Cmd_req( afIncomingMSGPacket_t *pkt )
//  362 {
//  363   // AT_clear_AT_SYSTEM_NVs(); if Application use NV, we need to define this function
//  364   bdb_resetLocalAction();
//  365 }
//  366 
//  367 /*********************************************************************
//  368  * @fn      zclCtrlCalcHdrSize
//  369  *
//  370  * @brief   Calculate the number of bytes needed for an outgoing
//  371  *          ZCL header.
//  372  *
//  373  * @param   hdr - outgoing header information
//  374  *
//  375  * @return  returns the number of bytes needed
//  376  ***********************************************************************/
//  377 static uint8 zclCtrlCalcHdrSize( ZCLCtrlCmd_hdr *hdr )
//  378 {
//  379   uint8 needed = sizeof(uint8);
//  380 
//  381   return needed;
//  382 }
//  383 
//  384 /*********************************************************************
//  385  * @fn      zclCtrlBuildHdr
//  386  *
//  387  * @brief   Build header of the ZCL format
//  388  *
//  389  * @param   hdr - outgoing header information
//  390  * @param   pData - outgoing header space
//  391  *
//  392  * @return  pointer past the header
//  393  ***********************************************************************/
//  394 static uint8* zclCtrlBuildHdr( ZCLCtrlCmd_hdr *hdr, uint8 *pData )
//  395 {
//  396   // Add the command ID
//  397   *pData++ = hdr->cmd;
//  398 
//  399   // Should point to the frame payload
//  400   return ( pData );
//  401 }
//  402 
//  403 /******************************************************************************
//  404  * @fn      AT_SendCmd
//  405  *
//  406  * @brief   Used to send zcl control Command messages.
//  407  *
//  408  * @param   srcEp - source endpoint
//  409  * @param   destAddr - destination address
//  410  * @param   clusterID - cluster ID
//  411  * @param   cmd - command ID
//  412  * @param   cmdFormatLen - length of the command to be sent
//  413  * @param   cmdFormat - command to be sent
//  414  *
//  415  * @return  ZCL_CTRL_SUCCESS
//  416  ******************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  417 uint8 AT_SendCmd( uint8 srcEP, afAddrType_t *destAddr,
AT_SendCmd:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function AT_SendCmd
        CODE
//  418                            uint16 clusterID, uint8 cmd,
//  419                            uint16 cmdFormatLen, uint8 *cmdFormat )
//  420 {
        FUNCALL AT_SendCmd, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_SendCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_SendCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_SendCmd, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_SendCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
//  421   endPointDesc_t *epDesc;
//  422   ZCLCtrlCmd_hdr hdr;
//  423   uint8 *msgBuf;
//  424   uint16 msgLen;
//  425   uint8 *pBuf;
//  426   uint8 status;
//  427 
//  428   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V10,R2
        MOV       ?V11,R3
//  429   if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       ??AT_SendCmd_0
//  430   {
//  431    return ( ZCL_CTRLCmd_ParaError ); // EMBEDDED RETURN
        MOV       R1,#0x2
        LJMP      ??AT_SendCmd_1 & 0xFFFF
//  432   }
??AT_SendCmd_0:
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine33_0 & 0xFFFF
//  433 
//  434   // build hdr
//  435   hdr.cmd = cmd;
//  436 
//  437   // calculate the buffer size
//  438   msgLen = zclCtrlCalcHdrSize( &hdr );
//  439   msgLen += cmdFormatLen;
??CrossCallReturnLabel_50:
        MOV       A,?V8
        ADD       A,#0x1
        MOV       R6,A
        CLR       A
        ADDC      A,?V9
        MOV       R7,A
//  440 
//  441   // allocate the buffer needed
//  442   msgBuf = osal_mem_alloc(msgLen);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  443   if ( msgBuf != NULL ) {
        MOV       A,R2
        ORL       A,R3
        JZ        ??AT_SendCmd_2
//  444     // fill in the ZCL Header
//  445     pBuf = zclCtrlBuildHdr(&hdr, msgBuf);
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
//  446 
//  447     // Fill in the command frame
//  448     osal_memcpy( pBuf, cmdFormat, cmdFormatLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,?V8
        MOV       R5,?V9
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  449 
//  450     status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
//  451                           &zclCtrl_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V4,#0x1e
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V4,#zclCtrl_TransID & 0xff
        MOV       ?V5,#(zclCtrl_TransID >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R1,#0x0
        MOV       R4,?V10
        MOV       R5,?V11
        MOV       R2,?V12
        MOV       R3,?V13
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R6,A
//  452     osal_mem_free ( msgBuf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??AT_SendCmd_3
//  453   } else {
//  454     status = ZCL_CTRLCmd_MemError;
??AT_SendCmd_2:
        MOV       R6,#0x1
//  455   }
//  456 
//  457   return status;
??AT_SendCmd_3:
        MOV       A,R6
        MOV       R1,A
??AT_SendCmd_1:
        LJMP      ??Subroutine34_0 & 0xFFFF
//  458 }
          CFI EndBlock cfiBlock27
//  459 
//  460 /*****************************************************************************
//  461  * @fn      AT_SendEPCtrl
//  462  *
//  463  * @brief   Send remote endPoint control command
//  464  *
//  465  * @param   srcEP - Application's endpoint
//  466  * @param   dstAddr - destination address
//  467  * @param   clusterID - cluster ID
//  468  * @param   epCtrlCmd - endPoint control command to be sent
//  469  *
//  470  * @return  status
//  471  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  472 uint8 AT_SendEPCtrl(uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, EPCtrlCmd_t *epCtrlCmd)
AT_SendEPCtrl:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function AT_SendEPCtrl
        CODE
//  473 {
        FUNCALL AT_SendEPCtrl, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_SendEPCtrl, AT_SendCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_SendEPCtrl, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        LCALL     ?Subroutine16 & 0xFFFF
//  474   uint16 dataLen;
//  475   uint8 *buf;
//  476   uint8 *pBuf;
//  477   uint8 status;
//  478 
//  479   dataLen = sizeof(EPCtrlCmd_t);
//  480 
//  481   buf = osal_mem_alloc( dataLen );
//  482   if ( buf != NULL )
??CrossCallReturnLabel_12:
        JZ        ??AT_SendEPCtrl_0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine9 & 0xFFFF
//  483   {
//  484     // Load the buffer - serially
//  485     pBuf = buf;
//  486     *pBuf++ = epCtrlCmd->ep;
//  487     *pBuf   = epCtrlCmd->isEnable;
//  488 
//  489     status = AT_SendCmd( srcEP, dstAddr, clusterID,
//  490                               ZCL_EPCtrl_Cmd_req, dataLen, buf );
??CrossCallReturnLabel_4:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V6,#0x2
        MOV       ?V7,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V3,#0x1
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V2
        LCALL     `??AT_SendCmd::?relay`; Banked call to: AT_SendCmd
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        MOV       R6,A
//  491     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??AT_SendEPCtrl_1
//  492   }
//  493   else
//  494   {
//  495     status = ZCL_CTRLCmd_MemError;
??AT_SendEPCtrl_0:
        MOV       R6,#0x1
//  496   }
//  497 
//  498   return ( status );
??AT_SendEPCtrl_1:
          CFI EndBlock cfiBlock28
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  499 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,R6
        MOV       R1,A
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock29
//  500 
//  501 /*****************************************************************************
//  502  * @fn      AT_SendEPCtrl_rsp
//  503  *
//  504  * @brief   Send remote endPoint control command
//  505  *
//  506  * @param   srcEP - Application's endpoint
//  507  * @param   dstAddr - destination address
//  508  * @param   clusterID - cluster ID
//  509  * @param   epCtrlCmd - endPoint control command to be sent
//  510  *
//  511  * @return  status
//  512  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  513 uint8 AT_SendEPCtrl_rsp( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID, EPCtrlCmd_rsp *epCtrlCmd_rsp )
AT_SendEPCtrl_rsp:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function AT_SendEPCtrl_rsp
        CODE
//  514 {
        FUNCALL AT_SendEPCtrl_rsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_SendEPCtrl_rsp, AT_SendCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_SendEPCtrl_rsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        LCALL     ?Subroutine16 & 0xFFFF
//  515   uint16 dataLen;
//  516   uint8 *buf;
//  517   uint8 *pBuf;
//  518   uint8 status;
//  519 
//  520   dataLen = sizeof(EPCtrlCmd_rsp);
//  521 
//  522   buf = osal_mem_alloc( dataLen );
//  523   if ( buf != NULL )
??CrossCallReturnLabel_13:
        JZ        ??AT_SendEPCtrl_rsp_0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine9 & 0xFFFF
//  524   {
//  525     // Load the buffer - serially
//  526     pBuf = buf;
//  527     *pBuf++ = epCtrlCmd_rsp->ep;
//  528     *pBuf   = epCtrlCmd_rsp->status;
//  529 
//  530     status = AT_SendCmd( srcEP, dstAddr, clusterID,
//  531                               ZCL_EPCtrl_Cmd_rsp, dataLen, buf );
??CrossCallReturnLabel_5:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V6,#0x2
        MOV       ?V7,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V3,#0x2
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V2
        LCALL     `??AT_SendCmd::?relay`; Banked call to: AT_SendCmd
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        MOV       R6,A
//  532     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??AT_SendEPCtrl_rsp_1
//  533   }
//  534   else
//  535   {
//  536     status = ZCL_CTRLCmd_MemError;
??AT_SendEPCtrl_rsp_0:
        MOV       R6,#0x1
//  537   }
//  538 
//  539   return ( status );
??AT_SendEPCtrl_rsp_1:
        SJMP      ?Subroutine4
//  540 }
          CFI EndBlock cfiBlock30

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function AT_SendEPCtrl
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function AT_SendEPCtrl_rsp
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV       ?V2,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function AT_SendEPCtrl
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function AT_SendEPCtrl_rsp
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      @DPTR,A
        ; Setup parameters for call to function AT_SendCmd
        ; Setup parameters for call to function AT_SendCmd
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
//  541 
//  542 /******************************************************************************
//  543  *
//  544  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  545  *
//  546  *****************************************************************************/
//  547 
//  548 /*********************************************************************
//  549  * @fn      AT_zclController_ProcessIncomingMsg
//  550  *
//  551  * @brief   Process ZCL Foundation incoming message
//  552  *
//  553  * @param   pInMsg - pointer to the received message
//  554  *
//  555  * @return  none
//  556  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  557 void AT_zclController_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
AT_zclController_ProcessIncomingMsg:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function AT_zclController_ProcessIncomingMsg
        CODE
//  558 {
        FUNCALL AT_zclController_ProcessIncomingMsg, zclController_ProcessInReadRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_ProcessIncomingMsg, zclController_ProcessInWriteRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_ProcessIncomingMsg, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_ProcessIncomingMsg, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_ProcessIncomingMsg, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_ProcessIncomingMsg, zclController_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_ProcessIncomingMsg, zclController_ProcessInDiscCmdsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_ProcessIncomingMsg, zclController_ProcessInDiscAttrsRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_zclController_ProcessIncomingMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
//  559   switch ( pInMsg->zclHdr.commandID )
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V0,R0
        MOV       ?V1,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??AT_zclController_ProcessIncomingMsg_0
        ADD       A,#-0x3
        JZ        ??AT_zclController_ProcessIncomingMsg_1
        ADD       A,#-0x7
        JZ        ??AT_zclController_ProcessIncomingMsg_2
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??AT_zclController_ProcessIncomingMsg_3 & 0xFFFF
        ADD       A,#-0x5
        JNZ       $+5
        LJMP      ??AT_zclController_ProcessIncomingMsg_4 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??AT_zclController_ProcessIncomingMsg_4 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??AT_zclController_ProcessIncomingMsg_5 & 0xFFFF
        LJMP      ??AT_zclController_ProcessIncomingMsg_6 & 0xFFFF
//  560   {
//  561 #ifdef ZCL_READ
//  562     case ZCL_CMD_READ_RSP:
//  563       zclController_ProcessInReadRspCmd( pInMsg );
??AT_zclController_ProcessIncomingMsg_0:
        ; Setup parameters for call to function zclController_ProcessInReadRspCmd
        LCALL     `??zclController_ProcessInReadRspCmd::?relay`; Banked call to: zclController_ProcessInReadRspCmd
//  564       break;
        LJMP      ??AT_zclController_ProcessIncomingMsg_6 & 0xFFFF
//  565 #endif
//  566 #ifdef ZCL_WRITE
//  567     case ZCL_CMD_WRITE_RSP:
//  568       zclController_ProcessInWriteRspCmd( pInMsg );
??AT_zclController_ProcessIncomingMsg_1:
        ; Setup parameters for call to function zclController_ProcessInWriteRspCmd
        LCALL     `??zclController_ProcessInWriteRspCmd::?relay`; Banked call to: zclController_ProcessInWriteRspCmd
//  569       break;
        LJMP      ??AT_zclController_ProcessIncomingMsg_6 & 0xFFFF
//  570 #endif
//  571 #ifdef ZCL_REPORTING_DEVICE
//  572     case ZCL_CMD_CONFIG_REPORT:
//  573       break;
//  574 #endif
//  575 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  576     case ZCL_CMD_CONFIG_REPORT_RSP:
//  577       zclController_ProcessInConfigReportRspCmd( pInMsg );
//  578       break;
//  579 #endif
//  580 #ifdef ZCL_REPORTING_DEVICE
//  581     case ZCL_CMD_READ_REPORT_CFG:
//  582       break;
//  583 #endif
//  584 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  585     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  586       zclController_ProcessInReadReportCfgRspCmd( pInMsg );
//  587       break;
//  588 #endif
//  589 #ifdef ZCL_REPORT_DESTINATION_DEVICE
//  590     case ZCL_CMD_REPORT:
//  591       zclController_ProcessInReportCmd( pInMsg );
//  592       break;
//  593 #endif
//  594 
//  595     case ZCL_CMD_DEFAULT_RSP:
//  596       zclController_ProcessInDefaultRspCmd( pInMsg );
??AT_zclController_ProcessIncomingMsg_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_48:
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV       DPL,R0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,R0
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,?V4
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R2,#`?<Constant "DFTRSP:%04X,%02X,%04X...">` & 0xff
        MOV       R3,#(`?<Constant "DFTRSP:%04X,%02X,%04X...">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  597       break;
        SJMP      ??AT_zclController_ProcessIncomingMsg_6
//  598 #ifdef ZCL_DISCOVER
//  599     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
//  600       zclController_ProcessInDiscCmdsRspCmd( pInMsg );
??AT_zclController_ProcessIncomingMsg_4:
        ; Setup parameters for call to function zclController_ProcessInDiscCmdsRspCmd
//  601       break;
//  602 
//  603     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
//  604       zclController_ProcessInDiscCmdsRspCmd( pInMsg );
        ; Setup parameters for call to function zclController_ProcessInDiscCmdsRspCmd
        LCALL     `??zclController_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclController_ProcessInDiscCmdsRspCmd
//  605       break;
        SJMP      ??AT_zclController_ProcessIncomingMsg_6
//  606 
//  607     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  608       zclController_ProcessInDiscAttrsRspCmd( pInMsg );
??AT_zclController_ProcessIncomingMsg_3:
        ; Setup parameters for call to function zclController_ProcessInDiscAttrsRspCmd
        LCALL     `??zclController_ProcessInDiscAttrsRspCmd::?rela`; Banked call to: zclController_ProcessInDiscAttrsRspCmd
//  609       break;
        SJMP      ??AT_zclController_ProcessIncomingMsg_6
//  610 
//  611     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
//  612       zclController_ProcessInDiscAttrsExtRspCmd( pInMsg );
??AT_zclController_ProcessIncomingMsg_5:
        MOV       DPL,R0
        MOV       DPH,?V1
        LCALL     ?Subroutine25 & 0xFFFF
//  613       break;
//  614 #endif
//  615     default:
//  616       break;
//  617   }
??CrossCallReturnLabel_30:
        MOV       R2,#0x0
        SJMP      ??AT_zclController_ProcessIncomingMsg_7
??AT_zclController_ProcessIncomingMsg_8:
        INC       R2
??AT_zclController_ProcessIncomingMsg_7:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??AT_zclController_ProcessIncomingMsg_8
//  618 
//  619   if ( pInMsg->attrCmd )
??AT_zclController_ProcessIncomingMsg_6:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??AT_zclController_ProcessIncomingMsg_9
//  620     osal_mem_free( pInMsg->attrCmd );
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  621 }
??AT_zclController_ProcessIncomingMsg_9:
          CFI EndBlock cfiBlock37
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function AT_Endpoint_Register
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function AT_SendEPCtrl
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_4
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function AT_SendEPCtrl_rsp
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_5
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-4
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function AT_zclController_ProcessIncomingMsg
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclController_ProcessInDiscCmdsRspCmd
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond43) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond43) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond43) CFA_SP SP+-7
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function AT_zclController_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zclController_ProcessInDiscAttrsRspCmd
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOV       A,R2
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0
//  622 
//  623 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  624 /*********************************************************************
//  625  * @fn      zclController_PrintfAttrData
//  626  *
//  627  * @brief   Tool Function. Print different types of Attributes' Data
//  628  *
//  629  * @param   dataType - data types defined in zcl.h
//  630  * @param   attrData - pointer to the attribute data
//  631  *
//  632  * @return  none
//  633  *********************************************************************/
//  634 static void zclController_PrintfAttrData( uint8 dataType, uint8 *attrData )
//  635 {
//  636   uint8 *pStr;
//  637 //  uint16 len;
//  638 
//  639   if ( attrData == NULL )
//  640   {
//  641     return;
//  642   }
//  643 
//  644   switch ( dataType )
//  645   {
//  646     case ZCL_DATATYPE_DATA8:
//  647     case ZCL_DATATYPE_BOOLEAN:
//  648     case ZCL_DATATYPE_BITMAP8:
//  649     case ZCL_DATATYPE_INT8:
//  650     case ZCL_DATATYPE_UINT8:
//  651     case ZCL_DATATYPE_ENUM8:
//  652       pStr = zcl_mem_alloc( 2 );
//  653       AT_IntxtoChar(attrData, pStr, 8);
//  654       AT_RESP(pStr, 2);
//  655       zcl_mem_free( pStr );
//  656       break;
//  657 
//  658     case ZCL_DATATYPE_DATA16:
//  659     case ZCL_DATATYPE_BITMAP16:
//  660     case ZCL_DATATYPE_UINT16:
//  661     case ZCL_DATATYPE_INT16:
//  662     case ZCL_DATATYPE_ENUM16:
//  663     case ZCL_DATATYPE_SEMI_PREC:
//  664     case ZCL_DATATYPE_CLUSTER_ID:
//  665     case ZCL_DATATYPE_ATTR_ID:
//  666       pStr = zcl_mem_alloc( 4 );
//  667       AT_IntxtoChar(attrData, pStr, 16);
//  668       AT_RESP(pStr, 4);
//  669       zcl_mem_free( pStr );
//  670       break;
//  671 
//  672     case ZCL_DATATYPE_DATA24:
//  673     case ZCL_DATATYPE_BITMAP24:
//  674     case ZCL_DATATYPE_UINT24:
//  675     case ZCL_DATATYPE_INT24:
//  676       pStr = zcl_mem_alloc( 6 );
//  677       AT_IntxtoChar(attrData, pStr, 24);
//  678       AT_RESP(pStr, 6);
//  679       zcl_mem_free( pStr );
//  680       break;
//  681 
//  682     case ZCL_DATATYPE_DATA32:
//  683     case ZCL_DATATYPE_BITMAP32:
//  684     case ZCL_DATATYPE_UINT32:
//  685     case ZCL_DATATYPE_INT32:
//  686     case ZCL_DATATYPE_SINGLE_PREC:
//  687     case ZCL_DATATYPE_TOD:
//  688     case ZCL_DATATYPE_DATE:
//  689     case ZCL_DATATYPE_UTC:
//  690     case ZCL_DATATYPE_BAC_OID:
//  691       pStr = zcl_mem_alloc( 8 );
//  692       AT_IntxtoChar(attrData, pStr, 32);
//  693       AT_RESP(pStr, 8);
//  694       zcl_mem_free( pStr );
//  695       break;
//  696 
//  697     case ZCL_DATATYPE_UINT40:
//  698     case ZCL_DATATYPE_INT40:
//  699       pStr = zcl_mem_alloc( 10 );
//  700       AT_IntxtoChar(attrData, pStr, 40);
//  701       AT_RESP(pStr, 10);
//  702       zcl_mem_free( pStr );
//  703       break;
//  704 
//  705     case ZCL_DATATYPE_UINT48:
//  706     case ZCL_DATATYPE_INT48:
//  707       pStr = zcl_mem_alloc( 12 );
//  708       AT_IntxtoChar(attrData, pStr, 48);
//  709       AT_RESP(pStr, 12);
//  710       zcl_mem_free( pStr );
//  711       break;
//  712 
//  713     case ZCL_DATATYPE_UINT56:
//  714     case ZCL_DATATYPE_INT56:
//  715       pStr = zcl_mem_alloc( 14 );
//  716       AT_IntxtoChar(attrData, pStr, 56);
//  717       AT_RESP(pStr, 14);
//  718       zcl_mem_free( pStr );
//  719       break;
//  720 
//  721     case ZCL_DATATYPE_DOUBLE_PREC:
//  722     case ZCL_DATATYPE_IEEE_ADDR:
//  723     case ZCL_DATATYPE_UINT64:
//  724     case ZCL_DATATYPE_INT64:
//  725       pStr = zcl_mem_alloc( 16 );
//  726       AT_IntxtoChar(attrData, pStr, 64);
//  727       AT_RESP(pStr, 16);
//  728       zcl_mem_free( pStr );
//  729       break;
//  730 
//  731     case ZCL_DATATYPE_CHAR_STR:
//  732     case ZCL_DATATYPE_OCTET_STR:
//  733       pStr = (uint8*)attrData;
//  734 //      len = *pStr;
//  735 //      AT_RESP(pStr+1, len);
//  736       break;
//  737 
//  738     case ZCL_DATATYPE_LONG_CHAR_STR:
//  739     case ZCL_DATATYPE_LONG_OCTET_STR:
//  740       pStr = (uint8*)attrData;
//  741 //      len = BUILD_UINT16( pStr[0], pStr[1] );
//  742 //      AT_RESP(pStr+2, len);
//  743       break;
//  744 
//  745     case ZCL_DATATYPE_128_BIT_SEC_KEY:
//  746       pStr = zcl_mem_alloc( SEC_KEY_LEN*2 );
//  747       AT_IntxtoChar(attrData, pStr, SEC_KEY_LEN);
//  748       AT_RESP(pStr, SEC_KEY_LEN*2);
//  749       zcl_mem_free( pStr );
//  750       break;
//  751 
//  752     case ZCL_DATATYPE_NO_DATA:
//  753     case ZCL_DATATYPE_UNKNOWN:
//  754       // Fall through
//  755 
//  756     default:
//  757       break;
//  758   }
//  759 }
//  760 #endif
//  761 
//  762 #ifdef ZCL_READ
//  763 /*********************************************************************
//  764  * @fn      zclController_ProcessInReadRspCmd
//  765  *
//  766  * @brief   Process the "Profile" Read Response Command
//  767  *
//  768  * @param   pInMsg - incoming message to process
//  769  *
//  770  * @return  none
//  771  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function AT_zclController_ProcessIncomingMsg
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclController_ProcessInDiscAttrsRspCmd
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function AT_zclController_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zclController_ProcessInDiscAttrsRspCmd
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function AT_SendCmd
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function AT_zclController_ProcessIncomingMsg
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zclController_ProcessInDiscAttrsRspCmd
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  772 static uint8 zclController_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
zclController_ProcessInReadRspCmd:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
        CODE
//  773 {
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Int8toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Int16toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_GetIEEEAddrStr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Int8toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Int16toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Int16toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Int8toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Int8toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Int16toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInReadRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       ?V6,R2
        MOV       ?V7,R3
//  774   zclReadRspCmd_t *readRspCmd;
//  775   uint8 i;
//  776 
//  777   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_23:
        ADDC      A,?V7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V12,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V13,A
//  778   uint8 str[17];
//  779   AT_NEW_LINE();
        MOV       ?V8,#`?<Constant "\\r\\n">` & 0xff
        MOV       ?V9,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  780   AT_RESP("---------ADDR,EP,C_ID,A_ID,ST,DT,DV", 35);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x23
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "---------ADDR,EP,C_ID...">` & 0xff
        MOV       R3,#(`?<Constant "---------ADDR,EP,C_ID...">` >> 8) & 0xff
        LCALL     ?Subroutine17 & 0xFFFF
//  781   AT_NEW_LINE();
//  782   for (i = 0; i < readRspCmd->numAttr; i++)
??CrossCallReturnLabel_14:
        MOV       A,?V6
        ADD       A,#0xa
        MOV       ?V10,A
        CLR       A
        ADDC      A,?V7
        MOV       ?V11,A
        SJMP      ??zclController_ProcessInReadRspCmd_0
//  783   {
//  784     AT_RESP("ReadAttr:", 9);
//  785     // Node Address
//  786     if (pInMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
//  787       AT_Int16toChar(pInMsg->srcAddr.addr.shortAddr, str);
//  788       AT_RESP(str, 4);
//  789     } else {
//  790       AT_GetIEEEAddrStr(pInMsg->srcAddr.addr.extAddr, str);
//  791       AT_RESP(str, 16);
//  792     }
//  793     AT_RESP(",", 1);
//  794 
//  795     // Endpoint
//  796     AT_Int8toChar(pInMsg->srcAddr.endPoint, str);
//  797     AT_RESP(str, 2);
//  798     AT_RESP(",", 1);
//  799 
//  800     // Cluster ID
//  801     AT_Int16toChar(pInMsg->clusterId, str);
//  802     AT_RESP(str, 4);
//  803     AT_RESP(",", 1);
//  804 
//  805     // Attribute ID
//  806     AT_Int16toChar(readRspCmd->attrList[i].attrID, str);
//  807     AT_RESP(str, 4);
//  808     AT_RESP(",", 1);
//  809 
//  810     // Status
//  811     AT_Int8toChar(readRspCmd->attrList[i].status, str);
//  812     AT_RESP(str,2);
//  813     AT_RESP(",",1);
//  814 
//  815     // Data type
//  816     AT_Int8toChar(readRspCmd->attrList[i].dataType, str);
//  817     AT_RESP(str,2);
//  818     AT_RESP(",",1);
//  819 
//  820     // Attribute value
//  821     if (readRspCmd->attrList[i].dataType == ZCL_DATATYPE_CHAR_STR) {
//  822       AT_RESP(readRspCmd->attrList[i].data+1, readRspCmd->attrList[i].data[0]);
//  823     } else if (readRspCmd->attrList[i].dataType == ZCL_DATATYPE_DATA16||
//  824                readRspCmd->attrList[i].dataType == ZCL_DATATYPE_UINT16||
//  825                readRspCmd->attrList[i].dataType == ZCL_DATATYPE_INT16) {
//  826       AT_Int16toChar(*((uint16*)readRspCmd->attrList[i].data),str);
//  827       AT_RESP(str, 4);
//  828     } else {
//  829       AT_Int8toChar((uint8)readRspCmd->attrList[i].data[0],str);
??zclController_ProcessInReadRspCmd_1:
        ; Setup parameters for call to function AT_Int8toChar
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV       R1,A
        LCALL     `??AT_Int8toChar::?relay`; Banked call to: AT_Int8toChar
//  830       AT_RESP(str,2);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
??zclController_ProcessInReadRspCmd_2:
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
//  831     }
??zclController_ProcessInReadRspCmd_3:
        LCALL     ?Subroutine27 & 0xFFFF
//  832 
//  833     AT_NEW_LINE();
??CrossCallReturnLabel_33:
        INC       ?V2
??zclController_ProcessInReadRspCmd_0:
        MOV       DPL,?V12
        MOV       DPH,?V13
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V2
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??zclController_ProcessInReadRspCmd_4 & 0xFFFF
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x9
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "ReadAttr:">` & 0xff
        MOV       R3,#(`?<Constant "ReadAttr:">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        MOV       A,?V6
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,?V7
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x2
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        JNZ       ??zclController_ProcessInReadRspCmd_5
        ; Setup parameters for call to function AT_Int16toChar
        MOV       DPL,?V10
        MOV       DPH,?V11
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_60:
        SJMP      ??zclController_ProcessInReadRspCmd_6
??zclController_ProcessInReadRspCmd_5:
        ; Setup parameters for call to function AT_GetIEEEAddrStr
        MOV       R2,?V10
        MOV       R3,?V11
        LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x10
??zclController_ProcessInReadRspCmd_6:
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV       R2,#`?<Constant ",">` & 0xff
        MOV       R3,#(`?<Constant ",">` >> 8) & 0xff
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV       A,?V6
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_46:
        ADDC      A,?V7
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_53:
        ; Setup parameters for call to function AT_Int16toChar
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV       A,?V2
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V12
        ADD       A,R0
        MOV       ?V0,A
        MOV       A,?V13
        ADDC      A,R1
        MOV       ?V1,A
        ; Setup parameters for call to function AT_Int16toChar
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       DPL,?V0
        MOV       DPH,A
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function AT_Int8toChar
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV       A,?V0
        ADD       A,#0x4
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V5,A
        ; Setup parameters for call to function AT_Int8toChar
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,?V4
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V0
        ADD       A,#0x5
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOV       A,#0x42
        XRL       A,R0
        JNZ       ??zclController_ProcessInReadRspCmd_7
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function AT_Uart0_Send
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        LJMP      ??zclController_ProcessInReadRspCmd_3 & 0xFFFF
??zclController_ProcessInReadRspCmd_7:
        MOV       A,#0x9
        XRL       A,R0
        JZ        ??zclController_ProcessInReadRspCmd_8
        MOV       A,#0x21
        XRL       A,R0
        JZ        ??zclController_ProcessInReadRspCmd_8
        MOV       A,#0x29
        XRL       A,R0
        JZ        $+5
        LJMP      ??zclController_ProcessInReadRspCmd_1 & 0xFFFF
??zclController_ProcessInReadRspCmd_8:
        ; Setup parameters for call to function AT_Int16toChar
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        LCALL     ??Subroutine31_0 & 0xFFFF
//  834   }
??CrossCallReturnLabel_41:
        LCALL     ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_62:
        LJMP      ??zclController_ProcessInReadRspCmd_2 & 0xFFFF
//  835 
//  836   return TRUE;
??zclController_ProcessInReadRspCmd_4:
          CFI EndBlock cfiBlock60
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  837 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R1,#0x1
        MOV       A,#0x11
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock61
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function AT_zclCtrl_REpCtrl_rsp
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        ; Setup parameters for call to function AT_Int8toChar
        ; Setup parameters for call to function AT_Int8toChar
        ; Setup parameters for call to function AT_Int8toChar
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function AT_Endpoint_Controller
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV       R2,#`?<Constant ",">` & 0xff
        MOV       R3,#(`?<Constant ",">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        RET
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_56:
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#`?<Constant ",">` & 0xff
        MOV       R3,#(`?<Constant ",">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
//  838 #endif // ZCL_READ
//  839 
//  840 #ifdef ZCL_WRITE
//  841 /*********************************************************************
//  842  * @fn      zclController_ProcessInWriteRspCmd
//  843  *
//  844  * @brief   Process the "Profile" Write Response Command
//  845  *
//  846  * @param   pInMsg - incoming message to process
//  847  *
//  848  * @return  none
//  849  ********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  850 static uint8 zclController_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
zclController_ProcessInWriteRspCmd:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function zclController_ProcessInWriteRspCmd
        CODE
//  851 {
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_GetIEEEAddrStr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Int8toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Int16toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Int16toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Int8toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Int16toChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInWriteRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  852   zclWriteRspCmd_t *writeRspCmd;
//  853   uint8 i;
//  854 
//  855   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_24:
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V11,A
//  856   uint8 str[17];
//  857   AT_NEW_LINE();
        MOV       ?V8,#`?<Constant "\\r\\n">` & 0xff
        MOV       ?V9,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  858   AT_RESP("----------ADDR,EP,C_ID,ST", 25);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x19
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "----------ADDR,EP,C_I...">` & 0xff
        MOV       R3,#(`?<Constant "----------ADDR,EP,C_I...">` >> 8) & 0xff
        LCALL     ?Subroutine17 & 0xFFFF
//  859   AT_NEW_LINE();
//  860   for (i = 0; i < writeRspCmd->numAttr; i++)
??CrossCallReturnLabel_15:
        MOV       ?V6,#`?<Constant ",">` & 0xff
        MOV       ?V7,#(`?<Constant ",">` >> 8) & 0xff
        MOV       A,R6
        ADD       A,#0xa
        MOV       ?V12,A
        CLR       A
        ADDC      A,R7
        MOV       ?V13,A
        LJMP      ??zclController_ProcessInWriteRspCmd_0 & 0xFFFF
//  861   {
//  862     AT_RESP("WriteAttr:",10);
//  863 
//  864     //node id
//  865     if(pInMsg->srcAddr.addrMode==(afAddrMode_t)Addr16Bit){
//  866       AT_Int16toChar(pInMsg->srcAddr.addr.shortAddr,str);
//  867       AT_RESP(str,4);
//  868     }else{
//  869       AT_GetIEEEAddrStr(pInMsg->srcAddr.addr.extAddr,str);
??zclController_ProcessInWriteRspCmd_1:
        ; Setup parameters for call to function AT_GetIEEEAddrStr
        MOV       R2,?V12
        MOV       R3,?V13
        LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
//  870       AT_RESP(str,16);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x10
//  871     }
??zclController_ProcessInWriteRspCmd_2:
        LCALL     ?Subroutine29 & 0xFFFF
//  872     AT_RESP(",",1);
??CrossCallReturnLabel_38:
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     ?Subroutine19 & 0xFFFF
//  873 
//  874     //End ponit
//  875     AT_Int8toChar(pInMsg->srcAddr.endPoint,str);
??CrossCallReturnLabel_20:
        MOV       A,R6
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_47:
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine11 & 0xFFFF
//  876     AT_RESP(str,2);
//  877     AT_RESP(",",1);
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  878 
//  879     //Cluster ID
//  880     AT_Int16toChar(pInMsg->clusterId,str);
        ; Setup parameters for call to function AT_Int16toChar
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine8 & 0xFFFF
//  881     AT_RESP(str,4);
//  882     AT_RESP(",",1);
//  883 
//  884     //Attribute ID   Display when status != 0
//  885     if (writeRspCmd->attrList[i].status != 0) {
??CrossCallReturnLabel_2:
        MOV       A,?V2
        MOV       ?V0,A
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V10
        ADD       A,R0
        MOV       R0,A
        MOV       A,?V11
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOV       ?V4,DPL
        MOV       ?V5,DPH
        MOVX      A,@DPTR
        JZ        ??CrossCallReturnLabel_3
//  886       AT_Int16toChar(writeRspCmd->attrList[i].attrID,str);
        ; Setup parameters for call to function AT_Int16toChar
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine8 & 0xFFFF
//  887       AT_RESP(str,4);
//  888       AT_RESP(",",1);
//  889     }
//  890 
//  891     //status
//  892     AT_Int8toChar(writeRspCmd->attrList[i].status,str);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function AT_Int8toChar
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine11 & 0xFFFF
//  893     AT_RESP(str,2);
//  894 
//  895     if(i < writeRspCmd->numAttr-1) AT_NEXT_LINE();
??CrossCallReturnLabel_7:
        MOV       DPL,?V10
        MOV       DPH,?V11
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOV       R0,A
        CLR       A
        ADDC      A,#-0x1
        MOV       R1,A
        CLR       C
        MOV       A,?V0
        SUBB      A,R0
        CLR       A
        SUBB      A,R1
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??zclController_ProcessInWriteRspCmd_3
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
??zclController_ProcessInWriteRspCmd_3:
        INC       ?V2
??zclController_ProcessInWriteRspCmd_0:
        MOV       DPL,?V10
        MOV       DPH,?V11
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V2
        CLR       C
        SUBB      A,R0
        JNC       ??zclController_ProcessInWriteRspCmd_4
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "WriteAttr:">` & 0xff
        MOV       R3,#(`?<Constant "WriteAttr:">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        MOV       A,R6
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x2
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        JZ        $+5
        LJMP      ??zclController_ProcessInWriteRspCmd_1 & 0xFFFF
        ; Setup parameters for call to function AT_Int16toChar
        MOV       DPL,?V12
        MOV       DPH,?V13
        LCALL     ?Subroutine12 & 0xFFFF
//  896   }
??CrossCallReturnLabel_61:
        LJMP      ??zclController_ProcessInWriteRspCmd_2 & 0xFFFF
//  897   AT_NEW_LINE();
??zclController_ProcessInWriteRspCmd_4:
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
//  898 
//  899   return TRUE;
        LJMP      ?Subroutine3 & 0xFFFF
//  900 }
          CFI EndBlock cfiBlock80

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV       ?V2,#0x0
        RET
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_14
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_15
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-4
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        RET
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOVX      A,@DPTR
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??AT_Int16toChar::?relay`; Banked call to: AT_Int16toChar
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x4
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function zclController_ProcessInWriteRspCmd
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_57:
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_54
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-4
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_55
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-4
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_6
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-4
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_7
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-4
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker103 Using cfiCommon1
          CFI (cfiPicker103) NoFunction
          CFI (cfiPicker103) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        RET
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiPicker103

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond104 Using cfiCommon0
          CFI Function AT_zclCtrl_REpCtrl_rsp
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_53
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-6
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_54
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-6
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_55
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-6
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_6
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-6
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_7
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-6
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        LCALL     `??AT_Int8toChar::?relay`; Banked call to: AT_Int8toChar
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        RET
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function zclController_ProcessInWriteRspCmd
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        INC       DPTR
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        RET
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_1
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_2
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_3
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker118 Using cfiCommon1
          CFI (cfiPicker118) NoFunction
          CFI (cfiPicker118) Picker
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??AT_Int16toChar::?relay`; Banked call to: AT_Int16toChar
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x4
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_39:
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond119 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_0
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-6
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zclController_ProcessInReadRspCmd
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_1
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-6
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_2
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-6
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_3
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-6
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker125 Using cfiCommon1
          CFI (cfiPicker125) NoFunction
          CFI (cfiPicker125) Picker
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x1
        MOV       R5,#0x0
        RET
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiPicker125
//  901 #endif // ZCL_WRITE
//  902 
//  903 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  904 /*********************************************************************
//  905  * @fn      zclController_ProcessInReadReportCfgRspCmd
//  906  *
//  907  * @brief   Process the "Profile" Read Reporting Configuration Response Command
//  908  *
//  909  * @param   pInMsg - incoming message to process
//  910  *
//  911  * @return  none
//  912  ********************************************************************/
//  913 static uint8 zclController_ProcessInReadReportCfgRspCmd( zclIncomingMsg_t *pInMsg )
//  914 {
//  915   uint16 nodeId   = pInMsg->srcAddr.addr.shortAddr;
//  916   uint8  endpoint = pInMsg->srcAddr.endPoint;
//  917   uint16 cID      = pInMsg->clusterId;
//  918   zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
//  919   uint8 i;
//  920   // uint8 status;
//  921   // uint8 direction;
//  922   // uint16 attrID;
//  923   // uint8 dataType;
//  924   // uint16 minReportInt;
//  925   // uint16 maxReportInt;
//  926   // uint16 timeoutPeriod;
//  927 
//  928   readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)pInMsg->attrCmd;
//  929 
//  930   AT_NEW_LINE();
//  931   printf("READRCFGRSP:%04X,%02X,%04X,%02X", nodeId, endpoint, cID, readReportCfgRspCmd->numAttr);
//  932   for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ ) {
//  933     zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
//  934     AT_NEXT_LINE();
//  935     printf("ATTR%02X:%02X,%02X,%04X", i, reportRspRec->status,
//  936             reportRspRec->direction, reportRspRec->attrID);
//  937     if ( reportRspRec->status == ZCL_STATUS_SUCCESS ) {
//  938       if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS ) {
//  939         printf(",%02X,%04X,%04X,", reportRspRec->dataType,
//  940                 reportRspRec->minReportInt, reportRspRec->maxReportInt);
//  941         if ( zclAnalogDataType( reportRspRec->dataType ) ) {
//  942           zclController_PrintfAttrData(reportRspRec->dataType,
//  943                                        reportRspRec->reportableChange);
//  944         }
//  945       } else {
//  946         printf(",%04X", reportRspRec->timeoutPeriod);
//  947       }
//  948     }
//  949   }
//  950   AT_NEXT_LINE();
//  951   AT_RESP("END\r\n", 5);
//  952   AT_NEW_LINE();
//  953 
//  954   return ( TRUE );
//  955 }
//  956 
//  957 /*********************************************************************
//  958  * @fn      zclController_ProcessInConfigReportRspCmd
//  959  *
//  960  * @brief   Process the "Profile" Configure Reporting Response Command
//  961  *
//  962  * @param   pInMsg - incoming message to process
//  963  *
//  964  * @return  none
//  965  ********************************************************************/
//  966 static uint8 zclController_ProcessInConfigReportRspCmd( zclIncomingMsg_t *pInMsg )
//  967 {
//  968   uint16 nodeId   = pInMsg->srcAddr.addr.shortAddr;
//  969   uint8  endpoint = pInMsg->srcAddr.endPoint;
//  970   uint16 cID      = pInMsg->clusterId;
//  971   zclCfgReportRspCmd_t *cfgReportRspCmd;
//  972   uint8 i;
//  973   // uint8  status;
//  974   // uint8  direction;
//  975   // uint16 attrID;
//  976 
//  977   cfgReportRspCmd = (zclCfgReportRspCmd_t *)pInMsg->attrCmd;
//  978 
//  979   AT_NEW_LINE();
//  980   printf("CFGRPTRSP:%04X,%02X,%04X", nodeId, endpoint, cID);
//  981   if (cfgReportRspCmd->numAttr == 0) {
//  982   	AT_RESP(",00", 3);
//  983   } else {
//  984 	for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
//  985   	{
//  986       printf(",%02X,%02X,%04X", cfgReportRspCmd->attrList[i].status,
//  987 	  	cfgReportRspCmd->attrList[i].direction, cfgReportRspCmd->attrList[i].attrID);
//  988     }
//  989   }
//  990   AT_NEW_LINE();
//  991 
//  992   return ( TRUE );
//  993 }
//  994 
//  995 #endif // ZCL_REPORT_CONFIGURING_DEVICE
//  996 
//  997 #ifdef ZCL_REPORT_DESTINATION_DEVICE
//  998 /*********************************************************************
//  999  * @fn      zclController_ProcessInReportCmd
// 1000  *
// 1001  * @brief   Process the "Profile" Report Command
// 1002  *
// 1003  * @param   pInMsg - incoming message to process
// 1004  *
// 1005  * @return  none
// 1006  */
// 1007 static void zclController_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
// 1008 {
// 1009   zclReportCmd_t *pInDataReport;
// 1010   uint8 i;
// 1011   uint8 str[17];
// 1012 
// 1013   pInDataReport = (zclReportCmd_t *)pInMsg->attrCmd;
// 1014 
// 1015   AT_NEW_LINE();
// 1016   AT_RESP("REPORT:", 7);
// 1017 
// 1018   // Node Address
// 1019   if (pInMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
// 1020     AT_Int16toChar(pInMsg->srcAddr.addr.shortAddr, str);
// 1021     AT_RESP(str, 4);
// 1022   } else {
// 1023     AT_GetIEEEAddrStr(pInMsg->srcAddr.addr.extAddr, str);
// 1024     AT_RESP(str, 16);
// 1025   }
// 1026   AT_RESP(",", 1);
// 1027 
// 1028   // Endpoint
// 1029   AT_Int8toChar(pInMsg->srcAddr.endPoint, str);
// 1030   AT_RESP(str, 2);
// 1031   AT_RESP(",", 1);
// 1032 
// 1033   // Cluster ID
// 1034   AT_Int16toChar(pInMsg->clusterId, str);
// 1035   AT_RESP(str, 4);
// 1036   AT_RESP(",", 1);
// 1037 
// 1038   // numAttr
// 1039   AT_Int8toChar(pInDataReport->numAttr, str);
// 1040   AT_RESP(str, 2);
// 1041   AT_NEW_LINE();
// 1042 
// 1043   for (i = 0; i < pInDataReport->numAttr; i++)
// 1044   {
// 1045     AT_RESP("RPTATTR:", 8);
// 1046 
// 1047     // Attribute ID
// 1048     AT_Int16toChar(pInDataReport->attrList[i].attrID, str);
// 1049     AT_RESP(str, 4);
// 1050     AT_RESP(",", 1);
// 1051 
// 1052     // Data type
// 1053     AT_Int8toChar(pInDataReport->attrList[i].dataType, str);
// 1054     AT_RESP(str,2);
// 1055     AT_RESP(",",1);
// 1056 
// 1057     // Attribute value
// 1058     if (pInDataReport->attrList[i].dataType == ZCL_DATATYPE_CHAR_STR) {
// 1059       AT_RESP(pInDataReport->attrList[i].attrData+1, pInDataReport->attrList[i].attrData[0]);
// 1060     } else if (pInDataReport->attrList[i].dataType == ZCL_DATATYPE_DATA16||
// 1061                pInDataReport->attrList[i].dataType == ZCL_DATATYPE_UINT16||
// 1062                pInDataReport->attrList[i].dataType == ZCL_DATATYPE_INT16) {
// 1063       AT_Int16toChar(*((uint16*)pInDataReport->attrList[i].attrData),str);
// 1064       AT_RESP(str, 4);
// 1065     } else {
// 1066       AT_Int8toChar((uint8)pInDataReport->attrList[i].attrData[0],str);
// 1067       AT_RESP(str,2);
// 1068     }
// 1069 
// 1070     AT_NEW_LINE();
// 1071   }
// 1072   AT_RESP("END\r\n", 5);
// 1073   AT_NEW_LINE();
// 1074 }
// 1075 #endif  // ZCL_REPORT_DESTINATION_DEVICE
// 1076 
// 1077 /*********************************************************************
// 1078  * @fn      zclController_ProcessInDefaultRspCmd
// 1079  *
// 1080  * @brief   Process the "Profile" Default Response Command
// 1081  *
// 1082  * @param   pInMsg - incoming message to process
// 1083  *
// 1084  * @return  none
// 1085  ********************************************************************/
// 1086 static uint8 zclController_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1087 {
// 1088   zclDefaultRspCmd_t *defaultRspCmd;
// 1089   uint16 nodeId   = pInMsg->srcAddr.addr.shortAddr;
// 1090   uint8  endpoint = pInMsg->srcAddr.endPoint;
// 1091   uint16 cID = pInMsg->clusterId;
// 1092 
// 1093   defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1094   AT_NEW_LINE();
// 1095   printf("DFTRSP:%04X,%02X,%04X,%02X,%02X", nodeId, endpoint, cID, defaultRspCmd->commandID,
// 1096   									defaultRspCmd->statusCode);
// 1097   AT_NEW_LINE();
// 1098 
// 1099   return ( TRUE );
// 1100 }
// 1101 
// 1102 #ifdef ZCL_DISCOVER
// 1103 /*********************************************************************
// 1104  * @fn      zclController_ProcessInDiscCmdsRspCmd
// 1105  *
// 1106  * @brief   Process the Discover Commands Response Command
// 1107  *
// 1108  * @param   pInMsg - incoming message to process
// 1109  *
// 1110  * @return  none
// 1111  ********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1112 static uint8 zclController_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
zclController_ProcessInDiscCmdsRspCmd:
          CFI Block cfiBlock126 Using cfiCommon0
          CFI Function zclController_ProcessInDiscCmdsRspCmd
        CODE
// 1113 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1114   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1115   uint8 i;
// 1116 
// 1117   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_25:
        ADDC      A,R3
        MOV       DPH,A
        LCALL     ?Subroutine25 & 0xFFFF
// 1118   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
??CrossCallReturnLabel_31:
        MOV       R2,#0x0
        SJMP      ??zclController_ProcessInDiscCmdsRspCmd_0
??zclController_ProcessInDiscCmdsRspCmd_1:
        INC       R2
??zclController_ProcessInDiscCmdsRspCmd_0:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        CLR       C
        SUBB      A,R3
        JC        ??zclController_ProcessInDiscCmdsRspCmd_1
// 1119   {
// 1120     // Device is notified of the result of its attribute discovery command.
// 1121   }
// 1122 
// 1123   return ( TRUE );
        MOV       R1,#0x1
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1124 }
          CFI EndBlock cfiBlock126

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond127 Using cfiCommon0
          CFI Function zclController_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function zclController_ProcessInWriteRspCmd
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zclController_ProcessInDiscCmdsRspCmd
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond129) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond129) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond129) CFA_SP SP+-7
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclController_ProcessInDiscAttrsRspCmd
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        RET
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131
// 1125 
// 1126 /*********************************************************************
// 1127  * @fn      zclController_ProcessInDiscAttrsRspCmd
// 1128  *
// 1129  * @brief   Process the "Profile" Discover Attributes Response Command
// 1130  *
// 1131  * @param   pInMsg - incoming message to process
// 1132  *
// 1133  * @return  none
// 1134  ********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1135 static uint8 zclController_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
zclController_ProcessInDiscAttrsRspCmd:
          CFI Block cfiBlock132 Using cfiCommon0
          CFI Function zclController_ProcessInDiscAttrsRspCmd
        CODE
// 1136 {
        FUNCALL zclController_ProcessInDiscAttrsRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInDiscAttrsRspCmd, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInDiscAttrsRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInDiscAttrsRspCmd, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInDiscAttrsRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInDiscAttrsRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclController_ProcessInDiscAttrsRspCmd, AT_Uart0_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1137   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1138   uint8 i;
// 1139   uint16 nodeId   = pInMsg->srcAddr.addr.shortAddr;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine13 & 0xFFFF
// 1140   uint8  endpoint = pInMsg->srcAddr.endPoint;
??CrossCallReturnLabel_52:
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_49:
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V6,A
// 1141 
// 1142   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_26:
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        LCALL     ?Subroutine20 & 0xFFFF
// 1143   AT_NEW_LINE();
// 1144   printf("DISCATTR:%04X,%02X,%02X,%02X", nodeId, endpoint, discoverRspCmd->numAttr,
// 1145   									discoverRspCmd->discComplete); // 0-Uncompleted 1-completed
??CrossCallReturnLabel_22:
        MOV       ?V4,DPL
        MOV       ?V5,DPH
        ; Setup parameters for call to function printf
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       ?V10,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V7,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#`?<Constant "DISCATTR:%04X,%02X,%0...">` & 0xff
        MOV       R3,#(`?<Constant "DISCATTR:%04X,%02X,%0...">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 1146   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
        MOV       ?V6,#0x0
        SJMP      ??zclController_ProcessInDiscAttrsRspCmd_0
// 1147   {
// 1148     AT_NEXT_LINE();
??zclController_ProcessInDiscAttrsRspCmd_1:
        ; Setup parameters for call to function AT_Uart0_Send
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
// 1149     printf("CLUS:%04X,ATTR:%04X,TYPE:%02X",
// 1150            pInMsg->clusterId,
// 1151            discoverRspCmd->attrList[i].attrID,
// 1152            discoverRspCmd->attrList[i].dataType);
        MOV       A,?V6
        MOV       B,#0x3
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       A,?V2
        ADD       A,R0
        MOV       R0,A
        MOV       A,?V3
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        ; Setup parameters for call to function printf
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V8,A
        MOV       ?V9,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       DPL,R2
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R2,#`?<Constant "CLUS:%04X,ATTR:%04X,T...">` & 0xff
        MOV       R3,#(`?<Constant "CLUS:%04X,ATTR:%04X,T...">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 1153   }
        INC       ?V6
??zclController_ProcessInDiscAttrsRspCmd_0:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V6
        CLR       C
        SUBB      A,R0
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        JC        ??zclController_ProcessInDiscAttrsRspCmd_1
// 1154   AT_NEXT_LINE();
        ; Setup parameters for call to function AT_Uart0_Send
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
// 1155   AT_RESP("END\r\n", 5);
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "END\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "END\\r\\n">` >> 8) & 0xff
        LCALL     ?Subroutine18 & 0xFFFF
// 1156   AT_NEW_LINE();
// 1157 
// 1158   return ( TRUE );
??CrossCallReturnLabel_17:
        MOV       R1,#0x1
        LJMP      ?Subroutine5 & 0xFFFF
// 1159 }
          CFI EndBlock cfiBlock132

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function AT_zclController_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zclController_ProcessInDiscAttrsRspCmd
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOV       ?V3,A
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        ; Setup parameters for call to function printf
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        RET
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function AT_zclCtrl_REpCtrl_rsp
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zclController_ProcessInDiscAttrsRspCmd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        ; Setup parameters for call to function AT_Uart0_Send
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function AT_zclController_ProcessIncomingMsg
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function zclController_ProcessInDiscAttrsRspCmd
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker141 Using cfiCommon1
          CFI (cfiPicker141) NoFunction
          CFI (cfiPicker141) Picker
        MOVX      A,@DPTR
        MOV       ?V10,A
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiPicker141

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclController_SimpleDesc>`:
        DATA8
        DB 100
        DATA16
        DW 260
        DW 6
        DATA8
        DB 0
        DB 0
        DATA16
        DW 0H
        DATA8
        DB 0
        DATA16
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_zclController_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_zclController_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_Endpoint_Register::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_Endpoint_Register

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_Endpoint_Controller::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_Endpoint_Controller

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ATApp_MessageMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ATApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_zclCtrl_REpCtrl_req::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_zclCtrl_REpCtrl_req

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_zclCtrl_REpCtrl_rsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_zclCtrl_REpCtrl_rsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_SendCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_SendCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_SendEPCtrl::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_SendEPCtrl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_SendEPCtrl_rsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_SendEPCtrl_rsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_zclController_ProcessIncomingMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_zclController_ProcessIncomingMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclController_ProcessInReadRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclController_ProcessInReadRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclController_ProcessInWriteRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclController_ProcessInWriteRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclController_ProcessInDiscCmdsRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclController_ProcessInDiscCmdsRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclController_ProcessInDiscAttrsRspCmd::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclController_ProcessInDiscAttrsRspCmd

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "REMOTE RESPONSE:">`:
        DB "REMOTE RESPONSE:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ENABLED:">`:
        DB "ENABLED:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DISABLED:">`:
        DB "DISABLED:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UNKNOWNEP ERROR">`:
        DB "UNKNOWNEP ERROR"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\nOK\\r\\n">`:
        DB "\015\012OK\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "---------ADDR,EP,C_ID...">`:
        DB "---------ADDR,EP,C_ID,A_ID,ST,DT,DV"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ReadAttr:">`:
        DB "ReadAttr:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ",">`:
        DB ","

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "----------ADDR,EP,C_I...">`:
        DB "----------ADDR,EP,C_ID,ST"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "WriteAttr:">`:
        DB "WriteAttr:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DFTRSP:%04X,%02X,%04X...">`:
        DB "DFTRSP:%04X,%02X,%04X,%02X,%02X"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DISCATTR:%04X,%02X,%0...">`:
        DB "DISCATTR:%04X,%02X,%02X,%02X"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CLUS:%04X,ATTR:%04X,T...">`:
        DB "CLUS:%04X,ATTR:%04X,TYPE:%02X"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "END\\r\\n">`:
        DB "END\015\012"

        END
// 1160 
// 1161 /*********************************************************************
// 1162  * @fn      zclController_ProcessInDiscAttrsExtRspCmd
// 1163  *
// 1164  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1165  *
// 1166  * @param   pInMsg - incoming message to process
// 1167  *
// 1168  * @return  none
// 1169  ********************************************************************/
// 1170 static uint8 zclController_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1171 {
// 1172   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1173   uint8 i;
// 1174 
// 1175   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1176   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1177   {
// 1178     // Device is notified of the result of its attribute discovery command.
// 1179   }
// 1180 
// 1181   return ( TRUE );
// 1182 }
// 1183 #endif // ZCL_DISCOVER
// 1184 
// 1185 /****************************************************************************
// 1186 ****************************************************************************/
// 
// 2 396 bytes in segment BANKED_CODE
//    84 bytes in segment BANK_RELAYS
//    12 bytes in segment XDATA_I
//    12 bytes in segment XDATA_ID
//   250 bytes in segment XDATA_ROM_C
//     3 bytes in segment XDATA_Z
// 
//    96 bytes of CODE     memory
//   250 bytes of CONST    memory
// 2 396 bytes of HUGECODE memory
//    15 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
