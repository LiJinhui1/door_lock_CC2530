###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Feb/2022  09:35:03
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\Users\Administrator\AppData\Local\Temp\EW42ED.tmp
#        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDApp.c
#        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
#        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
#        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
#        ISR_KEYINTERRUPT -lC
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     68          #include "gp_common.h"
     69          #endif
     70          
     71          #include "bdb.h"
     72          #include "bdb_interface.h"
     73          
     74          #include "ssp.h"
     75          
     76          /* HAL */
     77          #include "hal_led.h"
     78          #include "hal_lcd.h"
     79          #include "hal_key.h"
     80          
     81          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     82            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     83          #endif
     84          
     85          #include "AT_cmd.h"
     86          
     87          /*********************************************************************
     88           * CONSTANTS
     89           */
     90          
     91          #if !defined( NWK_START_DELAY )
     92            #define NWK_START_DELAY             100   // in milliseconds
     93          #endif
     94          
     95          #if !defined( LEAVE_RESET_DELAY )
     96            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     97          #endif
     98          
     99          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
    100            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
    101          #endif
    102          
    103          #if !defined( BEACON_REQUEST_DELAY )
    104            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    105          #endif
    106          
    107          #if !defined( BEACON_REQ_DELAY_MASK )
    108            #define BEACON_REQ_DELAY_MASK       0x007F
    109          #endif
    110          
    111          #define MAX_RESUME_RETRY            3
    112          
    113          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    114          
    115          // Beacon Order Settings (see NLMEDE.h)
    116          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    117          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    118          
    119          // Leave control bits
    120          #define ZDAPP_LEAVE_CTRL_INIT 0
    121          #define ZDAPP_LEAVE_CTRL_SET  1
    122          #define ZDAPP_LEAVE_CTRL_RA   2
    123          
    124          // Address Manager Stub Implementation
    125          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    126          
    127          
    128          #if !defined ZDO_NV_SAVE_RFDs
    129          #define ZDO_NV_SAVE_RFDs  TRUE
    130          #endif
    131          
    132          // Delay time before updating NWK NV data to force fewer writes during high activity.
    133          #if ZDO_NV_SAVE_RFDs
    134          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    135          #else
    136          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    137          #endif
    138          
    139          // Timeout value to process New Devices
    140          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    141          
    142          
    143          //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
    144          #if defined ( ZDP_BIND_VALIDATION )
    145          #if !defined MAX_PENDING_BIND_REQ
    146          #define MAX_PENDING_BIND_REQ 3
    147          #endif
    148          #endif
    149          
    150          #ifdef LEGACY_ZDO_LEDS
    151          #define zdoHalLedSet HalLedSet
    152          #else
    153          #define zdoHalLedSet(...)
    154          #endif
    155          
    156          /******************************************************************************
    157           * TYPEDEFS
    158           */
    159          typedef struct
    160          {
    161            void   *next;
    162            uint16 shortAddr;
    163            uint16 timeDelta;
    164          } ZDAppNewDevice_t;
    165          
    166          /*********************************************************************
    167           * GLOBAL VARIABLES
    168           */
    169          
    170          #if defined( LCD_SUPPORTED )
    171            uint8 MatchRsps = 0;
    172          #endif
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    175          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    181          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    182          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    185          
    186          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    188          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    190          
    191          #if defined ( ZDP_BIND_VALIDATION )
    192          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
    193          #endif
    194          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          uint8 FrameCounterUpdated = FALSE;
   \                     FrameCounterUpdated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    197          /*********************************************************************
    198           * EXTERNAL VARIABLES
    199           */
    200          extern bool    requestNewTrustCenterLinkKey;
    201          extern uint32  requestLinkKeyTimeout;
    202          extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    203          
    204          extern bool getNewAddr;
    205          /*********************************************************************
    206           * EXTERNAL FUNCTIONS
    207           */
    208          
    209          /*********************************************************************
    210           * LOCAL FUNCTIONS
    211           */
    212          void ZDApp_NetworkStartEvt( void );
    213          void ZDApp_DeviceAuthEvt( void );
    214          void ZDApp_SaveNetworkStateEvt( void );
    215          
    216          uint8 ZDApp_ReadNetworkRestoreState( void );
    217          uint8 ZDApp_RestoreNetworkState( void );
    218          void ZDAppDetermineDeviceType( void );
    219          void ZDApp_InitUserDesc( void );
    220          void ZDAppCheckForHoldKey( void );
    221          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    222          void ZDApp_ProcessNetworkJoin( void );
    223          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    224          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    225          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    226          
    227          void ZDApp_SecInit( uint8 state );
    228          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    229          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    230          
    231          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    232          
    233          void ZDApp_ResetTimerStart( uint16 delay );
    234          void ZDApp_ResetTimerCancel( void );
    235          void ZDApp_LeaveCtrlInit( void );
    236          void ZDApp_LeaveCtrlSet( uint8 ra );
    237          uint8 ZDApp_LeaveCtrlBypass( void );
    238          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    239          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
    240          void ZDApp_NodeProfileSync( uint8 stackProfile );
    241          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    242          void ZDApp_RegisterCBs( void );
    243          void ZDApp_InitZdoCBFunc(void);
    244          #if defined ( ZDP_BIND_VALIDATION )
    245          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    246          void ZDApp_InitPendingBind( void );
    247          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    248          void ZDApp_AgeOutPendingBindEntry( void );
    249          #endif
    250          
    251          void ZDApp_SetParentAnnceTimer( void );
    252          void ZDApp_StoreNwkSecMaterial(void);
    253          
    254          /*********************************************************************
    255           * LOCAL VARIABLES
    256           */
    257          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    259          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    261          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    262          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    263          devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    264          
    265          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    266            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    267          
    268          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    269            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    270            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    271                                  // to parent. Set to make the device do an Orphan scan.
    272          #else
    273            // Set the default to coodinator
    274            devStartModes_t devStartMode = MODE_HARD;
    275          #endif
    276          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    277          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    278          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    279          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000007                REQUIRE __INIT_XDATA_I
    280          {
    281            ZDO_EP,
    282            0,
    283            &ZDAppTaskID,
    284            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    285            (afNetworkLatencyReq_t)0            // No Network Latency req
    286          };
    287          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    288          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    289          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    290          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    291          
    292          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    293          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    294          
    295          /*********************************************************************
    296           * @fn      ZDApp_Init
    297           *
    298           * @brief   ZDApp Initialization function.
    299           *
    300           * @param   task_id - ZDApp Task ID
    301           *
    302           * @return  None
    303           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    305          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    306            // Save the task ID
    307            ZDAppTaskID = task_id;
   \   000006   90....       MOV       DPTR,#ZDAppTaskID
   \   000009   F0           MOVX      @DPTR,A
    308          
    309            // Initialize the ZDO global device short address storage
    310            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    311            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
    312            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    313          
    314            // Initialize ZDO items and setup the device - type of device to create.
    315            ZDO_Init();
   \   00001C                ; Setup parameters for call to function ZDO_Init
   \   00001C   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    316          
    317            // Register the endpoint description with the AF
    318            // This task doesn't have a Simple description, but we still need
    319            // to register the endpoint.
    320            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00001F                ; Setup parameters for call to function afRegister
   \   00001F   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   000021   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000023   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    321          
    322          #if defined( ZDO_USERDESC_RESPONSE )
    323            ZDApp_InitUserDesc();
    324          #endif // ZDO_USERDESC_RESPONSE
    325          
    326            // Initialize the ZDO callback function pointers zdoCBFunc[]
    327            ZDApp_InitZdoCBFunc();
   \   000026                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   000026   12....       LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    328          
    329            ZDApp_RegisterCBs();
   \   000029                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000029   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    330          
    331          #if defined ( ZDP_BIND_VALIDATION )
    332          #if defined ( REFLECTOR )
    333            ZDApp_InitPendingBind();
    334          #endif
    335          #endif
    336          } /* ZDApp_Init() */
   \   00002C   02....       LJMP      ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    337          
    338          /*********************************************************************
    339           * @fn          ZDApp_SecInit
    340           *
    341           * @brief       ZDApp initialize security.
    342           *
    343           * @param       state - device initialization state
    344           *
    345           * @return      none
    346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    348          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    349            uint8 zgPreConfigKey[SEC_KEY_LEN];
    350          
    351            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    352            {
    353              // Set the Trust Center bit
    354              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    355            }
    356          
    357            // Initialize ZigBee Device Security Manager
    358            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    359          
    360            if ( ZG_SECURE_ENABLED )
    361            {
    362              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV       A,?V0
   \   000011   603A         JZ        ??ZDApp_SecInit_0
    363              {
    364                if( _NIB.nwkKeyLoaded == FALSE )
   \   000013   90....       MOV       DPTR,#_NIB + 61
   \   000016   E0           MOVX      A,@DPTR
   \   000017   7034         JNZ       ??ZDApp_SecInit_0
    365                {
    366                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    367                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000019   90....       MOV       DPTR,#zgSecurityMode
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6401         XRL       A,#0x1
   \   00001F   702C         JNZ       ??ZDApp_SecInit_0
   \   000021   90....       MOV       DPTR,#zgPreConfigKeys
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6026         JZ        ??ZDApp_SecInit_0
    368                  {
    369                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000027                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000027   AC..         MOV       R4,?XSP + 0
   \   000029   AD..         MOV       R5,?XSP + 1
   \   00002B   7A62         MOV       R2,#0x62
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    370                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000032                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000032   7900         MOV       R1,#0x0
   \   000034   AA..         MOV       R2,?XSP + 0
   \   000036   AB..         MOV       R3,?XSP + 1
   \   000038   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    371                      SSP_SwitchNwkKey( 0 );
   \   00003B                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00003B   7900         MOV       R1,#0x0
   \   00003D   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    372          
    373                      // clear local copy of key
    374                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C10         MOV       R4,#0x10
   \   000042   7D00         MOV       R5,#0x0
   \   000044   7900         MOV       R1,#0x0
   \   000046   AA..         MOV       R2,?XSP + 0
   \   000048   AB..         MOV       R3,?XSP + 1
   \   00004A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    375                  }
    376                }
    377              }
    378          
    379              // clean the new devices list when Security module is initialized
    380              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   00004D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000050   6021         JZ        ??ZDApp_SecInit_1
    381              {
    382                ZDAppNewDevice_t *pNewDeviceNext;
    383          
    384                while ( ZDApp_NewDeviceList )
    385                {
    386                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000052   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000055   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000058   FE           MOV       R6,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FF           MOV       R7,A
    387                  osal_mem_free( ZDApp_NewDeviceList );
   \   00005C                ; Setup parameters for call to function osal_mem_free
   \   00005C   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00005F   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000062   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    388                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000065   EF           MOV       A,R7
   \   000066   F9           MOV       R1,A
   \   000067   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00006A   EE           MOV       A,R6
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   EF           MOV       A,R7
   \   00006E   F0           MOVX      @DPTR,A
    389                }
   \   00006F   EE           MOV       A,R6
   \   000070   49           ORL       A,R1
   \   000071   70DF         JNZ       ??ZDApp_SecInit_2
    390              }
    391            }
    392          }
   \                     ??ZDApp_SecInit_1:
   \   000073   7410         MOV       A,#0x10
   \   000075   02....       LJMP      ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
    393          
    394          /*********************************************************************
    395           * @fn      ZDApp_event_loop()
    396           *
    397           * @brief   Main event loop for Zigbee device objects task. This function
    398           *          should be called at periodic intervals.
    399           *
    400           * @param   task_id - Task ID
    401           * @param   events  - Bitmap of events
    402           *
    403           * @return  none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    407            uint8 *msg_ptr;
    408          
    409            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL       A,#0x80
   \   00000D   702D         JNZ       ??ZDApp_event_loop_0
    410            {
    411              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    412              {
    413                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    414          
    415                // Release the memory
    416                osal_msg_deallocate( msg_ptr );
    417              }
    418          
    419              // Return unprocessed events
    420              return (events ^ SYS_EVENT_MSG);
    421            }
    422          
    423            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EA           MOV       A,R2
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5040         JNC       ??ZDApp_event_loop_1
    424            {
    425              // Initialize apps and start the network
    426              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    427          
    428              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    429                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV       R4,#0xf
   \   00001B   7B0F         MOV       R3,#0xf
   \   00001D   90....       MOV       DPTR,#devStartMode
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FA           MOV       R2,A
   \   000022   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX      A,@DPTR
   \   000026   5407         ANL       A,#0x7
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    430          
    431              // Return unprocessed events
    432              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV       A,R6
   \   00002D   6401         XRL       A,#0x1
   \   00002F   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    433            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV       R2,?V0
   \   000037   AB..         MOV       R3,?V1
   \   000039   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV       DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV       ?V0,R2
   \   000046   8B..         MOV       ?V1,R3
   \   000048   EA           MOV       A,R2
   \   000049   4B           ORL       A,R3
   \   00004A   70E6         JNZ       ??ZDApp_event_loop_3
   \   00004C   EE           MOV       A,R6
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   6480         XRL       A,#0x80
   \   000051   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    434          
    435            if ( ZSTACK_ROUTER_BUILD )
    436            {
    437              if ( events & ZDO_NETWORK_START )
    438              {
    439                ZDApp_NetworkStartEvt();
    440          
    441                // Return unprocessed events
    442                return (events ^ ZDO_NETWORK_START);
    443              }
    444          
    445              if ( events & ZDO_ROUTER_START )
    446              {
    447                if ( nwkStatus == ZSuccess )
    448                {
    449                  if ( devState == DEV_END_DEVICE )
    450                  {
    451                    ZDApp_ChangeState( DEV_ROUTER );
    452                  }
    453          
    454                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    455          
    456                  if ( zgChildAgingEnable == TRUE )
    457                  {
    458                    // Once the device has changed its state to a ROUTER set the timer to send
    459                    // Parent annce
    460                    ZDApp_SetParentAnnceTimer();
    461                  }
    462                }
    463                else
    464                {
    465                  // remain as end device
    466                }
    467                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    468          
    469                // Return unprocessed events
    470                return (events ^ ZDO_ROUTER_START);
    471              }
    472          
    473              if ( events & ZDO_PARENT_ANNCE_EVT )
    474              {
    475                ZDApp_SendParentAnnce();
    476          
    477                // Return unprocessed events
    478                return (events ^ ZDO_PARENT_ANNCE_EVT);
    479              }
    480            }
    481          
    482            if ( ZSTACK_END_DEVICE_BUILD )
    483            {
    484              if ( events & ZDO_VOLTAGE_CHECK )
    485              {
    486                nwkPollCount = 0;
    487                OnBoard_CheckVoltage();
    488          
    489                return (events ^ ZDO_VOLTAGE_CHECK);
    490              }
    491            }
    492          
    493            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_1:
   \   000054   EB           MOV       A,R3
   \   000055   5420         ANL       A,#0x20
   \   000057   6034         JZ        ??ZDApp_event_loop_5
    494            {
    495              if( devState == DEV_NWK_BACKOFF )
   \   000059   90....       MOV       DPTR,#devState
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   640C         XRL       A,#0xc
   \   00005F   700D         JNZ       ??ZDApp_event_loop_6
    496              {
    497                ZDApp_ChangeState(DEV_NWK_DISC);
   \   000061                ; Setup parameters for call to function ZDApp_ChangeState
   \   000061   7902         MOV       R1,#0x2
   \   000063   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    498                // Restart scan for rejoin
    499                ZDApp_StartJoiningCycle();
   \   000066                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   000066   12....       LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    500                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   000069                ; Setup parameters for call to function osal_start_timerEx
   \   000069   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   00006C   800B         SJMP      ??ZDApp_event_loop_7
    501              }
    502              else
    503              {
    504                // Rejoin backoff, silent period
    505                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_6:
   \   00006E                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006E   790C         MOV       R1,#0xc
   \   000070   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    506                ZDApp_StopJoiningCycle();
   \   000073                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   000073   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    507                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   000076                ; Setup parameters for call to function osal_start_timerEx
   \   000076   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_7:
   \   000079   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007C   7A00         MOV       R2,#0x0
   \   00007E   7B20         MOV       R3,#0x20
    508              }
   \   000080   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
    509          
    510              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   000086   EE           MOV       A,R6
   \   000087   FA           MOV       R2,A
   \   000088   EF           MOV       A,R7
   \   000089   6420         XRL       A,#0x20
   \   00008B   8056         SJMP      ??ZDApp_event_loop_4
    511            }
    512          
    513            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_5:
   \   00008D   EA           MOV       A,R2
   \   00008E   5410         ANL       A,#0x10
   \   000090   602A         JZ        ??ZDApp_event_loop_8
    514            {
    515              ZDO_UpdateNwkStatus( devState );
   \   000092                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000092   90....       MOV       DPTR,#devState
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F9           MOV       R1,A
   \   000097   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    516          
    517              // At start up, do one MTO route discovery if the device is a concentrator
    518              if ( zgConcentratorEnable == TRUE )
   \   00009A   90....       MOV       DPTR,#zgConcentratorEnable
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   6401         XRL       A,#0x1
   \   0000A0   7013         JNZ       ??ZDApp_event_loop_9
    519              {
    520                // Start next event
    521                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000A2                ; Setup parameters for call to function osal_start_timerEx
   \   0000A2   90....       MOV       DPTR,#__Constant_64
   \   0000A5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A8   7A00         MOV       R2,#0x0
   \   0000AA   7B08         MOV       R3,#0x8
   \   0000AC   90....       MOV       DPTR,#NWK_TaskID
   \   0000AF   12....       LCALL     ??Subroutine60_0 & 0xFFFF
    522              }
   \                     ??CrossCallReturnLabel_89:
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
    523          
    524              // Return unprocessed events
    525              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_9:
   \   0000B5   EE           MOV       A,R6
   \   0000B6   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000B8   FA           MOV       R2,A
   \   0000B9   EF           MOV       A,R7
   \   0000BA   8027         SJMP      ??ZDApp_event_loop_4
    526            }
    527          
    528            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_8:
   \   0000BC   EA           MOV       A,R2
   \   0000BD   5408         ANL       A,#0x8
   \   0000BF   6006         JZ        ??ZDApp_event_loop_10
    529            {
    530              // User defined logic
    531          
    532              // Return unprocessed events
    533              return (events ^ ZDO_COMMAND_CNF);
   \   0000C1   EA           MOV       A,R2
   \   0000C2   6408         XRL       A,#0x8
   \   0000C4   FA           MOV       R2,A
   \   0000C5   8037         SJMP      ??ZDApp_event_loop_11
    534            }
    535          
    536            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_10:
   \   0000C7   EB           MOV       A,R3
   \   0000C8   5401         ANL       A,#0x1
   \   0000CA   601A         JZ        ??ZDApp_event_loop_12
    537            {
    538              // Save only in valid state
    539              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   0000CC   90....       MOV       DPTR,#_NIB + 35
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   F8           MOV       R0,A
   \   0000D1   7408         MOV       A,#0x8
   \   0000D3   68           XRL       A,R0
   \   0000D4   6005         JZ        ??ZDApp_event_loop_13
   \   0000D6   7404         MOV       A,#0x4
   \   0000D8   68           XRL       A,R0
   \   0000D9   7003         JNZ       ??ZDApp_event_loop_14
    540              {
    541                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_13:
   \   0000DB                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   0000DB   12....       LCALL     `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    542              }
    543          
    544              // Return unprocessed events
    545              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_14:
   \   0000DE   EE           MOV       A,R6
   \   0000DF   FA           MOV       R2,A
   \   0000E0   EF           MOV       A,R7
   \   0000E1   6401         XRL       A,#0x1
   \                     ??ZDApp_event_loop_4:
   \   0000E3   FB           MOV       R3,A
   \   0000E4   8018         SJMP      ??ZDApp_event_loop_11
    546            }
    547          
    548            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   0000E6   EA           MOV       A,R2
   \   0000E7   5404         ANL       A,#0x4
   \   0000E9   600A         JZ        ??ZDApp_event_loop_15
    549            {
    550          #ifdef ZBA_FALLBACK_NWKKEY
    551              if ( devState == DEV_END_DEVICE_UNAUTH )
    552              {
    553                ZDSecMgrFallbackNwkKey();
    554              }
    555              else
    556          #endif
    557              {
    558                // Set the NV startup option to force a "new" join.
    559                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE | ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   0000EB                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000EB   7A03         MOV       R2,#0x3
   \   0000ED   79FF         MOV       R1,#-0x1
   \   0000EF   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    560          
    561                // The device has been in the UNAUTH state, so reset
    562                // Note: there will be no return from this call
    563                SystemResetSoft();
   \   0000F2                ; Setup parameters for call to function Onboard_soft_reset
   \   0000F2   12....       LCALL     Onboard_soft_reset & 0xFFFF
    564              }
    565            }
    566          
    567          #if defined ( ZDP_BIND_VALIDATION )
    568            if ( events & ZDO_PENDING_BIND_REQ_EVT )
    569            {
    570          #if defined ( REFLECTOR )
    571              ZDApp_AgeOutPendingBindEntry();
    572          #endif
    573              // Return unprocessed events
    574              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
    575            }
    576          #endif
    577          
    578            if ( ZG_SECURE_ENABLED )
    579            {
    580              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_15:
   \   0000F5                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   0000F5   EE           MOV       A,R6
   \   0000F6   FA           MOV       R2,A
   \   0000F7   EF           MOV       A,R7
   \   0000F8   FB           MOV       R3,A
   \   0000F9   A9..         MOV       R1,?V2
   \   0000FB   12....       LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    581            }
   \                     ??ZDApp_event_loop_11:
   \   0000FE                REQUIRE ?Subroutine1
   \   0000FE                ; // Fall through to label ?Subroutine1
    582            else
    583            {
    584              // Discard or make more handlers
    585              return 0;
    586            }
    587          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET
    588          
    589          /*********************************************************************
    590           * @fn      ZDApp_ProcessSecEvent()
    591           *
    592           * @brief   Process incoming security events.
    593           *
    594           * @param   task_id - Task ID
    595           * @param   events  - Bitmap of events
    596           *
    597           * @return  none
    598           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    599          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    600          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    601            (void)task_id;  // Intentionally unreferenced parameter
    602          
    603            if ( ZSTACK_ROUTER_BUILD )
    604            {
    605              if ( events & ZDO_NEW_DEVICE )
    606              {
    607                // process the new device event
    608                if ( ZDApp_NewDeviceList )
    609                {
    610                  ZDAppNewDevice_t *pNewDevice;
    611                  uint16 timeDelta;
    612          
    613                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    614          
    615                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    616                  osal_mem_free( ZDApp_NewDeviceList );
    617                  ZDApp_NewDeviceList = pNewDevice;
    618          
    619                  if ( pNewDevice )
    620                  {
    621                    timeDelta = pNewDevice->timeDelta;
    622                    pNewDevice = pNewDevice->next;
    623          
    624                    while ( pNewDevice )
    625                    {
    626                      pNewDevice->timeDelta -= timeDelta;
    627                      pNewDevice = pNewDevice->next;
    628                    }
    629          
    630                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    631                  }
    632                }
    633          
    634                // Return unprocessed events
    635                return (events ^ ZDO_NEW_DEVICE);
    636              }
    637            }
    638          
    639            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EA           MOV       A,R2
   \   00000A   5480         ANL       A,#0x80
   \   00000C   6019         JZ        ??ZDApp_ProcessSecEvent_0
    640            {
    641              ZDApp_StoreNwkSecMaterial();
   \   00000E                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   00000E   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
    642          
    643              ZDApp_DeviceAuthEvt();
   \   000011                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000011   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    644          
    645              bdb_setNodeIsOnANetwork(TRUE);
   \   000014                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    646          
    647              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
   \   000019                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000019   7A01         MOV       R2,#0x1
   \   00001B   7903         MOV       R1,#0x3
   \   00001D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    648          
    649              // Return unprocessed events
    650              return (events ^ ZDO_DEVICE_AUTH);
   \   000020   EE           MOV       A,R6
   \   000021   6480         XRL       A,#0x80
   \   000023   FA           MOV       R2,A
   \   000024   EF           MOV       A,R7
   \   000025   802B         SJMP      ??ZDApp_ProcessSecEvent_1
    651            }
    652          
    653            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000027   EB           MOV       A,R3
   \   000028   5402         ANL       A,#0x2
   \   00002A   600A         JZ        ??ZDApp_ProcessSecEvent_2
    654            {
    655              ZDApp_SaveNwkKey();
   \   00002C                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00002C   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    656          
    657              // Return unprocessed events
    658              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   00002F   EE           MOV       A,R6
   \   000030   FA           MOV       R2,A
   \   000031   EF           MOV       A,R7
   \   000032   6402         XRL       A,#0x2
   \   000034   801C         SJMP      ??ZDApp_ProcessSecEvent_1
    659            }
    660          
    661            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000036   EB           MOV       A,R3
   \   000037   5408         ANL       A,#0x8
   \   000039   600A         JZ        ??ZDApp_ProcessSecEvent_3
    662            {
    663          #if defined (NV_RESTORE)
    664              ZDSecMgrSaveApsLinkKey();
   \   00003B                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   00003B   12....       LCALL     `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    665          #endif // (NV_RESTORE)
    666          
    667              // Return unprocessed events
    668              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   6408         XRL       A,#0x8
   \   000043   800D         SJMP      ??ZDApp_ProcessSecEvent_1
    669            }
    670          
    671            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000045   EB           MOV       A,R3
   \   000046   5404         ANL       A,#0x4
   \   000048   600B         JZ        ??ZDApp_ProcessSecEvent_4
    672            {
    673              ZDSecMgrSaveTCLinkKey();
   \   00004A                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00004A   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    674          
    675              // Return unprocessed events
    676              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   00004D   EE           MOV       A,R6
   \   00004E   FA           MOV       R2,A
   \   00004F   EF           MOV       A,R7
   \   000050   6404         XRL       A,#0x4
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000052   FB           MOV       R3,A
   \   000053   8004         SJMP      ??ZDApp_ProcessSecEvent_5
    677            }
    678          
    679            // Discard or make more handlers
    680            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000055   7A00         MOV       R2,#0x0
   \   000057   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000059   02....       LJMP      ??Subroutine49_0 & 0xFFFF
    681          }
    682          
    683          /*********************************************************************
    684           * Application Functions
    685           */
    686          
    687          /*********************************************************************
    688           * @fn      ZDOInitDevice
    689           *
    690           * @brief   Start the device in the network.  This function will read
    691           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    692           *   restore the network state of the device.
    693           *
    694           * @param   startDelay - timeDelay to start device (in milliseconds).
    695           *                       There is a jitter added to this delay:
    696           *                       ((NWK_START_DELAY + startDelay)
    697           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    698           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    699           *                       this function will hold the network init. Application
    700           *                       can start the device.
    701           * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
    702           *                       which mode should the device start with (only has effect on
    703           *                       Router devices)
    704           *
    705           * NOTE:    If the application would like to force a "new" join, the
    706           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    707           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    708           *          this function. "new" join means to not restore the network
    709           *          state of the device. Use zgWriteStartupOptions() to set these
    710           *          options.
    711           *
    712           * @return
    713           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    714           *          restored.
    715           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    716           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    717           *          it could mean that there was no network state to restore.
    718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
   \                     ZDOInitDeviceEx:
    720          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   89..         MOV       ?V1,R1
    721            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   75..01       MOV       ?V0,#0x1
    722            uint16 extendedDelay = 0;
   \   000013   7E00         MOV       R6,#0x0
   \   000015   7F00         MOV       R7,#0x0
    723          
    724            if ( devState == DEV_HOLD )
   \   000017   90....       MOV       DPTR,#devState
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   7008         JNZ       ??ZDOInitDeviceEx_0
    725            {
    726              byte temp = FALSE;
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
    727              // Initialize the RAM items table, in case an NV item has been updated.
    728              zgInitItems( FALSE );
   \   000025                ; Setup parameters for call to function zgInitItems
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    729          
    730              //Turn off the radio
    731              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000029                ; Setup parameters for call to function ZMacSetReq
   \   000029   8003         SJMP      ??ZDOInitDeviceEx_1
    732            }
    733            else
    734            {
    735              byte temp = TRUE;
   \                     ??ZDOInitDeviceEx_0:
   \   00002B   7401         MOV       A,#0x1
   \   00002D   F0           MOVX      @DPTR,A
    736              //Turn on the radio
    737              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \                     ??ZDOInitDeviceEx_1:
   \   00002E   AA..         MOV       R2,?XSP + 0
   \   000030   AB..         MOV       R3,?XSP + 1
   \   000032   7952         MOV       R1,#0x52
   \   000034   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    738            }
    739          
    740            ZDConfig_InitDescriptors();
   \   000037                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000037   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    741            //devtag.071807.todo - fix this temporary solution
    742            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00003A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   90....       MOV       DPTR,#_NIB + 14
   \   000041   F0           MOVX      @DPTR,A
    743          
    744          #if defined ( NV_RESTORE )
    745            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    746            // while booting to skip past NV Restore.
    747            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000042   90....       MOV       DPTR,#zdappHoldKeys
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6404         XRL       A,#0x4
   \   000048   707D         JNZ       ??ZDOInitDeviceEx_2
    748            {
    749              zdappHoldKeys = 0;   // Only once
   \   00004A   E4           CLR       A
   \   00004B   F0           MOVX      @DPTR,A
    750              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    751            }
    752            else
    753            {
    754          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    755              if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
    756              {
    757                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    758              }
    759              else
    760              {
    761                // Determine if NV should be restored
    762                networkStateNV = ZDApp_ReadNetworkRestoreState();
    763              }
    764          #else
    765              // Determine if NV should be restored
    766              networkStateNV = ZDApp_ReadNetworkRestoreState();
    767          #endif
    768            }
    769          
    770            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    771            {
    772              networkStateNV = ZDApp_RestoreNetworkState();
    773          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    774              if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
    775              {
    776                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    777              }
    778          #endif
    779              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    780            }
    781            else
    782            {
    783              // Wipe out the network state in NV
    784              NLME_InitNV();
   \                     ??ZDOInitDeviceEx_3:
   \   00004C                ; Setup parameters for call to function NLME_InitNV
   \   00004C   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    785              NLME_SetDefaultNV();
   \   00004F                ; Setup parameters for call to function NLME_SetDefaultNV
   \   00004F   12....       LCALL     `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    786              // clear NWK key values
    787              ZDSecMgrClearNVKeyValues();
   \   000052                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000052   12....       LCALL     `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    788            }
    789          #endif
    790          
    791            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDeviceEx_4:
   \   000055   7401         MOV       A,#0x1
   \   000057   65..         XRL       A,?V0
   \   000059   6003         JZ        $+5
   \   00005B   02....       LJMP      ??ZDOInitDeviceEx_5 & 0xFFFF
    792            {
    793              ZDAppDetermineDeviceType();
   \   00005E                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00005E   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    794          
    795              // Only delay if joining network - not restoring network state
    796              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    797                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000061                ; Setup parameters for call to function osal_rand
   \   000061   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000064   EA           MOV       A,R2
   \   000065   547F         ANL       A,#0x7f
   \   000067   F8           MOV       R0,A
   \   000068   E5..         MOV       A,?V2
   \   00006A   28           ADD       A,R0
   \   00006B   F8           MOV       R0,A
   \   00006C   E4           CLR       A
   \   00006D   35..         ADDC      A,?V3
   \   00006F   F9           MOV       R1,A
   \   000070   E8           MOV       A,R0
   \   000071   2464         ADD       A,#0x64
   \   000073   FE           MOV       R6,A
   \   000074   E4           CLR       A
   \   000075   39           ADDC      A,R1
   \   000076   FF           MOV       R7,A
    798          
    799              runtimeChannel = zgDefaultChannelList;
   \   000077   90....       MOV       DPTR,#zgDefaultChannelList
   \   00007A   12....       LCALL     ?XLOAD_R0123
   \   00007D   90....       MOV       DPTR,#runtimeChannel
   \   000080   12....       LCALL     ?XSTORE_R0123
    800          
    801              // Set the NV startup option to force a "new" join.
    802              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000083                ; Setup parameters for call to function zgWriteStartupOptions
   \   000083   7A02         MOV       R2,#0x2
   \   000085   79FF         MOV       R1,#-0x1
   \   000087   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    803          
    804          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    805              gp_ProxyTblInit( TRUE );
    806          #endif
    807          
    808              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00008A   90....       MOV       DPTR,#_NIB + 20
   \   00008D   74FE         MOV       A,#-0x2
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   04           INC       A
   \   000092   F0           MOVX      @DPTR,A
    809              _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000093   90....       MOV       DPTR,#_NIB + 23
   \   000096   14           DEC       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098   A3           INC       DPTR
   \   000099   04           INC       A
   \   00009A   F0           MOVX      @DPTR,A
    810              _NIB.nwkPanId = 0xFFFF;
   \   00009B   90....       MOV       DPTR,#_NIB + 33
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   F0           MOVX      @DPTR,A
    811              osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
   \   0000A1                ; Setup parameters for call to function osal_memset
   \   0000A1   7C08         MOV       R4,#0x8
   \   0000A3   7D00         MOV       R5,#0x0
   \   0000A5   7900         MOV       R1,#0x0
   \   0000A7   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   0000A9   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   0000AB   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    812              NLME_SetUpdateID( 0 );
   \   0000AE                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000AE   7900         MOV       R1,#0x0
   \   0000B0   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    813          
    814              if(ZG_DEVICE_RTRONLY_TYPE)
   \   0000B3   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   6401         XRL       A,#0x1
   \   0000B9   705A         JNZ       ??ZDOInitDeviceEx_6
    815              {
    816                if(1 == mode)
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   65..         XRL       A,?V1
   \   0000BF   703E         JNZ       ??ZDOInitDeviceEx_7
    817                {
    818                  //Update TC address as distributed network (TC none)
    819                  ZDSecMgrUpdateTCAddress(0);
   \   0000C1                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   0000C1   7A00         MOV       R2,#0x0
   \   0000C3   7B00         MOV       R3,#0x0
   \   0000C5   804B         SJMP      ??ZDOInitDeviceEx_8
    820                }
   \                     ??ZDOInitDeviceEx_2:
   \   0000C7                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000C7   12....       LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   0000CA   E9           MOV       A,R1
   \   0000CB   F5..         MOV       ?V0,A
   \   0000CD   6003         JZ        $+5
   \   0000CF   02....       LJMP      ??ZDOInitDeviceEx_3 & 0xFFFF
   \   0000D2                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000D2   12....       LCALL     `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   0000D5   E9           MOV       A,R1
   \   0000D6   F5..         MOV       ?V0,A
   \   0000D8   75..01       MOV       ?V4,#0x1
   \   0000DB   8E..         MOV       ?V5,R6
   \   0000DD   8E..         MOV       ?V6,R6
   \   0000DF   8E..         MOV       ?V7,R6
   \   0000E1   90....       MOV       DPTR,#_NIB + 22
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   78..         MOV       R0,#?V4
   \   0000E7   12....       LCALL     ?L_SHL
   \   0000EA   90....       MOV       DPTR,#runtimeChannel
   \   0000ED   E5..         MOV       A,?V4
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E5..         MOV       A,?V5
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   E5..         MOV       A,?V6
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E5..         MOV       A,?V7
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   02....       LJMP      ??ZDOInitDeviceEx_4 & 0xFFFF
    821                else
    822                {
    823                  // Centralized mode
    824                  uint8 tmp[Z_EXTADDR_LEN];
    825                  osal_memset(tmp,0x00,Z_EXTADDR_LEN);
   \                     ??ZDOInitDeviceEx_7:
   \   0000FF                ; Setup parameters for call to function osal_memset
   \   0000FF   7C08         MOV       R4,#0x8
   \   000101   7D00         MOV       R5,#0x0
   \   000103   7900         MOV       R1,#0x0
   \   000105   7401         MOV       A,#0x1
   \   000107   12....       LCALL     ?XSTACK_DISP101_8
   \   00010A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    826                  ZDSecMgrUpdateTCAddress(tmp);
   \   00010D                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??ZDOInitDeviceEx_8:
   \   000112   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
    827                }
    828              }
    829          
    830              // Update NIB in NV
    831              osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
   \                     ??ZDOInitDeviceEx_6:
   \   000115                ; Setup parameters for call to function osal_nv_write
   \   000115   75....       MOV       ?V4,#_NIB & 0xff
   \   000118   75....       MOV       ?V5,#(_NIB >> 8) & 0xff
   \   00011B   78..         MOV       R0,#?V4
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   75..6E       MOV       ?V4,#0x6e
   \   000123   75..00       MOV       ?V5,#0x0
   \   000126   78..         MOV       R0,#?V4
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012B   7C00         MOV       R4,#0x0
   \   00012D   7D00         MOV       R5,#0x0
   \   00012F   7A21         MOV       R2,#0x21
   \   000131   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
    832          
    833              // Reset the NV startup option to resume from NV by clearing
    834              // the "New" join option.
    835              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000137                ; Setup parameters for call to function zgWriteStartupOptions
   \   000137   7A02         MOV       R2,#0x2
   \   000139   7900         MOV       R1,#0x0
   \   00013B   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    836          
    837            }
    838          
    839            // Initialize the security for type of device
    840            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDeviceEx_5:
   \   00013E                ; Setup parameters for call to function ZDApp_SecInit
   \   00013E   A9..         MOV       R1,?V0
   \   000140   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    841          
    842            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000143   74FF         MOV       A,#-0x1
   \   000145   65..         XRL       A,?V2
   \   000147   7004         JNZ       ??ZDOInitDeviceEx_9
   \   000149   74FF         MOV       A,#-0x1
   \   00014B   65..         XRL       A,?V3
   \                     ??ZDOInitDeviceEx_9:
   \   00014D   6010         JZ        ??ZDOInitDeviceEx_10
    843            {
    844              devState = DEV_INIT;    // Remove the Hold state
   \   00014F   90....       MOV       DPTR,#devState
   \   000152   7401         MOV       A,#0x1
   \   000154   F0           MOVX      @DPTR,A
    845          
    846              // Initialize leave control logic
    847              ZDApp_LeaveCtrlInit();
   \   000155                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000155   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    848          
    849              // Trigger the network start
    850              ZDApp_NetworkInit( extendedDelay );
   \   000158                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000158   EE           MOV       A,R6
   \   000159   FA           MOV       R2,A
   \   00015A   EF           MOV       A,R7
   \   00015B   FB           MOV       R3,A
   \   00015C   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    851            }
    852          
    853            // set broadcast address mask to support broadcast filtering
    854            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDeviceEx_10:
   \   00015F                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00015F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000162   E0           MOVX      A,@DPTR
   \   000163   F9           MOV       R1,A
   \   000164   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    855          
    856            return ( networkStateNV );
   \   000167   A9..         MOV       R1,?V0
   \   000169   7409         MOV       A,#0x9
   \   00016B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016E                REQUIRE ?Subroutine2
   \   00016E                ; // Fall through to label ?Subroutine2
    857          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET
    858          
    859          /*********************************************************************
    860           * @fn      ZDApp_ReadNetworkRestoreState
    861           *
    862           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    863           *          or not to restore the network state.
    864           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    865           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    866           *
    867           * @param   none
    868           *
    869           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    870           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    871           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    872           *          ZCD_NV_STARTUP_OPTION
    873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    874          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    875          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    876            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    877          
    878            // Look for the New Network State option.
    879            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000E   5007         JNC       ??ZDApp_ReadNetworkRestoreState_0
    880            {
    881              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    882              bdb_setNodeIsOnANetwork(FALSE);
   \   000012                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000012   7900         MOV       R1,#0x0
   \   000014   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    883            }
    884          
    885            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000017   EE           MOV       A,R6
   \   000018   F9           MOV       R1,A
   \   000019   02....       LJMP      ??Subroutine49_0 & 0xFFFF
    886          }
    887          
    888          /*********************************************************************
    889           * @fn      ZDAppDetermineDeviceType()
    890           *
    891           * @brief   Determines the type of device to start.
    892           *
    893           *          Looks at zgDeviceLogicalType and determines what type of
    894           *          device to start.  The types are:
    895           *            ZG_DEVICETYPE_COORDINATOR
    896           *            ZG_DEVICETYPE_ROUTER
    897           *            ZG_DEVICETYPE_ENDDEVICE
    898           *
    899           * @param   none
    900           *
    901           * @return  none
    902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    903          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    904          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    905            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700E         JNZ       ??ZDAppDetermineDeviceType_0
    906            {
    907              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    908              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   8036         SJMP      ??ZDAppDetermineDeviceType_1
    909            }
    910            else
    911            {
    912              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   54F8         ANL       A,#0xf8
   \   00001E   F8           MOV       R0,A
   \   00001F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6401         XRL       A,#0x1
   \   000025   7004         JNZ       ??ZDAppDetermineDeviceType_2
    913                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV       A,#0x1
   \   000029   8007         SJMP      ??ZDAppDetermineDeviceType_3
    914              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   7007         JNZ       ??ZDAppDetermineDeviceType_4
    915                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV       A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL       A,R0
   \   000033   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX      @DPTR,A
    916          
    917              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    918              // The device shall do rejoin the network. Otherwise, do normal join
    919              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003E   E9           MOV       A,R1
   \   00003F   90....       MOV       DPTR,#devStartMode
   \   000042   7003         JNZ       ??ZDAppDetermineDeviceType_5
    920              {
    921                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR       A
   \   000045   8007         SJMP      ??ZDAppDetermineDeviceType_1
    922              }
    923              else
    924              {
    925                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV       A,#0x3
   \   000049   F0           MOVX      @DPTR,A
    926                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00004A   90....       MOV       DPTR,#prevDevState
   \   00004D   04           INC       A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004E   F0           MOVX      @DPTR,A
    927              }
    928            }
    929          }
   \   00004F   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    930          
    931          /*********************************************************************
    932           * @fn      ZDApp_NetworkStartEvt()
    933           *
    934           * @brief   Process the Network Start Event
    935           *
    936           * @param   none
    937           *
    938           * @return  none
    939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    941          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    942            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7045         JNZ       ??ZDApp_NetworkStartEvt_0
    943            {
    944              // Successfully started a ZigBee network
    945              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7033         JNZ       ??ZDApp_NetworkStartEvt_1
    946              {
    947                //save NIB to NV before child joins if NV_RESTORE is defined
    948                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
    949                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV       R1,#0x9
   \   000017   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    950          
    951                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
   \   00001A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6405         XRL       A,#0x5
   \   000020   700A         JNZ       ??ZDApp_NetworkStartEvt_2
    952                {
    953                  bdb_nwkFormationAttempt(TRUE);
   \   000022                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   000022   7901         MOV       R1,#0x1
   \   000024   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    954                  ZDApp_StoreNwkSecMaterial();
   \   000027                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   000027   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
   \   00002A   800C         SJMP      ??ZDApp_NetworkStartEvt_3
    955                }
    956                else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6407         XRL       A,#0x7
   \   00002F   7007         JNZ       ??ZDApp_NetworkStartEvt_3
    957                {
    958                  bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
   \   000031                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000031   7A01         MOV       R2,#0x1
   \   000033   7907         MOV       R1,#0x7
   \   000035   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    959                }
    960          
    961                if ( zgChildAgingEnable == TRUE )
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000038   90....       MOV       DPTR,#zgChildAgingEnable
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6401         XRL       A,#0x1
   \   00003E   7008         JNZ       ??CrossCallReturnLabel_121
    962                {
    963                  // Once the device has changed its state to a COORDINATOR set the timer to send
    964                  // Parent annce
    965                  ZDApp_SetParentAnnceTimer();
   \   000040                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000040   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000043   8003         SJMP      ??CrossCallReturnLabel_121
    966                }
    967              }
    968              else
    969              {
    970                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000045                ; Setup parameters for call to function osal_set_event
   \   000045   12....       LCALL     ?Subroutine16 & 0xFFFF
    971              }
    972          
    973              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??CrossCallReturnLabel_121:
   \   000048                ; Setup parameters for call to function osal_pwrmgr_device
   \   000048   7900         MOV       R1,#0x0
   \   00004A   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   00004D   8030         SJMP      ??ZDApp_NetworkStartEvt_4
    974            }
    975            else
    976            {
    977              // Try again with a higher energy threshold
    978              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00004F                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00004F   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000052   E9           MOV       A,R1
   \   000053   7900         MOV       R1,#0x0
   \   000055   2410         ADD       A,#0x10
   \   000057   5001         JNC       ??ZDApp_NetworkStartEvt_5
   \   000059   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00005A   C3           CLR       C
   \   00005B   94FF         SUBB      A,#-0x1
   \   00005D   E9           MOV       A,R1
   \   00005E   9400         SUBB      A,#0x0
   \   000060   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000062   65D0         XRL       A,PSW
   \   000064   33           RLC       A
   \   000065   5013         JNC       ??ZDApp_NetworkStartEvt_6
    979              {
    980                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000067                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000067   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00006A   E9           MOV       A,R1
   \   00006B   F8           MOV       R0,A
   \   00006C                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00006C   7410         MOV       A,#0x10
   \   00006E   29           ADD       A,R1
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    981                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000073                ; Setup parameters for call to function osal_set_event
   \   000073   7A01         MOV       R2,#0x1
   \   000075   12....       LCALL     ??Subroutine68_0 & 0xFFFF
    982              }
   \                     ??CrossCallReturnLabel_126:
   \   000078   8005         SJMP      ??ZDApp_NetworkStartEvt_4
    983              else
    984              {
    985                bdb_nwkFormationAttempt(FALSE);
   \                     ??ZDApp_NetworkStartEvt_6:
   \   00007A                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    986              }
    987            }
    988          }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   00007F   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7A10         MOV       R2,#0x10
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine69_0
   \   000002                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000008   22           RET
    989          
    990          /*********************************************************************
    991           * @fn      ZDApp_DeviceAuthEvt()
    992           *
    993           * @brief   Process the Device Authentic Event
    994           *
    995           * @param   none
    996           *
    997           * @return  none
    998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    999          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
   1000          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1001            // received authentication from trust center
   1002            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   702B         JNZ       ??ZDApp_DeviceAuthEvt_0
   1003            {
   1004              // Stop the reset timer so it doesn't reset
   1005              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
   1006          
   1007              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV       R1,#0x6
   \   000011   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1008          
   1009              // Set the Power Manager Device
   1010          #if defined ( POWER_SAVING )
   1011              osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000014                ; Setup parameters for call to function osal_pwrmgr_device
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1012          #endif
   1013          
   1014              if ( ZSTACK_ROUTER_BUILD )
   1015              {
   1016                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1017                {
   1018                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1019                  NLME_StartRouterRequest( 0, 0, false );
   1020                }
   1021              }
   1022          
   1023              // Notify to save info into NV
   1024              ZDApp_NVUpdate();
   \   000019                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000019   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1025          
   1026              // Save off the security
   1027              ZDApp_SaveNwkKey();
   \   00001C                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001C   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
   1028          
   1029              ZDApp_AnnounceNewAddress();
   \   00001F                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00001F   12....       LCALL     ?Subroutine35 & 0xFFFF
   1030          
   1031              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1032                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1033                    && (zgChildAgingEnable == TRUE) ) )
   \                     ??CrossCallReturnLabel_36:
   \   000022   5008         JNC       ??ZDApp_DeviceAuthEvt_1
   \   000024   90....       MOV       DPTR,#zgChildAgingEnable
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6401         XRL       A,#0x1
   \   00002A   700E         JNZ       ??ZDApp_DeviceAuthEvt_2
   1034              {
   1035                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00002C                ; Setup parameters for call to function NLME_SetPollRate
   \   00002C   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00002F   12....       LCALL     ?XLOAD_R2345
   \   000032   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000035   8003         SJMP      ??ZDApp_DeviceAuthEvt_2
   1036              }
   1037            }
   1038            else
   1039            {
   1040              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000037                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000037   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1041            }
   1042          }
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00003A   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   000003   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000006   E0           MOVX      A,@DPTR
   \   000007   A2E3         MOV       C,0xE0 /* A   */.3
   \   000009   22           RET
   1043          
   1044          /*********************************************************************
   1045           * @fn      ZDApp_SaveNetworkStateEvt()
   1046           *
   1047           * @brief   Process the Save the Network State Event
   1048           *
   1049           * @param   none
   1050           *
   1051           * @return  none
   1052           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1053          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
   1054          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1055          #if defined ( NV_RESTORE )
   1056           #if defined ( NV_TURN_OFF_RADIO )
   1057            // Turn off the radio's receiver during an NV update
   1058            uint8 RxOnIdle;
   1059            uint8 x = false;
   1060            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
   1061            ZMacSetReq( ZMacRxOnIdle, &x );
   1062           #endif
   1063          
   1064            // Update the Network State in NV
   1065            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
   1066                           NWK_NV_DEVICELIST_ENABLE |
   1067                           NWK_NV_BINDING_ENABLE    |
   1068                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV       R1,#0xf
   \   000006   12....       LCALL     `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
   1069          
   1070            // Reset the NV startup option to resume from NV by
   1071            // clearing the "New" join option.
   1072            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV       R2,#0x2
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1073          
   1074           #if defined ( NV_TURN_OFF_RADIO )
   1075            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1076           #endif
   1077          #endif // NV_RESTORE
   1078          }
   \   000010   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   1079          
   1080          #if defined ( NV_RESTORE )
   1081          /*********************************************************************
   1082           * @fn      ZDApp_RestoreNetworkState()
   1083           *
   1084           * @brief   This function will restore the network state of the
   1085           *          device if the network state is stored in NV.
   1086           *
   1087           * @param   none
   1088           *
   1089           * @return
   1090           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1091           *          restored.
   1092           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1093           *          This could mean that zgStartupOption said to not restore, or
   1094           *          it could mean that there was no network state to restore.
   1095           *
   1096           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1097          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1098          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1099            uint8 nvStat;
   1100          
   1101            // Initialize NWK NV items
   1102            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV       A,R1
   \   000009   FE           MOV       R6,A
   1103          
   1104            if ( nvStat == SUCCESS )
   \   00000A   7033         JNZ       ??ZDApp_RestoreNetworkState_0
   1105            {
   1106              if ( NLME_RestoreFromNV() )
   \   00000C                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000C   12....       LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   00000F   E9           MOV       A,R1
   \   000010   6024         JZ        ??ZDApp_RestoreNetworkState_1
   1107              {
   1108                // Are we a coordinator
   1109                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000012                ; Setup parameters for call to function NLME_GetShortAddr
   \   000012   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000015   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000018   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   1110                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_132:
   \   00001B   F9           MOV       R1,A
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7007         JNZ       ??ZDApp_RestoreNetworkState_2
   1111                {
   1112                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000020   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000023   E0           MOVX      A,@DPTR
   \   000024   54F8         ANL       A,#0xf8
   \   000026   F0           MOVX      @DPTR,A
   1113                }
   1114                if(ZG_DEVICE_ENDDEVICE_TYPE)
   1115                {
   1116                  devStartMode = MODE_REJOIN;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000027   90....       MOV       DPTR,#devStartMode
   \   00002A   7403         MOV       A,#0x3
   \   00002C   F0           MOVX      @DPTR,A
   1117                  _NIB.nwkState = NWK_INIT;
   \   00002D   90....       MOV       DPTR,#_NIB + 35
   \   000030   E4           CLR       A
   \   000031   12....       LCALL     ?Subroutine10 & 0xFFFF
   1118                }
   1119                else
   1120                {
   1121                  devStartMode = MODE_RESUME;
   1122                }
   1123                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1124              }
   \                     ??CrossCallReturnLabel_2:
   \   000034   8002         SJMP      ??ZDApp_RestoreNetworkState_3
   1125              else
   1126                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000036   7E09         MOV       R6,#0x9
   1127          
   1128              if ( ZG_SECURE_ENABLED )
   1129              {
   1130                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000038   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   1131          
   1132                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1133                {
   1134                  ZDApp_RestoreNwkKey( TRUE );
   1135                }
   1136              }
   1137          
   1138              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1139              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1140              // other than default.
   1141            }
   1142          
   1143            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00003F   EE           MOV       A,R6
   \   000040   7004         JNZ       ??ZDApp_RestoreNetworkState_4
   1144              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000042   7900         MOV       R1,#0x0
   \   000044   8002         SJMP      ??ZDApp_RestoreNetworkState_5
   1145            else
   1146              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_4:
   \   000046   7901         MOV       R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_5:
   \   000048   80..         SJMP      ??Subroutine49_0
   1147          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1148          #endif // NV_RESTORE
   1149          
   1150          /*********************************************************************
   1151           * @fn      ZDApp_InitUserDesc()
   1152           *
   1153           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1154           *          when needed.  If you want to initialize the User descriptor to
   1155           *          something other than all zero, do it here.
   1156           *
   1157           * @param   none
   1158           *
   1159           * @return  none
   1160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1161          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1162          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1163            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1164          
   1165            // Initialize the User Descriptor, the descriptor is read from NV
   1166            // when needed.  If you want to initialize the User descriptor to something
   1167            // other than all zero, do it here.
   1168            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   12....       LCALL     ?Subroutine30 & 0xFFFF
   1169            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1170                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_30:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV       R4,#0x11
   \   000014   7D00         MOV       R5,#0x0
   \   000016   7A81         MOV       R2,#-0x7f
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001D   7402         MOV       A,#0x2
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   E9           MOV       A,R1
   \   000023   702F         JNZ       ??ZDApp_InitUserDesc_0
   1171            {
   1172              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1173                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV       ?V0,#0x11
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A81         MOV       R2,#-0x7f
   \   00003B   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7010         JNZ       ??ZDApp_InitUserDesc_0
   1174              {
   1175                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6007         JZ        ??ZDApp_InitUserDesc_0
   1176                {
   1177                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00004D   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000050   E0           MOVX      A,@DPTR
   \   000051   D2E4         SETB      0xE0 /* A   */.4
   \   000053   F0           MOVX      @DPTR,A
   1178                }
   1179              }
   1180            }
   1181          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000054   7411         MOV       A,#0x11
   \   000056   02....       LJMP      ??Subroutine70_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine57_0
   \   000002                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   7900         MOV       R1,#0x0
   \   000004   AA..         MOV       R2,?XSP + 0
   \   000006   AB..         MOV       R3,?XSP + 1
   \   000008   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B                ; Setup parameters for call to function osal_memcmp
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine71_0
   \   000003                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1182          
   1183          /*********************************************************************
   1184           * @fn      ZDAppCheckForHoldKey()
   1185           *
   1186           * @brief   Check for key to set the device into Hold Auto Start
   1187           *
   1188           * @param   none
   1189           *
   1190           * @return  none
   1191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1192          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1193          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1194          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1195          
   1196            // Get Keypad directly to see if a HOLD is needed
   1197            zdappHoldKeys = HalKeyRead();
   1198          
   1199            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1200            // while booting to avoid starting up the device.
   1201            if ( zdappHoldKeys == SW_BYPASS_START )
   1202            {
   1203              // Change the device state to HOLD on start up
   1204              devState = DEV_HOLD;
   1205            }
   1206          #endif // HAL_KEY
   1207          }
   \   000000   02....       LJMP      ?BRET
   1208          
   1209          /*********************************************************************
   1210           * @fn      ZDApp_ProcessOSALMsg()
   1211           *
   1212           * @brief   Process the incoming task message.
   1213           *
   1214           * @param   msgPtr - message to process
   1215           *
   1216           * @return  none
   1217           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1218          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1219          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1220            // Data Confirmation message fields
   1221            uint8 sentEP;       // This should always be 0
   1222            uint8 sentStatus;
   1223            afDataConfirm_t *afDataConfirm;
   1224          
   1225          
   1226            switch ( msgPtr->event )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   14           DEC       A
   \   00000F   6032         JZ        ??ZDApp_ProcessOSALMsg_0
   \   000011   14           DEC       A
   \   000012   6067         JZ        ??ZDApp_ProcessOSALMsg_1
   \   000014   24E8         ADD       A,#-0x18
   \   000016   600A         JZ        ??ZDApp_ProcessOSALMsg_2
   \   000018   2447         ADD       A,#0x47
   \   00001A   600B         JZ        ??ZDApp_ProcessOSALMsg_3
   \   00001C   24D6         ADD       A,#-0x2a
   \   00001E   600C         JZ        ??ZDApp_ProcessOSALMsg_4
   \   000020   807F         SJMP      ??ZDApp_ProcessOSALMsg_5
   1227            {
   1228              // Incoming ZDO Message
   1229              case AF_INCOMING_MSG_CMD:
   1230                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000022                ; Setup parameters for call to function ZDP_IncomingData
   \   000022   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1231                break;
   \   000025   807D         SJMP      ??ZDApp_ProcessOSALMsg_6
   1232          
   1233              case ZDO_CB_MSG:
   1234                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000027                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000027   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1235                break;
   \   00002A   8078         SJMP      ??ZDApp_ProcessOSALMsg_6
   1236          
   1237              case AF_DATA_CONFIRM_CMD:
   1238                // This message is received as a confirmation of a data packet sent.
   1239                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1240                // The message fields are defined in AF.h
   1241                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1242                sentEP = afDataConfirm->endpoint;
   1243                sentStatus = afDataConfirm->hdr.status;
   1244          
   1245                // Action taken when confirmation is received.
   1246          #if defined ( ZIGBEE_FREQ_AGILITY )
   1247                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00002C   90....       MOV       DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00002F   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000032   6006         JZ        ??ZDApp_ProcessOSALMsg_7
   1248                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000034                ; Setup parameters for indirect call
   \   000034   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000037   12....       LCALL     ?CALL_IND
   1249          #endif
   1250          #if defined ( AT_ZDO_ACK )
   1251                AT_Cmd_ProcessDataConfirm( afDataConfirm );
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   00003A                ; Setup parameters for call to function AT_Cmd_ProcessDataConfirm
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??AT_Cmd_ProcessDataConfirm::?relay`; Banked call to: AT_Cmd_ProcessDataConfirm
   1252          #endif
   1253                (void)sentEP;
   1254                (void)sentStatus;
   1255                break;
   \   000041   8061         SJMP      ??ZDApp_ProcessOSALMsg_6
   1256          
   1257              case ZDO_NWK_DISC_CNF:
   1258                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000043   90....       MOV       DPTR,#devState
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6402         XRL       A,#0x2
   \   000049   7059         JNZ       ??ZDApp_ProcessOSALMsg_6
   1259                {
   1260                  break;
   1261                }
   1262                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   00004B   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   6401         XRL       A,#0x1
   \   000051   6005         JZ        ??ZDApp_ProcessOSALMsg_8
   \   000053   E0           MOVX      A,@DPTR
   \   000054   6402         XRL       A,#0x2
   \   000056   704C         JNZ       ??ZDApp_ProcessOSALMsg_6
   1263                {
   1264                  //Rejoin or resume
   1265                  if(bdb_isDeviceNonFactoryNew())
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000058                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000058   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   00005B   E9           MOV       A,R1
   \   00005C   600B         JZ        ??ZDApp_ProcessOSALMsg_9
   1266                  {
   1267                    if(bdb_rejoinNwk() == ZSuccess)
   \   00005E                ; Setup parameters for call to function bdb_rejoinNwk
   \   00005E   12....       LCALL     `??bdb_rejoinNwk::?relay`; Banked call to: bdb_rejoinNwk
   \   000061   E9           MOV       A,R1
   \   000062   6040         JZ        ??ZDApp_ProcessOSALMsg_6
   1268                    {
   1269                      return;
   1270                    }
   1271          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1272                    else
   1273                    {
   1274                      if(ZG_DEVICE_ENDDEVICE_TYPE)
   1275                      {
   1276                        bdb_parentLost();
   \   000064                ; Setup parameters for call to function bdb_parentLost
   \   000064   12....       LCALL     `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
   1277                        return;
   \   000067   803B         SJMP      ??ZDApp_ProcessOSALMsg_6
   1278                      }
   1279                    }
   1280          #endif
   1281                  }
   1282          
   1283                  if(nwk_getNwkDescList())
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000069                ; Setup parameters for call to function nwk_getNwkDescList
   \   000069   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00006C   EA           MOV       A,R2
   \   00006D   4B           ORL       A,R3
   \   00006E   6004         JZ        ??ZDApp_ProcessOSALMsg_10
   1284                  {
   1285                    bdb_nwkDiscoveryAttempt(TRUE);
   \   000070                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000070   7901         MOV       R1,#0x1
   \   000072   8002         SJMP      ??ZDApp_ProcessOSALMsg_11
   1286                  }
   1287                  else
   1288                  {
   1289                    bdb_nwkDiscoveryAttempt(FALSE);
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   000074                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000074   7900         MOV       R1,#0x0
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   000076   12....       LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
   \   000079   8029         SJMP      ??ZDApp_ProcessOSALMsg_6
   1290                  }
   1291                }
   1292              break;
   1293          
   1294              case ZDO_NWK_JOIN_IND:
   1295                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00007B   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   6401         XRL       A,#0x1
   \   000081   6005         JZ        ??ZDApp_ProcessOSALMsg_12
   \   000083   E0           MOVX      A,@DPTR
   \   000084   6402         XRL       A,#0x2
   \   000086   701C         JNZ       ??ZDApp_ProcessOSALMsg_6
   1296                {
   1297                  if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000088   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   6407         XRL       A,#0x7
   \   00008E   6005         JZ        ??ZDApp_ProcessOSALMsg_13
   \   000090   E0           MOVX      A,@DPTR
   \   000091   6408         XRL       A,#0x8
   \   000093   7007         JNZ       ??ZDApp_ProcessOSALMsg_14
   1298                  {
   1299                    bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   000095                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000095   7A01         MOV       R2,#0x1
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F9           MOV       R1,A
   \   000099   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1300                  }
   1301                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00009C                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00009C   12....       LCALL     `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   00009F   8003         SJMP      ??ZDApp_ProcessOSALMsg_6
   1302                }
   1303                break;
   1304          
   1305              default:
   1306                if ( ZG_SECURE_ENABLED )
   1307                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0000A1                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   0000A1   12....       LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1308                break;
   1309            }
   1310          
   1311          }
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   0000A4   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
   1312          
   1313          /*********************************************************************
   1314           * @fn      ZDApp_ProcessMsgCBs()
   1315           *
   1316           * @brief   Process response messages
   1317           *
   1318           * @param   none
   1319           *
   1320           * @return  none
   1321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1322          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine36 & 0xFFFF
   1324            switch ( inMsg->clusterID )
   \                     ??CrossCallReturnLabel_38:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V1,A
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000019   0200         DW        2
   \   00001B   2100         DW        33
   \   00001D   2200         DW        34
   \   00001F   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000021   0080         DW        32768
   \   000023   0180         DW        32769
   \   000025   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000027   0000         DW        0
   \   000029   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1325            {
   1326          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1327              case NWK_addr_rsp:
   1328              case IEEE_addr_rsp:
   1329                {
   1330                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1331          
   1332                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002B                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002B   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   \   000032   AF..         MOV       R7,?V1
   1333                  if ( pAddrRsp )
   \   000034   EA           MOV       A,R2
   \   000035   4F           ORL       A,R7
   \   000036   6030         JZ        ??ZDApp_ProcessMsgCBs_2
   1334                  {
   1335                    if ( pAddrRsp->status == ZSuccess )
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   700E         JNZ       ??ZDApp_ProcessMsgCBs_3
   1336                    {
   1337                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00003F                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00003F   EA           MOV       A,R2
   \   000040   2403         ADD       A,#0x3
   \   000042   FC           MOV       R4,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FD           MOV       R5,A
   \   000046   A3           INC       DPTR
   \   000047   12....       LCALL     ?Subroutine21 & 0xFFFF
   1338                    }
   \                     ??CrossCallReturnLabel_20:
   \   00004A   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1339          
   1340          #if defined ( ZDP_BIND_VALIDATION )
   1341                    // look for pending bind entry for NWK_addr_rsp Only
   1342                    if ( inMsg->clusterID == NWK_addr_rsp )
   1343                    {
   1344          #if defined ( REFLECTOR )
   1345                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   1346          #endif
   1347                    }
   1348          #endif
   1349          
   1350                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00004D                ; Setup parameters for call to function osal_mem_free
   \   00004D   AA..         MOV       R2,?V0
   \   00004F   EF           MOV       A,R7
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000054   8012         SJMP      ??ZDApp_ProcessMsgCBs_2
   1351                  }
   1352                }
   1353                break;
   1354          #endif
   1355          
   1356          #if defined ( REFLECTOR )
   1357              case Bind_req:
   1358              case Unbind_req:
   1359                {
   1360                  ZDO_BindUnbindReq_t bindReq;
   1361                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000056                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000056   AC..         MOV       R4,?XSP + 0
   \   000058   AD..         MOV       R5,?XSP + 1
   \   00005A   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1362                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00005D                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00005D   AC..         MOV       R4,?XSP + 0
   \   00005F   AD..         MOV       R5,?XSP + 1
   \   000061   EE           MOV       A,R6
   \   000062   FA           MOV       R2,A
   \   000063   EF           MOV       A,R7
   \   000064   FB           MOV       R3,A
   \   000065   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1363                }
   1364                break;
   1365          #endif
   1366          
   1367          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1368              case Bind_rsp:
   1369              case Unbind_rsp:
   1370                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1371                {
   1372                  ZDMatchSendState(
   1373                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1374                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1375                }
   1376                break;
   1377          
   1378              case End_Device_Bind_req:
   1379          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1380                if (ZG_DEVICE_COORDINATOR_TYPE)
   1381                {
   1382                  ZDEndDeviceBind_t bindReq;
   1383                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1384                  ZDO_MatchEndDeviceBind( &bindReq );
   1385          
   1386                  // Freeing the cluster lists - if allocated.
   1387                  if ( bindReq.numInClusters )
   1388                    osal_mem_free( bindReq.inClusters );
   1389                  if ( bindReq.numOutClusters )
   1390                    osal_mem_free( bindReq.outClusters );
   1391                }
   1392          #endif
   1393                break;
   1394          #endif
   1395            }
   1396          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000068                REQUIRE ?Subroutine7
   \   000068                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7415         MOV       A,#0x15
   \   000002   02....       LJMP      ??Subroutine70_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EA           MOV       A,R2
   \   000005   240C         ADD       A,#0xc
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3F           ADDC      A,R7
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET
   1397          
   1398          /*********************************************************************
   1399           * @fn      ZDApp_RegisterCBs()
   1400           *
   1401           * @brief   Process response messages
   1402           *
   1403           * @param   none
   1404           *
   1405           * @return  none
   1406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1407          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1408          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1409          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1410            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   12....       LCALL     ?Subroutine24 & 0xFFFF
   1411          #endif
   1412          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1413            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_61:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   12....       LCALL     ?Subroutine24 & 0xFFFF
   1414          #endif
   1415          #if ZG_BUILD_COORDINATOR_TYPE
   1416            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1417            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1418          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1419            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1420          #endif
   1421          #endif
   1422          #if defined ( REFLECTOR )
   1423            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_62:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV       R2,#0x21
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   1424            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_63:
   \   000015                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000015   7A22         MOV       R2,#0x22
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   1425          #endif
   1426          }
   \                     ??CrossCallReturnLabel_64:
   \   00001C   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7B80         MOV       R3,#-0x80
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000008   22           RET
   1427          
   1428          /*********************************************************************
   1429           * @fn      ZDApp_ProcessSecMsg()
   1430           *
   1431           * @brief   Process the incoming security message.
   1432           *
   1433           * @param   msgPtr - message to process
   1434           *
   1435           * @return  none
   1436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1437          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1438          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1439            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   24FC         ADD       A,#-0x4
   \   00000B   6006         JZ        ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD       A,#-0x4
   \   00000F   6014         JZ        ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP      ??ZDApp_ProcessSecMsg_2
   1440            {
   1441              case ZDO_TRANSPORT_KEY_IND:
   1442                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6401         XRL       A,#0x1
   \   000019   6005         JZ        ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6402         XRL       A,#0x2
   \   00001E   7015         JNZ       ??ZDApp_ProcessSecMsg_2
   1443                {
   1444                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL     `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP      ??ZDApp_ProcessSecMsg_2
   1445                }
   1446                break;
   1447          
   1448              case ZDO_UPDATE_DEVICE_IND:
   1449                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1450                {
   1451                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1452          
   1453                  // Look at GP proxy table for posible conflict with GPD alias NwkAddr
   1454          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   1455                  ZDO_DeviceAnnce_t devAnnce;
   1456                  uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
   1457          
   1458                  osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
   1459                  devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
   1460          
   1461                  // Check GP proxy table to update the entry if necesary
   1462                  if( osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN ) )
   1463                  {
   1464                    if( osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT ) )
   1465                    {
   1466                      if ( osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) ) )
   1467                      {
   1468                        osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   1469                      }
   1470                    }
   1471                  }
   1472                  else
   1473                  {
   1474                    if(GP_CheckAnnouncedDeviceGCB != NULL)
   1475                    {
   1476                      GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );
   1477                    }
   1478                  }
   1479          #endif
   1480                }
   1481                break;
   1482          
   1483              case ZDO_REMOVE_DEVICE_IND:
   1484                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1485                {
   1486                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1487                }
   1488                break;
   1489          
   1490              case ZDO_REQUEST_KEY_IND:
   1491                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1492                {
   1493                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1494                  {
   1495                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1496                  }
   1497                }
   1498                break;
   1499              case ZDO_VERIFY_KEY_IND:
   1500          #if (ZG_BUILD_COORDINATOR_TYPE)
   1501                if(ZG_DEVICE_COORDINATOR_TYPE)
   1502                {
   1503                  if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
   1504                  {
   1505                    bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
   1506                  }
   1507                }
   1508          
   1509                ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
   1510          #endif
   1511                break;
   1512          
   1513              case ZDO_SWITCH_KEY_IND:
   1514                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6401         XRL       A,#0x1
   \   00002B   6005         JZ        ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6402         XRL       A,#0x2
   \   000030   7003         JNZ       ??ZDApp_ProcessSecMsg_2
   1515                {
   1516                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL     `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1517                }
   1518                break;
   1519          
   1520              default:
   1521                // Unsupported messages
   1522                break;
   1523            }
   1524          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   1525          
   1526          /*********************************************************************
   1527           * @fn      ZDApp_ProcessNetworkJoin()
   1528           *
   1529           * @brief
   1530           *
   1531           *   Save off the Network key information.
   1532           *
   1533           * @param   none
   1534           *
   1535           * @return  none
   1536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1537          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1538          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1539            if ( (devState == DEV_NWK_JOINING) ||
   1540                ((devState == DEV_NWK_ORPHAN)  &&
   1541                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   000005   90....       MOV       DPTR,#devState
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6403         XRL       A,#0x3
   \   00000B   600F         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   640A         XRL       A,#0xa
   \   000010   7058         JNZ       ??ZDApp_ProcessNetworkJoin_1
   \   000012   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5407         ANL       A,#0x7
   \   000018   6401         XRL       A,#0x1
   \   00001A   7065         JNZ       ??ZDApp_ProcessNetworkJoin_2
   1542            {
   1543              // Result of a Join attempt by this device.
   1544              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00001C   90....       MOV       DPTR,#nwkStatus
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   7040         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1545              {
   1546                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000022                ; Setup parameters for call to function osal_set_event
   \   000022   12....       LCALL     ?Subroutine16 & 0xFFFF
   1547          
   1548          #if defined ( POWER_SAVING )
   1549                osal_pwrmgr_device( PWRMGR_BATTERY );
   \                     ??CrossCallReturnLabel_122:
   \   000025                ; Setup parameters for call to function osal_pwrmgr_device
   \   000025   7901         MOV       R1,#0x1
   \   000027   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1550          #endif
   1551          
   1552                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   00002A                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00002A   7901         MOV       R1,#0x1
   \   00002C   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00002F   E9           MOV       A,R1
   \   000030   7009         JNZ       ??ZDApp_ProcessNetworkJoin_4
   1553                {
   1554                  // wait for auth from trust center
   1555                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   000032                ; Setup parameters for call to function ZDApp_ChangeState
   \   000032   7905         MOV       R1,#0x5
   \   000034   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1556          
   1557                  bdb_nwkAssocAttemt(TRUE);
   \   000037                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000037   7901         MOV       R1,#0x1
   \   000039   8029         SJMP      ??ZDApp_ProcessNetworkJoin_5
   1558                }
   1559                else
   1560                {
   1561                  if ( ZSTACK_ROUTER_BUILD )
   1562                  {
   1563                    if ( devState == DEV_NWK_ORPHAN
   1564                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1565                    {
   1566                      // Change NIB state to router for restore
   1567                      _NIB.nwkState = NWK_ROUTER;
   1568                    }
   1569                  }
   1570          
   1571                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00003B   90....       MOV       DPTR,#devState
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6403         XRL       A,#0x3
   \   000041   7017         JNZ       ??ZDApp_ProcessNetworkJoin_6
   1572                  {
   1573                    ZDApp_AnnounceNewAddress();
   \   000043                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000043   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1574                    if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \   000046   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   6402         XRL       A,#0x2
   \   00004C   700C         JNZ       ??ZDApp_ProcessNetworkJoin_6
   1575                    {
   1576                      bdb_setNodeIsOnANetwork(TRUE);
   \   00004E                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00004E   7901         MOV       R1,#0x1
   \   000050   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1577                      bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000053                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000053   7A01         MOV       R2,#0x1
   \   000055   7902         MOV       R1,#0x2
   \   000057   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1578                    }
   1579                  }
   1580          
   1581                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005A                ; Setup parameters for call to function ZDApp_ChangeState
   \   00005A   7906         MOV       R1,#0x6
   \   00005C   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1582          
   1583                  if ( ZSTACK_ROUTER_BUILD )
   \   00005F   02....       LJMP      ??CrossCallReturnLabel_123 & 0xFFFF
   1584                  {
   1585                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1586                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1587                    {
   1588                      NLME_StartRouterRequest( 0, 0, false );
   1589                    }
   1590                  }
   1591                }
   1592              }
   1593              else
   1594              {
   1595          
   1596                bdb_nwkAssocAttemt(FALSE);
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000062                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000062   7900         MOV       R1,#0x0
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000064   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000067   02....       LJMP      ??CrossCallReturnLabel_123 & 0xFFFF
   1597              }
   1598            }
   1599            else if ( devState == DEV_NWK_ORPHAN ||
   1600                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1601                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1602                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1603                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   6404         XRL       A,#0x4
   \   00006D   6012         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   640E         XRL       A,#0xe
   \   000072   600D         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000074   E0           MOVX      A,@DPTR
   \   000075   640F         XRL       A,#0xf
   \   000077   6008         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   640D         XRL       A,#0xd
   \   00007C   6003         JZ        $+5
   \   00007E   02....       LJMP      ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1604            {
   1605              // results of an orphaning attempt by this device
   1606              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000081   90....       MOV       DPTR,#nwkStatus
   \   000084   E0           MOVX      A,@DPTR
   \   000085   707B         JNZ       ??ZDApp_ProcessNetworkJoin_8
   1607              {
   1608                //When the device has successfully rejoined then reset retryCnt
   1609                retryCnt = 0;
   \   000087   90....       MOV       DPTR,#retryCnt
   \   00008A   E4           CLR       A
   \   00008B   F0           MOVX      @DPTR,A
   1610          
   1611                // Verify NWK key is available before sending Device_annce
   1612                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   00008C                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00008C   7901         MOV       R1,#0x1
   \   00008E   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000091   E9           MOV       A,R1
   \   000092   700F         JNZ       ??ZDApp_ProcessNetworkJoin_9
   1613                {
   1614                  // wait for auth from trust center
   1615                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   000094                ; Setup parameters for call to function ZDApp_ChangeState
   \   000094   7905         MOV       R1,#0x5
   \   000096   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1616          
   1617                  // Start the reset timer for MAX UNAUTH time
   1618                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000099                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000099   7A10         MOV       R2,#0x10
   \   00009B   7B27         MOV       R3,#0x27
   \   00009D   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   0000A0   02....       LJMP      ??CrossCallReturnLabel_123 & 0xFFFF
   1619                }
   1620                else
   1621                {
   1622                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   0000A3                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A3   7906         MOV       R1,#0x6
   \   0000A5   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1623          
   1624                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   0000A8                ; Setup parameters for call to function osal_stop_timerEx
   \   0000A8   7A00         MOV       R2,#0x0
   \   0000AA   7B20         MOV       R3,#0x20
   \   0000AC   12....       LCALL     ?Subroutine27 & 0xFFFF
   1625          
   1626                  // setup Power Manager Device
   1627          #if defined ( POWER_SAVING )
   1628                  osal_pwrmgr_device( PWRMGR_BATTERY );
   \                     ??CrossCallReturnLabel_65:
   \   0000AF                ; Setup parameters for call to function osal_pwrmgr_device
   \   0000AF   7901         MOV       R1,#0x1
   \   0000B1   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1629          #endif
   1630          
   1631                  // The receiver is on, turn network layer polling off.
   1632                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   0000B4   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000BA   501D         JNC       ??ZDApp_ProcessNetworkJoin_10
   1633                  {
   1634                    // if Child Table Management process is not enabled
   1635                    if ( zgChildAgingEnable == FALSE )
   \   0000BC   90....       MOV       DPTR,#zgChildAgingEnable
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   7017         JNZ       ??ZDApp_ProcessNetworkJoin_10
   1636                    {
   1637                      NLME_SetPollRate( 0 );
   \   0000C2                ; Setup parameters for call to function NLME_SetPollRate
   \   0000C2   90....       MOV       DPTR,#__Constant_0
   \   0000C5   12....       LCALL     ?XLOAD_R2345
   \   0000C8   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1638                      NLME_SetQueuedPollRate( 0 );
   \   0000CB                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000CB   7A00         MOV       R2,#0x0
   \   0000CD   7B00         MOV       R3,#0x0
   \   0000CF   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1639                      NLME_SetResponseRate( 0 );
   \   0000D2                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000D2   7A00         MOV       R2,#0x0
   \   0000D4   7B00         MOV       R3,#0x0
   \   0000D6   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1640                    }
   1641                  }
   1642          
   1643                  if ( ZSTACK_ROUTER_BUILD )
   1644                  {
   1645                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1646                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1647                    {
   1648                      NLME_StartRouterRequest( 0, 0, false );
   1649                    }
   1650                  }
   1651          
   1652                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000D9                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0000D9   12....       LCALL     ?Subroutine35 & 0xFFFF
   1653          
   1654                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1655                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1656                        && (zgChildAgingEnable == TRUE) ) )
   \                     ??CrossCallReturnLabel_37:
   \   0000DC   500B         JNC       ??ZDApp_ProcessNetworkJoin_11
   \   0000DE   90....       MOV       DPTR,#zgChildAgingEnable
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   6401         XRL       A,#0x1
   \   0000E4   6003         JZ        $+5
   \   0000E6   02....       LJMP      ??CrossCallReturnLabel_123 & 0xFFFF
   1657                  {
   1658                    if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000E9   90....       MOV       DPTR,#devStartMode
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   6403         XRL       A,#0x3
   \   0000EF   7005         JNZ       ??ZDApp_ProcessNetworkJoin_12
   1659                    {
   1660                      NLME_SetPollRate( POLL_RATE );
   \   0000F1                ; Setup parameters for call to function NLME_SetPollRate
   \   0000F1   90....       MOV       DPTR,#__Constant_12c
   \   0000F4   8003         SJMP      ??ZDApp_ProcessNetworkJoin_13
   1661                    }
   1662                    else
   1663                    {
   1664                      NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000F6                ; Setup parameters for call to function NLME_SetPollRate
   \   0000F6   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000F9   12....       LCALL     ?XLOAD_R2345
   \   0000FC   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   0000FF   02....       LJMP      ??CrossCallReturnLabel_123 & 0xFFFF
   1665                    }
   1666                  }
   1667                }
   1668              }
   1669              else
   1670              {
   1671                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000102   90....       MOV       DPTR,#devStartMode
   \   000105   E0           MOVX      A,@DPTR
   \   000106   6401         XRL       A,#0x1
   \   000108   7038         JNZ       ??ZDApp_ProcessNetworkJoin_14
   1672                {
   1673                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   00010A   90....       MOV       DPTR,#retryCnt
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   04           INC       A
   \   00010F   F0           MOVX      @DPTR,A
   \   000110   C3           CLR       C
   \   000111   9404         SUBB      A,#0x4
   \   000113   501F         JNC       ??ZDApp_ProcessNetworkJoin_15
   1674                  {
   1675                    if ( _NIB.nwkPanId == 0xFFFF )
   \   000115   90....       MOV       DPTR,#_NIB + 33
   \   000118   E0           MOVX      A,@DPTR
   \   000119   F4           CPL       A
   \   00011A   7003         JNZ       ??ZDApp_ProcessNetworkJoin_16
   \   00011C   A3           INC       DPTR
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00011F   601B         JZ        ??ZDApp_ProcessNetworkJoin_17
   1676                      devStartMode = MODE_JOIN;
   1677                    else
   1678                    {
   1679                      devStartMode = MODE_REJOIN;
   \   000121   90....       MOV       DPTR,#devStartMode
   \   000124   7403         MOV       A,#0x3
   \   000126   F0           MOVX      @DPTR,A
   1680                      _tmpRejoinState = true;
   \   000127   90....       MOV       DPTR,#_tmpRejoinState
   \   00012A   7401         MOV       A,#0x1
   \   00012C   F0           MOVX      @DPTR,A
   1681                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00012D   90....       MOV       DPTR,#prevDevState
   \   000130   7404         MOV       A,#0x4
   \   000132   8068         SJMP      ??ZDApp_ProcessNetworkJoin_18
   1682                    }
   1683                  }
   1684                  // Do a normal join to the network after certain times of rejoin retries
   1685                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   000134   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   000137   E0           MOVX      A,@DPTR
   \   000138   6401         XRL       A,#0x1
   \   00013A   7061         JNZ       ??ZDApp_ProcessNetworkJoin_19
   1686                  {
   1687                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   00013C   90....       MOV       DPTR,#devStartMode
   \   00013F   E4           CLR       A
   \   000140   805A         SJMP      ??ZDApp_ProcessNetworkJoin_18
   1688                  }
   1689                }
   1690                else if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   000142   E0           MOVX      A,@DPTR
   \   000143   6403         XRL       A,#0x3
   \   000145   7056         JNZ       ??ZDApp_ProcessNetworkJoin_19
   1691                {
   1692                  if ( ZSTACK_END_DEVICE_BUILD )
   1693                  {
   1694                    devStartMode = MODE_REJOIN;
   1695                    _tmpRejoinState = true;
   \   000147   90....       MOV       DPTR,#_tmpRejoinState
   \   00014A   7401         MOV       A,#0x1
   \   00014C   F0           MOVX      @DPTR,A
   1696                    _NIB.nwkState = NWK_INIT;
   \   00014D   90....       MOV       DPTR,#_NIB + 35
   \   000150   E4           CLR       A
   \   000151   F0           MOVX      @DPTR,A
   1697          
   1698                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   000152   90....       MOV       DPTR,#prevDevState
   \   000155   E0           MOVX      A,@DPTR
   \   000156   6404         XRL       A,#0x4
   \   000158   7007         JNZ       ??ZDApp_ProcessNetworkJoin_20
   1699                    {
   1700                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   00015A   12....       LCALL     ?Subroutine9 & 0xFFFF
   1701                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1702                    }
   \                     ??CrossCallReturnLabel_0:
   \   00015D   740D         MOV       A,#0xd
   \   00015F   803B         SJMP      ??ZDApp_ProcessNetworkJoin_18
   1703                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000161   E0           MOVX      A,@DPTR
   \   000162   640D         XRL       A,#0xd
   \   000164   702C         JNZ       ??ZDApp_ProcessNetworkJoin_21
   1704                    {
   1705                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1706                      _NIB.nwkKeyLoaded = FALSE;
   \   000166   90....       MOV       DPTR,#_NIB + 61
   \   000169   E4           CLR       A
   \   00016A   F0           MOVX      @DPTR,A
   1707                      ZDApp_ResetNwkKey(); // Clear up the old network key.
   \   00016B                ; Setup parameters for call to function ZDApp_ResetNwkKey
   \   00016B   12....       LCALL     `??ZDApp_ResetNwkKey::?relay`; Banked call to: ZDApp_ResetNwkKey
   1708                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   00016E   75..01       MOV       ?V0,#0x1
   \   000171   75..00       MOV       ?V1,#0x0
   \   000174   75..00       MOV       ?V2,#0x0
   \   000177   75..00       MOV       ?V3,#0x0
   \   00017A   90....       MOV       DPTR,#_NIB + 22
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   78..         MOV       R0,#?V0
   \   000180   12....       LCALL     ?L_SHL
   \   000183   90....       MOV       DPTR,#runtimeChannel
   \   000186   78..         MOV       R0,#?V0
   \   000188   12....       LCALL     ?L_MOV_TO_X
   1709                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   \   00018B   90....       MOV       DPTR,#prevDevState
   \   00018E   740E         MOV       A,#0xe
   \   000190   800A         SJMP      ??ZDApp_ProcessNetworkJoin_18
   1710                    }
   1711                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000192   E0           MOVX      A,@DPTR
   \   000193   640E         XRL       A,#0xe
   \   000195   7006         JNZ       ??ZDApp_ProcessNetworkJoin_19
   1712                    {
   1713                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   000197   12....       LCALL     ?Subroutine9 & 0xFFFF
   1714                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1715                    }
   1716          
   1717                  }
   1718                }
   \                     ??CrossCallReturnLabel_1:
   \   00019A   740F         MOV       A,#0xf
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00019C   F0           MOVX      @DPTR,A
   1719          
   1720                // Clear the neighbor Table and network discovery tables.
   1721                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00019D                ; Setup parameters for call to function nwkNeighborInitTable
   \   00019D   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1722                NLME_NwkDiscTerm();
   \   0001A0                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001A0   12....       LCALL     ?Subroutine31 & 0xFFFF
   1723          
   1724                // setup a retry for later...
   1725                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1726                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   1727              }
   1728            }
   \                     ??CrossCallReturnLabel_32:
   \   0001A3   8009         SJMP      ??CrossCallReturnLabel_123
   1729          #if defined ( ZIGBEEPRO )
   1730            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0001A5   E0           MOVX      A,@DPTR
   \   0001A6   6006         JZ        ??CrossCallReturnLabel_123
   1731            {
   1732              // Assume from address conflict
   1733          
   1734              // Notify the network
   1735              ZDApp_AnnounceNewAddress();
   \   0001A8                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001A8   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1736          
   1737              // Notify apps
   1738              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001AB                ; Setup parameters for call to function osal_set_event
   \   0001AB   12....       LCALL     ?Subroutine16 & 0xFFFF
   1739            }
   1740          #endif
   1741          }
   \                     ??CrossCallReturnLabel_123:
   \   0001AE   80..         SJMP      ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV       DPTR,#runtimeChannel
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   74F8         MOV       A,#-0x8
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74FF         MOV       A,#-0x1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   7407         MOV       A,#0x7
   \   000010   F0           MOVX      @DPTR,A
   \   000011   90....       MOV       DPTR,#prevDevState
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   \   000003                ; Setup parameters for call to function osal_rand
   \   000003                ; Setup parameters for call to function osal_rand
   \   000003   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000006                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000006                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000006   EA           MOV       A,R2
   \   000007   547F         ANL       A,#0x7f
   \   000009   2464         ADD       A,#0x64
   \   00000B   FA           MOV       R2,A
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000011   22           RET
   1742          
   1743          /******************************************************************************
   1744           * @fn          ZDApp_StoreNwkSecMaterial
   1745           *
   1746           * @brief       Stores new entries in the NwkSecMaterial
   1747           *
   1748           * @param       none
   1749           *
   1750           * @return      none
   1751           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1752          void ZDApp_StoreNwkSecMaterial(void)
   \                     ZDApp_StoreNwkSecMaterial:
   1753          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1754            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1755            uint8 i;
   1756            uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
   1757          
   1758            //Search if we do have security material for this network
   1759            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   75....       MOV       ?V0,#(_NIB + 53) & 0xff
   \   00000F   75....       MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
   \   000012   8E..         MOV       ?V2,R6
   \   000014   8001         SJMP      ??ZDApp_StoreNwkSecMaterial_0
   \                     ??ZDApp_StoreNwkSecMaterial_1:
   \   000016   0E           INC       R6
   \                     ??ZDApp_StoreNwkSecMaterial_0:
   \   000017   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00001A   E4           CLR       A
   \   00001B   93           MOVC      A,@A+DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   EE           MOV       A,R6
   \   00001E   C3           CLR       C
   \   00001F   98           SUBB      A,R0
   \   000020   4003         JC        $+5
   \   000022   02....       LJMP      ??ZDApp_StoreNwkSecMaterial_2 & 0xFFFF
   1760            {
   1761              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V4,R0
   \   00002B   89..         MOV       ?V5,R1
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..0C       MOV       ?V4,#0xc
   \   000035   75..00       MOV       ?V5,#0x0
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   EE           MOV       A,R6
   \   000042   2475         ADD       A,#0x75
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   3400         ADDC      A,#0x0
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   1762              {
   1763                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V4,R1
   \   00005A   8A..         MOV       ?V5,R2
   \   00005C   75..00       MOV       ?V6,#0x0
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C08         MOV       R4,#0x8
   \   000066   7D00         MOV       R5,#0x0
   \   000068   A9..         MOV       R1,?V0
   \   00006A   AA..         MOV       R2,?V1
   \   00006C   AB..         MOV       R3,?V2
   \   00006E   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   E9           MOV       A,R1
   \   000075   705F         JNZ       ??ZDApp_StoreNwkSecMaterial_2
   1764                {
   1765                  break;
   1766                }
   1767                if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
   \   000077                ; Setup parameters for call to function osal_isbufset
   \   000077   7C08         MOV       R4,#0x8
   \   000079   7900         MOV       R1,#0x0
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   AA82         MOV       R2,DPL
   \   000082   AB83         MOV       R3,DPH
   \   000084   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000087   E9           MOV       A,R1
   \   000088   608C         JZ        ??ZDApp_StoreNwkSecMaterial_1
   1768                {
   1769                  emptyEntryIndexOffset = i;
   \   00008A   EE           MOV       A,R6
   \   00008B   FF           MOV       R7,A
   1770                  break;
   1771                }
   1772              }
   1773            }
   1774          
   1775            //ExtPanID not found and found an empty entry, save the extended PANID
   1776            if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
   1777            {
   1778              osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000091   7C08         MOV       R4,#0x8
   \   000093   7D00         MOV       R5,#0x0
   \   000095   7407         MOV       A,#0x7
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   AA82         MOV       R2,DPL
   \   00009C   AB83         MOV       R3,DPH
   \   00009E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A1   7403         MOV       A,#0x3
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   1779              nwkSecMaterialDesc.FrameCounter = 0;
   \   0000A6   85..82       MOV       DPL,?XSP + 0
   \   0000A9   85..83       MOV       DPH,?XSP + 1
   \   0000AC   E4           CLR       A
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   A3           INC       DPTR
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   12....       LCALL     ?Subroutine11 & 0xFFFF
   1780              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   1781            }
   \                     ??CrossCallReturnLabel_4:
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   75..0C       MOV       ?V0,#0xc
   \   0000BC   75..00       MOV       ?V1,#0x0
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C4   7C00         MOV       R4,#0x0
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   EF           MOV       A,R7
   \   0000C9   2475         ADD       A,#0x75
   \   0000CB   FA           MOV       R2,A
   \   0000CC   E4           CLR       A
   \   0000CD   3400         ADDC      A,#0x0
   \   0000CF   FB           MOV       R3,A
   \   0000D0   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   1782          
   1783          }
   \                     ??ZDApp_StoreNwkSecMaterial_2:
   \   0000D6   02....       LJMP      ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   740C         MOV       A,#0xc
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
   1784          
   1785          
   1786          /*********************************************************************
   1787           * @fn      ZDApp_SaveNwkKey()
   1788           *
   1789           * @brief   Save off the Network key information.
   1790           *
   1791           * @param   none
   1792           *
   1793           * @return  none
   1794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A82         MOV       R2,#-0x7e
   \   000006                REQUIRE ??Subroutine46_0
   \   000006                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1795          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1796          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1797            nwkActiveKeyItems keyItems;
   1798            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1799            uint8 found = 0;
   1800            uint8 i;
   1801          
   1802            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   740C         MOV       A,#0xc
   \   00000C   12....       LCALL     ?XSTACK_DISP101_8
   \   00000F   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1803          
   1804            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1805                          (void *)&keyItems );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   740C         MOV       A,#0xc
   \   000014   12....       LCALL     ?XSTACK_DISP100_8
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..15       MOV       ?V0,#0x15
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   1806          
   1807            //Search for the security material to update its framecounter
   1808            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   000031   75..00       MOV       ?V0,#0x0
   \   000034   8002         SJMP      ??ZDApp_SaveNwkKey_0
   \                     ??ZDApp_SaveNwkKey_1:
   \   000036   05..         INC       ?V0
   \                     ??ZDApp_SaveNwkKey_0:
   \   000038   AE..         MOV       R6,?V0
   \   00003A   7F00         MOV       R7,#0x0
   \   00003C   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00003F   E4           CLR       A
   \   000040   93           MOVC      A,@A+DPTR
   \   000041   F8           MOV       R0,A
   \   000042   EE           MOV       A,R6
   \   000043   C3           CLR       C
   \   000044   98           SUBB      A,R0
   \   000045   507D         JNC       ??ZDApp_SaveNwkKey_2
   1809            {
   1810              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000047   EE           MOV       A,R6
   \   000048   2475         ADD       A,#0x75
   \   00004A   FE           MOV       R6,A
   \   00004B   5001         JNC       ??ZDApp_SaveNwkKey_3
   \   00004D   0F           INC       R7
   \                     ??ZDApp_SaveNwkKey_3:
   \   00004E                ; Setup parameters for call to function osal_nv_read
   \   00004E   A8..         MOV       R0,?XSP + 0
   \   000050   A9..         MOV       R1,?XSP + 1
   \   000052   88..         MOV       ?V2,R0
   \   000054   89..         MOV       ?V3,R1
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75..0C       MOV       ?V2,#0xc
   \   00005E   75..00       MOV       ?V3,#0x0
   \   000061   78..         MOV       R0,#?V2
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7C00         MOV       R4,#0x0
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   EE           MOV       A,R6
   \   00006B   FA           MOV       R2,A
   \   00006C   EF           MOV       A,R7
   \   00006D   FB           MOV       R3,A
   \   00006E   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   1811              {
   1812                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000074                ; Setup parameters for call to function osal_memcmp
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   A982         MOV       R1,DPL
   \   00007B   AA83         MOV       R2,DPH
   \   00007D   89..         MOV       ?V4,R1
   \   00007F   8A..         MOV       ?V5,R2
   \   000081   75..00       MOV       ?V6,#0x0
   \   000084   78..         MOV       R0,#?V4
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000089   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008F   E9           MOV       A,R1
   \   000090   60A4         JZ        ??ZDApp_SaveNwkKey_1
   1813                {
   1814                  nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   000092   741D         MOV       A,#0x1d
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?XLOAD_R0123
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   12....       LCALL     ?XSTORE_R0123
   1815                  found = TRUE;
   1816                  //update the framecounter associated to this ExtPanID
   1817                  osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000A3                ; Setup parameters for call to function osal_nv_write
   \   0000A3   A8..         MOV       R0,?XSP + 0
   \   0000A5   A9..         MOV       R1,?XSP + 1
   \   0000A7   88..         MOV       ?V0,R0
   \   0000A9   89..         MOV       ?V1,R1
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   75..0C       MOV       ?V0,#0xc
   \   0000B3   75..00       MOV       ?V1,#0x0
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   7C00         MOV       R4,#0x0
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   EE           MOV       A,R6
   \   0000C0   FA           MOV       R2,A
   \   0000C1   EF           MOV       A,R7
   \   0000C2   8045         SJMP      ??ZDApp_SaveNwkKey_4
   1818                  break;
   1819                }
   1820              }
   1821            }
   1822          
   1823            //If not found, then use the generic
   1824            if(!found)
   1825            {
   1826              osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \                     ??ZDApp_SaveNwkKey_2:
   \   0000C4                ; Setup parameters for call to function osal_memset
   \   0000C4   7C08         MOV       R4,#0x8
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   79FF         MOV       R1,#-0x1
   \   0000CA   7404         MOV       A,#0x4
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   AA82         MOV       R2,DPL
   \   0000D1   AB83         MOV       R3,DPH
   \   0000D3   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1827              nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   0000D6   741D         MOV       A,#0x1d
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   12....       LCALL     ?XLOAD_R0123
   \   0000DE   85..82       MOV       DPL,?XSP + 0
   \   0000E1   85..83       MOV       DPH,?XSP + 1
   \   0000E4   12....       LCALL     ?XSTORE_R0123
   1828              //update the framecounter associated to this ExtPanID
   1829              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000E7                ; Setup parameters for call to function osal_nv_write
   \   0000E7   A8..         MOV       R0,?XSP + 0
   \   0000E9   A9..         MOV       R1,?XSP + 1
   \   0000EB   88..         MOV       ?V0,R0
   \   0000ED   89..         MOV       ?V1,R1
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F4   75..0C       MOV       ?V0,#0xc
   \   0000F7   8F..         MOV       ?V1,R7
   \   0000F9   78..         MOV       R0,#?V0
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FE   7C00         MOV       R4,#0x0
   \   000100   7D00         MOV       R5,#0x0
   \   000102   EE           MOV       A,R6
   \   000103   2474         ADD       A,#0x74
   \   000105   FA           MOV       R2,A
   \   000106   E4           CLR       A
   \   000107   3400         ADDC      A,#0x0
   \                     ??ZDApp_SaveNwkKey_4:
   \   000109   FB           MOV       R3,A
   1830            }
   \   00010A   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   1831          
   1832          
   1833            nwkFrameCounterChanges = 0;
   \   000110   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000113   E4           CLR       A
   \   000114   F0           MOVX      @DPTR,A
   \   000115   A3           INC       DPTR
   \   000116   F0           MOVX      @DPTR,A
   1834          
   1835            // Clear copy in RAM before return.
   1836            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000117                ; Setup parameters for call to function osal_memset
   \   000117   7C15         MOV       R4,#0x15
   \   000119   FD           MOV       R5,A
   \   00011A   F9           MOV       R1,A
   \   00011B   740C         MOV       A,#0xc
   \   00011D   12....       LCALL     ?XSTACK_DISP101_8
   \   000120   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1837          
   1838          }
   \   000123   7421         MOV       A,#0x21
   \   000125   80..         SJMP      ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   7C08         MOV       R4,#0x8
   \   000002   7D00         MOV       R5,#0x0
   \   000004   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   000006   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine54_0
   \   000008                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine55_0
   \   000002                ; // Fall through to label ??Subroutine55_0
   1839          
   1840          /*********************************************************************
   1841           * @fn      ZDApp_ForceConcentratorChange()
   1842           *
   1843           * @brief   Force a network concentrator change by resetting
   1844           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1845           *          from NV and set nwk event.
   1846           *
   1847           * @param   none
   1848           *
   1849           * @return  none
   1850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1851          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1852          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1853            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV       ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V0,#0x1
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A32         MOV       R2,#0x32
   \   000021   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000024   12....       LCALL     ?DEALLOC_XSTACK8
   1854            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   000027                ; Setup parameters for call to function osal_nv_read
   \   000027   75....       MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002A   75....       MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..01       MOV       ?V0,#0x1
   \   000035   75..00       MOV       ?V1,#0x0
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A33         MOV       R2,#0x33
   \   000043   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   1855          
   1856            if ( zgConcentratorEnable == TRUE )
   \   000049   90....       MOV       DPTR,#zgConcentratorEnable
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6401         XRL       A,#0x1
   \   00004F   7015         JNZ       ??ZDApp_ForceConcentratorChange_0
   1857            {
   1858              // Start next event
   1859              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000051                ; Setup parameters for call to function osal_start_timerEx
   \   000051   90....       MOV       DPTR,#__Constant_64
   \   000054   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000057   7A00         MOV       R2,#0x0
   \   000059   7B08         MOV       R3,#0x8
   \   00005B   90....       MOV       DPTR,#NWK_TaskID
   \   00005E   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   1860            }
   \                     ??CrossCallReturnLabel_90:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   800A         SJMP      ??CrossCallReturnLabel_67
   1861            else
   1862            {
   1863              // Stop the next event
   1864              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000066                ; Setup parameters for call to function osal_stop_timerEx
   \   000066   7A00         MOV       R2,#0x0
   \   000068   7B08         MOV       R3,#0x8
   \   00006A   90....       MOV       DPTR,#NWK_TaskID
   \   00006D   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   1865            }
   1866          }
   \                     ??CrossCallReturnLabel_67:
   \   000070   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   1867          
   1868          /*********************************************************************
   1869           * @fn      ZDApp_ResetNwkKey()
   1870           *
   1871           * @brief   Reset the Network key information in NV.
   1872           *
   1873           * @param   none
   1874           *
   1875           * @return  none
   1876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1877          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1878          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1879            nwkActiveKeyItems keyItems;
   1880          
   1881            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   12....       LCALL     ?Subroutine30 & 0xFFFF
   1882            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1883                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_31:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV       ?V0,#0x15
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   1884          }
   \   000023   02....       LJMP      ?Subroutine7 & 0xFFFF
   1885          
   1886          /*********************************************************************
   1887           * @fn      ZDApp_RestoreNwkSecMaterial()
   1888           *
   1889           * @brief   Restore the network frame counter associated to this ExtPanID and
   1890           *          increment it if found. This can only happens once per reset
   1891           *
   1892           * @param   none
   1893           *
   1894           * @return  none
   1895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1896          void ZDApp_RestoreNwkSecMaterial(void)
   \                     ZDApp_RestoreNwkSecMaterial:
   1897          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1898            uint8 Found = FALSE;
   1899            uint8 i;
   1900            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1901            uint8 UpdateFrameCounter = FALSE;
   1902          
   1903            //Search if we do have security material for this network
   1904            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   8046         SJMP      ??ZDApp_RestoreNwkSecMaterial_0
   1905            {
   1906              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \                     ??ZDApp_RestoreNwkSecMaterial_1:
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   A8..         MOV       R0,?XSP + 0
   \   000011   A9..         MOV       R1,?XSP + 1
   \   000013   88..         MOV       ?V2,R0
   \   000015   89..         MOV       ?V3,R1
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   75..0C       MOV       ?V2,#0xc
   \   00001F   75..00       MOV       ?V3,#0x0
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   1907              {
   1908                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000035                ; Setup parameters for call to function osal_memcmp
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   A982         MOV       R1,DPL
   \   00003C   AA83         MOV       R2,DPH
   \   00003E   89..         MOV       ?V4,R1
   \   000040   8A..         MOV       ?V5,R2
   \   000042   75..00       MOV       ?V6,#0x0
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   12....       LCALL     ?Subroutine38 & 0xFFFF
   1909                {
   1910                  UpdateFrameCounter = TRUE;
   1911                  Found = TRUE;
   1912                  break;
   1913                }
   1914              }
   1915            }
   \                     ??CrossCallReturnLabel_69:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   E9           MOV       A,R1
   \   000051   7025         JNZ       ??ZDApp_RestoreNwkSecMaterial_2
   \   000053   05..         INC       ?V0
   \                     ??ZDApp_RestoreNwkSecMaterial_0:
   \   000055   E5..         MOV       A,?V0
   \   000057   2475         ADD       A,#0x75
   \   000059   FE           MOV       R6,A
   \   00005A   E4           CLR       A
   \   00005B   3400         ADDC      A,#0x0
   \   00005D   FF           MOV       R7,A
   \   00005E   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000061   E4           CLR       A
   \   000062   93           MOVC      A,@A+DPTR
   \   000063   F8           MOV       R0,A
   \   000064   E5..         MOV       A,?V0
   \   000066   98           SUBB      A,R0
   \   000067   40A6         JC        ??ZDApp_RestoreNwkSecMaterial_1
   1916            //Check if we do have frame counter stored in the generic
   1917            if(!Found)
   1918            {
   1919              //The last entry readed has the Generic item, thefore, no need to read it again
   1920              if(nwkSecMaterialDesc.FrameCounter)
   \   000069   85..82       MOV       DPL,?XSP + 0
   \   00006C   85..83       MOV       DPH,?XSP + 1
   \   00006F   12....       LCALL     ?XLOAD_R0123
   \   000072   E8           MOV       A,R0
   \   000073   49           ORL       A,R1
   \   000074   4A           ORL       A,R2
   \   000075   4B           ORL       A,R3
   \   000076   6058         JZ        ??ZDApp_RestoreNwkSecMaterial_3
   \                     ??ZDApp_RestoreNwkSecMaterial_2:
   \   000078   90....       MOV       DPTR,#FrameCounterUpdated
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   7052         JNZ       ??ZDApp_RestoreNwkSecMaterial_3
   1921              {
   1922                UpdateFrameCounter = TRUE;
   1923              }
   1924            }
   1925          
   1926            if(UpdateFrameCounter && (!FrameCounterUpdated))
   1927            {
   1928              FrameCounterUpdated = TRUE;
   \   00007E   7401         MOV       A,#0x1
   \   000080   F0           MOVX      @DPTR,A
   1929          
   1930              // Increment the frame counter stored in NV
   1931              nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1932                                        NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000081   90....       MOV       DPTR,#__Constant_4e2
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?L_MOV_X
   \   000089   85..82       MOV       DPL,?XSP + 0
   \   00008C   85..83       MOV       DPH,?XSP + 1
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?L_ADD_TO_X
   1933          
   1934              nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   12....       LCALL     ?XLOAD_R0123
   \   00009D   90....       MOV       DPTR,#nwkFrameCounter
   \   0000A0   12....       LCALL     ?XSTORE_R0123
   1935          
   1936              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000A3                ; Setup parameters for call to function osal_nv_write
   \   0000A3   A8..         MOV       R0,?XSP + 0
   \   0000A5   A9..         MOV       R1,?XSP + 1
   \   0000A7   88..         MOV       ?V0,R0
   \   0000A9   89..         MOV       ?V1,R1
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   75..0C       MOV       ?V0,#0xc
   \   0000B3   75..00       MOV       ?V1,#0x0
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   7C00         MOV       R4,#0x0
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   EE           MOV       A,R6
   \   0000C0   FA           MOV       R2,A
   \   0000C1   EF           MOV       A,R7
   \   0000C2   FB           MOV       R3,A
   \   0000C3   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000C6   12....       LCALL     ?DEALLOC_XSTACK8
   1937          
   1938              nwkFrameCounterChanges = 0;
   \   0000C9   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   0000CC   E4           CLR       A
   \   0000CD   F0           MOVX      @DPTR,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   F0           MOVX      @DPTR,A
   1939            }
   1940            return;
   \                     ??ZDApp_RestoreNwkSecMaterial_3:
   \   0000D0   02....       LJMP      ?Subroutine6 & 0xFFFF
   1941          }
   1942          
   1943          /*********************************************************************
   1944           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1945           *
   1946           * @brief
   1947           *
   1948           *   Save off the Network key information.
   1949           *
   1950           * @param   incrFrmCnt - set to true if we want to increment the network
   1951                      frame counter, else set to false
   1952           *
   1953           * @return  true if restored from NV, false if not
   1954           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1955          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1956          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1957            nwkActiveKeyItems keyItems;
   1958            uint8 ret = FALSE;
   \   00000A   7E00         MOV       R6,#0x0
   1959          
   1960            ZDApp_RestoreNwkSecMaterial();
   \   00000C                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00000C   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1961          
   1962            // Restore the key information
   1963            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1964                == ZSUCCESS )
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP100_8
   \   000014   88..         MOV       ?V0,R0
   \   000016   89..         MOV       ?V1,R1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV       ?V0,#0x15
   \   000020   8E..         MOV       ?V1,R6
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7A82         MOV       R2,#-0x7e
   \   00002D   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   \   000033   E9           MOV       A,R1
   \   000034   7032         JNZ       ??ZDApp_RestoreNwkKey_0
   1965            {
   1966              uint8 nullKey[SEC_KEY_LEN];
   1967          
   1968              // initialize default value to compare to
   1969              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C10         MOV       R4,#0x10
   \   000038   12....       LCALL     ?Subroutine43 & 0xFFFF
   1970          
   1971              // if stored key is different than default value, then a key has been established
   1972              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \                     ??CrossCallReturnLabel_49:
   \   00003B   8E..         MOV       ?V2,R6
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000042   7C10         MOV       R4,#0x10
   \   000044   7D00         MOV       R5,#0x0
   \   000046   7414         MOV       A,#0x14
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   A982         MOV       R1,DPL
   \   00004D   AA83         MOV       R2,DPH
   \   00004F   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   E9           MOV       A,R1
   \   000056   7010         JNZ       ??ZDApp_RestoreNwkKey_0
   1973              {
   1974                ret = TRUE;
   \   000058   7E01         MOV       R6,#0x1
   1975          
   1976                // Clear copy in RAM before return.
   1977                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   00005A                ; Setup parameters for call to function osal_memset
   \   00005A   7C15         MOV       R4,#0x15
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7900         MOV       R1,#0x0
   \   000060   7410         MOV       A,#0x10
   \   000062   12....       LCALL     ?XSTACK_DISP101_8
   \   000065   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1978              }
   1979            }
   1980          
   1981            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000068   EE           MOV       A,R6
   \   000069   F9           MOV       R1,A
   \   00006A   7425         MOV       A,#0x25
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   7F03         MOV       R7,#0x3
   \   000071   02....       LJMP      ?BANKED_LEAVE_XDATA
   1982          }
   1983          
   1984          /*********************************************************************
   1985           * @fn      ZDApp_ResetTimerStart
   1986           *
   1987           * @brief   Start the reset timer.
   1988           *
   1989           * @param   delay - delay time(ms) before reset
   1990           *
   1991           * @return  none
   1992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1993          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1994          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   1995            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \                     ??CrossCallReturnLabel_81:
   \   000008   7012         JNZ       ??ZDApp_ResetTimerStart_0
   1996            {
   1997              // Start the rest timer
   1998              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V2,A
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000014   7A04         MOV       R2,#0x4
   \   000016   12....       LCALL     ?Subroutine17 & 0xFFFF
   1999            }
   \                     ??CrossCallReturnLabel_85:
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   2000          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   00001C   02....       LJMP      ??Subroutine53_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008                REQUIRE ??Subroutine58_0
   \   000008                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   4C           ORL       A,R4
   \   00000B   4D           ORL       A,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine59_0
   \   000002                ; // Fall through to label ??Subroutine59_0
   2001          
   2002          /*********************************************************************
   2003           * @fn      ZDApp_ResetTimerCancel
   2004           *
   2005           * @brief   Cancel the reset timer.
   2006           *
   2007           * @param   none
   2008           *
   2009           * @return  none
   2010           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2011          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   2012          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2013            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     ?Subroutine27 & 0xFFFF
   2014            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \                     ??CrossCallReturnLabel_66:
   \   00000B                ; Setup parameters for call to function osal_clear_event
   \   00000B   7A04         MOV       R2,#0x4
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   90....       MOV       DPTR,#ZDAppTaskID
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   2015          }
   \   000017   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   2016          
   2017          /*********************************************************************
   2018           * @fn      ZDApp_LeaveCtrlInit
   2019           *
   2020           * @brief   Initialize the leave control logic.
   2021           *
   2022           * @param   none
   2023           *
   2024           * @return  none
   2025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2026          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   2027          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2028            uint8 status;
   2029          
   2030          
   2031            // Initialize control state
   2032            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   2033          
   2034            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   2035                                        sizeof(ZDApp_LeaveCtrl),
   2036                                        &ZDApp_LeaveCtrl );
   2037          
   2038            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV       R4,#0x1
   \   000017   7D00         MOV       R5,#0x0
   \   000019   7A85         MOV       R2,#-0x7b
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   E9           MOV       A,R1
   \   000026   701C         JNZ       ??ZDApp_LeaveCtrlInit_0
   2039            {
   2040              // Read saved control
   2041              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   2042                            0,
   2043                            sizeof( uint8 ),
   2044                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   7D00         MOV       R5,#0x0
   \   00003C   7A85         MOV       R2,#-0x7b
   \   00003E   12....       LCALL     ?Subroutine34 & 0xFFFF
   2045            }
   \                     ??CrossCallReturnLabel_76:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   2046          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000044   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   2047          
   2048          /*********************************************************************
   2049           * @fn      ZDApp_LeaveCtrlSet
   2050           *
   2051           * @brief   Set the leave control logic.
   2052           *
   2053           * @param   ra - reassociate flag
   2054           *
   2055           * @return  none
   2056           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2057          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   2058          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2059            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   2060          
   2061            if ( ra == TRUE )
   \   00000D   6E           XRL       A,R6
   \   00000E   7003         JNZ       ??ZDApp_LeaveCtrlSet_0
   2062            {
   2063              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV       A,#0x3
   \   000012   F0           MOVX      @DPTR,A
   2064            }
   2065          
   2066            // Write the leave control
   2067            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2068                           0,
   2069                           sizeof( uint8 ),
   2070                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP      ?Subroutine4 & 0xFFFF
   2071          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV       R0,#?V0
   \   000008   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV       ?V0,#0x1
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV       R4,#0x0
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A85         MOV       R2,#-0x7b
   \   00001C   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00001F                REQUIRE ??Subroutine70_0
   \   00001F                ; // Fall through to label ??Subroutine70_0
   2072          
   2073          /*********************************************************************
   2074           * @fn      ZDApp_LeaveCtrlReset
   2075           *
   2076           * @brief   Re-initialize the leave control logic.
   2077           *
   2078           * @param   none
   2079           *
   2080           * @return  none
   2081           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2082          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   2083          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2084            // Set leave control to initialized state
   2085            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   2086          
   2087            // Write initialized control
   2088            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2089                          0,
   2090                          sizeof( uint8 ),
   2091                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP      ?Subroutine4 & 0xFFFF
   2092          }
   2093          
   2094          /*********************************************************************
   2095           * @fn      ZDApp_LeaveCtrlBypass
   2096           *
   2097           * @brief   Check if NV restore should be skipped during a leave reset.
   2098           *
   2099           * @param   none
   2100           *
   2101           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   2102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2103          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   2104          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2105            uint8 bypass;
   2106          
   2107            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   2108            {
   2109              bypass = TRUE;
   2110            }
   2111            else
   2112            {
   2113              bypass = FALSE;
   2114            }
   2115          
   2116            return bypass;
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   80..         SJMP      ??Subroutine61_0
   2117          }
   2118          
   2119          /*********************************************************************
   2120           * @fn      ZDApp_LeaveCtrlStartup
   2121           *
   2122           * @brief   Check for startup conditions during a leave reset.
   2123           *
   2124           * @param   state      - devState_t determined by leave control logic
   2125           * @param   startDelay - startup delay
   2126           *
   2127           * @return  none
   2128           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2129          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2130          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2131            *startDelay = 0;
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   2132          
   2133            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5019         JNC       ??ZDApp_LeaveCtrlStartup_0
   2134            {
   2135              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV       C,0xE0 /* A   */.1
   \   000016   500C         JNC       ??ZDApp_LeaveCtrlStartup_1
   2136              {
   2137                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   7488         MOV       A,#-0x78
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   7413         MOV       A,#0x13
   \   000022   8005         SJMP      ??ZDApp_LeaveCtrlStartup_2
   2138              }
   2139              else
   2140              {
   2141                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX      @DPTR,A
   2142              }
   2143          
   2144              // Reset leave control logic
   2145              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2146            }
   2147          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP      ??Subroutine61_0
   2148          
   2149          /*********************************************************************
   2150           * @fn      ZDApp_LeaveReset
   2151           *
   2152           * @brief   Setup a device reset due to a leave indication/confirm.
   2153           *
   2154           * @param   ra - reassociate flag
   2155           *
   2156           * @return  none
   2157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2158          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2160            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2161          
   2162            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV       R2,#-0x78
   \   00000C   7B13         MOV       R3,#0x13
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2163          
   2164            if ( ZSTACK_ROUTER_BUILD )
   2165            {
   2166              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2167              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2168            }
   2169          
   2170            if (ZG_DEVICE_ENDDEVICE_TYPE)
   2171            {
   2172              // Save polling values to be restored after rejoin
   2173              if ( ra == TRUE )
   \   000011   7401         MOV       A,#0x1
   \   000013   6E           XRL       A,R6
   \   000014   7028         JNZ       ??ZDApp_LeaveReset_0
   2174              {
   2175                 ZDApp_SavedPollRate = zgPollRate;
   \   000016   90....       MOV       DPTR,#zgPollRate
   \   000019   12....       LCALL     ?XLOAD_R0123
   \   00001C   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00001F   12....       LCALL     ?XSTORE_R0123
   2176                 savedResponseRate = zgResponsePollRate;
   \   000022   90....       MOV       DPTR,#zgResponsePollRate
   \   000025   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000028   90....       MOV       DPTR,#savedResponseRate
   \   00002B   E8           MOV       A,R0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E9           MOV       A,R1
   \   00002F   F0           MOVX      @DPTR,A
   2177                 savedQueuedPollRate = zgQueuedPollRate;
   \   000030   90....       MOV       DPTR,#zgQueuedPollRate
   \   000033   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   2178              }
   \                     ??CrossCallReturnLabel_116:
   \   000036   90....       MOV       DPTR,#savedQueuedPollRate
   \   000039   E8           MOV       A,R0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E9           MOV       A,R1
   \   00003D   F0           MOVX      @DPTR,A
   2179          
   2180              // Disable polling
   2181              NLME_SetPollRate(0);
   \                     ??ZDApp_LeaveReset_0:
   \   00003E                ; Setup parameters for call to function NLME_SetPollRate
   \   00003E   90....       MOV       DPTR,#__Constant_0
   \   000041   12....       LCALL     ?XLOAD_R2345
   \   000044   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2182              NLME_SetResponseRate(0);
   \   000047                ; Setup parameters for call to function NLME_SetResponseRate
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
   \   00004B   12....       LCALL     ?Subroutine37 & 0xFFFF
   2183              NLME_SetQueuedPollRate(0);
   2184            }
   2185          
   2186            if ( ra == TRUE )
   \                     ??CrossCallReturnLabel_40:
   \   00004E   7401         MOV       A,#0x1
   \   000050   6E           XRL       A,R6
   \   000051   701E         JNZ       ??ZDApp_LeaveReset_1
   2187            {
   2188              devState = DEV_NWK_DISC;
   \   000053   90....       MOV       DPTR,#devState
   \   000056   7402         MOV       A,#0x2
   \   000058   F0           MOVX      @DPTR,A
   2189              devStartMode = MODE_REJOIN;
   \   000059   90....       MOV       DPTR,#devStartMode
   \   00005C   04           INC       A
   \   00005D   F0           MOVX      @DPTR,A
   2190              _tmpRejoinState = true;
   \   00005E   90....       MOV       DPTR,#_tmpRejoinState
   \   000061   7401         MOV       A,#0x1
   \   000063   12....       LCALL     ?Subroutine10 & 0xFFFF
   2191          
   2192              // For rejoin, specify the extended PANID to look for
   2193              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   2194          
   2195              _NIB.nwkState = NWK_DISC;
   \                     ??CrossCallReturnLabel_3:
   \   000066   90....       MOV       DPTR,#_NIB + 35
   \   000069   7402         MOV       A,#0x2
   \   00006B   F0           MOVX      @DPTR,A
   2196               NLME_NwkDiscTerm();
   \   00006C                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00006C   12....       LCALL     ?Subroutine31 & 0xFFFF
   2197          
   2198              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   2199            }
   \                     ??CrossCallReturnLabel_33:
   \   00006F   8007         SJMP      ??ZDApp_LeaveReset_2
   2200            else
   2201            {
   2202              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_1:
   \   000071                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000071   7A88         MOV       R2,#-0x78
   \   000073   7B13         MOV       R3,#0x13
   \   000075   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2203            }
   2204          }
   \                     ??ZDApp_LeaveReset_2:
   \   000078   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   000003                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000003                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000003   7A00         MOV       R2,#0x0
   \   000005   7B00         MOV       R3,#0x0
   \   000007   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
   2205          
   2206          /*********************************************************************
   2207           * @fn      ZDApp_LeaveUpdate
   2208           *
   2209           * @brief   Update local device data related to leaving device.
   2210           *
   2211           * @param   nwkAddr        - NWK address of leaving device
   2212           * @param   extAddr        - EXT address of leaving device
   2213           * @param   removeChildren - remove children of leaving device
   2214           * @param   rejoin         - if device will rejoin or not
   2215           *
   2216           * @return  none
   2217           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2218          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2219                                  uint8 removeChildren, uint8 rejoin )
   2220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2221            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2222            // Remove Apps Key for leaving device
   2223            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EC           MOV       A,R4
   \   000013   FA           MOV       R2,A
   \   000014   ED           MOV       A,R5
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2224          
   2225            // Clear SECURITY bit from Address Manager
   2226            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2227          
   2228            if ( pbindRemoveDev )
   \   000020   90....       MOV       DPTR,#pbindRemoveDev
   \   000023   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000026   6033         JZ        ??ZDApp_LeaveUpdate_0
   2229            {
   2230              zAddrType_t devAddr;
   2231          
   2232              // Remove bind entry and all related data
   2233              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV       A,#0x8
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   7403         MOV       A,#0x3
   \   00002F   F0           MOVX      @DPTR,A
   2234              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV       ?V4,R6
   \   000032   8F..         MOV       ?V5,R7
   \   000034   75..00       MOV       ?V6,#0x0
   \   000037   78..         MOV       R0,#?V4
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV       R4,#0x8
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP101_8
   \   000045   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   2235          
   2236              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   AA..         MOV       R2,?XSP + 0
   \   00004F   AB..         MOV       R3,?XSP + 1
   \   000051   90....       MOV       DPTR,#pbindRemoveDev
   \   000054   E0           MOVX      A,@DPTR
   \   000055   12....       LCALL     ?Subroutine26 & 0xFFFF
   2237            }
   \                     ??CrossCallReturnLabel_93:
   \   000058   12....       LCALL     ?CALL_IND
   2238          
   2239            // Remove if child
   2240            if ( ZSTACK_ROUTER_BUILD )
   2241            {
   2242              // Router shall notify the Trust Center that a child End Device or
   2243              // a neighbor Router (within radius=1) has left the network
   2244              APSME_UpdateDeviceReq_t req;
   2245          
   2246              // forward authorization to the Trust Center
   2247              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   2248              req.devAddr    = nwkAddr;
   2249              req.devExtAddr = extAddr;
   2250              req.status = APSME_UD_DEVICE_LEFT;
   2251          
   2252              if ( rejoin == FALSE )
   2253              {
   2254                if(!APSME_IsDistributedSecurity())
   2255                {
   2256                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2257                  {
   2258                    uint8 found;
   2259                    APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   2260          
   2261                    APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
   2262          
   2263                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2264                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2265                    // with legacy Coordinator devices which can only handle one or the other.
   2266                    if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
   2267                    {
   2268                      req.apsSecure = FALSE;
   2269          
   2270                      // send and APSME_UPDATE_DEVICE request to the trust center
   2271                      APSME_UpdateDeviceReq( &req );
   2272                    }
   2273          
   2274                    // send the message APS encrypted
   2275                    req.apsSecure = TRUE;
   2276          
   2277                    // send and APSME_UPDATE_DEVICE request to the trust center
   2278                    APSME_UpdateDeviceReq( &req );
   2279                  }
   2280                  else
   2281                  {
   2282                    req.apsSecure = FALSE;
   2283          
   2284                    // send and APSME_UPDATE_DEVICE request to the trust center
   2285                    APSME_UpdateDeviceReq( &req );
   2286                  }
   2287                }
   2288              }
   2289          
   2290              NLME_RemoveChild( extAddr, removeChildren );
   2291            }
   2292          
   2293            // Remove Routing table related entry
   2294            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005B                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00005B   7900         MOV       R1,#0x0
   \   00005D   AA..         MOV       R2,?V0
   \   00005F   AB..         MOV       R3,?V1
   \   000061   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2295          
   2296            // Remove entry from neighborTable
   2297            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000064                ; Setup parameters for call to function nwkNeighborRemove
   \   000064   90....       MOV       DPTR,#_NIB + 33
   \   000067   E0           MOVX      A,@DPTR
   \   000068   FC           MOV       R4,A
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   FD           MOV       R5,A
   \   00006C   AA..         MOV       R2,?V0
   \   00006E   AB..         MOV       R3,?V1
   \   000070   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2298          
   2299            // Schedule to save data to NV
   2300            ZDApp_NwkWriteNVRequest();
   \   000073                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000073   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2301          }
   \   000076   7409         MOV       A,#0x9
   \   000078   02....       LJMP      ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine62_0
   \   000002                ; // Fall through to label ??Subroutine62_0
   2302          
   2303          /*********************************************************************
   2304           * @fn      ZDApp_NetworkDiscoveryReq
   2305           *
   2306           * @brief   Request a network discovery.
   2307           *
   2308           * @param  scanChannels -
   2309           * @param  scanDuration -
   2310           *
   2311           * @return  ZStatus_t
   2312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2313          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2314          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2315            // Setup optional filters - tbd
   2316          
   2317            // Request NLME network discovery
   2318            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP      ??Subroutine53_0 & 0xFFFF
   2319          }
   2320          
   2321          /*********************************************************************
   2322           * @fn      ZDApp_JoinReq
   2323           *
   2324           * @brief   Request the device to join a parent in a network.
   2325           *
   2326           * @param   channel -
   2327           * @param   panID -
   2328           *
   2329           * @return  ZStatus_t
   2330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2331          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2332                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2333          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   2334            // Sync up the node with the stack profile (In the case where a pro device
   2335            // joins a non-pro network, or verse versa)
   2336            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV       A,#0xf
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2337          
   2338            // Request NLME Join Request
   2339            return NLME_JoinRequest(extendedPanID, panID,channel,
   2340                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2341                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV       A,#0xe
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V3,A
   \   000021   78..         MOV       R0,#?V3
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
   \   000034   78..         MOV       R0,#?V3
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV       R1,?V2
   \   00003B   AC..         MOV       R4,?V0
   \   00003D   AD..         MOV       R5,?V1
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   02....       LJMP      ?Subroutine5 & 0xFFFF
   2342          
   2343          }
   2344          
   2345          /*********************************************************************
   2346           * @fn      ZDApp_DeviceConfigured
   2347           *
   2348           * @brief   Check to see if the local device is configured (i.e., part
   2349           *          of a network).
   2350           *
   2351           * @param   none
   2352           *
   2353           * @return  TRUE if configured. FALSE, otherwise.
   2354           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2355          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2356          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2357            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   74FE         MOV       A,#-0x2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   04           INC       A
   \   000015   12....       LCALL     ?Subroutine11 & 0xFFFF
   2358          
   2359            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2360                          sizeof( uint16), &nwkAddr );
   \                     ??CrossCallReturnLabel_5:
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75..02       MOV       ?V0,#0x2
   \   00001E   75..00       MOV       ?V1,#0x0
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   7C14         MOV       R4,#0x14
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A21         MOV       R2,#0x21
   \   00002C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   2361          
   2362            // Does the NIB have anything more than default?
   2363            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   64FE         XRL       A,#0xfe
   \   00003B   7003         JNZ       ??ZDApp_DeviceConfigured_0
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F4           CPL       A
   \                     ??ZDApp_DeviceConfigured_0:
   \   000040   7004         JNZ       ??ZDApp_DeviceConfigured_1
   \   000042   7900         MOV       R1,#0x0
   \   000044   8002         SJMP      ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000046   7901         MOV       R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000048   7402         MOV       A,#0x2
   \   00004A   02....       LJMP      ??Subroutine70_0 & 0xFFFF
   2364          }
   2365          
   2366          /*********************************************************************
   2367           * CALLBACK FUNCTIONS
   2368           */
   2369          
   2370          
   2371          /*********************************************************************
   2372           * @fn      ZDApp_SendEventMsg()
   2373           *
   2374           * @brief
   2375           *
   2376           *   Sends a Network Join message
   2377           *
   2378           * @param  cmd - command ID
   2379           * @param  len - length (in bytes) of the buf field
   2380           * @param  buf - buffer for the rest of the message.
   2381           *
   2382           * @return  none
   2383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2384          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2385          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   2386            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000006                ; Setup parameters for call to function ZDApp_SendMsg
   \   000006   FB           MOV       R3,A
   \   000007   E9           MOV       A,R1
   \   000008   FA           MOV       R2,A
   \   000009   12....       LCALL     ?Subroutine28 & 0xFFFF
   2387          }
   \                     ??CrossCallReturnLabel_27:
   \   00000C   02....       LJMP      ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   \   000008   22           RET
   2388          
   2389          /*********************************************************************
   2390           * @fn      ZDApp_SendMsg()
   2391           *
   2392           * @brief   Sends a OSAL message
   2393           *
   2394           * @param  taskID - Where to send the message
   2395           * @param  cmd - command ID
   2396           * @param  len - length (in bytes) of the buf field
   2397           * @param  buf - buffer for the rest of the message.
   2398           *
   2399           * @return  none
   2400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2401          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2402          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V5,R3
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   2403            osal_event_hdr_t *msgPtr;
   2404          
   2405            // Send the address to the task
   2406            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV       R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EB           MOV       A,R3
   \   000012   FA           MOV       R2,A
   \   000013   7B00         MOV       R3,#0x0
   \   000015   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
   2407            if ( msgPtr )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6035         JZ        ??ZDApp_SendMsg_0
   2408            {
   2409              if ( (len > 0) && (buf != NULL) )
   \   000020   EE           MOV       A,R6
   \   000021   6020         JZ        ??ZDApp_SendMsg_1
   \   000023   E5..         MOV       A,?V2
   \   000025   45..         ORL       A,?V3
   \   000027   601A         JZ        ??ZDApp_SendMsg_1
   2410                osal_memcpy( msgPtr, buf, len );
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   85....       MOV       ?V8,?V2
   \   00002C   85....       MOV       ?V9,?V3
   \   00002F   75..00       MOV       ?V10,#0x0
   \   000032   78..         MOV       R0,#?V8
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   EE           MOV       A,R6
   \   000038   FC           MOV       R4,A
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003E   7403         MOV       A,#0x3
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   2411          
   2412              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   E5..         MOV       A,?V6
   \   00004B   F0           MOVX      @DPTR,A
   2413              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004C                ; Setup parameters for call to function osal_msg_send
   \   00004C   AA..         MOV       R2,?V0
   \   00004E   AB..         MOV       R3,?V1
   \   000050   A9..         MOV       R1,?V4
   \   000052   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2414            }
   2415          }
   \                     ??ZDApp_SendMsg_0:
   \   000055   7F0B         MOV       R7,#0xb
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA
   2416          
   2417          /*********************************************************************
   2418           * Call Back Functions from NWK  - API
   2419           */
   2420          
   2421          /*********************************************************************
   2422           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2423           *
   2424           * @brief       This function returns a choice of PAN to join.
   2425           *
   2426           * @param       status - return status of the nwk discovery confirm
   2427           *
   2428           * @return      ZStatus_t
   2429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2430          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2431          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2432            osal_event_hdr_t msg;
   2433          
   2434            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2435            // Send ZDO_MGMT_NWK_DISC_RSP back
   2436          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2437            if ( zdappMgmtNwkDiscReqInProgress )
   \   000011   90....       MOV       DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6007         JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
   2438            {
   2439              zdappMgmtNwkDiscReqInProgress = false;
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   2440              ZDO_FinishProcessingMgmtNwkDiscReq();
   \   000019                ; Setup parameters for call to function ZDO_FinishProcessingMgmtNwkDiscReq
   \   000019   12....       LCALL     `??ZDO_FinishProcessingMgmtNwkDiscReq::?relay`; Banked call to: ZDO_FinishProcessingMgmtNwkDiscReq
   \   00001C   8023         SJMP      ??CrossCallReturnLabel_28
   2441            }
   2442            else
   2443          #endif
   2444            {
   2445              // Pass the confirm to another task if it registers the callback
   2446              // Otherwise, pass the confirm to ZDApp.
   2447              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000021   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000024   6009         JZ        ??ZDO_NetworkDiscoveryConfirmCB_1
   2448              {
   2449                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ?CALL_IND
   \   00002D   8012         SJMP      ??CrossCallReturnLabel_28
   2450              }
   2451              else
   2452              {
   2453                // Otherwise, send scan confirm to ZDApp task to proceed
   2454                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   2455          
   2456                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000036                ; Setup parameters for call to function ZDApp_SendMsg
   \   000036   04           INC       A
   \   000037   12....       LCALL     ?XSTACK_DISP102_8
   \   00003A   7B02         MOV       R3,#0x2
   \   00003C   7A01         MOV       R2,#0x1
   \   00003E   12....       LCALL     ?Subroutine28 & 0xFFFF
   2457              }
   2458            }
   2459            return (ZSuccess);
   \                     ??CrossCallReturnLabel_28:
   \   000041   7900         MOV       R1,#0x0
   \   000043   7403         MOV       A,#0x3
   \   000045   02....       LJMP      ?Subroutine3 & 0xFFFF
   2460          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E582         MOV       A,DPL
   \   00000A   4583         ORL       A,DPH
   \   00000C   22           RET
   2461          
   2462          /*********************************************************************
   2463           * @fn          ZDApp_NwkDescListProcessing
   2464           *
   2465           * @brief       This function process the network discovery result and select
   2466           *              a parent device to join itself.
   2467           *
   2468           * @param       none
   2469           *
   2470           * @return      ZStatus_t
   2471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2472          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2473          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2474            networkDesc_t *pNwkDesc;
   2475            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   2476            uint8 stackProfile;
   2477            uint8 stackProfilePro;
   2478            uint8 selected;
   2479          
   2480            // Count the number of nwk descriptors in the list
   2481            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV       ?V2,R2
   \   00000D   8B..         MOV       ?V3,R3
   \   00000F   AE..         MOV       R6,?V2
   \   000011   AF..         MOV       R7,?V3
   \   000013   8005         SJMP      ??CrossCallReturnLabel_109
   2482            while (pNwkDesc)
   2483            {
   2484              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC       ?V1
   2485              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL     ?Subroutine23 & 0xFFFF
   2486            }
   \                     ??CrossCallReturnLabel_109:
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   70F7         JNZ       ??ZDApp_NwkDescListProcessing_0
   2487          
   2488            // process discovery results
   2489            stackProfilePro = FALSE;
   \   00001E   75..00       MOV       ?V0,#0x0
   2490            selected = FALSE;
   2491          
   2492          
   2493            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV       ?V2,#0x0
   2494            {
   2495              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
   2496              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV       ?V3,#0x0
   \   000032   8019         SJMP      ??CrossCallReturnLabel_110
   2497              {
   2498                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2499                {
   2500                  // If the extended Pan ID is commissioned to a non zero value
   2501                  // Only join the Pan that has match EPID
   2502                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2503                    continue;
   2504          
   2505                }
   2506                else if ( zgConfigPANID != 0xFFFF )
   2507                {
   2508                  // PAN Id is preconfigured. check if it matches
   2509                  if ( pNwkDesc->panId != zgConfigPANID )
   2510                    continue;
   2511                }
   2512          
   2513                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2514                {
   2515                  // check that network is allowing joining
   2516                  if ( ZSTACK_ROUTER_BUILD )
   2517                  {
   2518                    if ( stackProfilePro == FALSE )
   2519                    {
   2520                      if ( !pNwkDesc->routerCapacity )
   2521                      {
   2522                        continue;
   2523                      }
   2524                    }
   2525                    else
   2526                    {
   2527                      if ( !pNwkDesc->deviceCapacity )
   2528                      {
   2529                        continue;
   2530                      }
   2531                    }
   2532                  }
   2533                  else if ( ZSTACK_END_DEVICE_BUILD )
   2534                  {
   2535                    if ( !pNwkDesc->deviceCapacity )
   2536                    {
   2537                      continue;
   2538                    }
   2539                  }
   2540                }
   2541          
   2542                // check version of zigbee protocol
   2543                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2544                  continue;
   2545          
   2546                // check version of stack profile
   2547                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2548                {
   2549                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2550                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6402         XRL       A,#0x2
   \   000037   7008         JNZ       ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV       A,#0x1
   \   00003B   68           XRL       A,R0
   \   00003C   7003         JNZ       ??ZDApp_NwkDescListProcessing_3
   2551                  {
   2552                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV       ?V0,#0x1
   2553                  }
   2554          
   2555                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV       A,?V2
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC       ?V3
   \   00004A   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00004D   E5..         MOV       A,?V3
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V1
   \   000052   4003         JC        $+5
   \   000054   02....       LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV       A,R1
   \   00005F   6401         XRL       A,#0x1
   \   000061   7013         JNZ       ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV       A,R6
   \   000064   240B         ADD       A,#0xb
   \   000066   FC           MOV       R4,A
   \   000067   E4           CLR       A
   \   000068   3F           ADDC      A,R7
   \   000069   FD           MOV       R5,A
   \   00006A   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000071   E9           MOV       A,R1
   \   000072   701D         JNZ       ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV       DPTR,#zgConfigPANID
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F4           CPL       A
   \   00007B   7003         JNZ       ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F4           CPL       A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   600F         JZ        ??ZDApp_NwkDescListProcessing_9
   \   000082   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000085   90....       MOV       DPTR,#zgConfigPANID
   \   000088   E0           MOVX      A,@DPTR
   \   000089   68           XRL       A,R0
   \   00008A   7003         JNZ       ??ZDApp_NwkDescListProcessing_11
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008F   70B7         JNZ       ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000091   90....       MOV       DPTR,#_NIB + 23
   \   000094   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000097   E0           MOVX      A,@DPTR
   \   000098   68           XRL       A,R0
   \   000099   7003         JNZ       ??ZDApp_NwkDescListProcessing_12
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   00009E   700A         JNZ       ??ZDApp_NwkDescListProcessing_13
   \   0000A0   74FE         MOV       A,#-0x2
   \   0000A2   68           XRL       A,R0
   \   0000A3   7003         JNZ       ??ZDApp_NwkDescListProcessing_14
   \   0000A5   74FF         MOV       A,#-0x1
   \   0000A7   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000A8   700B         JNZ       ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AA   8E82         MOV       DPL,R6
   \   0000AC   8F83         MOV       DPH,R7
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   6093         JZ        ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000B5   8E82         MOV       DPL,R6
   \   0000B7   8F83         MOV       DPH,R7
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F8           MOV       R0,A
   \   0000C0   90....       MOV       DPTR,#_NIB + 17
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   68           XRL       A,R0
   \   0000C5   7081         JNZ       ??ZDApp_NwkDescListProcessing_6
   \   0000C7   8E82         MOV       DPL,R6
   \   0000C9   8F83         MOV       DPH,R7
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F8           MOV       R0,A
   \   0000D3   90....       MOV       DPTR,#zgStackProfile
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   68           XRL       A,R0
   \   0000D8   6032         JZ        ??ZDApp_NwkDescListProcessing_5
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   6401         XRL       A,#0x1
   \   0000DD   6003         JZ        $+5
   \   0000DF   02....       LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000E2   7402         MOV       A,#0x2
   \   0000E4   68           XRL       A,R0
   \   0000E5   6003         JZ        $+5
   \   0000E7   02....       LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000EA   02....       LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2556                  {
   2557                    continue;
   2558                  }
   2559                }
   2560          
   2561                break;
   2562              }
   2563          
   2564              if (i < ResultCount)
   2565              {
   2566               selected = TRUE;
   2567                break;
   2568              }
   2569          
   2570              // break if selected or stack profile pro wasn't found
   2571              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000ED   E5..         MOV       A,?V0
   \   0000EF   600C         JZ        ??ZDApp_NwkDescListProcessing_16
   2572              {
   2573                break;
   2574              }
   2575            }
   \   0000F1   05..         INC       ?V2
   \   0000F3   E5..         MOV       A,?V2
   \   0000F5   C3           CLR       C
   \   0000F6   9402         SUBB      A,#0x2
   \   0000F8   5003         JNC       $+5
   \   0000FA   02....       LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2576          
   2577            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000FD   E5..         MOV       A,?V1
   \   0000FF   65..         XRL       A,?V3
   \   000101   7009         JNZ       ??ZDApp_NwkDescListProcessing_5
   2578            {
   2579              nwk_desc_list_free();
   \   000103                ; Setup parameters for call to function nwk_desc_list_free
   \   000103   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2580              return (NULL);   // couldn't find appropriate PAN to join !
   \   000106   7A00         MOV       R2,#0x0
   \   000108   7B00         MOV       R3,#0x0
   \   00010A   8004         SJMP      ??ZDApp_NwkDescListProcessing_17
   2581            }
   2582            else
   2583            {
   2584              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00010C   EE           MOV       A,R6
   \   00010D   FA           MOV       R2,A
   \   00010E   EF           MOV       A,R7
   \   00010F   FB           MOV       R3,A
   2585            }
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000110   02....       LJMP      ?Subroutine1 & 0xFFFF
   2586          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009                REQUIRE ??Subroutine65_0
   \   000009                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine67_0
   \   000004                ; // Fall through to label ??Subroutine67_0
   2587          
   2588          /*********************************************************************
   2589           * @fn          ZDO_NetworkFormationConfirmCB
   2590           *
   2591           * @brief       This function reports the results of the request to
   2592           *              initialize a coordinator in a network.
   2593           *
   2594           * @param       Status - Result of NLME_NetworkFormationRequest()
   2595           *
   2596           * @return      none
   2597           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2598          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2599          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2600            nwkStatus = (byte)Status;
   \   00000C   90....       MOV       DPTR,#nwkStatus
   \   00000F   F0           MOVX      @DPTR,A
   2601          
   2602            if ( !notdoFNCmd ) {
   \   000010   90....       MOV       DPTR,#notdoFNCmd
   \   000013   E0           MOVX      A,@DPTR
   \   000014   7003         JNZ       ??ZDO_NetworkFormationConfirmCB_0
   2603              AT_Cmd_FN_CB( Status );
   \   000016                ; Setup parameters for call to function AT_Cmd_FN_CB
   \   000016   12....       LCALL     `??AT_Cmd_FN_CB::?relay`; Banked call to: AT_Cmd_FN_CB
   2604            }
   2605          
   2606            if ( Status == ZSUCCESS )
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000019   EE           MOV       A,R6
   \   00001A   6003         JZ        $+5
   \   00001C   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_1 & 0xFFFF
   2607            {
   2608              bdb_setNodeIsOnANetwork(TRUE);
   \   00001F                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00001F   7901         MOV       R1,#0x1
   \   000021   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2609          
   2610              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   000024   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000027   E0           MOVX      A,@DPTR
   \   000028   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_2
   2611              {
   2612                // LED on shows Coordinator started
   2613                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2614          
   2615                zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2616          
   2617                  #if defined ( ZBIT )
   2618                      SIM_SetColor(0xd0ffd0);
   2619                  #endif
   2620          
   2621                if ( devState == DEV_HOLD )
   \   00002A   90....       MOV       DPTR,#devState
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   7012         JNZ       ??ZDO_NetworkFormationConfirmCB_3
   2622                {
   2623                  ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000030                ; Setup parameters for call to function ZDApp_ChangeState
   \   000030   7908         MOV       R1,#0x8
   \   000032   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2624                }
   2625              }
   2626          
   2627              if(ZG_DEVICE_RTR_TYPE)
   \                     ??ZDO_NetworkFormationConfirmCB_2:
   \   000035   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6007         JZ        ??ZDO_NetworkFormationConfirmCB_3
   \   00003B   6401         XRL       A,#0x1
   \   00003D   6003         JZ        $+5
   \   00003F   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_1 & 0xFFFF
   2628              {
   2629                uint8 x;
   2630                uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
   \                     ??ZDO_NetworkFormationConfirmCB_3:
   \   000042   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000045   7401         MOV       A,#0x1
   \   000047   12....       LCALL     ?XSTACK_DISP102_8
   \   00004A   7410         MOV       A,#0x10
   \   00004C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2631          
   2632                if(APSME_IsDistributedSecurity())
   \   00004F                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00004F   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000052   E9           MOV       A,R1
   \   000053   7003         JNZ       $+5
   \   000055   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_1 & 0xFFFF
   2633                {
   2634                  //Check if we have an extended PANID assigned
   2635                  if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
   \   000058                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000058   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   00005A   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00005C   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005F   E9           MOV       A,R1
   \   000060   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_4
   2636                  {
   2637                    //Set the extended PANID as the extended address
   2638                    osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
   \   000062                ; Setup parameters for call to function sAddrExtCpy
   \   000062   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000064   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000066   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000068   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00006A   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2639                  }
   2640          
   2641                  ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
   \                     ??ZDO_NetworkFormationConfirmCB_4:
   \   00006D                ; Setup parameters for call to function ZMacSetReq
   \   00006D   7A00         MOV       R2,#0x0
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   79F0         MOV       R1,#-0x10
   \   000073   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2642          
   2643                  //Set the MAC address
   2644                  ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
   \   000076                ; Setup parameters for call to function ZMacSetReq
   \   000076   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   000078   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   00007A   7953         MOV       R1,#0x53
   \   00007C   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2645          
   2646                  if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   2647                    x = true;
   2648                  else
   2649                    x = false;
   \   00007F   90....       MOV       DPTR,#_NIB + 14
   \   000082   E0           MOVX      A,@DPTR
   \   000083   A2E3         MOV       C,0xE0 /* A   */.3
   \   000085   5004         JNC       ??ZDO_NetworkFormationConfirmCB_5
   \   000087   D2F0         SETB      B.0
   \   000089   8002         SJMP      ??ZDO_NetworkFormationConfirmCB_6
   \                     ??ZDO_NetworkFormationConfirmCB_5:
   \   00008B   C2F0         CLR       B.0
   \                     ??ZDO_NetworkFormationConfirmCB_6:
   \   00008D   A2F0         MOV       C,B.0
   \   00008F   E4           CLR       A
   \   000090   33           RLC       A
   \   000091   85..82       MOV       DPL,?XSP + 0
   \   000094   85..83       MOV       DPH,?XSP + 1
   \   000097   F0           MOVX      @DPTR,A
   2650                  ZMacSetReq( ZMacRxOnIdle, &x );
   \   000098                ; Setup parameters for call to function ZMacSetReq
   \   000098   AA..         MOV       R2,?XSP + 0
   \   00009A   AB..         MOV       R3,?XSP + 1
   \   00009C   7952         MOV       R1,#0x52
   \   00009E   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2651          
   2652                  // Change NIB state to router for restore
   2653                  _NIB.nwkState = NWK_ROUTER;
   \   0000A1   90....       MOV       DPTR,#_NIB + 35
   \   0000A4   7408         MOV       A,#0x8
   \   0000A6   F0           MOVX      @DPTR,A
   2654                  NLME_SetAssocFlags();
   \   0000A7                ; Setup parameters for call to function NLME_SetAssocFlags
   \   0000A7   12....       LCALL     `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
   2655          
   2656                  //Restore the nwk security material using the generic index
   2657                  ZDApp_RestoreNwkSecMaterial();
   \   0000AA                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   0000AA   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   2658          
   2659                  //Be sure to store the nwk FrameCounter if
   2660                  if(nwkFrameCounter == 0)
   \   0000AD   90....       MOV       DPTR,#nwkFrameCounter
   \   0000B0   12....       LCALL     ?XLOAD_R0123
   \   0000B3   E8           MOV       A,R0
   \   0000B4   49           ORL       A,R1
   \   0000B5   4A           ORL       A,R2
   \   0000B6   4B           ORL       A,R3
   \   0000B7   700D         JNZ       ??ZDO_NetworkFormationConfirmCB_7
   2661                  {
   2662                    nwkFrameCounter = 1;
   \   0000B9   90....       MOV       DPTR,#nwkFrameCounter
   \   0000BC   7401         MOV       A,#0x1
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   E4           CLR       A
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   F0           MOVX      @DPTR,A
   2663                  }
   2664          
   2665                  osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDO_NetworkFormationConfirmCB_7:
   \   0000C6                ; Setup parameters for call to function osal_set_event
   \   0000C6   7A00         MOV       R2,#0x0
   \   0000C8   7B03         MOV       R3,#0x3
   \   0000CA   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   2666          
   2667                  ZDSecMgrGenerateRndKey(tmpKey);
   \                     ??CrossCallReturnLabel_130:
   \   0000CD                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   0000CD   7401         MOV       A,#0x1
   \   0000CF   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D2   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2668          
   2669                  //Set the nwk key as the default and initialize the keySeqNum
   2670                  SSP_UpdateNwkKey( tmpKey, 0 );
   \   0000D5                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000D5   7900         MOV       R1,#0x0
   \   0000D7   7401         MOV       A,#0x1
   \   0000D9   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DC   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2671                  if ( !_NIB.nwkKeyLoaded )
   \   0000DF   90....       MOV       DPTR,#_NIB + 61
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_8
   2672                  {
   2673                    SSP_SwitchNwkKey( 0 );
   \   0000E5                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000E5   7900         MOV       R1,#0x0
   \   0000E7   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2674                  }
   2675          
   2676                  // Clear copy in RAM after use
   2677                  osal_memset(tmpKey,0,SEC_KEY_LEN);
   \                     ??ZDO_NetworkFormationConfirmCB_8:
   \   0000EA                ; Setup parameters for call to function osal_memset
   \   0000EA   7C10         MOV       R4,#0x10
   \   0000EC   7D00         MOV       R5,#0x0
   \   0000EE   7900         MOV       R1,#0x0
   \   0000F0   7401         MOV       A,#0x1
   \   0000F2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F5   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2678          
   2679                  //Success formation of distributed nwk
   2680                  bdb_nwkFormationAttempt(TRUE);
   \   0000F8                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   0000F8   7901         MOV       R1,#0x1
   \   0000FA   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
   2681                }
   2682              }
   2683            }
   2684          
   2685            else
   2686            {
   2687              #if defined(BLINK_LEDS)
   2688                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2689              #endif
   2690            }
   2691          
   2692          
   2693            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   0000FD                ; Setup parameters for call to function osal_set_event
   \   0000FD   7A02         MOV       R2,#0x2
   \   0000FF   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   2694          }
   \                     ??CrossCallReturnLabel_127:
   \   000102   7411         MOV       A,#0x11
   \   000104   02....       LJMP      ??Subroutine48_0 & 0xFFFF
   2695          
   2696          /****************************************************************************
   2697           * @fn          ZDApp_beaconIndProcessing
   2698           *
   2699           * @brief       This function processes the incoming beacon indication.
   2700           *
   2701           *              When another task (MT or App) is registered to process
   2702           *              beacon indication themselves, this function will parse the
   2703           *              beacon payload and pass the beacon descriptor to that task
   2704           *              If no other tasks registered, this function will process
   2705           *              the beacon payload and generate the network descriptor link
   2706           *              list.
   2707           *
   2708           * @param
   2709           *
   2710           * @return      none
   2711           *
   2712           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2713          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2714          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2715            // Pass the beacon Indication to another task if it registers the callback
   2716            // Otherwise, process the beacon notification here.
   2717            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   6006         JZ        ??ZDO_beaconNotifyIndCB_0
   2718            {
   2719              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL     ?CALL_IND
   \   000014   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2720            }
   2721            else
   2722            {
   2723              networkDesc_t *pNwkDesc;
   2724              networkDesc_t *pLastNwkDesc;
   2725              uint8 found = false;
   2726          
   2727              // Add the network to the Network Descriptor List
   2728              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV       DPTR,#NwkDescList
   \   00001A   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2729              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_106:
   \   00001D   90....       MOV       DPTR,#NwkDescList
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V2,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V3,A
   \   000027   EA           MOV       A,R2
   \   000028   2404         ADD       A,#0x4
   \   00002A   F5..         MOV       ?V6,A
   \   00002C   E4           CLR       A
   \   00002D   35..         ADDC      A,?V1
   \   00002F   F5..         MOV       ?V7,A
   \   000031   EA           MOV       A,R2
   \   000032   2402         ADD       A,#0x2
   \   000034   F5..         MOV       ?V4,A
   \   000036   E4           CLR       A
   \   000037   35..         ADDC      A,?V1
   \   000039   F5..         MOV       ?V5,A
   \   00003B   802B         SJMP      ??CrossCallReturnLabel_111
   2730              while (pNwkDesc)
   2731              {
   2732                if ((pNwkDesc->panId == pBeacon->panID) &&
   2733                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000040   85..82       MOV       DPL,?V4
   \   000043   85..83       MOV       DPH,?V5
   \   000046   E0           MOVX      A,@DPTR
   \   000047   68           XRL       A,R0
   \   000048   7003         JNZ       ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7012         JNZ       ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F8           MOV       R0,A
   \   000057   85..82       MOV       DPL,?V6
   \   00005A   85..83       MOV       DPH,?V7
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   68           XRL       A,R0
   \   00005F   6067         JZ        ??ZDO_beaconNotifyIndCB_5
   2734                {
   2735                  found = true;
   2736                  break;
   2737                }
   2738                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   8E..         MOV       ?V2,R6
   \   000063   8F..         MOV       ?V3,R7
   2739                pNwkDesc = pNwkDesc->nextDesc;
   \   000065   12....       LCALL     ?Subroutine23 & 0xFFFF
   2740              }
   \                     ??CrossCallReturnLabel_111:
   \   000068   EE           MOV       A,R6
   \   000069   4F           ORL       A,R7
   \   00006A   70D1         JNZ       ??ZDO_beaconNotifyIndCB_2
   2741          
   2742              // If no existing descriptor found, make a new one and add to the list
   2743              if (found == false)
   2744              {
   2745                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   7A16         MOV       R2,#0x16
   \   00006E   7B00         MOV       R3,#0x0
   \   000070   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV       ?V8,R2
   \   000075   8B..         MOV       ?V9,R3
   \   000077   AE..         MOV       R6,?V8
   \   000079   AF..         MOV       R7,?V9
   2746                if ( !pNwkDesc )
   \   00007B   EA           MOV       A,R2
   \   00007C   4F           ORL       A,R7
   \   00007D   7003         JNZ       $+5
   \   00007F   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2747                {
   2748                  // Memory alloc failed, discard this beacon
   2749                  return;
   2750                }
   2751          
   2752                // Clear the network descriptor
   2753                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000082                ; Setup parameters for call to function osal_memset
   \   000082   7C16         MOV       R4,#0x16
   \   000084   7D00         MOV       R5,#0x0
   \   000086   7900         MOV       R1,#0x0
   \   000088   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2754          
   2755                // Initialize the descriptor
   2756                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   74FE         MOV       A,#-0x2
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   04           INC       A
   \   00009B   F0           MOVX      @DPTR,A
   2757                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00009C   8E82         MOV       DPL,R6
   \   00009E   8F83         MOV       DPH,R7
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   F0           MOVX      @DPTR,A
   2758          
   2759                // Save new entry into the descriptor list
   2760                if ( !NwkDescList )
   \   0000AB   90....       MOV       DPTR,#NwkDescList
   \   0000AE   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000B1   7005         JNZ       ??ZDO_beaconNotifyIndCB_6
   2761                {
   2762                  NwkDescList = pNwkDesc;
   \   0000B3   90....       MOV       DPTR,#NwkDescList
   \   0000B6   800B         SJMP      ??ZDO_beaconNotifyIndCB_7
   2763                }
   2764                else
   2765                {
   2766                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B8   E5..         MOV       A,?V2
   \   0000BA   2414         ADD       A,#0x14
   \   0000BC   F582         MOV       DPL,A
   \   0000BE   E4           CLR       A
   \   0000BF   35..         ADDC      A,?V3
   \   0000C1   F583         MOV       DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   EF           MOV       A,R7
   \   0000C7   F0           MOVX      @DPTR,A
   2767                }
   2768              }
   2769          
   2770              // Update the descriptor with the incoming beacon
   2771              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C8   85..82       MOV       DPL,?V0
   \   0000CB   85..83       MOV       DPH,?V1
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000DA   A3           INC       DPTR
   \   0000DB   F0           MOVX      @DPTR,A
   2772              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000DC   E5..         MOV       A,?V0
   \   0000DE   2408         ADD       A,#0x8
   \   0000E0   F8           MOV       R0,A
   \   0000E1   E4           CLR       A
   \   0000E2   35..         ADDC      A,?V1
   \   0000E4   F9           MOV       R1,A
   \   0000E5   8882         MOV       DPL,R0
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000EC   F0           MOVX      @DPTR,A
   2773              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000ED   85..82       MOV       DPL,?V6
   \   0000F0   85..83       MOV       DPH,?V7
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   8E82         MOV       DPL,R6
   \   0000F6   8F83         MOV       DPH,R7
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   F0           MOVX      @DPTR,A
   2774              pNwkDesc->panId          = pBeacon->panID;
   \   0000FB   85..82       MOV       DPL,?V4
   \   0000FE   85..83       MOV       DPH,?V5
   \   000101   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000104   8E82         MOV       DPL,R6
   \   000106   8F83         MOV       DPH,R7
   \   000108   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   2775              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_133:
   \   00010B   E5..         MOV       A,?V0
   \   00010D   240C         ADD       A,#0xc
   \   00010F   F582         MOV       DPL,A
   \   000111   E4           CLR       A
   \   000112   35..         ADDC      A,?V1
   \   000114   F583         MOV       DPH,A
   \   000116   E0           MOVX      A,@DPTR
   \   000117   C0E0         PUSH      A
   \   000119   EE           MOV       A,R6
   \   00011A   2413         ADD       A,#0x13
   \   00011C   F582         MOV       DPL,A
   \   00011E   E4           CLR       A
   \   00011F   3F           ADDC      A,R7
   \   000120   F583         MOV       DPH,A
   \   000122   D0E0         POP       A
   \   000124   F0           MOVX      @DPTR,A
   2776          
   2777              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2778              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000125   EE           MOV       A,R6
   \   000126   240B         ADD       A,#0xb
   \   000128   FA           MOV       R2,A
   \   000129   E4           CLR       A
   \   00012A   3F           ADDC      A,R7
   \   00012B   FB           MOV       R3,A
   \   00012C   8882         MOV       DPL,R0
   \   00012E   8983         MOV       DPH,R1
   \   000130   E0           MOVX      A,@DPTR
   \   000131   6401         XRL       A,#0x1
   \   000133   600E         JZ        ??ZDO_beaconNotifyIndCB_8
   2779              {
   2780                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000135                ; Setup parameters for call to function sAddrExtCpy
   \   000135   E5..         MOV       A,?V0
   \   000137   240D         ADD       A,#0xd
   \   000139   FC           MOV       R4,A
   \   00013A   E4           CLR       A
   \   00013B   35..         ADDC      A,?V1
   \   00013D   FD           MOV       R5,A
   \   00013E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000141   8009         SJMP      ??ZDO_beaconNotifyIndCB_9
   2781              }
   2782              else
   2783              {
   2784                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000143                ; Setup parameters for call to function osal_memset
   \   000143   7C08         MOV       R4,#0x8
   \   000145   7D00         MOV       R5,#0x0
   \   000147   79FF         MOV       R1,#-0x1
   \   000149   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2785              }
   2786          
   2787              // check if this device is a better choice to join...
   2788              // ...dont bother checking assocPermit flag is doing a rejoin
   2789              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2790                  ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014C   E5..         MOV       A,?V0
   \   00014E   240A         ADD       A,#0xa
   \   000150   F8           MOV       R0,A
   \   000151   E4           CLR       A
   \   000152   35..         ADDC      A,?V1
   \   000154   88..         MOV       ?V2,R0
   \   000156   F5..         MOV       ?V3,A
   \   000158   8882         MOV       DPL,R0
   \   00015A   F583         MOV       DPH,A
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F8           MOV       R0,A
   \   00015E   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   000161   E0           MOVX      A,@DPTR
   \   000162   C3           CLR       C
   \   000163   98           SUBB      A,R0
   \   000164   4003         JC        $+5
   \   000166   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000169   85..82       MOV       DPL,?V0
   \   00016C   85..83       MOV       DPH,?V1
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   E0           MOVX      A,@DPTR
   \   000175   6401         XRL       A,#0x1
   \   000177   6009         JZ        ??ZDO_beaconNotifyIndCB_10
   \   000179                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000179   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   00017C   E9           MOV       A,R1
   \   00017D   7003         JNZ       $+5
   \   00017F   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2791              {
   2792                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000182   C2F0         CLR       B.0
   2793                uint8 capacity = FALSE;
   2794          
   2795          #if defined ( ZIGBEEPRO )
   2796                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2797                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2798                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2799                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000184   85..82       MOV       DPL,?V2
   \   000187   85..83       MOV       DPH,?V3
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   F5..         MOV       ?V4,A
   \   00018D   EE           MOV       A,R6
   \   00018E   2409         ADD       A,#0x9
   \   000190   F8           MOV       R0,A
   \   000191   E4           CLR       A
   \   000192   3F           ADDC      A,R7
   \   000193   F9           MOV       R1,A
   \   000194   8882         MOV       DPL,R0
   \   000196   F583         MOV       DPH,A
   \   000198   E0           MOVX      A,@DPTR
   \   000199   F5..         MOV       ?V5,A
   \   00019B   EE           MOV       A,R6
   \   00019C   240A         ADD       A,#0xa
   \   00019E   FA           MOV       R2,A
   \   00019F   E4           CLR       A
   \   0001A0   3F           ADDC      A,R7
   \   0001A1   FB           MOV       R3,A
   \   0001A2   E5..         MOV       A,?V0
   \   0001A4   240B         ADD       A,#0xb
   \   0001A6   FC           MOV       R4,A
   \   0001A7   E4           CLR       A
   \   0001A8   35..         ADDC      A,?V1
   \   0001AA   FD           MOV       R5,A
   \   0001AB   E5..         MOV       A,?V5
   \   0001AD   C3           CLR       C
   \   0001AE   95..         SUBB      A,?V4
   \   0001B0   500C         JNC       ??ZDO_beaconNotifyIndCB_11
   \   0001B2   8C82         MOV       DPL,R4
   \   0001B4   8D83         MOV       DPH,R5
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   C3           CLR       C
   \   0001B8   9414         SUBB      A,#0x14
   \   0001BA   4019         JC        ??ZDO_beaconNotifyIndCB_12
   \   0001BC   8019         SJMP      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001BE   E5..         MOV       A,?V5
   \   0001C0   65..         XRL       A,?V4
   \   0001C2   7013         JNZ       ??ZDO_beaconNotifyIndCB_13
   \   0001C4   8A82         MOV       DPL,R2
   \   0001C6   8B83         MOV       DPH,R3
   \   0001C8   E0           MOVX      A,@DPTR
   \   0001C9   F5..         MOV       ?V4,A
   \   0001CB   8C82         MOV       DPL,R4
   \   0001CD   8D83         MOV       DPH,R5
   \   0001CF   E0           MOVX      A,@DPTR
   \   0001D0   C3           CLR       C
   \   0001D1   95..         SUBB      A,?V4
   \   0001D3   5002         JNC       ??ZDO_beaconNotifyIndCB_13
   2800                {
   2801                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D5   D2F0         SETB      B.0
   2802                }
   2803          #else
   2804                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2805                {
   2806                  selected = TRUE;
   2807                }
   2808          #endif
   2809          
   2810                if ( ZSTACK_ROUTER_BUILD )
   2811                {
   2812                  capacity = pBeacon->routerCapacity;
   2813                }
   2814                else if ( ZSTACK_END_DEVICE_BUILD )
   2815                {
   2816                  capacity = pBeacon->deviceCapacity;
   2817                }
   2818          
   2819                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D7   E5..         MOV       A,?V0
   \   0001D9   2407         ADD       A,#0x7
   \   0001DB   F5..         MOV       ?V4,A
   \   0001DD   E4           CLR       A
   \   0001DE   35..         ADDC      A,?V1
   \   0001E0   F5..         MOV       ?V5,A
   \   0001E2   85..82       MOV       DPL,?V4
   \   0001E5   F583         MOV       DPH,A
   \   0001E7   E0           MOVX      A,@DPTR
   \   0001E8   701B         JNZ       ??ZDO_beaconNotifyIndCB_14
   \   0001EA   85..82       MOV       DPL,?V0
   \   0001ED   85..83       MOV       DPH,?V1
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   F5..         MOV       ?V6,A
   \   0001F3   A3           INC       DPTR
   \   0001F4   E0           MOVX      A,@DPTR
   \   0001F5   F5..         MOV       ?V7,A
   \   0001F7   90....       MOV       DPTR,#_NIB + 23
   \   0001FA   E0           MOVX      A,@DPTR
   \   0001FB   65..         XRL       A,?V6
   \   0001FD   7004         JNZ       ??ZDO_beaconNotifyIndCB_15
   \   0001FF   A3           INC       DPTR
   \   000200   E0           MOVX      A,@DPTR
   \   000201   65..         XRL       A,?V7
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000203   7048         JNZ       ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000205   A2F0         MOV       C,B.0
   \   000207   5030         JNC       ??ZDO_beaconNotifyIndCB_17
   2820                {
   2821                  // this is the new chosen router for joining...
   2822                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   000209   85..82       MOV       DPL,?V0
   \   00020C   85..83       MOV       DPH,?V1
   \   00020F   E0           MOVX      A,@DPTR
   \   000210   F5..         MOV       ?V6,A
   \   000212   A3           INC       DPTR
   \   000213   E0           MOVX      A,@DPTR
   \   000214   F5..         MOV       ?V7,A
   \   000216   8E82         MOV       DPL,R6
   \   000218   8F83         MOV       DPH,R7
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   A3           INC       DPTR
   \   000221   E5..         MOV       A,?V6
   \   000223   F0           MOVX      @DPTR,A
   \   000224   A3           INC       DPTR
   \   000225   E5..         MOV       A,?V7
   \   000227   12....       LCALL     ?Subroutine13 & 0xFFFF
   2823                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_6:
   \   00022A   8882         MOV       DPL,R0
   \   00022C   8983         MOV       DPH,R1
   \   00022E   F0           MOVX      @DPTR,A
   2824                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   00022F   8C82         MOV       DPL,R4
   \   000231   8D83         MOV       DPH,R5
   \   000233   E0           MOVX      A,@DPTR
   \   000234   8A82         MOV       DPL,R2
   \   000236   8B83         MOV       DPH,R3
   \   000238   F0           MOVX      @DPTR,A
   2825                }
   2826          
   2827                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000239   85..82       MOV       DPL,?V4
   \   00023C   85..83       MOV       DPH,?V5
   \   00023F   E0           MOVX      A,@DPTR
   \   000240   600B         JZ        ??ZDO_beaconNotifyIndCB_16
   2828                  pNwkDesc->deviceCapacity = 1;
   \   000242   8E82         MOV       DPL,R6
   \   000244   8F83         MOV       DPH,R7
   \   000246   A3           INC       DPTR
   \   000247   A3           INC       DPTR
   \   000248   A3           INC       DPTR
   \   000249   A3           INC       DPTR
   \   00024A   7401         MOV       A,#0x1
   \   00024C   F0           MOVX      @DPTR,A
   2829          
   2830                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   00024D   85..82       MOV       DPL,?V0
   \   000250   85..83       MOV       DPH,?V1
   \   000253   A3           INC       DPTR
   \   000254   A3           INC       DPTR
   \   000255   A3           INC       DPTR
   \   000256   A3           INC       DPTR
   \   000257   A3           INC       DPTR
   \   000258   A3           INC       DPTR
   \   000259   E0           MOVX      A,@DPTR
   \   00025A   600A         JZ        ??ZDO_beaconNotifyIndCB_1
   2831                  pNwkDesc->routerCapacity = 1;
   \   00025C   8E82         MOV       DPL,R6
   \   00025E   8F83         MOV       DPH,R7
   \   000260   A3           INC       DPTR
   \   000261   A3           INC       DPTR
   \   000262   A3           INC       DPTR
   \   000263   7401         MOV       A,#0x1
   \   000265   F0           MOVX      @DPTR,A
   2832              }
   2833            }
   2834          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000266   7F0A         MOV       R7,#0xa
   \   000268   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
   2835          
   2836          /*********************************************************************
   2837           * @fn          ZDO_StartRouterConfirmCB
   2838           *
   2839           * @brief       This function reports the results of the request to
   2840           *              start functioning as a router in a network.
   2841           *
   2842           * @param       Status - Result of NLME_StartRouterRequest()
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2847          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2848            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2849          
   2850            if ( Status == ZSUCCESS )
   \   00000A   700B         JNZ       ??ZDO_StartRouterConfirmCB_0
   2851            {
   2852              // LED on shows Router started
   2853              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2854              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2855              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7005         JNZ       ??ZDO_StartRouterConfirmCB_0
   2856              {
   2857                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7906         MOV       R1,#0x6
   \   000014   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2858              }
   2859            }
   2860          #if defined(BLINK_LEDS)
   2861            else
   2862            {
   2863              zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2864            }
   2865          #endif
   2866          
   2867            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A20         MOV       R2,#0x20
   \   000019   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   2868          }
   \                     ??CrossCallReturnLabel_128:
   \   00001C   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   2869          
   2870          /*********************************************************************
   2871           * @fn          ZDO_JoinConfirmCB
   2872           *
   2873           * @brief       This function allows the next higher layer to be notified
   2874           *              of the results of its request to join itself or another
   2875           *              device to a network.
   2876           *
   2877           * @param       Status - Result of NLME_JoinRequest()
   2878           *
   2879           * @return      none
   2880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2881          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2882          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   2883            (void)PanId;  // remove if this parameter is used.
   2884          
   2885            nwkStatus = (byte)Status;
   \   00000C   E9           MOV       A,R1
   \   00000D   90....       MOV       DPTR,#nwkStatus
   \   000010   F0           MOVX      @DPTR,A
   2886          
   2887            if ( Status == ZSUCCESS )
   \   000011   7079         JNZ       ??ZDO_JoinConfirmCB_0
   2888            {
   2889              if ( ZSTACK_END_DEVICE_BUILD
   2890                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2891              {
   2892                neighborEntry_t *pItem;
   2893          
   2894                // We don't need the neighbor table entries.
   2895                // Clear the neighbor Table to remove beacon information
   2896                nwkNeighborInitTable();
   \   000013                ; Setup parameters for call to function nwkNeighborInitTable
   \   000013   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2897          
   2898                // Force a neighbor table entry for the parent
   2899                pItem = nwkNeighborFindEmptySlot();
   \   000016                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000016   12....       LCALL     `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000019   8A..         MOV       ?V2,R2
   \   00001B   8B..         MOV       ?V3,R3
   \   00001D   AE..         MOV       R6,?V2
   \   00001F   AF..         MOV       R7,?V3
   2900                if ( pItem != NULL )
   \   000021   EA           MOV       A,R2
   \   000022   4F           ORL       A,R7
   \   000023   605C         JZ        ??ZDO_JoinConfirmCB_1
   2901                {
   2902                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000025                ; Setup parameters for call to function osal_memset
   \   000025   7C17         MOV       R4,#0x17
   \   000027   7D00         MOV       R5,#0x0
   \   000029   7900         MOV       R1,#0x0
   \   00002B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2903                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   00002E   90....       MOV       DPTR,#_NIB + 23
   \   000031   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   E8           MOV       A,R0
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   E9           MOV       A,R1
   \   00003C   F0           MOVX      @DPTR,A
   2904                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   7C..         MOV       R4,#(_NIB + 25) & 0xff
   \   00003F   7D..         MOV       R5,#((_NIB + 25) >> 8) & 0xff
   \   000041   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000044   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2905                  pItem->panId = _NIB. nwkPanId;
   \   000047   90....       MOV       DPTR,#_NIB + 33
   \   00004A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   E8           MOV       A,R0
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   E9           MOV       A,R1
   \   000054   F0           MOVX      @DPTR,A
   2906                  pItem->linkInfo.rxLqi = DEF_LQI;
   \   000055   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000058   74AA         MOV       A,#-0x56
   \   00005A   F0           MOVX      @DPTR,A
   2907                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   00005B   90....       MOV       DPTR,#gLINK_DOWN_TRIGGER
   \   00005E   E4           CLR       A
   \   00005F   93           MOVC      A,@A+DPTR
   \   000060   7900         MOV       R1,#0x0
   \   000062   2401         ADD       A,#0x1
   \   000064   F8           MOV       R0,A
   \   000065   5001         JNC       ??ZDO_JoinConfirmCB_2
   \   000067   09           INC       R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000068   7A02         MOV       R2,#0x2
   \   00006A   7B00         MOV       R3,#0x0
   \   00006C   12....       LCALL     ?S_DIV_MOD
   \   00006F   EE           MOV       A,R6
   \   000070   240D         ADD       A,#0xd
   \   000072   F582         MOV       DPL,A
   \   000074   E4           CLR       A
   \   000075   3F           ADDC      A,R7
   \   000076   F583         MOV       DPH,A
   \   000078   E8           MOV       A,R0
   \   000079   F0           MOVX      @DPTR,A
   2908                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   00007A   EE           MOV       A,R6
   \   00007B   12....       LCALL     ?Subroutine42 & 0xFFFF
   2909                }
   2910              }
   \                     ??CrossCallReturnLabel_46:
   \   00007E   7401         MOV       A,#0x1
   \   000080   F0           MOVX      @DPTR,A
   2911          
   2912              // LED on shows device joined
   2913              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2914              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2915              if ( (devState == DEV_HOLD) )
   \                     ??ZDO_JoinConfirmCB_1:
   \   000081   90....       MOV       DPTR,#devState
   \   000084   E0           MOVX      A,@DPTR
   \   000085   7005         JNZ       ??ZDO_JoinConfirmCB_0
   2916              {
   2917                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000087                ; Setup parameters for call to function ZDApp_ChangeState
   \   000087   7903         MOV       R1,#0x3
   \   000089   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2918              }
   2919          
   2920              if ( !ZG_SECURE_ENABLED )
   2921              {
   2922                // Notify to save info into NV
   2923                ZDApp_NVUpdate();
   2924              }
   2925            }
   2926            else
   2927            {
   2928          #if defined(BLINK_LEDS)
   2929              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2930          #endif
   2931            }
   2932          
   2933            // Pass the join confirm to higher layer if callback registered
   2934            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   00008C   90....       MOV       DPTR,#zdoCBFunc + 8
   \   00008F   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000092   6030         JZ        ??ZDO_JoinConfirmCB_3
   2935            {
   2936              zdoJoinCnf_t joinCnf;
   2937          
   2938              joinCnf.status = Status;
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   E5..         MOV       A,?V0
   \   00009C   F0           MOVX      @DPTR,A
   2939              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   00009D   90....       MOV       DPTR,#_NIB + 20
   \   0000A0   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A3   7401         MOV       A,#0x1
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   2940              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_134:
   \   0000AB   90....       MOV       DPTR,#_NIB + 23
   \   0000AE   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000B1   7403         MOV       A,#0x3
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   2941          
   2942              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_135:
   \   0000B9                ; Setup parameters for indirect call
   \   0000B9   AA..         MOV       R2,?XSP + 0
   \   0000BB   AB..         MOV       R3,?XSP + 1
   \   0000BD   8882         MOV       DPL,R0
   \   0000BF   8983         MOV       DPH,R1
   \   0000C1   12....       LCALL     ?CALL_IND
   2943            }
   2944          
   2945            // Notify ZDApp
   2946            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000C4                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000C4   7C00         MOV       R4,#0x0
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   7B02         MOV       R3,#0x2
   \   0000CA   7A02         MOV       R2,#0x2
   \   0000CC   12....       LCALL     ?Subroutine28 & 0xFFFF
   2947          
   2948          }
   \                     ??CrossCallReturnLabel_29:
   \   0000CF   7405         MOV       A,#0x5
   \   0000D1   02....       LJMP      ??Subroutine52_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine63_0
   \   000001                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3F           ADDC      A,R7
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
   2949          
   2950          /*********************************************************************
   2951           * @fn          ZDO_PermitJoinCB
   2952           *
   2953           * @brief      This function is called when there is a change in the
   2954           *             device's permit join status.
   2955           *
   2956           * @param       duration - the new duration
   2957           *
   2958           * @return      none
   2959           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2960          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2961          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2962            // Pass the Permit Join status to higher layer if callback registered
   2963            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000017   6007         JZ        ??ZDO_PermitJoinCB_0
   2964            {
   2965              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ?CALL_IND
   2966            }
   2967          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV       A,#0x1
   \   000022   02....       LJMP      ?Subroutine3 & 0xFFFF
   2968          
   2969          /*********************************************************************
   2970           * @fn          ZDO_AddrChangeIndicationCB
   2971           *
   2972           * @brief       This function notifies the application that this
   2973           *              device's address has changed.  Could happen in
   2974           *              a network with stochastic addressing (PRO).
   2975           *
   2976           * @param       newAddr - the new address
   2977           *
   2978           * @return      none
   2979           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2980          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2981          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2982            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2983            epList_t *pItem = epList;
   \   000009   90....       MOV       DPTR,#epList
   \   00000C   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2984          
   2985            // Notify to save info into NV
   2986            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_107:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2987          
   2988            // Notify the applications
   2989            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000015   8043         SJMP      ??CrossCallReturnLabel_108
   2990          
   2991            while (pItem != NULL)
   2992            {
   2993              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000017   EE           MOV       A,R6
   \   000018   2402         ADD       A,#0x2
   \   00001A   F8           MOV       R0,A
   \   00001B   E4           CLR       A
   \   00001C   3F           ADDC      A,R7
   \   00001D   88..         MOV       ?V2,R0
   \   00001F   F5..         MOV       ?V3,A
   \   000021   8882         MOV       DPL,R0
   \   000023   F583         MOV       DPH,A
   \   000025   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000028   6029         JZ        ??ZDO_AddrChangeIndicationCB_1
   2994              {
   2995                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00002A                ; Setup parameters for call to function osal_msg_allocate
   \   00002A   7A04         MOV       R2,#0x4
   \   00002C   7B00         MOV       R3,#0x0
   \   00002E   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2996                if (pZDOAddrChangeMsg != NULL)
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   601E         JZ        ??ZDO_AddrChangeIndicationCB_1
   2997                {
   2998                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   74D6         MOV       A,#-0x2a
   \   00003B   F0           MOVX      @DPTR,A
   2999                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E5..         MOV       A,?V0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E5..         MOV       A,?V1
   \   000044   12....       LCALL     ?Subroutine13 & 0xFFFF
   3000                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   3001                }
   3002              }
   \                     ??CrossCallReturnLabel_7:
   \   000047   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00004F   F9           MOV       R1,A
   \   000050   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   3003              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   3004            }
   \                     ??CrossCallReturnLabel_108:
   \   00005A   EE           MOV       A,R6
   \   00005B   4F           ORL       A,R7
   \   00005C   70B9         JNZ       ??ZDO_AddrChangeIndicationCB_0
   3005          
   3006            // Send out a device announce
   3007            ZDApp_AnnounceNewAddress();
   \   00005E                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005E   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   3008          }
   \   000061   02....       LJMP      ?Subroutine1 & 0xFFFF
   3009          
   3010          /*********************************************************************
   3011           * @fn          ZDO_JoinIndicationCB
   3012           *
   3013           * @brief       This function allows the next higher layer of a
   3014           *              coordinator to be notified of a remote join request.
   3015           *
   3016           * @param       ShortAddress - 16-bit address
   3017           * @param       ExtendedAddress - IEEE (64-bit) address
   3018           * @param       CapabilityFlags - Association Capability Flags
   3019           * @param       type - of joining -
   3020           *                          NWK_ASSOC_JOIN
   3021           *                          NWK_ASSOC_REJOIN_UNSECURE
   3022           *                          NWK_ASSOC_REJOIN_SECURE
   3023           *
   3024           * @return      ZStatus_t
   3025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3026          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   3027                                          uint8 CapabilityFlags, uint8 type)
   3028          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   3029            (void)ExtendedAddress;
   3030            //check if the device is leaving before responding to rejoin request
   3031            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \                     ??CrossCallReturnLabel_82:
   \   000008   6005         JZ        ??ZDO_JoinIndicationCB_0
   3032            {
   3033              return ZFailure; // device leaving , hence do not allow rejoin
   \   00000A   7901         MOV       R1,#0x1
   \   00000C   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3034            }
   3035          
   3036          #if ZDO_NV_SAVE_RFDs
   3037              (void)CapabilityFlags;
   3038          
   3039          #else  // if !ZDO_NV_SAVE_RFDs
   3040              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   3041          #endif
   3042              {
   3043                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   3044              }
   3045          
   3046              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   3047              {
   3048                if ( type == NWK_ASSOC_JOIN ||
   3049                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   3050                      type == NWK_ASSOC_REJOIN_SECURE )
   \   000019   600D         JZ        ??ZDO_JoinIndicationCB_2
   \   00001B   7401         MOV       A,#0x1
   \   00001D   68           XRL       A,R0
   \   00001E   6008         JZ        ??ZDO_JoinIndicationCB_2
   \   000020   7402         MOV       A,#0x2
   \   000022   68           XRL       A,R0
   \   000023   6003         JZ        $+5
   \   000025   02....       LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
   3051                {
   3052                  uint16 timeToFire;
   3053                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   3054          
   3055                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   7A06         MOV       R2,#0x6
   \   00002A   7B00         MOV       R3,#0x0
   \   00002C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002F   8A..         MOV       ?V2,R2
   \   000031   8B..         MOV       ?V3,R3
   \   000033   AE..         MOV       R6,?V2
   \   000035   AF..         MOV       R7,?V3
   3056          
   3057                  if ( pNewDevice == NULL )
   \   000037   EA           MOV       A,R2
   \   000038   4F           ORL       A,R7
   \   000039   7005         JNZ       ??ZDO_JoinIndicationCB_4
   3058                  {
   3059                    // Memory alloc failed
   3060                    return ZMemError;
   \   00003B   7910         MOV       R1,#0x10
   \   00003D   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3061                  }
   3062          
   3063                  // Add the new device to the New Device List
   3064                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   000040   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000043   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000046   7006         JNZ       ??ZDO_JoinIndicationCB_5
   3065                  {
   3066                    // The list is empty, add the first element
   3067                    ZDApp_NewDeviceList = pNewDevice;
   \   000048   EA           MOV       A,R2
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   EB           MOV       A,R3
   \   00004C   801B         SJMP      ??ZDO_JoinIndicationCB_6
   3068                  }
   3069                  else
   3070                  {
   3071                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FA           MOV       R2,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   8003         SJMP      ??ZDO_JoinIndicationCB_7
   3072          
   3073                    // Walk the list to last element
   3074                    while ( pDeviceList->next )
   3075                    {
   3076                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000054   E8           MOV       A,R0
   \   000055   FA           MOV       R2,A
   \   000056   E9           MOV       A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   000057   FB           MOV       R3,A
   3077                    }
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00005F   70F3         JNZ       ??ZDO_JoinIndicationCB_8
   3078          
   3079                    // Add new device at the end
   3080                    pDeviceList->next = pNewDevice;
   \   000061   8A82         MOV       DPL,R2
   \   000063   8B83         MOV       DPH,R3
   \   000065   EE           MOV       A,R6
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   EF           MOV       A,R7
   \                     ??ZDO_JoinIndicationCB_6:
   \   000069   F0           MOVX      @DPTR,A
   3081                  }
   3082          
   3083                  // get the remaining time of the timer
   3084                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   00006A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00006A   7A40         MOV       R2,#0x40
   \   00006C   7B00         MOV       R3,#0x0
   \   00006E   90....       MOV       DPTR,#ZDAppTaskID
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F9           MOV       R1,A
   \   000073   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000076   8A..         MOV       ?V4,R2
   \   000078   8B..         MOV       ?V5,R3
   3085          
   3086                  pNewDevice->next = NULL;
   \   00007A   8E82         MOV       DPL,R6
   \   00007C   8F83         MOV       DPH,R7
   \   00007E   E4           CLR       A
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   A3           INC       DPTR
   \   000081   F0           MOVX      @DPTR,A
   3087                  pNewDevice->shortAddr = ShortAddress;
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   E5..         MOV       A,?V0
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   E5..         MOV       A,?V1
   \   00008E   F0           MOVX      @DPTR,A
   3088                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   00008F   7458         MOV       A,#0x58
   \   000091   C3           CLR       C
   \   000092   95..         SUBB      A,?V4
   \   000094   F8           MOV       R0,A
   \   000095   7402         MOV       A,#0x2
   \   000097   95..         SUBB      A,?V5
   \   000099   F9           MOV       R1,A
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E8           MOV       A,R0
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E9           MOV       A,R1
   \   0000A6   F0           MOVX      @DPTR,A
   3089          
   3090                  // Start the timer only if there is no pending timer
   3091                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   0000A7   7458         MOV       A,#0x58
   \   0000A9   68           XRL       A,R0
   \   0000AA   7003         JNZ       ??ZDO_JoinIndicationCB_9
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   69           XRL       A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000AF   700E         JNZ       ??ZDO_JoinIndicationCB_3
   3092                  {
   3093                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000B1                ; Setup parameters for call to function osal_start_timerEx
   \   0000B1   90....       MOV       DPTR,#__Constant_258
   \   0000B4   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000B7   7A40         MOV       R2,#0x40
   \   0000B9   12....       LCALL     ?Subroutine17 & 0xFFFF
   3094                  }
   3095                }
   3096              }
   \                     ??CrossCallReturnLabel_86:
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
   3097          
   3098              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000BF   7900         MOV       R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000C1   02....       LJMP      ?Subroutine2 & 0xFFFF
   3099          
   3100          }
   3101          
   3102          /*********************************************************************
   3103           * @fn          ZDO_ConcentratorIndicationCB
   3104           *
   3105           * @brief       This function allows the next higher layer of a
   3106           *              device to be notified of existence of the concentrator.
   3107           *
   3108           * @param       nwkAddr - 16-bit NWK address of the concentrator
   3109           * @param       extAddr - pointer to extended Address
   3110           *                        NULL if not available
   3111           * @param       pktCost - PktCost from RREQ
   3112           *
   3113           * @return      void
   3114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7405         MOV       A,#0x5
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3115          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   3116          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3117            zdoConcentratorInd_t conInd;
   3118          
   3119            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   3120            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_137:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   3121            conInd.pktCost = pktCost;
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
   3122          
   3123            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000024   6007         JZ        ??ZDO_ConcentratorIndicationCB_0
   3124            {
   3125              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ?CALL_IND
   3126            }
   3127          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine72_0
   \   000006                ; // Fall through to label ??Subroutine72_0
   3128          
   3129          /*********************************************************************
   3130           * @fn          ZDO_LeaveCnf
   3131           *
   3132           * @brief       This function allows the next higher layer to be
   3133           *              notified of the results of its request for this or
   3134           *              a child device to leave the network.
   3135           *
   3136           * @param       cnf - NLME_LeaveCnf_t
   3137           *
   3138           * @return      none
   3139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3140          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   3141          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3142            // Check for this device
   3143            if ( osal_ExtAddrEqual( cnf->extAddr,
   3144                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AC..         MOV       R4,?V0
   \   000012   AD..         MOV       R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000017   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV       A,R1
   \   00001B   6401         XRL       A,#0x1
   \   00001D   701A         JNZ       ??CrossCallReturnLabel_114
   3145            {
   3146              // Pass the leave confirm to higher layer if callback registered
   3147              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   3148                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV       DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000025   600B         JZ        ??ZDO_LeaveCnf_0
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     ?CALL_IND
   \   00002E   EA           MOV       A,R2
   \   00002F   4B           ORL       A,R3
   \   000030   7007         JNZ       ??CrossCallReturnLabel_114
   3149              {
   3150                // Prepare to leave with reset
   3151                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_0:
   \   000032                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000032   EE           MOV       A,R6
   \   000033   12....       LCALL     ?Subroutine45 & 0xFFFF
   3152              }
   3153            }
   \                     ??CrossCallReturnLabel_52:
   \   000036   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   3154            else if ( ZSTACK_ROUTER_BUILD )
   3155            {
   3156              // Remove device address(optionally descendents) from data
   3157              ZDApp_LeaveUpdate( cnf->dstAddr,
   3158                                 cnf->extAddr,
   3159                                 cnf->removeChildren,
   3160                                 cnf->rejoin );
   3161            }
   3162          }
   \                     ??CrossCallReturnLabel_114:
   \   000039   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
   3163          
   3164          /*********************************************************************
   3165           * @fn          ZDO_LeaveInd
   3166           *
   3167           * @brief       This function allows the next higher layer of a
   3168           *              device to be notified of a remote leave request or
   3169           *              indication.
   3170           *
   3171           * @param       ind - NLME_LeaveInd_t
   3172           *
   3173           * @return      none
   3174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3175          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   3176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3177            uint8 leave;
   3178          
   3179            // NWK layer filters out illegal requests
   3180            if ( ind->request == TRUE )
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F8           MOV       R0,A
   \   000012   E4           CLR       A
   \   000013   3F           ADDC      A,R7
   \   000014   88..         MOV       ?V0,R0
   \   000016   F5..         MOV       ?V1,A
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6401         XRL       A,#0x1
   \   000029   7045         JNZ       ??ZDO_LeaveInd_0
   3181            {
   3182              byte temp = FALSE;
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   3183          
   3184              // Only respond if we are not rejoining the network
   3185              if ( ind->rejoin == FALSE )
   \   000032   8882         MOV       DPL,R0
   \   000034   85..83       MOV       DPH,?V1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   701E         JNZ       ??ZDO_LeaveInd_1
   3186              {
   3187                // Notify network of leave
   3188                NLME_LeaveRsp_t rsp;
   3189                rsp.rejoin = ind->rejoin;
   \   00003A   7401         MOV       A,#0x1
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E4           CLR       A
   \   000040   F0           MOVX      @DPTR,A
   3190          
   3191                if ( ZSTACK_ROUTER_BUILD )
   3192                {
   3193                  rsp.removeChildren = ind->removeChildren;
   3194                }
   3195                else if ( ZSTACK_END_DEVICE_BUILD )
   3196                {
   3197                  NLME_SetResponseRate(0);
   \   000041                ; Setup parameters for call to function NLME_SetResponseRate
   \   000041   FA           MOV       R2,A
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     ?Subroutine37 & 0xFFFF
   3198                  NLME_SetQueuedPollRate(0);
   3199                  rsp.removeChildren = 0;
   \                     ??CrossCallReturnLabel_41:
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
   3200                }
   3201          
   3202                bdb_setFN();
   \   00004E                ; Setup parameters for call to function bdb_setFN
   \   00004E   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   3203          
   3204                NLME_LeaveRsp( &rsp );
   \   000051                ; Setup parameters for call to function NLME_LeaveRsp
   \   000051   AA..         MOV       R2,?XSP + 0
   \   000053   AB..         MOV       R3,?XSP + 1
   \   000055   12....       LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   3205              }
   3206          
   3207              if ( ZSTACK_END_DEVICE_BUILD )
   3208              {
   3209                // Stop polling and get ready to reset
   3210                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   000058                ; Setup parameters for call to function NLME_SetPollRate
   \   000058   90....       MOV       DPTR,#__Constant_0
   \   00005B   12....       LCALL     ?XLOAD_R2345
   \   00005E   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   3211              }
   3212          
   3213              // Prepare to leave with reset
   3214              ZDApp_LeaveReset( ind->rejoin );
   \   000061                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000061   12....       LCALL     ?Subroutine29 & 0xFFFF
   3215          
   3216              //Turn on the radio to avoid sending packets after sending the leave
   3217              ZMacSetReq(ZMacRxOnIdle, &temp);
   \                     ??CrossCallReturnLabel_112:
   \   000064                ; Setup parameters for call to function ZMacSetReq
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?XSTACK_DISP101_8
   \   000069   7952         MOV       R1,#0x52
   \   00006B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00006E   8057         SJMP      ??ZDO_LeaveInd_2
   3218            }
   3219            else
   3220            {
   3221              leave = FALSE;
   3222          
   3223              // Check if this device needs to leave as a child or descendent
   3224              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000070                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000070   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000073   8A..         MOV       ?V2,R2
   \   000075   8B..         MOV       ?V3,R3
   \   000077   EE           MOV       A,R6
   \   000078   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00007B   F9           MOV       R1,A
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000083   E5..         MOV       A,?V2
   \   000085   6A           XRL       A,R2
   \   000086   7003         JNZ       ??ZDO_LeaveInd_3
   \   000088   E5..         MOV       A,?V3
   \   00008A   6B           XRL       A,R3
   \                     ??ZDO_LeaveInd_3:
   \   00008B   701D         JNZ       ??ZDO_LeaveInd_4
   3225              {
   3226                if ( ( ind->removeChildren == TRUE )   )
   \   00008D   7401         MOV       A,#0x1
   \   00008F   69           XRL       A,R1
   \   000090   6013         JZ        ??ZDO_LeaveInd_5
   3227                {
   3228                  leave = TRUE;
   3229                }
   3230                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   000092   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000095   E0           MOVX      A,@DPTR
   \   000096   5407         ANL       A,#0x7
   \   000098   6402         XRL       A,#0x2
   \   00009A   700E         JNZ       ??ZDO_LeaveInd_4
   3231                {
   3232                  // old parents is leaving the network, child needs to search for a new parent
   3233                  ind->rejoin = TRUE;
   \   00009C   85..82       MOV       DPL,?V0
   \   00009F   85..83       MOV       DPH,?V1
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   F0           MOVX      @DPTR,A
   3234                  leave = TRUE;
   3235                }
   3236          
   3237              }
   3238              else if ( ind->removeChildren == TRUE )
   3239              {
   3240                // Check NWK address allocation algorithm
   3241                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3242              }
   3243          
   3244              if ( leave == TRUE )
   3245              {
   3246                // Prepare to leave with reset
   3247                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_5:
   \   0000A5                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000A5   12....       LCALL     ?Subroutine29 & 0xFFFF
   3248              }
   \                     ??CrossCallReturnLabel_113:
   \   0000A8   801D         SJMP      ??ZDO_LeaveInd_2
   3249              else
   3250              {
   3251                // Remove device address(optionally descendents) from data
   3252                ZDApp_LeaveUpdate( ind->srcAddr,
   3253                                   ind->extAddr,
   3254                                   ind->removeChildren,
   3255                                   ind->rejoin );
   \                     ??ZDO_LeaveInd_4:
   \   0000AA                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000AA   85..82       MOV       DPL,?V0
   \   0000AD   85..83       MOV       DPH,?V1
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F5..         MOV       ?V0,A
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   EE           MOV       A,R6
   \   0000B9   2402         ADD       A,#0x2
   \   0000BB   FC           MOV       R4,A
   \   0000BC   E4           CLR       A
   \   0000BD   3F           ADDC      A,R7
   \   0000BE   FD           MOV       R5,A
   \   0000BF   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   \   0000C2   7401         MOV       A,#0x1
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
   3256              }
   3257            }
   3258          
   3259            // Pass the leave indication to higher layer if callback registered.
   3260            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_2:
   \   0000C7   90....       MOV       DPTR,#zdoCBFunc + 12
   \   0000CA   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CD   6007         JZ        ??ZDO_LeaveInd_6
   3261            {
   3262              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000CF                ; Setup parameters for indirect call
   \   0000CF   EE           MOV       A,R6
   \   0000D0   FA           MOV       R2,A
   \   0000D1   EF           MOV       A,R7
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     ?CALL_IND
   3263            }
   3264          }
   \                     ??ZDO_LeaveInd_6:
   \   0000D6   7403         MOV       A,#0x3
   \   0000D8   02....       LJMP      ??Subroutine52_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine66_0
   \   000006                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   3265          
   3266          /*********************************************************************
   3267           * @fn          ZDO_SyncIndicationCB
   3268           *
   3269           * @brief       This function allows the next higher layer of a
   3270           *              coordinator to be notified of a loss of synchronization
   3271           *                          with the parent/child device.
   3272           *
   3273           * @param       type: 0 - child; 1 - parent
   3274           *
   3275           *
   3276           * @return      none
   3277           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3278          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3279          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3280            (void)shortAddr;  // Remove this line if this parameter is used.
   3281          
   3282            if ( ZSTACK_END_DEVICE_BUILD
   3283              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3284            {
   3285              if ( type == 1 && retryCnt == 0 )
   \   000007   7401         MOV       A,#0x1
   \   000009   6E           XRL       A,R6
   \   00000A   7019         JNZ       ??ZDO_SyncIndicationCB_0
   \   00000C   90....       MOV       DPTR,#retryCnt
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7013         JNZ       ??ZDO_SyncIndicationCB_0
   3286              {
   3287                // We lost contact with our parent.  Clear the neighbor Table.
   3288                nwkNeighborInitTable();
   \   000012                ; Setup parameters for call to function nwkNeighborInitTable
   \   000012   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3289          
   3290                //If we are Factory new, then report fail on association
   3291                if(!bdb_isDeviceNonFactoryNew())
   \   000015                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000015   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   000018   E9           MOV       A,R1
   \   000019   7007         JNZ       ??ZDO_SyncIndicationCB_1
   3292                {
   3293                  bdb_nwkAssocAttemt(FALSE);
   \   00001B                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   00001B   7900         MOV       R1,#0x0
   \   00001D   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000020   8003         SJMP      ??ZDO_SyncIndicationCB_0
   3294                }
   3295          #if (ZG_BUILD_ENDDEVICE_TYPE)
   3296                else
   3297                {
   3298                  //We lost our parent
   3299                  bdb_parentLost();
   \                     ??ZDO_SyncIndicationCB_1:
   \   000022                ; Setup parameters for call to function bdb_parentLost
   \   000022   12....       LCALL     `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
   3300                }
   3301          #endif
   3302              }
   3303            }
   3304          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   000025   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3305          
   3306          /*********************************************************************
   3307           * @fn          ZDO_ManytoOneFailureIndicationCB
   3308           *
   3309           * @brief       This function allows the next higher layer of a
   3310           *              concentrator to be notified of a many-to-one route
   3311           *              failure.
   3312           *
   3313           * @param       none
   3314           *
   3315           *
   3316           * @return      none
   3317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3318          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3319          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3320            // By default, the concentrator automatically redo many-to-one route
   3321            // discovery to update all many-to-one routes in the network
   3322            // If you want anything processing other than the default,
   3323            // please replace the following code.
   3324          
   3325            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3326          }
   \   000007   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3327          
   3328          /*********************************************************************
   3329           * @fn          ZDO_PollConfirmCB
   3330           *
   3331           * @brief       This function allows the next higher layer to be
   3332           *              notified of a Poll Confirm.
   3333           *
   3334           * @param       none
   3335           *
   3336           * @return      none
   3337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3338          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3339          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3340            (void)status;  // Remove this line if this parameter is used.
   3341            return;
   \   000000   02....       LJMP      ?BRET
   3342          }
   3343          
   3344          /*********************************************************************
   3345           * @fn          ZDO_NetworkStatusCB
   3346           *
   3347           * @brief       Network Status Callback function
   3348           *
   3349           * @param       nwkDstAddr - message's destination address- used to determine
   3350           *                           if the message was intended for this device or
   3351           *                           a sleeping end device.
   3352           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3353           * @param       dstAddr - the destination address related to the status code
   3354           *
   3355           * @return      none
   3356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3357          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3358          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3359            (void)dstAddr;     // Remove this line if this parameter is used.
   3360          
   3361            if ( (nwkDstAddr == NLME_GetShortAddr())
   3362                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3363            {
   3364              // Routing error for dstAddr, this is informational and a Route
   3365              // Request should happen automatically.
   3366            }
   3367          }
   \   000007   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3368          
   3369          /******************************************************************************
   3370           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3371           *
   3372           * @brief       Stub routine implemented by NHLE. NHLE should call
   3373           *              <AddrMgrWriteNV> when appropriate.
   3374           *
   3375           * @param       none
   3376           *
   3377           * @return      none
   3378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3379          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3380          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3381          #if defined ( NV_RESTORE )
   3382            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00000B   7003         JNZ       ??AddrMgrWriteNVRequest_0
   3383            {
   3384              // Trigger to save info into NV
   3385              ZDApp_NVUpdate();
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3386            }
   3387          #endif
   3388          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000010   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3389          
   3390          /*********************************************************************
   3391           * Call Back Functions from Security  - API
   3392           */
   3393          
   3394           /*********************************************************************
   3395           * @fn          ZDO_UpdateDeviceIndication
   3396           *
   3397           * @brief       This function notifies the "Trust Center" of a
   3398           *              network when a device joins or leaves the network.
   3399           *
   3400           * @param       extAddr - pointer to 64 bit address of new device
   3401           * @param       status  - 0 if a new device joined securely
   3402           *                      - 1 if a new device joined un-securely
   3403           *                      - 2 if a device left the network
   3404           *
   3405           * @return      true if newly joined device should be allowed to
   3406           *                                              remain on network
   3407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3408          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3409          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3410            // can implement a network access policy based on the
   3411            // IEEE address of newly joining devices...
   3412            (void)extAddr;
   3413            (void)status;
   3414          
   3415            return ZSuccess;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   3416          }
   3417          
   3418          /*********************************************************************
   3419           * @fn          ZDApp_InMsgCB
   3420           *
   3421           * @brief       This function is called to pass up any message that is
   3422           *              not yet supported.  This allows for the developer to
   3423           *              support features themselves..
   3424           *
   3425           * @return      none
   3426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3427          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3428          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine36 & 0xFFFF
   3429            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \                     ??CrossCallReturnLabel_39:
   \   000008   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00000B   5480         ANL       A,#0x80
   \   00000D   703E         JNZ       ??ZDApp_InMsgCB_0
   3430            {
   3431              // Handle the response message
   3432            }
   3433            else
   3434            {
   3435              // Handle the request message by sending a generic "not supported".
   3436              // Device Announce doesn't have a response.
   3437              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00000F   EA           MOV       A,R2
   \   000010   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000013   7038         JNZ       ??ZDApp_InMsgCB_0
   \   000015   7413         MOV       A,#0x13
   \   000017   68           XRL       A,R0
   \   000018   7001         JNZ       ??ZDApp_InMsgCB_1
   \   00001A   E9           MOV       A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   00001B   6030         JZ        ??ZDApp_InMsgCB_0
   3438              {
   3439                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3440                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00001D                ; Setup parameters for call to function ZDP_GenericRsp
   \   00001D   E8           MOV       A,R0
   \   00001E   F5..         MOV       ?V0,A
   \   000020   E9           MOV       A,R1
   \   000021   4480         ORL       A,#0x80
   \   000023   F5..         MOV       ?V1,A
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   E4           CLR       A
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   F5..         MOV       ?V1,A
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   EA           MOV       A,R2
   \   000035   12....       LCALL     ?Subroutine42 & 0xFFFF
   3441              }
   3442            }
   \                     ??CrossCallReturnLabel_47:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FD           MOV       R5,A
   \   00003A   7C84         MOV       R4,#-0x7c
   \   00003C   EA           MOV       A,R2
   \   00003D   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000040   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F9           MOV       R1,A
   \   000045   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   3443          }
   \                     ??ZDApp_InMsgCB_0:
   \   00004D   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   3444          
   3445          
   3446          /*********************************************************************
   3447           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3448           *
   3449           * @brief   Changes the Match Descriptor Response permission.
   3450           *
   3451           * @param   endpoint - endpoint to allow responses
   3452           * @param   action - true to allow responses, false to not
   3453           *
   3454           * @return  none
   3455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3456          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3457          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3458            // Store the action
   3459            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   3460          }
   \   000008   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3461          
   3462          /*********************************************************************
   3463           * @fn      ZDApp_NetworkInit()
   3464           *
   3465           * @brief   Used to start the network joining process
   3466           *
   3467           * @param   delay - mSec delay to wait before starting
   3468           *
   3469           * @return  none
   3470           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3471          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3472          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3473            if ( delay )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6018         JZ        ??ZDApp_NetworkInit_0
   3474            {
   3475              // Wait awhile before starting the device
   3476              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV       ?V0,R2
   \   00000B   8B..         MOV       ?V1,R3
   \   00000D   E4           CLR       A
   \   00000E   F5..         MOV       ?V2,A
   \   000010   F5..         MOV       ?V3,A
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV       R2,#0x1
   \   000019   12....       LCALL     ?Subroutine17 & 0xFFFF
   3477            }
   \                     ??CrossCallReturnLabel_87:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001F   8005         SJMP      ??CrossCallReturnLabel_129
   3478            else
   3479            {
   3480              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000021                ; Setup parameters for call to function osal_set_event
   \   000021   7A01         MOV       R2,#0x1
   \   000023   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   3481            }
   3482          }
   \                     ??CrossCallReturnLabel_129:
   \   000026   02....       LJMP      ??Subroutine53_0 & 0xFFFF
   3483          
   3484          /*********************************************************************
   3485           * @fn      ZDApp_NwkStateUpdateCB()
   3486           *
   3487           * @brief   This function notifies that this device's network
   3488           *          state info has been changed.
   3489           *
   3490           * @param   none
   3491           *
   3492           * @return  none
   3493           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3494          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3495          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3496            // Notify to save info into NV
   3497            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00000B   7003         JNZ       ??ZDApp_NwkStateUpdateCB_0
   3498            {
   3499              // Trigger to save info into NV
   3500              ZDApp_NVUpdate();
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3501            }
   3502          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000010   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3503          
   3504          /*********************************************************************
   3505           * @fn      ZDApp_NodeProfileSync()
   3506           *
   3507           * @brief   Sync node with stack profile.
   3508           *
   3509           * @param   stackProfile - stack profile of the network to join
   3510           *
   3511           * @return  none
   3512           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3513          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3514          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3515            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   501A         JNC       ??ZDApp_NodeProfileSync_0
   3516            {
   3517              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV       DPTR,#zgStackProfile
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6E           XRL       A,R6
   \   000014   6013         JZ        ??ZDApp_NodeProfileSync_0
   3518              {
   3519                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   54F8         ANL       A,#0xf8
   \   00001C   4402         ORL       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
   3520                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV       A,#0xc
   \   000024   F0           MOVX      @DPTR,A
   3521                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3522              }
   3523            }
   3524          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3525          
   3526          /*********************************************************************
   3527           * @fn      ZDApp_StartJoiningCycle()
   3528           *
   3529           * @brief   Starts the joining cycle of a device.  This will only
   3530           *          continue an already started (or stopped) joining cycle.
   3531           *
   3532           * @param   none
   3533           *
   3534           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3535           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3536          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3537          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3538            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   3539            {
   3540              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   3541              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3542          
   3543              return ( TRUE );
   \   00001E   7901         MOV       R1,#0x1
   \   000020   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   3544            }
   3545            else
   3546              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3547          }
   3548          
   3549          /*********************************************************************
   3550           * @fn      ZDApp_StopJoiningCycle()
   3551           *
   3552           * @brief   Stops the joining or rejoining process of a device.
   3553           *
   3554           * @param   none
   3555           *
   3556           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3558          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3559          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3560            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   600A         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   6005         JZ        ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX      A,@DPTR
   \   000012   640C         XRL       A,#0xc
   \   000014   7009         JNZ       ??ZDApp_StopJoiningCycle_1
   3561            {
   3562              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV       DPTR,#continueJoining
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
   3563              return ( TRUE );
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   3564            }
   3565            else
   3566              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3567          }
   3568          
   3569          /*********************************************************************
   3570           * @fn      ZDApp_AnnounceNewAddress()
   3571           *
   3572           * @brief   Send Device Announce and hold all transmissions for
   3573           *          new address timeout.
   3574           *
   3575           * @param   none
   3576           *
   3577           * @return  none
   3578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3579          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3581          #if defined ( ZIGBEEPRO )
   3582            // Turn off data request hold
   3583            APSME_HoldDataRequests( 0 );
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A00         MOV       R2,#0x0
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3584          #endif
   3585            getNewAddr = true; // add by user
   \   000011   90....       MOV       DPTR,#getNewAddr
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   3586            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3587                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000017                ; Setup parameters for call to function NLME_GetExtAddr
   \   000017   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001A   8A..         MOV       ?V0,R2
   \   00001C   8B..         MOV       ?V1,R3
   \   00001E   AE..         MOV       R6,?V0
   \   000020                ; Setup parameters for call to function NLME_GetShortAddr
   \   000020   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000023                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000023   75..00       MOV       ?V0,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   EE           MOV       A,R6
   \   000031   FC           MOV       R4,A
   \   000032   AD..         MOV       R5,?V1
   \   000034   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000037   7401         MOV       A,#0x1
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   3588          
   3589          #if defined ( ZIGBEEPRO )
   3590            // Setup the timeout
   3591            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   00003C                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00003C   7A00         MOV       R2,#0x0
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3592          #endif
   3593          
   3594            if ( ZSTACK_END_DEVICE_BUILD )
   3595            {
   3596              if ( zgChildAgingEnable == TRUE )
   \   000043   90....       MOV       DPTR,#zgChildAgingEnable
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6401         XRL       A,#0x1
   \   000049   7027         JNZ       ??ZDApp_AnnounceNewAddress_0
   3597              {
   3598                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3599          
   3600                // Send the message to parent
   3601                NLME_GetCoordExtAddr( coordExtAddr );
   \   00004B                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00004B   AA..         MOV       R2,?XSP + 0
   \   00004D   AB..         MOV       R3,?XSP + 1
   \   00004F   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   3602                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3603                                           zgEndDeviceTimeoutValue,
   3604                                           zgEndDeviceConfiguration );
   \   000052                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000052   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000055                ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
   \   000055   90....       MOV       DPTR,#zgEndDeviceConfiguration
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F5..         MOV       ?V0,A
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000060   90....       MOV       DPTR,#zgEndDeviceTimeoutValue
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F9           MOV       R1,A
   \   000065   7401         MOV       A,#0x1
   \   000067   12....       LCALL     ?XSTACK_DISP102_8
   \   00006A   12....       LCALL     `??NLME_SendEndDevTimeoutReq::?relay`; Banked call to: NLME_SendEndDevTimeoutReq
   \   00006D   7401         MOV       A,#0x1
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   3605              }
   3606            }
   3607          }
   \                     ??ZDApp_AnnounceNewAddress_0:
   \   000072   7408         MOV       A,#0x8
   \   000074   80..         SJMP      ??Subroutine70_0
   3608          
   3609          /*********************************************************************
   3610           * @fn      ZDApp_SendParentAnnce()
   3611           *
   3612           * @brief   Send Parent Announce message.
   3613           *
   3614           * @param   none
   3615           *
   3616           * @return  none
   3617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3618          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3620            uint8 count;
   3621            uint8 *childInfo;
   3622          
   3623            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   3624          
   3625            if ( childInfo != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6054         JZ        ??ZDApp_SendParentAnnce_0
   3626            {
   3627              if ( count > 0 )
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6044         JZ        ??ZDApp_SendParentAnnce_1
   3628              {
   3629                zAddrType_t dstAddr;
   3630          
   3631                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000022   7409         MOV       A,#0x9
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   740F         MOV       A,#0xf
   \   000029   F0           MOVX      @DPTR,A
   3632                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   74FC         MOV       A,#-0x4
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
   3633          
   3634                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000036                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000036   75..00       MOV       ?V2,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75..1F       MOV       ?V2,#0x1f
   \   000041   75..00       MOV       ?V3,#0x0
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F9           MOV       R1,A
   \   000055   7406         MOV       A,#0x6
   \   000057   12....       LCALL     ?XSTACK_DISP102_8
   \   00005A   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00005C   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00005E   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000061   7405         MOV       A,#0x5
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   3635              }
   3636          
   3637              // Free the list after the message has been sent
   3638              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   AA..         MOV       R2,?V0
   \   000068   AB..         MOV       R3,?V1
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3639            }
   3640          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006D   740A         MOV       A,#0xa
   \   00006F   02....       LJMP      ??Subroutine52_0 & 0xFFFF
   3641          
   3642          /*********************************************************************
   3643           * @fn          ZDApp_NVUpdate
   3644           *
   3645           * @brief       Set the NV Update Timer.
   3646           *
   3647           * @param       none
   3648           *
   3649           * @return      none
   3650           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3651          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3652          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3653          #if defined ( NV_RESTORE )
   3654            if ( (ZSTACK_END_DEVICE_BUILD)
   3655                 || (ZSTACK_ROUTER_BUILD
   3656                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   3657            {
   3658              // No need to wait, set the event to save the state
   3659              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   3660            }
   3661            else
   3662            {
   3663              // To allow for more changes to the network state before saving
   3664              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3665            }
   3666          #endif
   3667          }
   \                     ??CrossCallReturnLabel_131:
   \   00000B   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3668          
   3669          /*********************************************************************
   3670           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3671           *
   3672           * @brief   Returns a PAN ID for the network layer to use during
   3673           *          a coordinator start and there is another network with
   3674           *          the intended PANID.
   3675           *
   3676           * @param   panid - the intended PAN ID
   3677           *
   3678           * @return  PANID to try
   3679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3680          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3681          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3682            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   0A           INC       R2
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   3683          }
   3684          
   3685          /*********************************************************************
   3686           * @fn          ZDO_SrcRtgIndCB
   3687           *
   3688           * @brief       This function notifies the ZDO available src route record received.
   3689           *
   3690           * @param       srcAddr - source address of the source route
   3691           * @param       relayCnt - number of devices in the relay list
   3692           * @param       relayList - relay list of the source route
   3693           *
   3694           * @return      none
   3695           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3696          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3697          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3698            zdoSrcRtg_t srcRtg;
   3699          
   3700            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   3701            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_138:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E9           MOV       A,R1
   \   000013   F0           MOVX      @DPTR,A
   3702            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   3703          
   3704            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc
   \   000021   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000024   600A         JZ        ??ZDO_SrcRtgIndCB_0
   3705            {
   3706              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   3707            }
   \                     ??CrossCallReturnLabel_92:
   \   00002D   12....       LCALL     ?CALL_IND
   3708          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   3709          
   3710          /*********************************************************************
   3711           * @fn          ZDApp_InitZdoCBFunc
   3712           *
   3713           * @brief       Call this function to initialize zdoCBFunc[]
   3714           *
   3715           * @param       none
   3716           *
   3717           * @return      none
   3718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3719          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3720          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3721            uint8 i;
   3722          
   3723            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV       R2,#0x0
   3724            {
   3725              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV       A,R2
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   12....       LCALL     ?Subroutine33 & 0xFFFF
   3726            }
   \                     ??CrossCallReturnLabel_34:
   \   00000C   0A           INC       R2
   \   00000D   EA           MOV       A,R2
   \   00000E   C3           CLR       C
   \   00000F   9409         SUBB      A,#0x9
   \   000011   40F3         JC        ??ZDApp_InitZdoCBFunc_0
   3727          }
   \   000013   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#zdoCBFunc & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET
   3728          
   3729          /*********************************************************************
   3730           * @fn          ZDO_RegisterForZdoCB
   3731           *
   3732           * @brief       Call this function to register the higher layer (for
   3733           *              example, the Application layer or MT layer) with ZDO
   3734           *              callbacks to get notified of some ZDO indication like
   3735           *              existence of a concentrator or receipt of a source
   3736           *              route record.
   3737           *
   3738           * @param       indID - ZDO Indication ID
   3739           * @param       pFn   - Callback function pointer
   3740           *
   3741           * @return      ZSuccess - successful, ZInvalidParameter if not
   3742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3743          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3744          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3745            // Check the range of the indication ID
   3746            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   500C         JNC       ??ZDO_RegisterForZdoCB_0
   3747            {
   3748              zdoCBFunc[indID] = pFn;
   \   00000A   E9           MOV       A,R1
   \   00000B   29           ADD       A,R1
   \   00000C   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00000F   12....       LCALL     ??Subroutine72_0 & 0xFFFF
   3749              return ZSuccess;
   \                     ??CrossCallReturnLabel_136:
   \   000012   7900         MOV       R1,#0x0
   \   000014   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   3750            }
   3751          
   3752            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3753          }
   3754          
   3755          /*********************************************************************
   3756           * @fn          ZDO_DeregisterForZdoCB
   3757           *
   3758           * @brief       Call this function to de-register the higher layer (for
   3759           *              example, the Application layer or MT layer) with ZDO
   3760           *              callbacks to get notified of some ZDO indication like
   3761           *              existence of a concentrator or receipt of a source
   3762           *              route record.
   3763           *
   3764           * @param       indID - ZDO Indication ID
   3765           *
   3766           * @return      ZSuccess - successful, ZInvalidParameter if not
   3767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3768          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3769          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3770            // Check the range of the indication ID
   3771            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   5008         JNC       ??ZDO_DeregisterForZdoCB_0
   3772            {
   3773              zdoCBFunc[indID] = NULL;
   \   00000A   E9           MOV       A,R1
   \   00000B   29           ADD       A,R1
   \   00000C   12....       LCALL     ?Subroutine33 & 0xFFFF
   3774              return ZSuccess;
   \                     ??CrossCallReturnLabel_35:
   \   00000F   F9           MOV       R1,A
   \   000010   8002         SJMP      ??ZDO_DeregisterForZdoCB_1
   3775            }
   3776          
   3777            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000012   7902         MOV       R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000014   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3778          }
   3779          
   3780          #if defined ( ZDP_BIND_VALIDATION )
   3781          #if defined ( REFLECTOR )
   3782          /*********************************************************************
   3783           * @fn          ZDApp_SetPendingBindDefault
   3784           *
   3785           * @brief       This function initializes a specific entry of pending
   3786           *              Bind Request.
   3787           *
   3788           * @param       pendBindReq - pointer to the entry in the table
   3789           *
   3790           * @return      none
   3791           */
   3792          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   3793          {
   3794            // Set it to an initial value
   3795            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   3796          
   3797            // We are checking for age 0 for aged-out records
   3798            pendBindReq->age = 0;
   3799          }
   3800          
   3801          /*********************************************************************
   3802           * @fn          ZDApp_InitPendingBind
   3803           *
   3804           * @brief       This function initializes the buffer that holds
   3805           *              pending Bind Request messages if no valid NWK address
   3806           *              exists in Address Manager and a Network Address Req
   3807           *              has been sent out.
   3808           *
   3809           * @param       none
   3810           *
   3811           * @return      none
   3812           */
   3813          void ZDApp_InitPendingBind( void )
   3814          {
   3815            if ( ZDAppPendingBindReq == NULL )
   3816            {
   3817              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   3818              {
   3819                uint8 i;
   3820          
   3821                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3822                {
   3823                  // Set to default values
   3824                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3825                }
   3826              }
   3827            }
   3828          }
   3829          
   3830          /*********************************************************************
   3831           * @fn          ZDApp_GetEmptyPendingBindReq
   3832           *
   3833           * @brief       This function looks for an empty entry.
   3834           *
   3835           * @param       none
   3836           *
   3837           * @return      Pointer to entry
   3838           */
   3839          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   3840          {
   3841            uint8 i;
   3842          
   3843            if ( ZDAppPendingBindReq != NULL )
   3844            {
   3845              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3846              {
   3847                if ( ZDAppPendingBindReq[i].age == 0 )
   3848                {
   3849                  return ( &ZDAppPendingBindReq[i] );
   3850                }
   3851              }
   3852            }
   3853          
   3854            // No empty entry was found
   3855            return NULL;
   3856          }
   3857          
   3858          /*********************************************************************
   3859           * @fn          ZDApp_ProcessPendingBindReq
   3860           *
   3861           * @brief       Process pending entry based on EXT address.
   3862           *
   3863           * @param       extAddr - of device to look up
   3864           *
   3865           * @return      none
   3866           */
   3867          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   3868          {
   3869            uint8 i;
   3870          
   3871            // Loop through all the pending entries for that Ext Address
   3872            // to create Bind Entries and send Bind Rsp
   3873            if ( ZDAppPendingBindReq != NULL )
   3874            {
   3875              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3876              {
   3877                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3878                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   3879                {
   3880                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3881          
   3882                  // Add Bind entry
   3883                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3884                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3885                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3886                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   3887                  {
   3888                    // valid entry
   3889                    bindStat = ZDP_SUCCESS;
   3890          
   3891                    // Notify to save info into NV
   3892                    ZDApp_NVUpdate();
   3893                  }
   3894          
   3895                  // Send back a response message
   3896                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3897                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3898          
   3899                  // Set the pending request entry to default values
   3900                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3901                }
   3902              }
   3903            }
   3904          }
   3905          
   3906          /*********************************************************************
   3907           * @fn          ZDApp_AgeOutPendingBindEntry
   3908           *
   3909           * @brief       Age out pending Bind Req entries.
   3910           *
   3911           * @param       none
   3912           *
   3913           * @return      none
   3914           */
   3915          void ZDApp_AgeOutPendingBindEntry( void )
   3916          {
   3917            uint8 i;
   3918            bool entryFound = FALSE;
   3919          
   3920            if ( ZDAppPendingBindReq != NULL )
   3921            {
   3922              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3923              {
   3924                if ( ZDAppPendingBindReq[i].age > 1 )
   3925                {
   3926                  ZDAppPendingBindReq[i].age--;
   3927          
   3928                  entryFound = TRUE;
   3929                }
   3930                else if ( ZDAppPendingBindReq[i].age == 1 )
   3931                {
   3932                  // The record has aged out and has valid data
   3933                  AddrMgrEntry_t entry;
   3934                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3935          
   3936                  entry.user = ADDRMGR_USER_BINDING;
   3937          
   3938                  // Remove the entry in address manager so we do not keep entries
   3939                  // with invalid addresses
   3940                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   3941          
   3942                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   3943                  {
   3944                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   3945                    {
   3946                      // Release the entry that contains an invalid NWK address
   3947                      AddrMgrEntryRelease( &entry );
   3948                    }
   3949                  }
   3950          
   3951                  // Send the Bind Response with failure status
   3952                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3953                               &(ZDAppPendingBindReq[i].srcAddr),
   3954                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3955          
   3956                  // Clear the record and set to default values
   3957                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3958                }
   3959              }
   3960            }
   3961          
   3962            if ( entryFound == FALSE )
   3963            {
   3964              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   3965            }
   3966            else
   3967            {
   3968              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3969                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   3970            }
   3971          }
   3972          #endif
   3973          #endif
   3974          
   3975          /*********************************************************************
   3976           * @fn          ZDO_ChangeState
   3977           *
   3978           * @brief       Chance the device state
   3979           *
   3980           * @param       state - new state
   3981           *
   3982           * @return      none
   3983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3984          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3985          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3986            if ( devState != state )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   6005         JZ        ??CrossCallReturnLabel_125
   3987            {
   3988              devState = state;
   \   00000E   E9           MOV       A,R1
   \   00000F   F0           MOVX      @DPTR,A
   3989              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   12....       LCALL     ?Subroutine16 & 0xFFFF
   3990            }
   3991          }
   \                     ??CrossCallReturnLabel_125:
   \   000013   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3992          
   3993          /*********************************************************************
   3994           * @fn      ZDApp_SetRejoinScanDuration()
   3995           *
   3996           * @brief   Sets scan duration for rejoin for an end device
   3997           *
   3998           * @param   rejoinScanDuration - milliseconds
   3999           *
   4000           * @return  none
   4001           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4002          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   4003          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   4004            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine8
   \   000010                ; // Fall through to label ?Subroutine8
   4005          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?L_MOV_TO_X
   \   000005   02....       LJMP      ??Subroutine53_0 & 0xFFFF
   4006          
   4007          /*********************************************************************
   4008           * @fn      ZDApp_SetRejoinBackoffDuration()
   4009           *
   4010           * @brief   Sets rejoin backoff duration for rejoin for an end device
   4011           *
   4012           * @param   rejoinBackoffDuration - milliseconds
   4013           *
   4014           * @return  none
   4015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4016          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   4017          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   4018            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP      ?Subroutine8
   4019          }
   4020          
   4021          /*********************************************************************
   4022           * @fn          ZDApp_SetParentAnnceTimer
   4023           *
   4024           * @brief       This function sets up the link status timer.
   4025           *
   4026           * @param       none
   4027           *
   4028           * @return      none
   4029           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4030          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   4031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4032            // Parent Announce shall be sent no earlier than 10 seconds
   4033            uint32 timeout = 10000;
   4034          
   4035            // Add with jitter of up to 10 seconds
   4036            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   4037          
   4038            // Set timer to send the message
   4039            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV       A,R2
   \   000009   5410         ANL       A,#0x10
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   EB           MOV       A,R3
   \   00000E   5427         ANL       A,#0x27
   \   000010   F5..         MOV       ?V1,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   F5..         MOV       ?V3,A
   \   000017   90....       MOV       DPTR,#__Constant_2710
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_ADD_X
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B40         MOV       R3,#0x40
   \   000028   90....       MOV       DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP      ?Subroutine5 & 0xFFFF
   4040          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   ....         DW ZDAppTaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   2C010000     DD 300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_12c:
   \   000000   2C010000     DD 300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
   4041          
   4042          /*********************************************************************
   4043          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0      0   ZDAppCheckForHoldKey
      2     25   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     33   ZDApp_AnnounceNewAddress
        0     18   -> APSME_HoldDataRequests
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     19   -> NLME_SendEndDevTimeoutReq
        0     19   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     35   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_pwrmgr_device
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     39   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     25   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0     43   ZDApp_LeaveUpdate
        0     24   -> AddrMgrWriteNVRequest
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      2     16   ZDApp_NVUpdate
        2      0   -> osal_set_event
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     41   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> ZDApp_StoreNwkSecMaterial
        2      0   -> bdb_nwkFormationAttempt
        2      0   -> bdb_reportCommissioningState
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     21   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     14   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     41   ZDApp_ProcessMsgCBs
        0     31   -> ZDO_ParseAddrRsp
        0     31   -> ZDO_ParseBindUnbindReq
        0     31   -> ZDO_ProcessBindUnbindReq
        0     31   -> ZDO_UpdateAddrManager
        0     31   -> osal_mem_free
      0     22   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_ChangeState
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetNwkKey
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> bdb_nwkAssocAttemt
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_setNodeIsOnANetwork
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_pwrmgr_device
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> osal_stop_timerEx
      0     24   ZDApp_ProcessOSALMsg
        0     10   -> AT_Cmd_ProcessDataConfirm
        0     10   -> ZDApp_ProcessMsgCBs
        0     10   -> ZDApp_ProcessNetworkJoin
        0     10   -> ZDApp_ProcessSecMsg
        0     10   -> ZDP_IncomingData
        0     10   -> bdb_isDeviceNonFactoryNew
        0     10   -> bdb_nwkDiscoveryAttempt
        0     10   -> bdb_parentLost
        0     10   -> bdb_rejoinNwk
        0     10   -> bdb_reportCommissioningState
        0     10   -> nwk_getNwkDescList
      0     23   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDApp_StoreNwkSecMaterial
        0      9   -> ZDSecMgrSaveApsLinkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setNodeIsOnANetwork
      2     10   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0     34   ZDApp_ReadNetworkRestoreState
        0      9   -> bdb_setNodeIsOnANetwork
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     47   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     34   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     64   ZDApp_RestoreNwkKey
        0     48   -> ZDApp_RestoreNwkSecMaterial
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
      0     79   ZDApp_RestoreNwkSecMaterial
        0     30   -> osal_memcmp
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     61   ZDApp_SaveNwkKey
        0     48   -> SSP_ReadNwkActiveKey
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
        0     52   -> osal_nv_write
      0     50   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     39   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     27   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     16   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     40   ZDApp_StoreNwkSecMaterial
        0     27   -> osal_isbufset
        0     30   -> osal_memcmp
        0     30   -> osal_memcpy
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     29   ZDOInitDeviceEx
        0     25   -> NLME_InitNV
        0     25   -> NLME_SetBroadcastFilter
        0     25   -> NLME_SetDefaultNV
        0     25   -> NLME_SetUpdateID
        0     25   -> ZDAppDetermineDeviceType
        0     25   -> ZDApp_LeaveCtrlInit
        0     25   -> ZDApp_NetworkInit
        0     25   -> ZDApp_ReadNetworkRestoreState
        0     25   -> ZDApp_RestoreNetworkState
        0     25   -> ZDApp_SecInit
        0     25   -> ZDConfig_InitDescriptors
        0     25   -> ZDSecMgrClearNVKeyValues
        0     25   -> ZDSecMgrUpdateTCAddress
        0     25   -> ZMacSetReq
        0     25   -> osal_memset
        0     29   -> osal_nv_write
        0     25   -> osal_rand
        0     25   -> zgInitItems
        0     25   -> zgWriteStartupOptions
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> ZDApp_ChangeState
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> sAddrExtCmp
      0     16   ZDO_LeaveInd
        0     15   -> NLME_GetCoordShortAddr
        0     15   -> NLME_LeaveRsp
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_LeaveReset
        0     16   -> ZDApp_LeaveUpdate
        0     15   -> ZMacSetReq
        0     15   -> bdb_setFN
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
        2      3   -> ZDO_FinishProcessingMgmtNwkDiscReq
      1     26   ZDO_NetworkFormationConfirmCB
        0     26   -> APSME_IsDistributedSecurity
        0     26   -> AT_Cmd_FN_CB
        0     26   -> NLME_SetAssocFlags
        0     26   -> SSP_SwitchNwkKey
        0     26   -> SSP_UpdateNwkKey
        0     26   -> ZDApp_ChangeState
        0     26   -> ZDApp_RestoreNwkSecMaterial
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> ZMacSetReq
        0     26   -> bdb_nwkFormationAttempt
        0     26   -> bdb_setNodeIsOnANetwork
        0     26   -> nwk_ExtPANIDValid
        0     26   -> osal_memset
        0     26   -> osal_set_event
        0     26   -> sAddrExtCpy
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> bdb_isDeviceNonFactoryNew
        0      9   -> bdb_nwkAssocAttemt
        0      9   -> bdb_parentLost
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> bdb_isDeviceNonFactoryNew
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       4  ?<Initializer for ZDApp_SavedPollRate>
       7  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for prevDevState>
       2  ??Subroutine46_0
       6  ??Subroutine47_0
       3  ??Subroutine48_0
       5  ??Subroutine49_0
       9  ??Subroutine50_0
       6  ??Subroutine51_0
       3  ??Subroutine52_0
       5  ??Subroutine53_0
       2  ??Subroutine54_0
       6  ??Subroutine55_0
       8  ??Subroutine56_0
       6  ??Subroutine57_0
      13  ??Subroutine58_0
       3  ??Subroutine59_0
       8  ??Subroutine60_0
       7  ??Subroutine61_0
       6  ??Subroutine62_0
       7  ??Subroutine63_0
       8  ??Subroutine64_0
       6  ??Subroutine65_0
       6  ??Subroutine66_0
       6  ??Subroutine67_0
       2  ??Subroutine68_0
       9  ??Subroutine69_0
       3  ??Subroutine70_0
       5  ??Subroutine71_0
       6  ??Subroutine72_0
       2  ?Subroutine0
       5  ?Subroutine1
      13  ?Subroutine10
      12  ?Subroutine11
       6  ?Subroutine12
       9  ?Subroutine13
      13  ?Subroutine14
       3  ?Subroutine15
       2  ?Subroutine16
       2  ?Subroutine17
       8  ?Subroutine18
      17  ?Subroutine19
       5  ?Subroutine2
      10  ?Subroutine20
       6  ?Subroutine21
       4  ?Subroutine22
       9  ?Subroutine23
       2  ?Subroutine24
      11  ?Subroutine25
       2  ?Subroutine26
       3  ?Subroutine27
       9  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
      18  ?Subroutine31
       6  ?Subroutine32
       8  ?Subroutine33
       2  ?Subroutine34
      10  ?Subroutine35
      14  ?Subroutine36
      11  ?Subroutine37
       8  ?Subroutine38
       5  ?Subroutine39
      31  ?Subroutine4
       1  ?Subroutine40
      10  ?Subroutine41
       9  ?Subroutine42
      20  ?Subroutine43
      15  ?Subroutine44
       9  ?Subroutine45
       2  ?Subroutine5
       2  ?Subroutine6
       5  ?Subroutine7
       8  ?Subroutine8
      21  ?Subroutine9
      19  AddrMgrWriteNVRequest
       1  FrameCounterUpdated
       3  ZDAppCheckForHoldKey
      82  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       1  ZDAppTaskID
     118  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
      22  ZDApp_ChangeState
      10  ZDApp_CoordStartPANIDConflictCB
      61  ZDApp_DeviceAuthEvt
      77  ZDApp_DeviceConfigured
     115  ZDApp_ForceConcentratorChange
      80  ZDApp_InMsgCB
      47  ZDApp_Init
      89  ZDApp_InitUserDesc
      22  ZDApp_InitZdoCBFunc
      73  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
      71  ZDApp_LeaveCtrlInit
      13  ZDApp_LeaveCtrlReset
      22  ZDApp_LeaveCtrlSet
      47  ZDApp_LeaveCtrlStartup
     123  ZDApp_LeaveReset
     123  ZDApp_LeaveUpdate
      14  ZDApp_NVUpdate
      11  ZDApp_NetworkDiscoveryReq
      41  ZDApp_NetworkInit
     130  ZDApp_NetworkStartEvt
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
     275  ZDApp_NwkDescListProcessing
      19  ZDApp_NwkStateUpdateCB
     104  ZDApp_ProcessMsgCBs
     432  ZDApp_ProcessNetworkJoin
     167  ZDApp_ProcessOSALMsg
      92  ZDApp_ProcessSecEvent
      56  ZDApp_ProcessSecMsg
      28  ZDApp_ReadNetworkRestoreState
      31  ZDApp_RegisterCBs
      38  ZDApp_ResetNwkKey
      26  ZDApp_ResetTimerCancel
      31  ZDApp_ResetTimerStart
      74  ZDApp_RestoreNetworkState
     116  ZDApp_RestoreNwkKey
     211  ZDApp_RestoreNwkSecMaterial
      19  ZDApp_SaveNetworkStateEvt
     295  ZDApp_SaveNwkKey
       4  ZDApp_SavedPollRate
     120  ZDApp_SecInit
      15  ZDApp_SendEventMsg
      90  ZDApp_SendMsg
     114  ZDApp_SendParentAnnce
      51  ZDApp_SetParentAnnceTimer
      18  ZDApp_SetRejoinBackoffDuration
      16  ZDApp_SetRejoinScanDuration
      39  ZDApp_StartJoiningCycle
      36  ZDApp_StopJoiningCycle
     217  ZDApp_StoreNwkSecMaterial
       7  ZDApp_epDesc
     254  ZDApp_event_loop
     366  ZDOInitDeviceEx
     100  ZDO_AddrChangeIndicationCB
      48  ZDO_ConcentratorIndicationCB
      23  ZDO_DeregisterForZdoCB
     212  ZDO_JoinConfirmCB
     196  ZDO_JoinIndicationCB
      60  ZDO_LeaveCnf
     219  ZDO_LeaveInd
      10  ZDO_ManytoOneFailureIndicationCB
      72  ZDO_NetworkDiscoveryConfirmCB
     263  ZDO_NetworkFormationConfirmCB
      10  ZDO_NetworkStatusCB
      37  ZDO_PermitJoinCB
       3  ZDO_PollConfirmCB
      27  ZDO_RegisterForZdoCB
      51  ZDO_SrcRtgIndCB
      31  ZDO_StartRouterConfirmCB
      40  ZDO_SyncIndicationCB
       5  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     619  ZDO_beaconNotifyIndCB
       4  __Constant_0
       4  __Constant_12c
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
     450  -- Other

 
 7 398 bytes in segment BANKED_CODE
   450 bytes in segment BANK_RELAYS
    13 bytes in segment XDATA_I
    13 bytes in segment XDATA_ID
    40 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
   463 bytes of CODE     memory
    16 bytes of CONST    memory (+ 24 bytes shared)
 7 398 bytes of HUGECODE memory
    78 bytes of XDATA    memory

Errors: none
Warnings: none
