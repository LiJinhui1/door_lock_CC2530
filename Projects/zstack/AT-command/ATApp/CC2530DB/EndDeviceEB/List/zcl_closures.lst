###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Feb/2022  09:35:04
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zcl\zcl_closures.c
#    Command line       =  
#        -f C:\Users\Administrator\AppData\Local\Temp\EW40A4.tmp
#        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zcl\zcl_closures.c
#        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
#        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
#        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
#        ISR_KEYINTERRUPT -lC
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\zcl_closures.lst
#    Object file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj\zcl_closures.r51
#
###############################################################################

D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zcl\zcl_closures.c
      1          /**************************************************************************************************
      2            Filename:       zcl_closures.c
      3            Revised:        $Date: 2013-10-16 16:38:58 -0700 (Wed, 16 Oct 2013) $
      4            Revision:       $Revision: 35701 $
      5          
      6            Description:    Zigbee Cluster Library - Closures.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "zcl.h"
     45          #include "zcl_general.h"
     46          #include "zcl_closures.h"
     47          #include "zcl_doorlock.h"
     48          #include "AT_doorlock.h"
     49          
     50          #if defined ( INTER_PAN )
     51            #include "stub_aps.h"
     52          #endif
     53          
     54          /*********************************************************************
     55           * MACROS
     56           */
     57          
     58          /*********************************************************************
     59           * CONSTANTS
     60           */
     61          
     62          /*********************************************************************
     63           * TYPEDEFS
     64           */
     65          #ifdef ZCL_DOORLOCK
     66          typedef struct zclClosuresDoorLockCBRec
     67          {
     68            struct zclClosuresDoorLockCBRec     *next;
     69            uint8                                endpoint; // Used to link it into the endpoint descriptor
     70            zclClosures_DoorLockAppCallbacks_t  *CBs;     // Pointer to Callback function
     71          } zclClosuresDoorLockCBRec_t;
     72          #endif
     73          
     74          #ifdef ZCL_WINDOWCOVERING
     75          typedef struct zclClosuresWindowCoveringCBRec
     76          {
     77            struct zclClosuresWindowCoveringCBRec     *next;
     78            uint8                                     endpoint; // Used to link it into the endpoint descriptor
     79            zclClosures_WindowCoveringAppCallbacks_t  *CBs;     // Pointer to Callback function
     80          } zclClosuresWindowCoveringCBRec_t;
     81          #endif
     82          
     83          /*********************************************************************
     84           * GLOBAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * GLOBAL FUNCTIONS
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          #ifdef ZCL_DOORLOCK

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static zclClosuresDoorLockCBRec_t *zclClosuresDoorLockCBs = (zclClosuresDoorLockCBRec_t *)NULL;
   \                     zclClosuresDoorLockCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          #endif
     97          
     98          #ifdef ZCL_WINDOWCOVERING
     99          static zclClosuresWindowCoveringCBRec_t *zclClosuresWindowCoveringCBs = (zclClosuresWindowCoveringCBRec_t *)NULL;
    100          #endif
    101          
    102          #ifdef ZCL_DOORLOCK

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          static uint8 zclDoorLockPluginRegisted = FALSE;
   \                     zclDoorLockPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          #endif
    105          
    106          #ifdef ZCL_WINDOWCOVERING
    107          static uint8 zclWindowCoveringPluginRegisted = FALSE;
    108          #endif
    109          
    110          /*********************************************************************
    111           * LOCAL FUNCTIONS
    112           */
    113          #if defined(ZCL_DOORLOCK) || defined(ZCL_WINDOWCOVERING)
    114          static ZStatus_t zclClosures_HdlIncoming( zclIncoming_t *pInMsg );
    115          static ZStatus_t zclClosures_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    116          #endif
    117          
    118          #ifdef ZCL_DOORLOCK
    119          static zclClosures_DoorLockAppCallbacks_t *zclClosures_FindDoorLockCallbacks( uint8 endpoint );
    120          static ZStatus_t zclClosures_ProcessInDoorLockCmds( zclIncoming_t *pInMsg,
    121                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    122          static ZStatus_t zclClosures_ProcessInDoorLock( zclIncoming_t *pInMsg,
    123                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    124          #ifdef ZCL_DOORLOCK_EXT
    125          static ZStatus_t zclClosures_ProcessInDoorLockUnlockWithTimeout( zclIncoming_t *pInMsg,
    126                                                                           zclClosures_DoorLockAppCallbacks_t *pCBs );
    127          static ZStatus_t zclClosures_ProcessInDoorLockGetLogRecord( zclIncoming_t *pInMsg,
    128                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs );
    129          static ZStatus_t zclClosures_ProcessInDoorLockSetPINCode( zclIncoming_t *pInMsg,
    130                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs );
    131          static ZStatus_t zclClosures_ProcessInDoorLockGetPINCode( zclIncoming_t *pInMsg,
    132                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs );
    133          static ZStatus_t zclClosures_ProcessInDoorLockClearPINCode( zclIncoming_t *pInMsg,
    134                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs );
    135          static ZStatus_t zclClosures_ProcessInDoorLockClearAllPINCodes( zclIncoming_t *pInMsg,
    136                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    137          static ZStatus_t zclClosures_ProcessInDoorLockSetUserStatus( zclIncoming_t *pInMsg,
    138                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    139          static ZStatus_t zclClosures_ProcessInDoorLockGetUserStatus( zclIncoming_t *pInMsg,
    140                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    141          static ZStatus_t zclClosures_ProcessInDoorLockSetWeekDaySchedule( zclIncoming_t *pInMsg,
    142                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    143          static ZStatus_t zclClosures_ProcessInDoorLockGetWeekDaySchedule( zclIncoming_t *pInMsg,
    144                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    145          static ZStatus_t zclClosures_ProcessInDoorLockClearWeekDaySchedule( zclIncoming_t *pInMsg,
    146                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    147          static ZStatus_t zclClosures_ProcessInDoorLockSetYearDaySchedule( zclIncoming_t *pInMsg,
    148                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    149          static ZStatus_t zclClosures_ProcessInDoorLockGetYearDaySchedule( zclIncoming_t *pInMsg,
    150                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    151          static ZStatus_t zclClosures_ProcessInDoorLockClearYearDaySchedule( zclIncoming_t *pInMsg,
    152                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    153          static ZStatus_t zclClosures_ProcessInDoorLockSetHolidaySchedule( zclIncoming_t *pInMsg,
    154                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    155          static ZStatus_t zclClosures_ProcessInDoorLockGetHolidaySchedule( zclIncoming_t *pInMsg,
    156                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs );
    157          static ZStatus_t zclClosures_ProcessInDoorLockClearHolidaySchedule( zclIncoming_t *pInMsg,
    158                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    159          static ZStatus_t zclClosures_ProcessInDoorLockSetUserType( zclIncoming_t *pInMsg,
    160                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
    161          static ZStatus_t zclClosures_ProcessInDoorLockGetUserType( zclIncoming_t *pInMsg,
    162                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
    163          static ZStatus_t zclClosures_ProcessInDoorLockSetRFIDCode( zclIncoming_t *pInMsg,
    164                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
    165          static ZStatus_t zclClosures_ProcessInDoorLockGetRFIDCode( zclIncoming_t *pInMsg,
    166                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
    167          static ZStatus_t zclClosures_ProcessInDoorLockClearRFIDCode( zclIncoming_t *pInMsg,
    168                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    169          static ZStatus_t zclClosures_ProcessInDoorLockClearAllRFIDCodes( zclIncoming_t *pInMsg,
    170                                                                           zclClosures_DoorLockAppCallbacks_t *pCBs );
    171          static ZStatus_t zclClosures_ProcessInDoorLockSetTemporaryPin( zclIncoming_t *pInMsg,
    172                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs );
    173          static ZStatus_t zclClosures_ModifyPin( zclIncoming_t *pInMsg,
    174                                                  zclClosures_DoorLockAppCallbacks_t *pCBs );
    175          static ZStatus_t zclClosures_ProcessInDoorLockUnlockWithTimeoutRsp( zclIncoming_t *pInMsg,
    176                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    177          static ZStatus_t zclClosures_ProcessInDoorLockGetLogRecordRsp( zclIncoming_t *pInMsg,
    178                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs );
    179          static ZStatus_t zclClosures_ProcessInDoorLockSetPINCodeRsp( zclIncoming_t *pInMsg,
    180                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    181          static ZStatus_t zclClosures_ProcessInDoorLockGetPINCodeRsp( zclIncoming_t *pInMsg,
    182                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs );
    183          static ZStatus_t zclClosures_ProcessInDoorLockClearPINCodeRsp( zclIncoming_t *pInMsg,
    184                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs );
    185          static ZStatus_t zclClosures_ProcessInDoorLockClearAllPINCodesRsp( zclIncoming_t *pInMsg,
    186                                                                             zclClosures_DoorLockAppCallbacks_t *pCBs );
    187          static ZStatus_t zclClosures_ProcessInDoorLockSetUserStatusRsp( zclIncoming_t *pInMsg,
    188                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    189          static ZStatus_t zclClosures_ProcessInDoorLockGetUserStatusRsp( zclIncoming_t *pInMsg,
    190                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    191          static ZStatus_t zclClosures_ProcessInDoorLockSetWeekDayScheduleRsp( zclIncoming_t *pInMsg,
    192                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    193          static ZStatus_t zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp( zclIncoming_t *pInMsg,
    194                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    195          static ZStatus_t zclClosures_ProcessInDoorLockClearWeekDayScheduleRsp( zclIncoming_t *pInMsg,
    196                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs );
    197          static ZStatus_t zclClosures_ProcessInDoorLockSetYearDayScheduleRsp( zclIncoming_t *pInMsg,
    198                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    199          static ZStatus_t zclClosures_ProcessInDoorLockGetYearDayScheduleRsp( zclIncoming_t *pInMsg,
    200                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    201          static ZStatus_t zclClosures_ProcessInDoorLockClearYearDayScheduleRsp( zclIncoming_t *pInMsg,
    202                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs );
    203          static ZStatus_t zclClosures_ProcessInDoorLockSetHolidayScheduleRsp( zclIncoming_t *pInMsg,
    204                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    205          static ZStatus_t zclClosures_ProcessInDoorLockGetHolidayScheduleRsp( zclIncoming_t *pInMsg,
    206                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs );
    207          static ZStatus_t zclClosures_ProcessInDoorLockClearHolidayScheduleRsp( zclIncoming_t *pInMsg,
    208                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs );
    209          static ZStatus_t zclClosures_ProcessInDoorLockSetUserTypeRsp( zclIncoming_t *pInMsg,
    210                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs );
    211          static ZStatus_t zclClosures_ProcessInDoorLockGetUserTypeRsp( zclIncoming_t *pInMsg,
    212                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs );
    213          static ZStatus_t zclClosures_ProcessInDoorLockSetRFIDCodeRsp( zclIncoming_t *pInMsg,
    214                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs );
    215          static ZStatus_t zclClosures_ProcessInDoorLockGetRFIDCodeRsp( zclIncoming_t *pInMsg,
    216                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs );
    217          static ZStatus_t zclClosures_ProcessInDoorLockClearRFIDCodeRsp( zclIncoming_t *pInMsg,
    218                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs );
    219          static ZStatus_t zclClosures_ProcessInDoorLockClearAllRFIDCodesRsp( zclIncoming_t *pInMsg,
    220                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs );
    221          static ZStatus_t zclClosures_ProcessInDoorLockOperationEventNotification( zclIncoming_t *pInMsg,
    222                                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs );
    223          static ZStatus_t zclClosures_ProcessInDoorLockProgrammingEventNotification( zclIncoming_t *pInMsg,
    224                                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs );
    225          #endif //ZCL_DOORLOCK_EXT
    226          #endif //ZCL_DOORLOCK
    227          
    228          #ifdef ZCL_WINDOWCOVERING
    229          static zclClosures_WindowCoveringAppCallbacks_t *zclClosures_FindWCCallbacks( uint8 endpoint );
    230          static ZStatus_t zclClosures_ProcessInWindowCovering( zclIncoming_t *pInMsg,
    231                                                                zclClosures_WindowCoveringAppCallbacks_t *pCBs );
    232          #endif //ZCL_WINDOWCOVERING
    233          
    234          #ifdef ZCL_DOORLOCK
    235          /*********************************************************************
    236           * @fn      zclClosures_RegisterDoorLockCmdCallbacks
    237           *
    238           * @brief   Register an applications DoorLock command callbacks
    239           *
    240           * @param   endpoint - application's endpoint
    241           * @param   callbacks - pointer to the callback record.
    242           *
    243           * @return  ZMemError if not able to allocate
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          ZStatus_t zclClosures_RegisterDoorLockCmdCallbacks( uint8 endpoint, zclClosures_DoorLockAppCallbacks_t *callbacks )
   \                     zclClosures_RegisterDoorLockCmdCallbacks:
    246          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    247            zclClosuresDoorLockCBRec_t *pNewItem;
    248            zclClosuresDoorLockCBRec_t *pLoop;
    249          
    250            // Register as a ZCL Plugin
    251            if ( !zclDoorLockPluginRegisted )
   \   00000B   90....       MOV       DPTR,#zclDoorLockPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_0
    252            {
    253              zcl_registerPlugin( ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
    254                                  ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
    255                                  zclClosures_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclClosures_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclClosures_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C01         MOV       R4,#0x1
   \   00001E   7D01         MOV       R5,#0x1
   \   000020   7A01         MOV       R2,#0x1
   \   000022   7B01         MOV       R3,#0x1
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    256              zclDoorLockPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#zclDoorLockPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    257            }
    258          
    259            // Fill in the new profile list
    260            pNewItem = zcl_mem_alloc( sizeof( zclClosuresDoorLockCBRec_t ) );
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    261            if ( pNewItem == NULL )
   \   000041   EA           MOV       A,R2
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_1
    262            {
    263              return ( ZMemError );
   \   000045   7910         MOV       R1,#0x10
   \   000047   8042         SJMP      ??zclClosures_RegisterDoorLockCmdCallbacks_2
    264            }
    265          
    266            pNewItem->next = (zclClosuresDoorLockCBRec_t *)NULL;
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_1:
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine126 & 0xFFFF
    267            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_534:
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   E5..         MOV       A,?V0
   \   000057   12....       LCALL     ?Subroutine126 & 0xFFFF
    268            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_535:
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   EE           MOV       A,R6
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   EF           MOV       A,R7
   \   000061   F0           MOVX      @DPTR,A
    269          
    270            // Find spot in list
    271            if ( zclClosuresDoorLockCBs == NULL )
   \   000062   90....       MOV       DPTR,#zclClosuresDoorLockCBs
   \   000065   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000068   4B           ORL       A,R3
   \   000069   90....       MOV       DPTR,#zclClosuresDoorLockCBs
   \   00006C   6017         JZ        ??zclClosures_RegisterDoorLockCmdCallbacks_3
    272            {
    273              zclClosuresDoorLockCBs = pNewItem;
    274            }
    275            else
    276            {
    277              // Look for end of list
    278              pLoop = zclClosuresDoorLockCBs;
   \   00006E   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000071   8003         SJMP      ??zclClosures_RegisterDoorLockCmdCallbacks_4
    279              while ( pLoop->next != NULL )
    280              {
    281                pLoop = pLoop->next;
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_5:
   \   000073   EA           MOV       A,R2
   \   000074   FC           MOV       R4,A
   \   000075   EB           MOV       A,R3
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_4:
   \   000076   FD           MOV       R5,A
    282              }
   \   000077   8C82         MOV       DPL,R4
   \   000079   8D83         MOV       DPH,R5
   \   00007B   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00007E   4B           ORL       A,R3
   \   00007F   70F2         JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_5
    283          
    284              // Put new item at end of list
    285              pLoop->next = pNewItem;
   \   000081   8C82         MOV       DPL,R4
   \   000083   8D83         MOV       DPH,R5
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_3:
   \   000085   E8           MOV       A,R0
    286            }
   \   000086   12....       LCALL     ??Subroutine144_0 & 0xFFFF
    287            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_297:
   \   000089   7900         MOV       R1,#0x0
   \                     ??zclClosures_RegisterDoorLockCmdCallbacks_2:
   \   00008B   02....       LJMP      ??Subroutine187_0 & 0xFFFF
    288          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000003                ; Setup parameters for call to function StubAPS_InterPan
   \   000003   EA           MOV       A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
    289          
    290          /*********************************************************************
    291           * @fn      zclClosures_FindDoorLockCallbacks
    292           *
    293           * @brief   Find the DoorLock callbacks for an endpoint
    294           *
    295           * @param   endpoint
    296           *
    297           * @return  pointer to the callbacks
    298           */
    299          static zclClosures_DoorLockAppCallbacks_t *zclClosures_FindDoorLockCallbacks( uint8 endpoint )
    300          {
    301            zclClosuresDoorLockCBRec_t *pCBs;
    302          
    303            pCBs = zclClosuresDoorLockCBs;
    304            while ( pCBs )
    305            {
    306              if ( pCBs->endpoint == endpoint )
    307              {
    308                return ( pCBs->CBs );
    309              }
    310              pCBs = pCBs->next;
    311            }
    312            return ( (zclClosures_DoorLockAppCallbacks_t *)NULL );
    313          }
    314          #endif // ZCL_DOORLOCK
    315          
    316          #ifdef ZCL_WINDOWCOVERING
    317          /*********************************************************************
    318           * @fn      zclClosures_RegisterWindowCoveringCmdCallbacks
    319           *
    320           * @brief   Register an applications Window Covering command callbacks
    321           *
    322           * @param   endpoint - application's endpoint
    323           * @param   callbacks - pointer to the callback record.
    324           *
    325           * @return  ZMemError if not able to allocate
    326           */
    327          ZStatus_t zclClosures_RegisterWindowCoveringCmdCallbacks( uint8 endpoint, zclClosures_WindowCoveringAppCallbacks_t *callbacks )
    328          {
    329            zclClosuresWindowCoveringCBRec_t *pNewItem;
    330            zclClosuresWindowCoveringCBRec_t *pLoop;
    331          
    332            // Register as a ZCL Plugin
    333            if ( !zclWindowCoveringPluginRegisted )
    334            {
    335              zcl_registerPlugin( ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
    336                                  ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
    337                                  zclClosures_HdlIncoming );
    338              zclWindowCoveringPluginRegisted = TRUE;
    339            }
    340          
    341            // Fill in the new profile list
    342            pNewItem = zcl_mem_alloc( sizeof( zclClosuresWindowCoveringCBRec_t ) );
    343            if ( pNewItem == NULL )
    344            {
    345              return ( ZMemError );
    346            }
    347          
    348            pNewItem->next = (zclClosuresWindowCoveringCBRec_t *)NULL;
    349            pNewItem->endpoint = endpoint;
    350            pNewItem->CBs = callbacks;
    351          
    352            // Find spot in list
    353            if ( zclClosuresWindowCoveringCBs == NULL )
    354            {
    355              zclClosuresWindowCoveringCBs = pNewItem;
    356            }
    357            else
    358            {
    359              // Look for end of list
    360              pLoop = zclClosuresWindowCoveringCBs;
    361              while ( pLoop->next != NULL )
    362              {
    363                pLoop = pLoop->next;
    364              }
    365          
    366              // Put new item at end of list
    367              pLoop->next = pNewItem;
    368            }
    369            return ( ZSuccess );
    370          }
    371          
    372          /*********************************************************************
    373           * @fn      zclClosures_FindWCCallbacks
    374           *
    375           * @brief   Find the Window Covering callbacks for an endpoint
    376           *
    377           * @param   endpoint
    378           *
    379           * @return  pointer to the callbacks
    380           */
    381          static zclClosures_WindowCoveringAppCallbacks_t *zclClosures_FindWCCallbacks( uint8 endpoint )
    382          {
    383            zclClosuresWindowCoveringCBRec_t *pCBs;
    384          
    385            pCBs = zclClosuresWindowCoveringCBs;
    386            while ( pCBs )
    387            {
    388              if ( pCBs->endpoint == endpoint )
    389              {
    390                return ( pCBs->CBs );
    391              }
    392              pCBs = pCBs->next;
    393            }
    394            return ( (zclClosures_WindowCoveringAppCallbacks_t *)NULL );
    395          }
    396          #endif // ZCL_WINDOWCOVERING
    397          
    398          #if defined(ZCL_DOORLOCK) || defined(ZCL_WINDOWCOVERING)
    399          /*********************************************************************
    400           * @fn      zclClosures_HdlIncoming
    401           *
    402           * @brief   Callback from ZCL to process incoming Commands specific
    403           *          to this cluster library or Profile commands for attributes
    404           *          that aren't in the attribute list
    405           *
    406           * @param   pInMsg - pointer to the incoming message
    407           * @param   logicalClusterID
    408           *
    409           * @return  ZStatus_t
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          static ZStatus_t zclClosures_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclClosures_HdlIncoming:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    413            ZStatus_t stat = ZSuccess;
    414          
    415          #if defined ( INTER_PAN )
    416            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000010   240F         ADD       A,#0xf
   \   000012   F582         MOV       DPL,A
   \   000014   E4           CLR       A
   \   000015   3B           ADDC      A,R3
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   EA           MOV       A,R2
   \   00001B   2410         ADD       A,#0x10
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   3B           ADDC      A,R3
   \   000021   F583         MOV       DPH,A
   \   000023   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000026   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   000029   E9           MOV       A,R1
   \   00002A   6004         JZ        ??zclClosures_HdlIncoming_0
    417              return ( stat ); // Cluster not supported thru Inter-PAN
   \   00002C   7900         MOV       R1,#0x0
   \   00002E   8073         SJMP      ??zclClosures_HdlIncoming_1
    418          #endif
    419            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \                     ??zclClosures_HdlIncoming_0:
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   5407         ANL       A,#0x7
   \   000039   6401         XRL       A,#0x1
   \   00003B   7034         JNZ       ??zclClosures_HdlIncoming_2
    420            {
    421              // Is this a manufacturer specific command?
    422              if ( pInMsg->hdr.fc.manuSpecific == 0 )
    423              {
    424                stat = zclClosures_HdlInSpecificCommands( pInMsg );
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   12....       LCALL     ??Subroutine184_0 & 0xFFFF
    425              }
    426              else
    427              {
    428                // We don't support any manufacturer specific command.
    429                stat = ZFailure;
    430              }
    431            }
   \                     ??CrossCallReturnLabel_444:
   \   000044   E8           MOV       A,R0
   \   000045   FA           MOV       R2,A
   \   000046   E9           MOV       A,R1
   \   000047   FB           MOV       R3,A
   \   000048   E8           MOV       A,R0
   \   000049   2414         ADD       A,#0x14
   \   00004B   F582         MOV       DPL,A
   \   00004D   E4           CLR       A
   \   00004E   3B           ADDC      A,R3
   \   00004F   F583         MOV       DPH,A
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FC           MOV       R4,A
   \   000053   90....       MOV       DPTR,#zclClosuresDoorLockCBs
   \                     ??zclClosures_HdlIncoming_3:
   \   000056   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000059   6016         JZ        ??zclClosures_HdlIncoming_2
   \   00005B   8882         MOV       DPL,R0
   \   00005D   8983         MOV       DPH,R1
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6C           XRL       A,R4
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   70ED         JNZ       ??zclClosures_HdlIncoming_3
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   12....       LCALL     ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00006F   7004         JNZ       ??zclClosures_HdlIncoming_4
   \                     ??zclClosures_HdlIncoming_2:
   \   000071   7901         MOV       R1,#0x1
   \   000073   802E         SJMP      ??zclClosures_HdlIncoming_1
   \                     ??zclClosures_HdlIncoming_4:
   \   000075   8A82         MOV       DPL,R2
   \   000077   8B83         MOV       DPH,R3
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F5..         MOV       ?V2,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F5..         MOV       ?V3,A
   \   000084   78..         MOV       R0,#?V2
   \   000086   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclClosures_HdlIncoming>_0`:
   \   000089   0101         DW        257
   \   00008B   01           DB        1
   \   00008C   ....         DW        ??zclClosures_HdlIncoming_5
   \   00008E   ....         DW        ??zclClosures_HdlIncoming_6
   \   000090   ....         DW        ??zclClosures_HdlIncoming_7
   \                     ??zclClosures_HdlIncoming_6:
   \   000092                ; Setup parameters for call to function zclClosures_ProcessInDoorLockCmds
   \   000092   EE           MOV       A,R6
   \   000093   FA           MOV       R2,A
   \   000094   EF           MOV       A,R7
   \   000095   FB           MOV       R3,A
   \   000096   12....       LCALL     `??zclClosures_ProcessInDoorLockCmds::?relay`; Banked call to: zclClosures_ProcessInDoorLockCmds
   \   000099   E9           MOV       A,R1
   \   00009A   F5..         MOV       ?V0,A
   \   00009C   8003         SJMP      ??zclClosures_HdlIncoming_7
   \                     ??zclClosures_HdlIncoming_5:
   \   00009E   75..01       MOV       ?V0,#0x1
   \                     ??zclClosures_HdlIncoming_7:
   \   0000A1   A9..         MOV       R1,?V0
    432            else
    433            {
    434              // Handle all the normal (Read, Write...) commands -- should never get here
    435              stat = ZFailure;
    436            }
    437            return ( stat );
   \                     ??zclClosures_HdlIncoming_1:
   \   0000A3   02....       LJMP      ??Subroutine187_0 & 0xFFFF
    438          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000003   E8           MOV       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   FD           MOV       R5,A
   \   000004   EC           MOV       A,R4
   \   000005   4D           ORL       A,R5
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   000003   49           ORL       A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    439          
    440          /*********************************************************************
    441           * @fn      zclClosures_HdlInSpecificCommands
    442           *
    443           * @brief   Callback from ZCL to process incoming Commands specific
    444           *          to this cluster library
    445          
    446           * @param   pInMsg - pointer to the incoming message
    447           *
    448           * @return  ZStatus_t
    449           */
    450          static ZStatus_t zclClosures_HdlInSpecificCommands( zclIncoming_t *pInMsg )
    451          {
    452            ZStatus_t stat;
    453          #ifdef ZCL_DOORLOCK
    454            zclClosures_DoorLockAppCallbacks_t *pDLCBs;
    455          #endif
    456          
    457          #ifdef ZCL_WINDOWCOVERING
    458            zclClosures_WindowCoveringAppCallbacks_t *pWCCBs;
    459          #endif
    460          
    461          #ifdef ZCL_DOORLOCK
    462            // make sure endpoint exists
    463            pDLCBs = zclClosures_FindDoorLockCallbacks( pInMsg->msg->endPoint );
    464            if ( pDLCBs == NULL )
    465            {
    466              return ( ZFailure );
    467            }
    468          #endif
    469          
    470          #ifdef ZCL_WINDOWCOVERING
    471            // make sure endpoint exists
    472            pWCCBs = zclClosures_FindWCCallbacks( pInMsg->msg->endPoint );
    473            if ( pWCCBs == NULL )
    474            {
    475              return ( ZFailure );
    476            }
    477          #endif
    478          
    479            switch ( pInMsg->msg->clusterId )
    480            {
    481              case ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK:
    482          #ifdef ZCL_DOORLOCK
    483                stat = zclClosures_ProcessInDoorLockCmds( pInMsg, pDLCBs );
    484          #endif //ZCL_DOORLOCK
    485                break;
    486          
    487              case ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING:
    488          #ifdef ZCL_WINDOWCOVERING
    489                stat = zclClosures_ProcessInWindowCovering( pInMsg, pWCCBs );
    490          #endif //ZCL_WINDOWCOVERING
    491                break;
    492          
    493              default:
    494                stat = ZFailure;
    495                break;
    496            }
    497          
    498            return ( stat );
    499          }
    500          #endif // defined(ZCL_DOORLOCK) || defined(ZCL_WINDOWCOVERING)
    501          
    502          #ifdef ZCL_DOORLOCK
    503          /*********************************************************************
    504           * @fn      zclClosures_ProcessInDoorLockCmds
    505           *
    506           * @brief   Process in the received DoorLock Command.
    507           *
    508           * @param   pInMsg - pointer to the incoming message
    509           * @param   pCBs - pointer to the Application callback functions
    510           *
    511           * @return  ZStatus_t
    512           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          static ZStatus_t zclClosures_ProcessInDoorLockCmds( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockCmds:
    514                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV       A,#-0x1e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    516            ZStatus_t stat;
    517          
    518            // Client-to-Server
    519            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000A   EA           MOV       A,R2
   \   00000B   2408         ADD       A,#0x8
   \   00000D   F8           MOV       R0,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   88..         MOV       ?V0,R0
   \   000012   F5..         MOV       ?V1,A
   \   000014   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000017   6003         JZ        $+5
   \   000019   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_0 & 0xFFFF
    520            {
    521              switch(pInMsg->hdr.commandID)
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   12....       LCALL     ?UC_SWITCH_DENSE
   \                     `?<Jumptable for zclClosures_ProcessInDoorLockC_0`:
   \   000020   00           DB        0
   \   000021   1B           DB        27
   \   000022   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   000024   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   000026   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   000028   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   00002A   ....         DW        ??zclClosures_ProcessInDoorLockCmds_3
   \   00002C   ....         DW        ??zclClosures_ProcessInDoorLockCmds_4
   \   00002E   ....         DW        ??zclClosures_ProcessInDoorLockCmds_5
   \   000030   ....         DW        ??zclClosures_ProcessInDoorLockCmds_6
   \   000032   ....         DW        ??zclClosures_ProcessInDoorLockCmds_7
   \   000034   ....         DW        ??zclClosures_ProcessInDoorLockCmds_8
   \   000036   ....         DW        ??zclClosures_ProcessInDoorLockCmds_9
   \   000038   ....         DW        ??zclClosures_ProcessInDoorLockCmds_10
   \   00003A   ....         DW        ??zclClosures_ProcessInDoorLockCmds_11
   \   00003C   ....         DW        ??zclClosures_ProcessInDoorLockCmds_12
   \   00003E   ....         DW        ??zclClosures_ProcessInDoorLockCmds_13
   \   000040   ....         DW        ??zclClosures_ProcessInDoorLockCmds_14
   \   000042   ....         DW        ??zclClosures_ProcessInDoorLockCmds_15
   \   000044   ....         DW        ??zclClosures_ProcessInDoorLockCmds_16
   \   000046   ....         DW        ??zclClosures_ProcessInDoorLockCmds_17
   \   000048   ....         DW        ??zclClosures_ProcessInDoorLockCmds_18
   \   00004A   ....         DW        ??zclClosures_ProcessInDoorLockCmds_19
   \   00004C   ....         DW        ??zclClosures_ProcessInDoorLockCmds_20
   \   00004E   ....         DW        ??zclClosures_ProcessInDoorLockCmds_21
   \   000050   ....         DW        ??zclClosures_ProcessInDoorLockCmds_22
   \   000052   ....         DW        ??zclClosures_ProcessInDoorLockCmds_23
   \   000054   ....         DW        ??zclClosures_ProcessInDoorLockCmds_24
   \   000056   ....         DW        ??zclClosures_ProcessInDoorLockCmds_25
   \   000058   ....         DW        ??zclClosures_ProcessInDoorLockCmds_26
   \   00005A   ....         DW        ??zclClosures_ProcessInDoorLockCmds_27
    522              {
    523                case COMMAND_CLOSURES_LOCK_DOOR:
    524                case COMMAND_CLOSURES_UNLOCK_DOOR:
    525                case COMMAND_CLOSURES_TOGGLE_DOOR:
    526                  stat = zclClosures_ProcessInDoorLock( pInMsg, pCBs );
    527                  break;
    528                  
    529          #ifdef ZCL_DOORLOCK_EXT
    530                case COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT:
    531                  stat = zclClosures_ProcessInDoorLockUnlockWithTimeout( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_3:
   \   00005C                ; Setup parameters for call to function zclClosures_ProcessInDoorLockUnlockWithTimeout
   \   00005C   12....       LCALL     ??zclClosures_ProcessInDoorLockUnlockWithTimeou; Banked call to: zclClosures_ProcessInDoorLockUnlockWithTimeout
   \   00005F   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    532                  break;
    533          
    534                case COMMAND_CLOSURES_GET_LOG_RECORD:
    535                  stat = zclClosures_ProcessInDoorLockGetLogRecord( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_4:
   \   000062   8C82         MOV       DPL,R4
   \   000064   8D83         MOV       DPH,R5
   \   000066   800E         SJMP      ??zclClosures_ProcessInDoorLockCmds_29
    536                  break;
    537          
    538                case COMMAND_CLOSURES_SET_PIN_CODE:
    539                  stat = zclClosures_ProcessInDoorLockSetPINCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_5:
   \   000068                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetPINCode
   \   000068   12....       LCALL     `??zclClosures_ProcessInDoorLockSetPINCode::?rel`; Banked call to: zclClosures_ProcessInDoorLockSetPINCode
   \   00006B   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    540                  break;
    541          
    542                case COMMAND_CLOSURES_GET_PIN_CODE:
    543                  stat = zclClosures_ProcessInDoorLockGetPINCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_6:
   \   00006E   8C82         MOV       DPL,R4
   \   000070   8D83         MOV       DPH,R5
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \                     ??zclClosures_ProcessInDoorLockCmds_29:
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_30 & 0xFFFF
    544                  break;
    545          
    546                case COMMAND_CLOSURES_CLEAR_PIN_CODE:
    547                  stat = zclClosures_ProcessInDoorLockClearPINCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_7:
   \   00007F   EC           MOV       A,R4
   \   000080   240C         ADD       A,#0xc
   \   000082   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_31 & 0xFFFF
    548                  break;
    549          
    550                case COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES:
    551                  stat = zclClosures_ProcessInDoorLockClearAllPINCodes( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_8:
   \   000085   EC           MOV       A,R4
   \   000086   240E         ADD       A,#0xe
   \   000088   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_32 & 0xFFFF
    552                  break;
    553          
    554                case COMMAND_CLOSURES_SET_USER_STATUS:
    555                  stat = zclClosures_ProcessInDoorLockSetUserStatus( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_9:
   \   00008B   EC           MOV       A,R4
   \   00008C   2410         ADD       A,#0x10
   \   00008E   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_33 & 0xFFFF
    556                  break;
    557          
    558                case COMMAND_CLOSURES_GET_USER_STATUS:
    559                  stat = zclClosures_ProcessInDoorLockGetUserStatus( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_10:
   \   000091   EC           MOV       A,R4
   \   000092   2412         ADD       A,#0x12
   \   000094   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_31 & 0xFFFF
    560                  break;
    561          
    562                case COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE:
    563                  stat = zclClosures_ProcessInDoorLockSetWeekDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_11:
   \   000097                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetWeekDaySchedule
   \   000097   12....       LCALL     ??zclClosures_ProcessInDoorLockSetWeekDaySchedu; Banked call to: zclClosures_ProcessInDoorLockSetWeekDaySchedule
   \   00009A   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    564                  break;
    565          
    566                case COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE:
    567                  stat = zclClosures_ProcessInDoorLockGetWeekDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_12:
   \   00009D   EC           MOV       A,R4
   \   00009E   2416         ADD       A,#0x16
   \   0000A0   800E         SJMP      ??zclClosures_ProcessInDoorLockCmds_34
    568                  break;
    569          
    570                case COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE:
    571                  stat = zclClosures_ProcessInDoorLockClearWeekDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_13:
   \   0000A2   EC           MOV       A,R4
   \   0000A3   2418         ADD       A,#0x18
   \   0000A5   8009         SJMP      ??zclClosures_ProcessInDoorLockCmds_34
    572                  break;
    573          
    574                case COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE:
    575                  stat = zclClosures_ProcessInDoorLockSetYearDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_14:
   \   0000A7                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetYearDaySchedule
   \   0000A7   12....       LCALL     ??zclClosures_ProcessInDoorLockSetYearDaySchedu; Banked call to: zclClosures_ProcessInDoorLockSetYearDaySchedule
   \   0000AA   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    576                  break;
    577          
    578                case COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE:
    579                  stat = zclClosures_ProcessInDoorLockGetYearDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_15:
   \   0000AD   EC           MOV       A,R4
   \   0000AE   241C         ADD       A,#0x1c
   \                     ??zclClosures_ProcessInDoorLockCmds_34:
   \   0000B0   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   0000B3   700B         JNZ       ??zclClosures_ProcessInDoorLockCmds_35
   \   0000B5   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    580                  break;
    581          
    582                case COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE:
    583                  stat = zclClosures_ProcessInDoorLockClearYearDaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_16:
   \   0000B8   EC           MOV       A,R4
   \   0000B9   241E         ADD       A,#0x1e
   \   0000BB   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   0000BE   602B         JZ        ??zclClosures_ProcessInDoorLockCmds_36
   \                     ??zclClosures_ProcessInDoorLockCmds_35:
   \   0000C0   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000C3   85..82       MOV       DPL,?XSP + 0
   \   0000C6   85..83       MOV       DPH,?XSP + 1
   \   0000C9   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000CC   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   FE           MOV       R6,A
   \   0000D2   8C82         MOV       DPL,R4
   \   0000D4   8D83         MOV       DPH,R5
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   FD           MOV       R5,A
   \   0000DA   7401         MOV       A,#0x1
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   EE           MOV       A,R6
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   ED           MOV       A,R5
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4                ; Setup parameters for indirect call
   \   0000E4   AC..         MOV       R4,?XSP + 0
   \   0000E6   AD..         MOV       R5,?XSP + 1
   \   0000E8   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_37 & 0xFFFF
   \                     ??zclClosures_ProcessInDoorLockCmds_36:
   \   0000EB   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    584                  break;
    585          
    586                case COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE:
    587                  stat = zclClosures_ProcessInDoorLockSetHolidaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_17:
   \   0000EE                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetHolidaySchedule
   \   0000EE   12....       LCALL     ??zclClosures_ProcessInDoorLockSetHolidaySchedu; Banked call to: zclClosures_ProcessInDoorLockSetHolidaySchedule
   \   0000F1   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    588                  break;
    589          
    590                case COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE:
    591                  stat = zclClosures_ProcessInDoorLockGetHolidaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_18:
   \   0000F4   EC           MOV       A,R4
   \   0000F5   2422         ADD       A,#0x22
   \   0000F7   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   0000FA   700B         JNZ       ??zclClosures_ProcessInDoorLockCmds_38
   \   0000FC   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    592                  break;
    593          
    594                case COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE:
    595                  stat = zclClosures_ProcessInDoorLockClearHolidaySchedule( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_19:
   \   0000FF   EC           MOV       A,R4
   \   000100   2424         ADD       A,#0x24
   \   000102   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000105   6012         JZ        ??zclClosures_ProcessInDoorLockCmds_39
   \                     ??zclClosures_ProcessInDoorLockCmds_38:
   \   000107   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00010A   C0E0         PUSH      A
   \   00010C   7405         MOV       A,#0x5
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   D0E0         POP       A
   \   000113   F0           MOVX      @DPTR,A
   \   000114                ; Setup parameters for indirect call
   \   000114   7405         MOV       A,#0x5
   \   000116   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_40 & 0xFFFF
   \                     ??zclClosures_ProcessInDoorLockCmds_39:
   \   000119   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    596                  break;
    597          
    598                case COMMAND_CLOSURES_SET_USER_TYPE:
    599                  stat = zclClosures_ProcessInDoorLockSetUserType( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_20:
   \   00011C   EC           MOV       A,R4
   \   00011D   2426         ADD       A,#0x26
   \   00011F   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_33 & 0xFFFF
    600                  break;
    601          
    602                case COMMAND_CLOSURES_GET_USER_TYPE:
    603                  stat = zclClosures_ProcessInDoorLockGetUserType( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_21:
   \   000122   EC           MOV       A,R4
   \   000123   2428         ADD       A,#0x28
   \   000125   8009         SJMP      ??zclClosures_ProcessInDoorLockCmds_31
    604                  break;
    605          
    606                case COMMAND_CLOSURES_SET_RFID_CODE:
    607                  stat = zclClosures_ProcessInDoorLockSetRFIDCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_22:
   \   000127                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetRFIDCode
   \   000127   12....       LCALL     `??zclClosures_ProcessInDoorLockSetRFIDCode::?re`; Banked call to: zclClosures_ProcessInDoorLockSetRFIDCode
   \   00012A   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    608                  break;
    609          
    610                case COMMAND_CLOSURES_GET_RFID_CODE:
    611                  stat = zclClosures_ProcessInDoorLockGetRFIDCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_23:
   \   00012D   EC           MOV       A,R4
   \   00012E   242C         ADD       A,#0x2c
   \                     ??zclClosures_ProcessInDoorLockCmds_31:
   \   000130   F582         MOV       DPL,A
   \   000132   E4           CLR       A
   \   000133   3D           ADDC      A,R5
   \   000134   F583         MOV       DPH,A
   \                     ??zclClosures_ProcessInDoorLockCmds_30:
   \   000136   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000139   7011         JNZ       ??zclClosures_ProcessInDoorLockCmds_41
   \   00013B   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    612                  break;
    613          
    614                case COMMAND_CLOSURES_CLEAR_RFID_CODE:
    615                  stat = zclClosures_ProcessInDoorLockClearRFIDCode( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_24:
   \   00013E   EC           MOV       A,R4
   \   00013F   242E         ADD       A,#0x2e
   \   000141   F582         MOV       DPL,A
   \   000143   E4           CLR       A
   \   000144   3D           ADDC      A,R5
   \   000145   F583         MOV       DPH,A
   \   000147   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00014A   6022         JZ        ??zclClosures_ProcessInDoorLockCmds_42
   \                     ??zclClosures_ProcessInDoorLockCmds_41:
   \   00014C   85..82       MOV       DPL,?V0
   \   00014F   85..83       MOV       DPH,?V1
   \   000152   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000155   FC           MOV       R4,A
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \   000158   F9           MOV       R1,A
   \   000159   7403         MOV       A,#0x3
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   EC           MOV       A,R4
   \   00015F   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000162                ; Setup parameters for indirect call
   \   000162   7403         MOV       A,#0x3
   \   000164   12....       LCALL     ?XSTACK_DISP102_8
   \   000167   8E82         MOV       DPL,R6
   \   000169   8F83         MOV       DPH,R7
   \   00016B   02....       LJMP      ??CrossCallReturnLabel_89 & 0xFFFF
   \                     ??zclClosures_ProcessInDoorLockCmds_42:
   \   00016E   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    616                  break;
    617          
    618                case COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES:
    619                  stat = zclClosures_ProcessInDoorLockClearAllRFIDCodes( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_25:
   \   000171   EC           MOV       A,R4
   \   000172   2430         ADD       A,#0x30
   \                     ??zclClosures_ProcessInDoorLockCmds_32:
   \   000174   F582         MOV       DPL,A
   \   000176   E4           CLR       A
   \   000177   3D           ADDC      A,R5
   \   000178   F583         MOV       DPH,A
   \   00017A   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   00017D   E582         MOV       A,DPL
   \   00017F   4583         ORL       A,DPH
   \   000181   6003         JZ        $+5
   \   000183   02....       LJMP      ??CrossCallReturnLabel_89 & 0xFFFF
   \   000186                ; Setup parameters for indirect call
   \   000186   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    620                  break;
    621                  
    622                case COMMAND_CLOSURES_SET_TEMPORARY_PIN:
    623                  stat = zclClosures_ProcessInDoorLockSetTemporaryPin( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_26:
   \   000189                ; Setup parameters for call to function zclClosures_ProcessInDoorLockSetTemporaryPin
   \   000189   12....       LCALL     `??zclClosures_ProcessInDoorLockSetTemporaryPin:`; Banked call to: zclClosures_ProcessInDoorLockSetTemporaryPin
   \   00018C   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    624                  break;
    625                  
    626                case COMMAND_CLOSURES_MODIFY_PIN:
    627                  stat = zclClosures_ModifyPin( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_27:
   \   00018F   EC           MOV       A,R4
   \   000190   2434         ADD       A,#0x34
   \   000192   12....       LCALL     ?Subroutine24 & 0xFFFF
    628                  break;            
    629                  
    630          #endif
    631                default:
    632                  // Unknown command
    633                  stat = ZFailure;
    634                  break;
    635              }
    636            }
   \                     ??CrossCallReturnLabel_294:
   \   000195   7003         JNZ       $+5
   \   000197   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
   \   00019A   7D00         MOV       R5,#0x0
   \   00019C   7C00         MOV       R4,#0x0
   \                     ??zclClosures_ProcessInDoorLockCmds_43:
   \   00019E   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001A1   C0E0         PUSH      A
   \   0001A3   EC           MOV       A,R4
   \   0001A4   FE           MOV       R6,A
   \   0001A5   7406         MOV       A,#0x6
   \   0001A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AA   E582         MOV       A,DPL
   \   0001AC   2E           ADD       A,R6
   \   0001AD   F582         MOV       DPL,A
   \   0001AF   E4           CLR       A
   \   0001B0   3583         ADDC      A,DPH
   \   0001B2   F583         MOV       DPH,A
   \   0001B4   D0E0         POP       A
   \   0001B6   F0           MOVX      @DPTR,A
   \   0001B7   0D           INC       R5
   \   0001B8   0C           INC       R4
   \   0001B9   EC           MOV       A,R4
   \   0001BA   C3           CLR       C
   \   0001BB   940C         SUBB      A,#0xc
   \   0001BD   40DF         JC        ??zclClosures_ProcessInDoorLockCmds_43
   \   0001BF   7C00         MOV       R4,#0x0
   \                     ??zclClosures_ProcessInDoorLockCmds_44:
   \   0001C1   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0001C4   C0E0         PUSH      A
   \   0001C6   EC           MOV       A,R4
   \   0001C7   FE           MOV       R6,A
   \   0001C8   7406         MOV       A,#0x6
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   E582         MOV       A,DPL
   \   0001CF   2E           ADD       A,R6
   \   0001D0   FE           MOV       R6,A
   \   0001D1   E4           CLR       A
   \   0001D2   3583         ADDC      A,DPH
   \   0001D4   FF           MOV       R7,A
   \   0001D5   EE           MOV       A,R6
   \   0001D6   240C         ADD       A,#0xc
   \   0001D8   F582         MOV       DPL,A
   \   0001DA   E4           CLR       A
   \   0001DB   3F           ADDC      A,R7
   \   0001DC   F583         MOV       DPH,A
   \   0001DE   D0E0         POP       A
   \   0001E0   F0           MOVX      @DPTR,A
   \   0001E1   0D           INC       R5
   \   0001E2   0C           INC       R4
   \   0001E3   EC           MOV       A,R4
   \   0001E4   C3           CLR       C
   \   0001E5   940C         SUBB      A,#0xc
   \   0001E7   40D8         JC        ??zclClosures_ProcessInDoorLockCmds_44
   \   0001E9                ; Setup parameters for indirect call
   \   0001E9   7406         MOV       A,#0x6
   \                     ??zclClosures_ProcessInDoorLockCmds_40:
   \   0001EB   12....       LCALL     ?XSTACK_DISP102_8
   \                     ??zclClosures_ProcessInDoorLockCmds_37:
   \   0001EE   8882         MOV       DPL,R0
   \   0001F0   8983         MOV       DPH,R1
   \   0001F2   02....       LJMP      ??CrossCallReturnLabel_172 & 0xFFFF
    637            // Server-to-Client
    638            else
    639            {
    640              switch(pInMsg->hdr.commandID)
   \                     ??zclClosures_ProcessInDoorLockCmds_0:
   \   0001F5   E0           MOVX      A,@DPTR
   \   0001F6   12....       LCALL     ?UC_SWITCH_DENSE
   \                     `?<Jumptable for zclClosures_ProcessInDoorLockC_1`:
   \   0001F9   00           DB        0
   \   0001FA   21           DB        33
   \   0001FB   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   0001FD   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   0001FF   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   000201   ....         DW        ??zclClosures_ProcessInDoorLockCmds_2
   \   000203   ....         DW        ??zclClosures_ProcessInDoorLockCmds_45
   \   000205   ....         DW        ??zclClosures_ProcessInDoorLockCmds_46
   \   000207   ....         DW        ??zclClosures_ProcessInDoorLockCmds_47
   \   000209   ....         DW        ??zclClosures_ProcessInDoorLockCmds_48
   \   00020B   ....         DW        ??zclClosures_ProcessInDoorLockCmds_49
   \   00020D   ....         DW        ??zclClosures_ProcessInDoorLockCmds_50
   \   00020F   ....         DW        ??zclClosures_ProcessInDoorLockCmds_51
   \   000211   ....         DW        ??zclClosures_ProcessInDoorLockCmds_52
   \   000213   ....         DW        ??zclClosures_ProcessInDoorLockCmds_53
   \   000215   ....         DW        ??zclClosures_ProcessInDoorLockCmds_54
   \   000217   ....         DW        ??zclClosures_ProcessInDoorLockCmds_55
   \   000219   ....         DW        ??zclClosures_ProcessInDoorLockCmds_56
   \   00021B   ....         DW        ??zclClosures_ProcessInDoorLockCmds_57
   \   00021D   ....         DW        ??zclClosures_ProcessInDoorLockCmds_58
   \   00021F   ....         DW        ??zclClosures_ProcessInDoorLockCmds_59
   \   000221   ....         DW        ??zclClosures_ProcessInDoorLockCmds_60
   \   000223   ....         DW        ??zclClosures_ProcessInDoorLockCmds_61
   \   000225   ....         DW        ??zclClosures_ProcessInDoorLockCmds_62
   \   000227   ....         DW        ??zclClosures_ProcessInDoorLockCmds_63
   \   000229   ....         DW        ??zclClosures_ProcessInDoorLockCmds_64
   \   00022B   ....         DW        ??zclClosures_ProcessInDoorLockCmds_65
   \   00022D   ....         DW        ??zclClosures_ProcessInDoorLockCmds_66
   \   00022F   ....         DW        ??zclClosures_ProcessInDoorLockCmds_67
   \   000231   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   000233   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   000235   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   000237   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   000239   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   00023B   ....         DW        ??zclClosures_ProcessInDoorLockCmds_1
   \   00023D   ....         DW        ??zclClosures_ProcessInDoorLockCmds_68
   \   00023F   ....         DW        ??zclClosures_ProcessInDoorLockCmds_69
    641              {
    642                case COMMAND_CLOSURES_LOCK_DOOR_RSP:
    643                case COMMAND_CLOSURES_UNLOCK_DOOR_RSP:
    644                case COMMAND_CLOSURES_TOGGLE_DOOR_RSP:
    645                  stat = zclClosures_ProcessInDoorLock( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_2:
   \   000241                ; Setup parameters for call to function zclClosures_ProcessInDoorLock
   \   000241   12....       LCALL     `??zclClosures_ProcessInDoorLock::?relay`; Banked call to: zclClosures_ProcessInDoorLock
   \   000244   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    646                  break;
    647                  
    648          #ifdef ZCL_DOORLOCK_EXT
    649                  
    650                case COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT_RSP:
    651                  stat = zclClosures_ProcessInDoorLockUnlockWithTimeoutRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_45:
   \   000247   EC           MOV       A,R4
   \   000248   2436         ADD       A,#0x36
   \   00024A   8066         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    652                  break;
    653          
    654                case COMMAND_CLOSURES_GET_LOG_RECORD_RSP:
    655                  stat = zclClosures_ProcessInDoorLockGetLogRecordRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_46:
   \   00024C                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetLogRecordRsp
   \   00024C   12....       LCALL     `??zclClosures_ProcessInDoorLockGetLogRecordRsp:`; Banked call to: zclClosures_ProcessInDoorLockGetLogRecordRsp
   \   00024F   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    656                  break;
    657          
    658                case COMMAND_CLOSURES_SET_PIN_CODE_RSP:
    659                  stat = zclClosures_ProcessInDoorLockSetPINCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_47:
   \   000252   EC           MOV       A,R4
   \   000253   243A         ADD       A,#0x3a
   \   000255   805B         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    660                  break;
    661          
    662                case COMMAND_CLOSURES_GET_PIN_CODE_RSP:
    663                  stat = zclClosures_ProcessInDoorLockGetPINCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_48:
   \   000257                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetPINCodeRsp
   \   000257   12....       LCALL     `??zclClosures_ProcessInDoorLockGetPINCodeRsp::?`; Banked call to: zclClosures_ProcessInDoorLockGetPINCodeRsp
   \   00025A   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    664                  break;
    665          
    666                case COMMAND_CLOSURES_CLEAR_PIN_CODE_RSP:
    667                  stat = zclClosures_ProcessInDoorLockClearPINCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_49:
   \   00025D   EC           MOV       A,R4
   \   00025E   243E         ADD       A,#0x3e
   \   000260   8050         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    668                  break;
    669          
    670                case COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES_RSP:
    671                  stat = zclClosures_ProcessInDoorLockClearAllPINCodesRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_50:
   \   000262   EC           MOV       A,R4
   \   000263   2440         ADD       A,#0x40
   \   000265   804B         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    672                  break;
    673          
    674                case COMMAND_CLOSURES_SET_USER_STATUS_RSP:
    675                  stat = zclClosures_ProcessInDoorLockSetUserStatusRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_51:
   \   000267   EC           MOV       A,R4
   \   000268   2442         ADD       A,#0x42
   \   00026A   8046         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    676                  break;
    677          
    678                case COMMAND_CLOSURES_GET_USER_STATUS_RSP:
    679                  stat = zclClosures_ProcessInDoorLockGetUserStatusRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_52:
   \   00026C   EC           MOV       A,R4
   \   00026D   2444         ADD       A,#0x44
   \                     ??zclClosures_ProcessInDoorLockCmds_33:
   \   00026F   F8           MOV       R0,A
   \   000270   E4           CLR       A
   \   000271   3D           ADDC      A,R5
   \   000272   F9           MOV       R1,A
   \   000273   E8           MOV       A,R0
   \   000274   FE           MOV       R6,A
   \   000275   E9           MOV       A,R1
   \   000276   FF           MOV       R7,A
   \   000277   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   00027A   704D         JNZ       ??zclClosures_ProcessInDoorLockCmds_71
   \   00027C   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_1 & 0xFFFF
    680                  break;
    681          
    682                case COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE_RSP:
    683                  stat = zclClosures_ProcessInDoorLockSetWeekDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_53:
   \   00027F   EC           MOV       A,R4
   \   000280   2446         ADD       A,#0x46
   \   000282   802E         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    684                  break;
    685          
    686                case COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE_RSP:
    687                  stat = zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_54:
   \   000284                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
   \   000284   12....       LCALL     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu; Banked call to: zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
   \   000287   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    688                  break;
    689          
    690                case COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE_RSP:
    691                  stat = zclClosures_ProcessInDoorLockClearWeekDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_55:
   \   00028A   EC           MOV       A,R4
   \   00028B   244A         ADD       A,#0x4a
   \   00028D   8023         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    692                  break;
    693          
    694                case COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE_RSP:
    695                  stat = zclClosures_ProcessInDoorLockSetYearDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_56:
   \   00028F   EC           MOV       A,R4
   \   000290   244C         ADD       A,#0x4c
   \   000292   801E         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    696                  break;
    697          
    698                case COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE_RSP:
    699                  stat = zclClosures_ProcessInDoorLockGetYearDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_57:
   \   000294                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
   \   000294   12....       LCALL     ??zclClosures_ProcessInDoorLockGetYearDaySchedu; Banked call to: zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
   \   000297   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    700                  break;
    701          
    702                case COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE_RSP:
    703                  stat = zclClosures_ProcessInDoorLockClearYearDayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_58:
   \   00029A   EC           MOV       A,R4
   \   00029B   2450         ADD       A,#0x50
   \   00029D   8013         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    704                  break;
    705          
    706                case COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE_RSP:
    707                  stat = zclClosures_ProcessInDoorLockSetHolidayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_59:
   \   00029F   EC           MOV       A,R4
   \   0002A0   2452         ADD       A,#0x52
   \   0002A2   800E         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    708                  break;
    709          
    710                case COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE_RSP:
    711                  stat = zclClosures_ProcessInDoorLockGetHolidayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_60:
   \   0002A4                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
   \   0002A4   12....       LCALL     ??zclClosures_ProcessInDoorLockGetHolidaySchedu; Banked call to: zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
   \   0002A7   02....       LJMP      ??zclClosures_ProcessInDoorLockCmds_28 & 0xFFFF
    712                  break;
    713          
    714                case COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE_RSP:
    715                  stat = zclClosures_ProcessInDoorLockClearHolidayScheduleRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_61:
   \   0002AA   EC           MOV       A,R4
   \   0002AB   2456         ADD       A,#0x56
   \   0002AD   8003         SJMP      ??zclClosures_ProcessInDoorLockCmds_70
    716                  break;
    717          
    718                case COMMAND_CLOSURES_SET_USER_TYPE_RSP:
    719                  stat = zclClosures_ProcessInDoorLockSetUserTypeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_62:
   \   0002AF   EC           MOV       A,R4
   \   0002B0   2458         ADD       A,#0x58
   \                     ??zclClosures_ProcessInDoorLockCmds_70:
   \   0002B2   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   0002B5   705E         JNZ       ??zclClosures_ProcessInDoorLockCmds_72
   \   0002B7                ; Setup parameters for indirect call
   \   0002B7   8076         SJMP      ??zclClosures_ProcessInDoorLockCmds_1
    720                  break;
    721          
    722                case COMMAND_CLOSURES_GET_USER_TYPE_RSP:
    723                  stat = zclClosures_ProcessInDoorLockGetUserTypeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_63:
   \   0002B9   EC           MOV       A,R4
   \   0002BA   245A         ADD       A,#0x5a
   \   0002BC   F8           MOV       R0,A
   \   0002BD   E4           CLR       A
   \   0002BE   3D           ADDC      A,R5
   \   0002BF   F9           MOV       R1,A
   \   0002C0   E8           MOV       A,R0
   \   0002C1   FE           MOV       R6,A
   \   0002C2   E9           MOV       A,R1
   \   0002C3   FF           MOV       R7,A
   \   0002C4   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   0002C7   6066         JZ        ??zclClosures_ProcessInDoorLockCmds_1
   \                     ??zclClosures_ProcessInDoorLockCmds_71:
   \   0002C9   85..82       MOV       DPL,?V0
   \   0002CC   85..83       MOV       DPH,?V1
   \   0002CF   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0002D2   E0           MOVX      A,@DPTR
   \   0002D3   F5..         MOV       ?V0,A
   \   0002D5   A3           INC       DPTR
   \   0002D6   E0           MOVX      A,@DPTR
   \   0002D7   FD           MOV       R5,A
   \   0002D8   E5..         MOV       A,?V0
   \   0002DA   85..82       MOV       DPL,?XSP + 0
   \   0002DD   85..83       MOV       DPH,?XSP + 1
   \   0002E0   F0           MOVX      @DPTR,A
   \   0002E1   A3           INC       DPTR
   \   0002E2   ED           MOV       A,R5
   \   0002E3   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0002E6   A3           INC       DPTR
   \   0002E7   E0           MOVX      A,@DPTR
   \   0002E8   C0E0         PUSH      A
   \   0002EA   7402         MOV       A,#0x2
   \   0002EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EF   D0E0         POP       A
   \   0002F1   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0002F4   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   0002F7   8025         SJMP      ??CrossCallReturnLabel_89
    724                  break;
    725          
    726                case COMMAND_CLOSURES_SET_RFID_CODE_RSP:
    727                  stat = zclClosures_ProcessInDoorLockSetRFIDCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_64:
   \   0002F9   EC           MOV       A,R4
   \   0002FA   245C         ADD       A,#0x5c
   \   0002FC   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0002FF   602E         JZ        ??zclClosures_ProcessInDoorLockCmds_1
   \   000301                ; Setup parameters for indirect call
   \   000301   8012         SJMP      ??zclClosures_ProcessInDoorLockCmds_72
    728                  break;
    729          
    730                case COMMAND_CLOSURES_GET_RFID_CODE_RSP:
    731                  stat = zclClosures_ProcessInDoorLockGetRFIDCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_65:
   \   000303                ; Setup parameters for call to function zclClosures_ProcessInDoorLockGetRFIDCodeRsp
   \   000303   12....       LCALL     `??zclClosures_ProcessInDoorLockGetRFIDCodeRsp::`; Banked call to: zclClosures_ProcessInDoorLockGetRFIDCodeRsp
   \   000306   8023         SJMP      ??zclClosures_ProcessInDoorLockCmds_28
    732                  break;
    733          
    734                case COMMAND_CLOSURES_CLEAR_RFID_CODE_RSP:
    735                  stat = zclClosures_ProcessInDoorLockClearRFIDCodeRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_66:
   \   000308   EC           MOV       A,R4
   \   000309   2460         ADD       A,#0x60
   \   00030B   8003         SJMP      ??zclClosures_ProcessInDoorLockCmds_73
    736                  break;
    737          
    738                case COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES_RSP:
    739                  stat = zclClosures_ProcessInDoorLockClearAllRFIDCodesRsp( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_67:
   \   00030D   EC           MOV       A,R4
   \   00030E   2462         ADD       A,#0x62
   \                     ??zclClosures_ProcessInDoorLockCmds_73:
   \   000310   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000313   601A         JZ        ??zclClosures_ProcessInDoorLockCmds_1
   \   000315                ; Setup parameters for indirect call
   \                     ??zclClosures_ProcessInDoorLockCmds_72:
   \   000315   85..82       MOV       DPL,?V0
   \   000318   85..83       MOV       DPH,?V1
   \   00031B   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00031E   12....       LCALL     ?CALL_IND
   \   000321   8008         SJMP      ??zclClosures_ProcessInDoorLockCmds_28
    740                  break;
    741          
    742                case COMMAND_CLOSURES_OPERATION_EVENT_NOTIFICATION:
    743                  stat = zclClosures_ProcessInDoorLockOperationEventNotification( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_68:
   \   000323                ; Setup parameters for call to function zclClosures_ProcessInDoorLockOperationEventNotification
   \   000323   12....       LCALL     ??zclClosures_ProcessInDoorLockOperationEventNo; Banked call to: zclClosures_ProcessInDoorLockOperationEventNotification
   \   000326   8003         SJMP      ??zclClosures_ProcessInDoorLockCmds_28
    744                  break;
    745          
    746                case COMMAND_CLOSURES_PROGRAMMING_EVENT_NOTIFICATION:
    747                  stat = zclClosures_ProcessInDoorLockProgrammingEventNotification( pInMsg, pCBs );
   \                     ??zclClosures_ProcessInDoorLockCmds_69:
   \   000328                ; Setup parameters for call to function zclClosures_ProcessInDoorLockProgrammingEventNotification
   \   000328   12....       LCALL     ??zclClosures_ProcessInDoorLockProgrammingEvent; Banked call to: zclClosures_ProcessInDoorLockProgrammingEventNotification
   \                     ??zclClosures_ProcessInDoorLockCmds_28:
   \   00032B   E9           MOV       A,R1
   \   00032C   F9           MOV       R1,A
    748                  break;     
   \   00032D   8002         SJMP      ??zclClosures_ProcessInDoorLockCmds_74
    749                  
    750          #endif //ZCL_DOORLOCK_EXT
    751          
    752                default:
    753                  // Unknown command
    754                  stat = ZFailure;
   \                     ??zclClosures_ProcessInDoorLockCmds_1:
   \   00032F   7901         MOV       R1,#0x1
    755                  break;
    756              }
    757            }
    758          
    759            return ( stat );
   \                     ??zclClosures_ProcessInDoorLockCmds_74:
   \   000331   741E         MOV       A,#0x1e
   \   000333   12....       LCALL     ?DEALLOC_XSTACK8
   \   000336   7F03         MOV       R7,#0x3
   \   000338   02....       LJMP      ?BANKED_LEAVE_XDATA
    760          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000009   F583         MOV       DPH,A
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000003   FE           MOV       R6,A
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006   E8           MOV       A,R0
   \   000007   4F           ORL       A,R7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   ED           MOV       A,R5
   \   000001   FE           MOV       R6,A
   \   000002   85..82       MOV       DPL,?V0
   \   000005   85..83       MOV       DPH,?V1
   \   000008   E0           MOVX      A,@DPTR
   \   000009   2E           ADD       A,R6
   \   00000A   F5..         MOV       ?V2,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   3400         ADDC      A,#0x0
   \   000010   85..82       MOV       DPL,?V2
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine141_0
   \   000006                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000003   FC           MOV       R4,A
   \   000004   E9           MOV       A,R1
   \   000005   FD           MOV       R5,A
   \   000006   E8           MOV       A,R0
   \   000007   4D           ORL       A,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   5408         ANL       A,#0x8
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   F9           MOV       R1,A
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3D           ADDC      A,R5
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008                REQUIRE ??Subroutine143_0
   \   000008                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   FD           MOV       R5,A
   \   000004   8C82         MOV       DPL,R4
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   8882         MOV       DPL,R0
   \   000002                REQUIRE ??Subroutine180_0
   \   000002                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine181_0
   \   000002                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    761          
    762          /*********************************************************************
    763           * @fn      zclClosures_ProcessInDoorLock
    764           *
    765           * @brief   Process in the received Door Lock cmds
    766           *
    767           * @param   pInMsg - pointer to the incoming message
    768           * @param   pCBs - pointer to the application callbacks
    769           *
    770           * @return  ZStatus_t
    771           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    772          static ZStatus_t zclClosures_ProcessInDoorLock( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLock:
    773                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
    774          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    775            ZStatus_t status;
    776          
    777            // Client-to-Server
    778            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   000012   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000015   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000018   705D         JNZ       ??zclClosures_ProcessInDoorLock_0
    779            {
    780              switch(pInMsg->hdr.commandID)
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6006         JZ        ??zclClosures_ProcessInDoorLock_1
   \   00001D   14           DEC       A
   \   00001E   6003         JZ        ??zclClosures_ProcessInDoorLock_1
   \   000020   14           DEC       A
   \   000021   7076         JNZ       ??zclClosures_ProcessInDoorLock_2
    781              {
    782                case COMMAND_CLOSURES_LOCK_DOOR:
    783                case COMMAND_CLOSURES_UNLOCK_DOOR:
    784                case COMMAND_CLOSURES_TOGGLE_DOOR:
    785                  if ( pCBs->pfnDoorLock )
   \                     ??zclClosures_ProcessInDoorLock_1:
   \   000023   8C82         MOV       DPL,R4
   \   000025   8D83         MOV       DPH,R5
   \   000027   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   00002A   606D         JZ        ??zclClosures_ProcessInDoorLock_2
    786                  {
    787                    uint8 i;
    788                    uint8 calculatedArrayLen;
    789                    zclDoorLock_t cmd;
    790          
    791                    // first octet of PIN/RFID Code variable string identifies its length
    792                    calculatedArrayLen = pInMsg->pData[0] + 1; // add first byte of string
   \   00002C   85..82       MOV       DPL,?V2
   \   00002F   85..83       MOV       DPH,?V3
   \   000032   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000035   F5..         MOV       ?V4,A
    793          
    794                    cmd.pPinRfidCode = zcl_mem_alloc( calculatedArrayLen );
   \   000037                ; Setup parameters for call to function osal_mem_alloc
   \   000037   FA           MOV       R2,A
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   12....       LCALL     ?Subroutine76 & 0xFFFF
    795          
    796                    if ( !cmd.pPinRfidCode )
   \                     ??CrossCallReturnLabel_167:
   \   00003D   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000040   7004         JNZ       ??zclClosures_ProcessInDoorLock_3
    797                    {
    798                      return ( ZMemError );  // no memory
   \   000042   7910         MOV       R1,#0x10
   \   000044   8055         SJMP      ??zclClosures_ProcessInDoorLock_4
    799                    }
    800          
    801                    for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??zclClosures_ProcessInDoorLock_3:
   \   000046   7A00         MOV       R2,#0x0
   \   000048   801A         SJMP      ??zclClosures_ProcessInDoorLock_5
    802                    {
    803                      cmd.pPinRfidCode[i] = pInMsg->pData[i];
   \                     ??zclClosures_ProcessInDoorLock_6:
   \   00004A   EA           MOV       A,R2
   \   00004B   F8           MOV       R0,A
   \   00004C   85..82       MOV       DPL,?V2
   \   00004F   85..83       MOV       DPH,?V3
   \   000052   12....       LCALL     ?Subroutine51 & 0xFFFF
    804                    }
   \                     ??CrossCallReturnLabel_111:
   \   000055   C0E0         PUSH      A
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000060   D0E0         POP       A
   \   000062   F0           MOVX      @DPTR,A
   \   000063   0A           INC       R2
   \                     ??zclClosures_ProcessInDoorLock_5:
   \   000064   EA           MOV       A,R2
   \   000065   C3           CLR       C
   \   000066   95..         SUBB      A,?V4
   \   000068   40E0         JC        ??zclClosures_ProcessInDoorLock_6
    805          
    806                    status = ( pCBs->pfnDoorLock( pInMsg, &cmd ) );
   \   00006A                ; Setup parameters for indirect call
   \   00006A   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   00006D   12....       LCALL     ?CALL_IND
   \   000070   E9           MOV       A,R1
   \   000071   FE           MOV       R6,A
    807                    zcl_mem_free( cmd.pPinRfidCode );
   \   000072                ; Setup parameters for call to function osal_mem_free
   \   000072   12....       LCALL     ?Subroutine19 & 0xFFFF
    808                    return status;
    809                  }
    810          
    811                  return ( ZCL_STATUS_FAILURE );
    812                  break;
    813          
    814                default:
    815                  return ( ZFailure );   // Error ignore the command
    816              }
    817            }
   \                     ??CrossCallReturnLabel_384:
   \   000075   8024         SJMP      ??zclClosures_ProcessInDoorLock_4
    818            // Server-to-Client
    819            else
    820            {
    821              switch(pInMsg->hdr.commandID)
   \                     ??zclClosures_ProcessInDoorLock_0:
   \   000077   E0           MOVX      A,@DPTR
   \   000078   6006         JZ        ??zclClosures_ProcessInDoorLock_7
   \   00007A   14           DEC       A
   \   00007B   6003         JZ        ??zclClosures_ProcessInDoorLock_7
   \   00007D   14           DEC       A
   \   00007E   7019         JNZ       ??zclClosures_ProcessInDoorLock_2
    822              {
    823                case COMMAND_CLOSURES_LOCK_DOOR_RSP:
    824                case COMMAND_CLOSURES_UNLOCK_DOOR_RSP:
    825                case COMMAND_CLOSURES_TOGGLE_DOOR_RSP:
    826                  if ( pCBs->pfnDoorLockRsp )
   \                     ??zclClosures_ProcessInDoorLock_7:
   \   000080   8C82         MOV       DPL,R4
   \   000082   8D83         MOV       DPH,R5
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   12....       LCALL     ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000089   600E         JZ        ??zclClosures_ProcessInDoorLock_2
    827                  {
    828                    return ( pCBs->pfnDoorLockRsp( pInMsg, pInMsg->pData[0] ) );
   \   00008B                ; Setup parameters for indirect call
   \   00008B   85..82       MOV       DPL,?V2
   \   00008E   85..83       MOV       DPH,?V3
   \   000091   12....       LCALL     ?Subroutine40 & 0xFFFF
    829                  }
   \                     ??CrossCallReturnLabel_90:
   \   000094   12....       LCALL     ?CALL_IND
   \   000097   8002         SJMP      ??zclClosures_ProcessInDoorLock_4
    830          
    831                  return ( ZCL_STATUS_FAILURE );
    832                  break;
    833          
    834                default:
    835                  return ( ZFailure );   // Error ignore the command
   \                     ??zclClosures_ProcessInDoorLock_2:
   \   000099   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLock_4:
   \   00009B   7402         MOV       A,#0x2
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   7F05         MOV       R7,#0x5
   \   0000A2   02....       LJMP      ?BANKED_LEAVE_XDATA
    836              }
    837            }
    838          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   88..         MOV       ?V2,R0
   \   000008   F5..         MOV       ?V3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   EA           MOV       A,R2
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   EB           MOV       A,R3
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000003   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   AC..         MOV       R4,?XSP + 0
   \   000002   AD..         MOV       R5,?XSP + 1
   \   000004   EE           MOV       A,R6
   \   000005   FA           MOV       R2,A
   \   000006   EF           MOV       A,R7
   \   000007   FB           MOV       R3,A
   \   000008   85..82       MOV       DPL,?V0
   \   00000B   85..83       MOV       DPH,?V1
   \   00000E                REQUIRE ??Subroutine160_0
   \   00000E                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine176_0
   \   000006                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000003   EE           MOV       A,R6
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FB           MOV       R3,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   8B82         MOV       DPL,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000003   04           INC       A
   \   000004   22           RET
    839          
    840          #ifdef ZCL_DOORLOCK_EXT
    841          /*********************************************************************
    842           * @fn      zclClosures_ProcessInDoorLockUnlockWithTimeout
    843           *
    844           * @brief   Process in the received Unlock With Timeout cmd
    845           *
    846           * @param   pInMsg - pointer to the incoming message
    847           * @param   pCBs - pointer to the application callbacks
    848           *
    849           * @return  ZStatus_t
    850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    851          static ZStatus_t zclClosures_ProcessInDoorLockUnlockWithTimeout( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockUnlockWithTimeout:
    852                                                                           zclClosures_DoorLockAppCallbacks_t *pCBs )
    853          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    854            ZStatus_t status;
    855          
    856            if ( pCBs->pfnDoorLockUnlockWithTimeout )
   \   00000E   EC           MOV       A,R4
   \   00000F   2404         ADD       A,#0x4
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000014   606D         JZ        ??zclClosures_ProcessInDoorLockUnlockWithTimeou_1
    857            {
    858              uint8 i;
    859              uint8 offset;
    860              uint8 calculatedArrayLen;
    861              zclDoorLockUnlockTimeout_t cmd;
    862          
    863              // first octet of PIN/RFID Code variable string identifies its length
    864              calculatedArrayLen = pInMsg->pData[2] + 1;  // add first byte of string
   \   000016   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000019   8882         MOV       DPL,R0
   \   00001B   F583         MOV       DPH,A
   \   00001D   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   04           INC       A
   \   000024   F5..         MOV       ?V4,A
    865          
    866              cmd.pPinRfidCode = zcl_mem_alloc( calculatedArrayLen );
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   FA           MOV       R2,A
   \   000027   7B00         MOV       R3,#0x0
   \   000029   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine67 & 0xFFFF
    867              if ( !cmd.pPinRfidCode )
   \                     ??CrossCallReturnLabel_144:
   \   000032   7004         JNZ       ??zclClosures_ProcessInDoorLockUnlockWithTimeou_2
    868              {
    869                return ( ZMemError );  // no memory
   \   000034   7910         MOV       R1,#0x10
   \   000036   804D         SJMP      ??zclClosures_ProcessInDoorLockUnlockWithTimeou_3
    870              }
    871          
    872              cmd.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_2:
   \   000038   85..82       MOV       DPL,?V2
   \   00003B   85..83       MOV       DPH,?V3
   \   00003E   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000041   FA           MOV       R2,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F9           MOV       R1,A
   \   000045   EA           MOV       A,R2
   \   000046   12....       LCALL     ?Subroutine84 & 0xFFFF
    873              offset = 2;
   \                     ??CrossCallReturnLabel_301:
   \   000049   7902         MOV       R1,#0x2
    874              for ( i = 0; i < calculatedArrayLen; i++ )
   \   00004B   7800         MOV       R0,#0x0
   \   00004D   801C         SJMP      ??zclClosures_ProcessInDoorLockUnlockWithTimeou_4
    875              {
    876                cmd.pPinRfidCode[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_5:
   \   00004F   E9           MOV       A,R1
   \   000050   FA           MOV       R2,A
   \   000051   85..82       MOV       DPL,?V2
   \   000054   85..83       MOV       DPH,?V3
   \   000057   12....       LCALL     ??Subroutine190_0 & 0xFFFF
    877              }
   \                     ??CrossCallReturnLabel_459:
   \   00005A   C0E0         PUSH      A
   \   00005C   E8           MOV       A,R0
   \   00005D   FA           MOV       R2,A
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069   09           INC       R1
   \   00006A   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_4:
   \   00006B   E8           MOV       A,R0
   \   00006C   C3           CLR       C
   \   00006D   95..         SUBB      A,?V4
   \   00006F   40DE         JC        ??zclClosures_ProcessInDoorLockUnlockWithTimeou_5
    878          
    879              status = ( pCBs->pfnDoorLockUnlockWithTimeout( pInMsg, &cmd ) );
   \   000071                ; Setup parameters for indirect call
   \   000071   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000074   12....       LCALL     ?CALL_IND
   \   000077   E9           MOV       A,R1
   \   000078   FE           MOV       R6,A
    880              zcl_mem_free( cmd.pPinRfidCode );
   \   000079                ; Setup parameters for call to function osal_mem_free
   \   000079   7402         MOV       A,#0x2
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ??Subroutine176_0 & 0xFFFF
    881              return status;
    882            }
   \                     ??CrossCallReturnLabel_386:
   \   000081   8002         SJMP      ??zclClosures_ProcessInDoorLockUnlockWithTimeou_3
    883          
    884            return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_1:
   \   000083   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockUnlockWithTimeou_3:
   \   000085   7404         MOV       A,#0x4
   \   000087   80..         SJMP      ??Subroutine142_0
    885          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine144_0
   \   000006                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8B..         MOV       ?V7,R3
   \   000005   A9..         MOV       R1,?V7
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2A           ADD       A,R2
   \   000002   FC           MOV       R4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   8C82         MOV       DPL,R4
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3D           ADDC      A,R5
   \   000003   88..         MOV       ?V0,R0
   \   000005   F5..         MOV       ?V1,A
   \   000007                REQUIRE ??Subroutine179_0
   \   000007                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    886          
    887          /*********************************************************************
    888           * @fn      zclClosures_ProcessInDoorLockGetLogRecord
    889           *
    890           * @brief   Process in the received Get Log Record cmd
    891           *
    892           * @param   pInMsg - pointer to the incoming message
    893           * @param   pCBs - pointer to the application callbacks
    894           *
    895           * @return  ZStatus_t
    896           */
    897          static ZStatus_t zclClosures_ProcessInDoorLockGetLogRecord( zclIncoming_t *pInMsg,
    898                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs )
    899          {
    900            if ( pCBs->pfnDoorLockGetLogRecord )
    901            {
    902              zclDoorLockGetLogRecord_t cmd;
    903          
    904              cmd.logIndex = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
    905          
    906              return ( pCBs->pfnDoorLockGetLogRecord( pInMsg, &cmd ) );
    907            }
    908          
    909            return ( ZFailure );
    910          }
    911          
    912          /*********************************************************************
    913           * @fn      zclClosures_ProcessInDoorLockSetPINCode
    914           *
    915           * @brief   Process in the received Set PIN Code cmd
    916           *
    917           * @param   pInMsg - pointer to the incoming message
    918           * @param   pCBs - pointer to the application callbacks
    919           *
    920           * @return  ZStatus_t
    921           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7406         MOV       A,#0x6
   \   000002                REQUIRE ??Subroutine142_0
   \   000002                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    922          static ZStatus_t zclClosures_ProcessInDoorLockSetPINCode( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetPINCode:
    923                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs )
    924          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    925           if ( pCBs->pfnDoorLockSetPINCode )
   \   00000E   EC           MOV       A,R4
   \   00000F   2408         ADD       A,#0x8
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000014   6060         JZ        ??zclClosures_ProcessInDoorLockSetPINCode_0
    926           {
    927              uint8 i;
    928              uint8 offset;
    929              uint8 calculatedArrayLen;
    930              zclDoorLockSetPINCode_t cmd;
    931              ZStatus_t status;
    932          
    933              // first octet of PIN/RFID Code variable string identifies its length
    934              calculatedArrayLen = pInMsg->pData[4] + 1; // add first byte of string
   \   000016   12....       LCALL     ?Subroutine16 & 0xFFFF
    935          
    936              cmd.pPIN = zcl_mem_alloc( calculatedArrayLen );
   \                     ??CrossCallReturnLabel_12:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine67 & 0xFFFF
    937              if ( !cmd.pPIN )
   \                     ??CrossCallReturnLabel_145:
   \   00001F   7004         JNZ       ??zclClosures_ProcessInDoorLockSetPINCode_1
    938              {
    939                return ( ZMemError );  // no memory
   \   000021   7910         MOV       R1,#0x10
   \   000023   8053         SJMP      ??zclClosures_ProcessInDoorLockSetPINCode_2
    940              }
    941          
    942              cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_1:
   \   000025   12....       LCALL     ?Subroutine12 & 0xFFFF
    943              cmd.userStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_8:
   \   000028   C0E0         PUSH      A
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine26 & 0xFFFF
    944              cmd.userType = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_61:
   \   000034   C0E0         PUSH      A
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine80 & 0xFFFF
    945              offset = 4;
    946              for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_176:
   \   000040   801C         SJMP      ??zclClosures_ProcessInDoorLockSetPINCode_3
    947              {
    948                cmd.pPIN[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_4:
   \   000042   E9           MOV       A,R1
   \   000043   FA           MOV       R2,A
   \   000044   85..82       MOV       DPL,?V2
   \   000047   85..83       MOV       DPH,?V3
   \   00004A   12....       LCALL     ??Subroutine190_0 & 0xFFFF
    949              }
   \                     ??CrossCallReturnLabel_460:
   \   00004D   C0E0         PUSH      A
   \   00004F   E8           MOV       A,R0
   \   000050   FA           MOV       R2,A
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000059   D0E0         POP       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   09           INC       R1
   \   00005D   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_3:
   \   00005E   E8           MOV       A,R0
   \   00005F   C3           CLR       C
   \   000060   95..         SUBB      A,?V4
   \   000062   40DE         JC        ??zclClosures_ProcessInDoorLockSetPINCode_4
    950          
    951              status = ( pCBs->pfnDoorLockSetPINCode( pInMsg, &cmd ) );
   \   000064                ; Setup parameters for indirect call
   \   000064   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000067   12....       LCALL     ?CALL_IND
   \   00006A   E9           MOV       A,R1
   \   00006B   FE           MOV       R6,A
    952              zcl_mem_free( cmd.pPIN );
   \   00006C                ; Setup parameters for call to function osal_mem_free
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ??Subroutine176_0 & 0xFFFF
    953              return status;
    954           }
   \                     ??CrossCallReturnLabel_387:
   \   000074   8002         SJMP      ??zclClosures_ProcessInDoorLockSetPINCode_2
    955          
    956           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_0:
   \   000076   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetPINCode_2:
   \   000078   02....       LJMP      ?Subroutine1 & 0xFFFF
    957          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   7904         MOV       R1,#0x4
   \   000003   7800         MOV       R0,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   04           INC       A
   \   00000D   F5..         MOV       ?V4,A
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   FA           MOV       R2,A
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000015   8B..         MOV       ?V7,R3
   \   000017   A9..         MOV       R1,?V7
   \   000019   7404         MOV       A,#0x4
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000009   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   00000C   FB           MOV       R3,A
   \   00000D   EC           MOV       A,R4
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
    958          
    959          /*********************************************************************
    960           * @fn      zclClosures_ProcessInDoorLockGetPINCode
    961           *
    962           * @brief   Process in the received Get PIN Code cmd
    963           *
    964           * @param   pInMsg - pointer to the incoming message
    965           * @param   pCBs - pointer to the application callbacks
    966           *
    967           * @return  ZStatus_t
    968           */
    969          static ZStatus_t zclClosures_ProcessInDoorLockGetPINCode( zclIncoming_t *pInMsg,
    970                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs )
    971          {
    972           if ( pCBs->pfnDoorLockGetPINCode )
    973           {
    974             zclDoorLockUserID_t cmd;
    975          
    976             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
    977          
    978             return ( pCBs->pfnDoorLockGetPINCode( pInMsg, &cmd ) );
    979           }
    980          
    981           return ( ZFailure );
    982          }
    983          
    984          /*********************************************************************
    985           * @fn      zclClosures_ProcessInDoorLockClearPINCode
    986           *
    987           * @brief   Process in the received Clear PIN Code cmd
    988           *
    989           * @param   pInMsg - pointer to the incoming message
    990           * @param   pCBs - pointer to the application callbacks
    991           *
    992           * @return  ZStatus_t
    993           */
    994          static ZStatus_t zclClosures_ProcessInDoorLockClearPINCode( zclIncoming_t *pInMsg,
    995                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs )
    996          {
    997           if ( pCBs->pfnDoorLockClearPINCode )
    998           {
    999             zclDoorLockUserID_t cmd;
   1000          
   1001             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1002          
   1003             return ( pCBs->pfnDoorLockClearPINCode( pInMsg, &cmd ) );
   1004           }
   1005          
   1006           return ( ZFailure );
   1007          }
   1008          
   1009          /*********************************************************************
   1010           * @fn      zclClosures_ProcessInDoorLockClearAllPINCodes
   1011           *
   1012           * @brief   Process in the received Clear All PIN Codes cmd
   1013           *
   1014           * @param   pInMsg - pointer to the incoming message
   1015           * @param   pCBs - pointer to the application callbacks
   1016           *
   1017           * @return  ZStatus_t
   1018           */
   1019          static ZStatus_t zclClosures_ProcessInDoorLockClearAllPINCodes( zclIncoming_t *pInMsg,
   1020                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
   1021          {
   1022           if ( pCBs->pfnDoorLockClearAllPINCodes )
   1023           {
   1024             // no payload
   1025          
   1026             return ( pCBs->pfnDoorLockClearAllPINCodes( pInMsg ) );
   1027           }
   1028          
   1029           return ( ZFailure );
   1030          }
   1031          
   1032          /*********************************************************************
   1033           * @fn      zclClosures_ProcessInDoorLockSetUserStatus
   1034           *
   1035           * @brief   Process in the received Set User Status cmd
   1036           *
   1037           * @param   pInMsg - pointer to the incoming message
   1038           * @param   pCBs - pointer to the application callbacks
   1039           *
   1040           * @return  ZStatus_t
   1041           */
   1042          static ZStatus_t zclClosures_ProcessInDoorLockSetUserStatus( zclIncoming_t *pInMsg,
   1043                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1044          {
   1045           if ( pCBs->pfnDoorLockSetUserStatus )
   1046           {
   1047             zclDoorLockSetUserStatus_t cmd;
   1048          
   1049             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1050             cmd.userStatus = pInMsg->pData[2];
   1051          
   1052             return ( pCBs->pfnDoorLockSetUserStatus( pInMsg, &cmd ) );
   1053           }
   1054          
   1055           return ( ZFailure );
   1056          }
   1057          
   1058          /*********************************************************************
   1059           * @fn      zclClosures_ProcessInDoorLockGetUserStatus
   1060           *
   1061           * @brief   Process in the received Get User Status cmd
   1062           *
   1063           * @param   pInMsg - pointer to the incoming message
   1064           * @param   pCBs - pointer to the application callbacks
   1065           *
   1066           * @return  ZStatus_t
   1067           */
   1068          static ZStatus_t zclClosures_ProcessInDoorLockGetUserStatus( zclIncoming_t *pInMsg,
   1069                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1070          {
   1071           if ( pCBs->pfnDoorLockGetUserStatus )
   1072           {
   1073             zclDoorLockUserID_t cmd;
   1074          
   1075             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1076          
   1077             return ( pCBs->pfnDoorLockGetUserStatus( pInMsg, &cmd ) );
   1078           }
   1079          
   1080           return ( ZFailure );
   1081          }
   1082          
   1083          /*********************************************************************
   1084           * @fn      zclClosures_ProcessInDoorLockSetWeekDaySchedule
   1085           *
   1086           * @brief   Process in the received Set Week Day Schedule cmd
   1087           *
   1088           * @param   pInMsg - pointer to the incoming message
   1089           * @param   pCBs - pointer to the application callbacks
   1090           *
   1091           * @return  ZStatus_t
   1092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          static ZStatus_t zclClosures_ProcessInDoorLockSetWeekDaySchedule( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetWeekDaySchedule:
   1094                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1095          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1096           if ( pCBs->pfnDoorLockSetWeekDaySchedule )
   \   00000A   EC           MOV       A,R4
   \   00000B   2414         ADD       A,#0x14
   \   00000D   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000010   605D         JZ        ??zclClosures_ProcessInDoorLockSetWeekDaySchedu_1
   1097           {
   1098             zclDoorLockSetWeekDaySchedule_t cmd;
   1099          
   1100             cmd.scheduleID = pInMsg->pData[0];
   \   000012   12....       LCALL     ?Subroutine22 & 0xFFFF
   1101             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_55:
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine71 & 0xFFFF
   1102             cmd.daysMask = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_158:
   \   00001B   C0E0         PUSH      A
   \   00001D   7403         MOV       A,#0x3
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   D0E0         POP       A
   \   000024   F0           MOVX      @DPTR,A
   1103             cmd.startHour = pInMsg->pData[4];
   \   000025   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000028   C0E0         PUSH      A
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine42 & 0xFFFF
   1104             cmd.startMinute = pInMsg->pData[5];
   \                     ??CrossCallReturnLabel_93:
   \   000034   C0E0         PUSH      A
   \   000036   7405         MOV       A,#0x5
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine43 & 0xFFFF
   1105             cmd.endHour = pInMsg->pData[6];
   \                     ??CrossCallReturnLabel_95:
   \   000040   C0E0         PUSH      A
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   D0E0         POP       A
   \   000049   12....       LCALL     ?Subroutine77 & 0xFFFF
   1106             cmd.endMinute = pInMsg->pData[7];
   \                     ??CrossCallReturnLabel_169:
   \   00004C   2407         ADD       A,#0x7
   \   00004E   F582         MOV       DPL,A
   \   000050   E4           CLR       A
   \   000051   3C           ADDC      A,R4
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   7407         MOV       A,#0x7
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   F0           MOVX      @DPTR,A
   1107          
   1108             return ( pCBs->pfnDoorLockSetWeekDaySchedule( pInMsg, &cmd ) );
   \   00005F                ; Setup parameters for indirect call
   \   00005F   AC..         MOV       R4,?XSP + 0
   \   000061   AD..         MOV       R5,?XSP + 1
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   1109           }
   \                     ??CrossCallReturnLabel_333:
   \   00006A   12....       LCALL     ?CALL_IND
   \   00006D   8002         SJMP      ??zclClosures_ProcessInDoorLockSetWeekDaySchedu_2
   1110          
   1111           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetWeekDaySchedu_1:
   \   00006F   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetWeekDaySchedu_2:
   \   000071                REQUIRE ?Subroutine8
   \   000071                ; // Fall through to label ?Subroutine8
   1112          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7408         MOV       A,#0x8
   \   000002   02....       LJMP      ??Subroutine186_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000006   CC           XCH       A,R4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V1
   \   000006   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   2406         ADD       A,#0x6
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   3E           ADDC      A,R6
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FE           MOV       R6,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   CE           XCH       A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   FD           MOV       R5,A
   \   000007   8C82         MOV       DPL,R4
   \   000009   F583         MOV       DPH,A
   \   00000B   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FE           MOV       R6,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FF           MOV       R7,A
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   F583         MOV       DPH,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V2,A
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00002C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8E82         MOV       DPL,R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V1,A
   \   000005   E5..         MOV       A,?V2
   \   000007   F5..         MOV       ?V0,A
   \   000009   7401         MOV       A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine187_0
   \   000003                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET
   1113          
   1114          /*********************************************************************
   1115           * @fn      zclClosures_ProcessInDoorLockGetWeekDaySchedule
   1116           *
   1117           * @brief   Process in the received Get Week Day Schedule cmd
   1118           *
   1119           * @param   pInMsg - pointer to the incoming message
   1120           * @param   pCBs - pointer to the application callbacks
   1121           *
   1122           * @return  ZStatus_t
   1123           */
   1124          static ZStatus_t zclClosures_ProcessInDoorLockGetWeekDaySchedule( zclIncoming_t *pInMsg,
   1125                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1126          {
   1127           if ( pCBs->pfnDoorLockGetWeekDaySchedule )
   1128           {
   1129             zclDoorLockSchedule_t cmd;
   1130          
   1131             cmd.scheduleID = pInMsg->pData[0];
   1132             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1133          
   1134             return ( pCBs->pfnDoorLockGetWeekDaySchedule( pInMsg, &cmd ) );
   1135           }
   1136          
   1137           return ( ZFailure );
   1138          }
   1139          
   1140          /*********************************************************************
   1141           * @fn      zclClosures_ProcessInDoorLockClearWeekDaySchedule
   1142           *
   1143           * @brief   Process in the received Clear Week Day Schedule cmd
   1144           *
   1145           * @param   pInMsg - pointer to the incoming message
   1146           * @param   pCBs - pointer to the application callbacks
   1147           *
   1148           * @return  ZStatus_t
   1149           */
   1150          static ZStatus_t zclClosures_ProcessInDoorLockClearWeekDaySchedule( zclIncoming_t *pInMsg,
   1151                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   1152          {
   1153           if ( pCBs->pfnDoorLockClearWeekDaySchedule )
   1154           {
   1155             zclDoorLockSchedule_t cmd;
   1156          
   1157             cmd.scheduleID = pInMsg->pData[0];
   1158             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1159          
   1160             return ( pCBs->pfnDoorLockClearWeekDaySchedule( pInMsg, &cmd ) );
   1161           }
   1162          
   1163           return ( ZFailure );
   1164          }
   1165          /*********************************************************************
   1166           * @fn      zclClosures_ProcessInDoorLockSetYearDaySchedule
   1167           *
   1168           * @brief   Process in the received Set Year Day Schedule cmd
   1169           *
   1170           * @param   pInMsg - pointer to the incoming message
   1171           * @param   pCBs - pointer to the application callbacks
   1172           *
   1173           * @return  ZStatus_t
   1174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          static ZStatus_t zclClosures_ProcessInDoorLockSetYearDaySchedule( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetYearDaySchedule:
   1176                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1177          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1178           if ( pCBs->pfnDoorLockSetYearDaySchedule )
   \   00000A   EC           MOV       A,R4
   \   00000B   241A         ADD       A,#0x1a
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   FF           MOV       R7,A
   \   000011   8E82         MOV       DPL,R6
   \   000013   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zclClosures_ProcessInDoorLockSetYearDaySchedu_1 & 0xFFFF
   1179           {
   1180             zclDoorLockSetYearDaySchedule_t cmd;
   1181          
   1182             cmd.scheduleID = pInMsg->pData[0];
   \   00001B   12....       LCALL     ?Subroutine23 & 0xFFFF
   1183             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_57:
   \   00001E   8C82         MOV       DPL,R4
   \   000020   8D83         MOV       DPH,R5
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E5..         MOV       A,?V0
   \   00002D   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   1184             cmd.zigBeeLocalStartTime = BUILD_UINT32( pInMsg->pData[3], pInMsg->pData[4], pInMsg->pData[5], pInMsg->pData[6] );
   \                     ??CrossCallReturnLabel_299:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   12....       LCALL     ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000037   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00003A   12....       LCALL     ?L_SHL
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   79..         MOV       R1,#?V4
   \   000041   12....       LCALL     ?L_ADD
   \   000044   8C82         MOV       DPL,R4
   \   000046   8D83         MOV       DPH,R5
   \   000048   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   00004B   12....       LCALL     ?L_SHL
   \   00004E   78..         MOV       R0,#?V0
   \   000050   79..         MOV       R1,#?V4
   \   000052   12....       LCALL     ?L_ADD
   \   000055   8C82         MOV       DPL,R4
   \   000057   8D83         MOV       DPH,R5
   \   000059   12....       LCALL     ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   00005C   12....       LCALL     ?L_SHL
   \   00005F   78..         MOV       R0,#?V0
   \   000061   79..         MOV       R1,#?V4
   \   000063   12....       LCALL     ?L_ADD
   \   000066   7403         MOV       A,#0x3
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?L_MOV_TO_X
   1185             cmd.zigBeeLocalEndTime = BUILD_UINT32( pInMsg->pData[7], pInMsg->pData[8], pInMsg->pData[9], pInMsg->pData[10] );
   \   000070   8C82         MOV       DPL,R4
   \   000072   8D83         MOV       DPH,R5
   \   000074   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000077   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   00007A   12....       LCALL     ?L_SHL
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   79..         MOV       R1,#?V4
   \   000081   12....       LCALL     ?L_ADD
   \   000084   8C82         MOV       DPL,R4
   \   000086   8D83         MOV       DPH,R5
   \   000088   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00008B   12....       LCALL     ?L_SHL
   \   00008E   78..         MOV       R0,#?V0
   \   000090   79..         MOV       R1,#?V4
   \   000092   12....       LCALL     ?L_ADD
   \   000095   8C82         MOV       DPL,R4
   \   000097   8D83         MOV       DPH,R5
   \   000099   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   00009C   12....       LCALL     ?L_SHL
   \   00009F   78..         MOV       R0,#?V0
   \   0000A1   79..         MOV       R1,#?V4
   \   0000A3   12....       LCALL     ?L_ADD
   \   0000A6   7407         MOV       A,#0x7
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?L_MOV_TO_X
   1186          
   1187             return ( pCBs->pfnDoorLockSetYearDaySchedule( pInMsg, &cmd ) );
   \   0000B0                ; Setup parameters for indirect call
   \   0000B0   AC..         MOV       R4,?XSP + 0
   \   0000B2   AD..         MOV       R5,?XSP + 1
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   1188           }
   \                     ??CrossCallReturnLabel_334:
   \   0000BB   12....       LCALL     ?CALL_IND
   \   0000BE   8002         SJMP      ??zclClosures_ProcessInDoorLockSetYearDaySchedu_2
   1189          
   1190           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetYearDaySchedu_1:
   \   0000C0   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetYearDaySchedu_2:
   \   0000C2                REQUIRE ?Subroutine7
   \   0000C2                ; // Fall through to label ?Subroutine7
   1191          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   740B         MOV       A,#0xb
   \   000002   02....       LJMP      ??Subroutine142_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine145_0
   \   000001                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine146_0
   \   000001                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   E4           CLR       A
   \   00000A   F5..         MOV       ?V7,A
   \   00000C   7408         MOV       A,#0x8
   \   00000E   78..         MOV       R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine147_0
   \   000001                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine148_0
   \   000001                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine149_0
   \   000001                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine150_0
   \   000001                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine151_0
   \   000001                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine152_0
   \   000001                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine153_0
   \   000001                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V4,A
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V5,A
   \   000008   7410         MOV       A,#0x10
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine156_0
   \   000001                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine157_0
   \   000001                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine158_0
   \   000001                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F5..         MOV       ?V4,A
   \   000004   E4           CLR       A
   \   000005   F5..         MOV       ?V5,A
   \   000007   F5..         MOV       ?V6,A
   \   000009   F5..         MOV       ?V7,A
   \   00000B   7408         MOV       A,#0x8
   \   00000D   78..         MOV       R0,#?V4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   FD           MOV       R5,A
   \   000004   8C82         MOV       DPL,R4
   \   000006   F583         MOV       DPH,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine162_0
   \   000001                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine163_0
   \   000001                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine164_0
   \   000001                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine165_0
   \   000001                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine166_0
   \   000001                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine167_0
   \   000002                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V1,A
   \   000006   F5..         MOV       ?V2,A
   \   000008   F5..         MOV       ?V3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FC           MOV       R4,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F583         MOV       DPH,A
   \   000011   8C82         MOV       DPL,R4
   \   000013   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FC           MOV       R4,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine168_0
   \   000001                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine169_0
   \   000001                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine170_0
   \   000001                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine171_0
   \   000001                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine172_0
   \   000001                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine173_0
   \   000001                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine174_0
   \   000001                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine175_0
   \   000003                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V6,A
   \   000006   7418         MOV       A,#0x18
   \   000008   78..         MOV       R0,#?V4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
   1192          
   1193          /*********************************************************************
   1194           * @fn      zclClosures_ProcessInDoorLockGetYearDaySchedule
   1195           *
   1196           * @brief   Process in the received Get Year Day Schedule cmd
   1197           *
   1198           * @param   pInMsg - pointer to the incoming message
   1199           * @param   pCBs - pointer to the application callbacks
   1200           *
   1201           * @return  ZStatus_t
   1202           */
   1203          static ZStatus_t zclClosures_ProcessInDoorLockGetYearDaySchedule( zclIncoming_t *pInMsg,
   1204                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1205          {
   1206           if ( pCBs->pfnDoorLockGetYearDaySchedule )
   1207           {
   1208             zclDoorLockSchedule_t cmd;
   1209          
   1210             cmd.scheduleID = pInMsg->pData[0];
   1211             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1212          
   1213             return ( pCBs->pfnDoorLockGetYearDaySchedule( pInMsg, &cmd ) );
   1214           }
   1215          
   1216           return ( ZFailure );
   1217          }
   1218          
   1219          /*********************************************************************
   1220           * @fn      zclClosures_ProcessInDoorLockClearYearDaySchedule
   1221           *
   1222           * @brief   Process in the received Clear Year Day Schedule cmd
   1223           *
   1224           * @param   pInMsg - pointer to the incoming message
   1225           * @param   pCBs - pointer to the application callbacks
   1226           *
   1227           * @return  ZStatus_t
   1228           */
   1229          static ZStatus_t zclClosures_ProcessInDoorLockClearYearDaySchedule( zclIncoming_t *pInMsg,
   1230                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   1231          {
   1232           if ( pCBs->pfnDoorLockClearYearDaySchedule )
   1233           {
   1234             zclDoorLockSchedule_t cmd;
   1235          
   1236             cmd.scheduleID = pInMsg->pData[0];
   1237             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1238          
   1239             return ( pCBs->pfnDoorLockClearYearDaySchedule( pInMsg, &cmd ) );
   1240           }
   1241          
   1242           return ( ZFailure );
   1243          }
   1244          
   1245          /*********************************************************************
   1246           * @fn      zclClosures_ProcessInDoorLockSetHolidaySchedule
   1247           *
   1248           * @brief   Process in the received Set Holiday Schedule cmd
   1249           *
   1250           * @param   pInMsg - pointer to the incoming message
   1251           * @param   pCBs - pointer to the application callbacks
   1252           *
   1253           * @return  ZStatus_t
   1254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1255          static ZStatus_t zclClosures_ProcessInDoorLockSetHolidaySchedule( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetHolidaySchedule:
   1256                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1257          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1258           if ( pCBs->pfnDoorLockSetHolidaySchedule )
   \   00000A   EC           MOV       A,R4
   \   00000B   2420         ADD       A,#0x20
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   FF           MOV       R7,A
   \   000011   8E82         MOV       DPL,R6
   \   000013   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zclClosures_ProcessInDoorLockSetHolidaySchedu_1 & 0xFFFF
   1259           {
   1260             zclDoorLockSetHolidaySchedule_t cmd;
   1261          
   1262             cmd.holidayScheduleID = pInMsg->pData[0];
   \   00001B   12....       LCALL     ?Subroutine23 & 0xFFFF
   1263             cmd.zigBeeLocalStartTime = BUILD_UINT32( pInMsg->pData[1], pInMsg->pData[2], pInMsg->pData[3], pInMsg->pData[4] );
   \                     ??CrossCallReturnLabel_58:
   \   00001E   E4           CLR       A
   \   00001F   F5..         MOV       ?V1,A
   \   000021   F5..         MOV       ?V2,A
   \   000023   F5..         MOV       ?V3,A
   \   000025   8C82         MOV       DPL,R4
   \   000027   8D83         MOV       DPH,R5
   \   000029   12....       LCALL     ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00002C   12....       LCALL     ?L_SHL
   \   00002F   78..         MOV       R0,#?V0
   \   000031   79..         MOV       R1,#?V4
   \   000033   12....       LCALL     ?L_ADD
   \   000036   8C82         MOV       DPL,R4
   \   000038   8D83         MOV       DPH,R5
   \   00003A   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00003D   12....       LCALL     ?L_SHL
   \   000040   78..         MOV       R0,#?V0
   \   000042   79..         MOV       R1,#?V4
   \   000044   12....       LCALL     ?L_ADD
   \   000047   8C82         MOV       DPL,R4
   \   000049   8D83         MOV       DPH,R5
   \   00004B   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   00004E   12....       LCALL     ?L_SHL
   \   000051   78..         MOV       R0,#?V0
   \   000053   79..         MOV       R1,#?V4
   \   000055   12....       LCALL     ?L_ADD
   \   000058   7401         MOV       A,#0x1
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?L_MOV_TO_X
   1264             cmd.zigBeeLocalEndTime = BUILD_UINT32( pInMsg->pData[5], pInMsg->pData[6], pInMsg->pData[7], pInMsg->pData[8] );
   \   000062   8C82         MOV       DPL,R4
   \   000064   8D83         MOV       DPH,R5
   \   000066   12....       LCALL     ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000069   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00006C   12....       LCALL     ?L_SHL
   \   00006F   78..         MOV       R0,#?V0
   \   000071   79..         MOV       R1,#?V4
   \   000073   12....       LCALL     ?L_ADD
   \   000076   8C82         MOV       DPL,R4
   \   000078   8D83         MOV       DPH,R5
   \   00007A   12....       LCALL     ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   00007D   12....       LCALL     ?L_SHL
   \   000080   78..         MOV       R0,#?V0
   \   000082   79..         MOV       R1,#?V4
   \   000084   12....       LCALL     ?L_ADD
   \   000087   8C82         MOV       DPL,R4
   \   000089   8D83         MOV       DPH,R5
   \   00008B   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00008E   12....       LCALL     ?L_SHL
   \   000091   78..         MOV       R0,#?V0
   \   000093   79..         MOV       R1,#?V4
   \   000095   12....       LCALL     ?L_ADD
   \   000098   7405         MOV       A,#0x5
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   78..         MOV       R0,#?V0
   \   00009F   12....       LCALL     ?L_MOV_TO_X
   1265             cmd.operatingModeDuringHoliday = pInMsg->pData[9];
   \   0000A2   8C82         MOV       DPL,R4
   \   0000A4   8D83         MOV       DPH,R5
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C0E0         PUSH      A
   \   0000B2   7409         MOV       A,#0x9
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   D0E0         POP       A
   \   0000B9   12....       LCALL     ?Subroutine78 & 0xFFFF
   1266          
   1267             return ( pCBs->pfnDoorLockSetHolidaySchedule( pInMsg, &cmd ) );
   1268           }
   \                     ??CrossCallReturnLabel_171:
   \   0000BC   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   0000BF   12....       LCALL     ?CALL_IND
   \   0000C2   8002         SJMP      ??zclClosures_ProcessInDoorLockSetHolidaySchedu_2
   1269          
   1270           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetHolidaySchedu_1:
   \   0000C4   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetHolidaySchedu_2:
   \   0000C6   740A         MOV       A,#0xa
   \   0000C8   02....       LJMP      ??Subroutine142_0 & 0xFFFF
   1271          }
   1272          
   1273          /*********************************************************************
   1274           * @fn      zclClosures_ProcessInDoorLockGetHolidaySchedule
   1275           *
   1276           * @brief   Process in the received Get Holiday Schedule cmd
   1277           *
   1278           * @param   pInMsg - pointer to the incoming message
   1279           * @param   pCBs - pointer to the application callbacks
   1280           *
   1281           * @return  ZStatus_t
   1282           */
   1283          static ZStatus_t zclClosures_ProcessInDoorLockGetHolidaySchedule( zclIncoming_t *pInMsg,
   1284                                                                            zclClosures_DoorLockAppCallbacks_t *pCBs )
   1285          {
   1286           if ( pCBs->pfnDoorLockGetHolidaySchedule )
   1287           {
   1288             zclDoorLockHolidayScheduleID_t cmd;
   1289          
   1290             cmd.holidayScheduleID = pInMsg->pData[0];
   1291          
   1292             return ( pCBs->pfnDoorLockGetHolidaySchedule( pInMsg, &cmd ) );
   1293           }
   1294          
   1295           return ( ZFailure );
   1296          }
   1297          
   1298          /*********************************************************************
   1299           * @fn      zclClosures_ProcessInDoorLockClearHolidaySchedule
   1300           *
   1301           * @brief   Process in the received Clear Holiday Schedule cmd
   1302           *
   1303           * @param   pInMsg - pointer to the incoming message
   1304           * @param   pCBs - pointer to the application callbacks
   1305           *
   1306           * @return  ZStatus_t
   1307           */
   1308          static ZStatus_t zclClosures_ProcessInDoorLockClearHolidaySchedule( zclIncoming_t *pInMsg,
   1309                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   1310          {
   1311           if ( pCBs->pfnDoorLockClearHolidaySchedule )
   1312           {
   1313             zclDoorLockHolidayScheduleID_t cmd;
   1314          
   1315             cmd.holidayScheduleID = pInMsg->pData[0];
   1316          
   1317             return ( pCBs->pfnDoorLockClearHolidaySchedule( pInMsg, &cmd ) );
   1318           }
   1319          
   1320           return ( ZFailure );
   1321          }
   1322          
   1323          /*********************************************************************
   1324           * @fn      zclClosures_ProcessInDoorLockSetUserType
   1325           *
   1326           * @brief   Process in the received Set User Type cmd
   1327           *
   1328           * @param   pInMsg - pointer to the incoming message
   1329           * @param   pCBs - pointer to the application callbacks
   1330           *
   1331           * @return  ZStatus_t
   1332           */
   1333          static ZStatus_t zclClosures_ProcessInDoorLockSetUserType( zclIncoming_t *pInMsg,
   1334                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
   1335          {
   1336           if ( pCBs->pfnDoorLockSetUserType )
   1337           {
   1338             zclDoorLockSetUserType_t cmd;
   1339          
   1340             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1341             cmd.userType = pInMsg->pData[2];
   1342          
   1343             return ( pCBs->pfnDoorLockSetUserType( pInMsg, &cmd ) );
   1344           }
   1345          
   1346           return ( ZFailure );
   1347          }
   1348          
   1349          /*********************************************************************
   1350           * @fn      zclClosures_ProcessInDoorLockGetUserType
   1351           *
   1352           * @brief   Process in the received Get User Type cmd
   1353           *
   1354           * @param   pInMsg - pointer to the incoming message
   1355           * @param   pCBs - pointer to the application callbacks
   1356           *
   1357           * @return  ZStatus_t
   1358           */
   1359          static ZStatus_t zclClosures_ProcessInDoorLockGetUserType( zclIncoming_t *pInMsg,
   1360                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
   1361          {
   1362           if ( pCBs->pfnDoorLockGetUserType )
   1363           {
   1364             zclDoorLockUserID_t cmd;
   1365          
   1366             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1367          
   1368             return ( pCBs->pfnDoorLockGetUserType( pInMsg, &cmd ) );
   1369           }
   1370          
   1371           return ( ZFailure );
   1372          }
   1373          
   1374          /*********************************************************************
   1375           * @fn      zclClosures_ProcessInDoorLockSetRFIDCode
   1376           *
   1377           * @brief   Process in the received Set RFID Code cmd
   1378           *
   1379           * @param   pInMsg - pointer to the incoming message
   1380           * @param   pCBs - pointer to the application callbacks
   1381           *
   1382           * @return  ZStatus_t
   1383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1384          static ZStatus_t zclClosures_ProcessInDoorLockSetRFIDCode( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetRFIDCode:
   1385                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
   1386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1387            ZStatus_t status;
   1388          
   1389            if ( pCBs->pfnDoorLockSetRFIDCode )
   \   00000E   EC           MOV       A,R4
   \   00000F   242A         ADD       A,#0x2a
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000014   6060         JZ        ??zclClosures_ProcessInDoorLockSetRFIDCode_0
   1390            {
   1391              uint8 i;
   1392              uint8 offset;
   1393              uint8 calculatedArrayLen;
   1394              zclDoorLockSetRFIDCode_t cmd;
   1395          
   1396              // first octet of PIN/RFID Code variable string identifies its length
   1397              calculatedArrayLen = pInMsg->pData[4] + 1;  // add first byte of string
   \   000016   12....       LCALL     ?Subroutine16 & 0xFFFF
   1398          
   1399              cmd.pRfidCode = zcl_mem_alloc( calculatedArrayLen );
   \                     ??CrossCallReturnLabel_13:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine67 & 0xFFFF
   1400              if ( !cmd.pRfidCode )
   \                     ??CrossCallReturnLabel_146:
   \   00001F   7004         JNZ       ??zclClosures_ProcessInDoorLockSetRFIDCode_1
   1401              {
   1402                return ( ZMemError );  // no memory
   \   000021   7910         MOV       R1,#0x10
   \   000023   8053         SJMP      ??zclClosures_ProcessInDoorLockSetRFIDCode_2
   1403              }
   1404          
   1405              cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_1:
   \   000025   12....       LCALL     ?Subroutine12 & 0xFFFF
   1406              cmd.userStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_9:
   \   000028   C0E0         PUSH      A
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine26 & 0xFFFF
   1407              cmd.userType = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_62:
   \   000034   C0E0         PUSH      A
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine80 & 0xFFFF
   1408              offset = 4;
   1409              for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_177:
   \   000040   801C         SJMP      ??zclClosures_ProcessInDoorLockSetRFIDCode_3
   1410              {
   1411                cmd.pRfidCode[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_4:
   \   000042   E9           MOV       A,R1
   \   000043   FA           MOV       R2,A
   \   000044   85..82       MOV       DPL,?V2
   \   000047   85..83       MOV       DPH,?V3
   \   00004A   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   1412              }
   \                     ??CrossCallReturnLabel_461:
   \   00004D   C0E0         PUSH      A
   \   00004F   E8           MOV       A,R0
   \   000050   FA           MOV       R2,A
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000059   D0E0         POP       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   09           INC       R1
   \   00005D   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_3:
   \   00005E   E8           MOV       A,R0
   \   00005F   C3           CLR       C
   \   000060   95..         SUBB      A,?V4
   \   000062   40DE         JC        ??zclClosures_ProcessInDoorLockSetRFIDCode_4
   1413          
   1414              status = ( pCBs->pfnDoorLockSetRFIDCode( pInMsg, &cmd ) );
   \   000064                ; Setup parameters for indirect call
   \   000064   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000067   12....       LCALL     ?CALL_IND
   \   00006A   E9           MOV       A,R1
   \   00006B   FE           MOV       R6,A
   1415              zcl_mem_free( cmd.pRfidCode );
   \   00006C                ; Setup parameters for call to function osal_mem_free
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   1416              return status;
   1417            }
   \                     ??CrossCallReturnLabel_388:
   \   000074   8002         SJMP      ??zclClosures_ProcessInDoorLockSetRFIDCode_2
   1418          
   1419           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_0:
   \   000076   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetRFIDCode_2:
   \   000078   02....       LJMP      ?Subroutine1 & 0xFFFF
   1420          }
   1421          
   1422          /*********************************************************************
   1423           * @fn      zclClosures_ProcessInDoorLockGetRFIDCode
   1424           *
   1425           * @brief   Process in the received Get RFID Code cmd
   1426           *
   1427           * @param   pInMsg - pointer to the incoming message
   1428           * @param   pCBs - pointer to the application callbacks
   1429           *
   1430           * @return  ZStatus_t
   1431           */
   1432          static ZStatus_t zclClosures_ProcessInDoorLockGetRFIDCode( zclIncoming_t *pInMsg,
   1433                                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
   1434          {
   1435           if ( pCBs->pfnDoorLockGetRFIDCode )
   1436           {
   1437             zclDoorLockUserID_t cmd;
   1438          
   1439             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1440          
   1441             return ( pCBs->pfnDoorLockGetRFIDCode( pInMsg, &cmd ) );
   1442           }
   1443          
   1444           return ( ZFailure );
   1445          }
   1446          
   1447          /*********************************************************************
   1448           * @fn      zclClosures_ProcessInDoorLockClearRFIDCode
   1449           *
   1450           * @brief   Process in the received Clear RFID Code cmd
   1451           *
   1452           * @param   pInMsg - pointer to the incoming message
   1453           * @param   pCBs - pointer to the application callbacks
   1454           *
   1455           * @return  ZStatus_t
   1456           */
   1457          static ZStatus_t zclClosures_ProcessInDoorLockClearRFIDCode( zclIncoming_t *pInMsg,
   1458                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1459          {
   1460           if ( pCBs->pfnDoorLockClearRFIDCode )
   1461           {
   1462             zclDoorLockUserID_t cmd;
   1463          
   1464             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1465          
   1466             return ( pCBs->pfnDoorLockClearRFIDCode( pInMsg, &cmd ) );
   1467           }
   1468          
   1469           return ( ZFailure );
   1470          }
   1471          
   1472          /*********************************************************************
   1473           * @fn      zclClosures_ProcessInDoorLockClearAllRFIDCodes
   1474           *
   1475           * @brief   Process in the received Clear All RFID Codes cmd
   1476           *
   1477           * @param   pInMsg - pointer to the incoming message
   1478           * @param   pCBs - pointer to the application callbacks
   1479           *
   1480           * @return  ZStatus_t
   1481           */
   1482          static ZStatus_t zclClosures_ProcessInDoorLockClearAllRFIDCodes( zclIncoming_t *pInMsg,
   1483                                                                           zclClosures_DoorLockAppCallbacks_t *pCBs )
   1484          {
   1485           if ( pCBs->pfnDoorLockClearAllRFIDCodes )
   1486           {
   1487             // no payload
   1488          
   1489             return ( pCBs->pfnDoorLockClearAllRFIDCodes( pInMsg ) );
   1490           }
   1491          
   1492           return ( ZFailure );
   1493          }
   1494          
   1495          /*********************************************************************
   1496           * @fn      zclClosures_ProcessInDoorLockSetTemporaryPin
   1497           *
   1498           * @brief   Process in the received Set Temporary Pin cmd
   1499           *
   1500           * @param   pInMsg - pointer to the incoming message
   1501           * @param   pCBs - pointer to the application callbacks
   1502           *
   1503           * @return  ZStatus_t
   1504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1505          static ZStatus_t zclClosures_ProcessInDoorLockSetTemporaryPin( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockSetTemporaryPin:
   1506                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs )
   1507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   1508            ZStatus_t status;
   1509            uint8 i,j;
   1510            uint8 offset = 0;
   \   00000E   75..00       MOV       ?V4,#0x0
   1511          
   1512            if ( pCBs->pfnDoorLockSetTemporaryPin )
   \   000011   EC           MOV       A,R4
   \   000012   2432         ADD       A,#0x32
   \   000014   FE           MOV       R6,A
   \   000015   E4           CLR       A
   \   000016   3D           ADDC      A,R5
   \   000017   FF           MOV       R7,A
   \   000018   8E82         MOV       DPL,R6
   \   00001A   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zclClosures_ProcessInDoorLockSetTemporaryPin_0 & 0xFFFF
   1513            {
   1514              zclDoorLockSetTemporaryPin_t cmd;
   1515          
   1516              // adminPin
   1517              j = offset;
   1518              cmd.adminPin = (uint8 *)zcl_mem_alloc( pInMsg->pData[j] + 1 );
   \   000022   EA           MOV       A,R2
   \   000023   2408         ADD       A,#0x8
   \   000025   F5..         MOV       ?V0,A
   \   000027   E4           CLR       A
   \   000028   35..         ADDC      A,?V9
   \   00002A   F5..         MOV       ?V1,A
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   85..82       MOV       DPL,?V0
   \   00002F   F583         MOV       DPH,A
   \   000031   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   2401         ADD       A,#0x1
   \   000037   FA           MOV       R2,A
   \   000038   E4           CLR       A
   \   000039   3400         ADDC      A,#0x0
   \   00003B   FB           MOV       R3,A
   \   00003C   12....       LCALL     ?Subroutine76 & 0xFFFF
   1519              if ( !cmd.adminPin )
   \                     ??CrossCallReturnLabel_168:
   \   00003F   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000042   6048         JZ        ??CrossCallReturnLabel_125
   1520              {
   1521                return ( ZMemError );  // no memory
   1522              }
   1523              for ( i=0; i<pInMsg->pData[j]+1; i++ )
   \   000044   7A00         MOV       R2,#0x0
   \   000046   8009         SJMP      ??CrossCallReturnLabel_83
   1524              {
   1525                cmd.adminPin[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockSetTemporaryPin_1:
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   12....       LCALL     ?Subroutine35 & 0xFFFF
   1526              }
   \                     ??CrossCallReturnLabel_83:
   \   000051   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000054   E5..         MOV       A,?V4
   \   000056   F5..         MOV       ?V2,A
   \   000058   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00005B   FB           MOV       R3,A
   \   00005C   EA           MOV       A,R2
   \   00005D   FC           MOV       R4,A
   \   00005E   8882         MOV       DPL,R0
   \   000060   8983         MOV       DPH,R1
   \   000062   E0           MOVX      A,@DPTR
   \   000063   7900         MOV       R1,#0x0
   \   000065   2401         ADD       A,#0x1
   \   000067   F8           MOV       R0,A
   \   000068   5001         JNC       ??zclClosures_ProcessInDoorLockSetTemporaryPin_2
   \   00006A   09           INC       R1
   \                     ??zclClosures_ProcessInDoorLockSetTemporaryPin_2:
   \   00006B   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   00006E   40D8         JC        ??zclClosures_ProcessInDoorLockSetTemporaryPin_1
   1527          
   1528              // tempPin
   1529              j = offset;
   1530              cmd.tempPin = (uint8 *)zcl_mem_alloc( pInMsg->pData[j] + 1 );
   \   000070                ; Setup parameters for call to function osal_mem_alloc
   \   000070   EB           MOV       A,R3
   \   000071   2401         ADD       A,#0x1
   \   000073   FA           MOV       R2,A
   \   000074   E4           CLR       A
   \   000075   3400         ADDC      A,#0x0
   \   000077   FB           MOV       R3,A
   \   000078   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine67 & 0xFFFF
   1531              if ( !cmd.tempPin )
   \                     ??CrossCallReturnLabel_147:
   \   000081   700E         JNZ       ??zclClosures_ProcessInDoorLockSetTemporaryPin_3
   1532              {
   1533                zcl_mem_free( cmd.adminPin );
   \   000083                ; Setup parameters for call to function osal_mem_free
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   12....       LCALL     ?Subroutine57 & 0xFFFF
   1534                return ( ZMemError );  // no memory
   \                     ??CrossCallReturnLabel_125:
   \   00008C   7910         MOV       R1,#0x10
   \   00008E   02....       LJMP      ??zclClosures_ProcessInDoorLockSetTemporaryPin_4 & 0xFFFF
   1535              }
   1536              for ( i=0; i<pInMsg->pData[j]+1; i++ )
   \                     ??zclClosures_ProcessInDoorLockSetTemporaryPin_3:
   \   000091   7A00         MOV       R2,#0x0
   \   000093   8008         SJMP      ??CrossCallReturnLabel_84
   1537              {
   1538                cmd.tempPin[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockSetTemporaryPin_5:
   \   000095   7402         MOV       A,#0x2
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine35 & 0xFFFF
   1539              }
   \                     ??CrossCallReturnLabel_84:
   \   00009D   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   0000A0   AC..         MOV       R4,?V4
   \   0000A2   E8           MOV       A,R0
   \   0000A3   2C           ADD       A,R4
   \   0000A4   F582         MOV       DPL,A
   \   0000A6   E4           CLR       A
   \   0000A7   39           ADDC      A,R1
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   FB           MOV       R3,A
   \   0000AC   EA           MOV       A,R2
   \   0000AD   FC           MOV       R4,A
   \   0000AE   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000B1   7900         MOV       R1,#0x0
   \   0000B3   2401         ADD       A,#0x1
   \   0000B5   F8           MOV       R0,A
   \   0000B6   5001         JNC       ??zclClosures_ProcessInDoorLockSetTemporaryPin_6
   \   0000B8   09           INC       R1
   \                     ??zclClosures_ProcessInDoorLockSetTemporaryPin_6:
   \   0000B9   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0000BC   40D7         JC        ??zclClosures_ProcessInDoorLockSetTemporaryPin_5
   1540          
   1541              // activeTimes
   1542              cmd.activeTimes = pInMsg->pData[offset++];
   \   0000BE   7404         MOV       A,#0x4
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   EB           MOV       A,R3
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   05..         INC       ?V4
   1543          
   1544              // activeTime
   1545              cmd.activeTime = BUILD_UINT32( pInMsg->pData[offset], pInMsg->pData[offset+1], pInMsg->pData[offset+2], pInMsg->pData[offset+3] );
   \   0000C7   A8..         MOV       R0,?V4
   \   0000C9   85..82       MOV       DPL,?V0
   \   0000CC   85..83       MOV       DPH,?V1
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   28           ADD       A,R0
   \   0000D1   FA           MOV       R2,A
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   3400         ADDC      A,#0x0
   \   0000D6   FB           MOV       R3,A
   \   0000D7   8A82         MOV       DPL,R2
   \   0000D9   F583         MOV       DPH,A
   \   0000DB   12....       LCALL     ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   0000DE   12....       LCALL     ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   0000E1   12....       LCALL     ?L_SHL
   \   0000E4   78..         MOV       R0,#?V0
   \   0000E6   79..         MOV       R1,#?V4
   \   0000E8   12....       LCALL     ?L_ADD
   \   0000EB   8A82         MOV       DPL,R2
   \   0000ED   8B83         MOV       DPH,R3
   \   0000EF   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   0000F2   12....       LCALL     ?L_SHL
   \   0000F5   78..         MOV       R0,#?V0
   \   0000F7   79..         MOV       R1,#?V4
   \   0000F9   12....       LCALL     ?L_ADD
   \   0000FC   8A82         MOV       DPL,R2
   \   0000FE   8B83         MOV       DPH,R3
   \   000100   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000103   12....       LCALL     ?L_SHL
   \   000106   78..         MOV       R0,#?V0
   \   000108   79..         MOV       R1,#?V4
   \   00010A   12....       LCALL     ?L_ADD
   \   00010D   7405         MOV       A,#0x5
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   12....       LCALL     ?Subroutine68 & 0xFFFF
   1546          
   1547              status = ( pCBs->pfnDoorLockSetTemporaryPin( pInMsg, &cmd ) );
   \                     ??CrossCallReturnLabel_153:
   \   000115                ; Setup parameters for indirect call
   \   000115   AC..         MOV       R4,?XSP + 0
   \   000117   AD..         MOV       R5,?XSP + 1
   \   000119   AA..         MOV       R2,?V8
   \   00011B   AB..         MOV       R3,?V9
   \   00011D   8E82         MOV       DPL,R6
   \   00011F   8F83         MOV       DPH,R7
   \   000121   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000124   12....       LCALL     ?CALL_IND
   \   000127   E9           MOV       A,R1
   \   000128   FE           MOV       R6,A
   1548              zcl_mem_free( cmd.tempPin );
   \   000129                ; Setup parameters for call to function osal_mem_free
   \   000129   7402         MOV       A,#0x2
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   12....       LCALL     ?Subroutine57 & 0xFFFF
   1549              zcl_mem_free( cmd.adminPin );
   \                     ??CrossCallReturnLabel_126:
   \   000131                ; Setup parameters for call to function osal_mem_free
   \   000131   12....       LCALL     ?Subroutine19 & 0xFFFF
   1550              return status;
   1551            }
   \                     ??CrossCallReturnLabel_385:
   \   000134   8002         SJMP      ??zclClosures_ProcessInDoorLockSetTemporaryPin_4
   1552          
   1553            return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockSetTemporaryPin_0:
   \   000136   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockSetTemporaryPin_4:
   \   000138   7409         MOV       A,#0x9
   \   00013A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013D   7F0B         MOV       R7,#0xb
   \   00013F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1554          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   C3           CLR       C
   \   000001   EC           MOV       A,R4
   \   000002   98           SUBB      A,R0
   \   000003   E4           CLR       A
   \   000004   99           SUBB      A,R1
   \   000005   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000007   65D0         XRL       A,PSW
   \   000009   33           RLC       A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E8           MOV       A,R0
   \   000001   25..         ADD       A,?V2
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2C           ADD       A,R4
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   EB           MOV       A,R3
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   05..         INC       ?V4
   \   00000F   0A           INC       R2
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V1
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   E5..         MOV       A,?V2
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   E5..         MOV       A,?V3
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine184_0
   \   000006                ; // Fall through to label ??Subroutine184_0
   1555          
   1556          /*********************************************************************
   1557           * @fn      zclClosures_ModifyPin
   1558           *
   1559           * @brief   Process in the received Modify Pin cmd
   1560           *
   1561           * @param   pInMsg - pointer to the incoming message
   1562           * @param   pCBs - pointer to the application callbacks
   1563           *
   1564           * @return  ZStatus_t
   1565           */
   1566          static ZStatus_t zclClosures_ModifyPin( zclIncoming_t *pInMsg,
   1567                                                      zclClosures_DoorLockAppCallbacks_t *pCBs )
   1568          {
   1569            if ( pCBs->pfnDoorLockModifyPin )
   1570            {
   1571              zclDoorLockModifyPin_t cmd;
   1572              uint8 count,num = 0;
   1573              
   1574              for(count=0;count<PIN_LEN_MAX;count++)
   1575              {
   1576                cmd.OriginalPin[count] = pInMsg->pData[num++];
   1577              }
   1578              
   1579              for(count=0;count<PIN_LEN_MAX;count++)
   1580              {
   1581                cmd.ModifyPin[count] = pInMsg->pData[num++];
   1582              }
   1583              
   1584              return ( pCBs->pfnDoorLockModifyPin( pInMsg, &cmd ) );
   1585            }
   1586            
   1587            return ( ZFailure );
   1588          }
   1589          
   1590          /*********************************************************************
   1591           * @fn      zclClosures_ProcessInDoorLockUnlockWithTimeoutRsp
   1592           *
   1593           * @brief   Process in the received Unlock With Timeout Response cmd
   1594           *
   1595           * @param   pInMsg - pointer to the incoming message
   1596           * @param   pCBs - pointer to the application callbacks
   1597           *
   1598           * @return  ZStatus_t
   1599           */
   1600          static ZStatus_t zclClosures_ProcessInDoorLockUnlockWithTimeoutRsp( zclIncoming_t *pInMsg,
   1601                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   1602          {
   1603           if ( pCBs->pfnDoorLockUnlockWithTimeoutRsp )
   1604           {
   1605             return ( pCBs->pfnDoorLockUnlockWithTimeoutRsp( pInMsg, pInMsg->pData[0] ) );
   1606           }
   1607          
   1608           return ( ZFailure );
   1609          }
   1610          
   1611          /*********************************************************************
   1612           * @fn      zclClosures_ProcessInDoorLockGetLogRecordRsp
   1613           *
   1614           * @brief   Process in the received Get Log Record Response cmd
   1615           *
   1616           * @param   pInMsg - pointer to the incoming message
   1617           * @param   pCBs - pointer to the application callbacks
   1618           *
   1619           * @return  ZStatus_t
   1620           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1621          static ZStatus_t zclClosures_ProcessInDoorLockGetLogRecordRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetLogRecordRsp:
   1622                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs )
   1623          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   1624            ZStatus_t status;
   1625          
   1626            if ( pCBs->pfnDoorLockGetLogRecordRsp )
   \   00000E   EC           MOV       A,R4
   \   00000F   2438         ADD       A,#0x38
   \   000011   F5..         MOV       ?V10,A
   \   000013   E4           CLR       A
   \   000014   3D           ADDC      A,R5
   \   000015   F5..         MOV       ?V11,A
   \   000017   85..82       MOV       DPL,?V10
   \   00001A   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zclClosures_ProcessInDoorLockGetLogRecordRsp_0 & 0xFFFF
   1627            {
   1628              uint8 i;
   1629              uint8 offset;
   1630              uint8 calculatedArrayLen;
   1631              zclDoorLockGetLogRecordRsp_t cmd;
   1632          
   1633              // first octet of PIN/RFID Code variable string identifies its length
   1634              calculatedArrayLen = pInMsg->pData[11] + 1;  // add first byte of string
   \   000022   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000025   F5..         MOV       ?V8,A
   1635          
   1636              cmd.pPIN = zcl_mem_alloc( calculatedArrayLen );
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine67 & 0xFFFF
   1637              if ( !cmd.pPIN )
   \                     ??CrossCallReturnLabel_148:
   \   000030   7005         JNZ       ??zclClosures_ProcessInDoorLockGetLogRecordRsp_1
   1638              {
   1639                return ( ZMemError );  // no memory
   \   000032   7910         MOV       R1,#0x10
   \   000034   02....       LJMP      ??zclClosures_ProcessInDoorLockGetLogRecordRsp_2 & 0xFFFF
   1640              }
   1641          
   1642              cmd.logEntryID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_1:
   \   000037   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   00003A   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00003D   F9           MOV       R1,A
   \   00003E   EC           MOV       A,R4
   \   00003F   12....       LCALL     ?Subroutine84 & 0xFFFF
   1643              cmd.timestamp = BUILD_UINT32( pInMsg->pData[2], pInMsg->pData[3], pInMsg->pData[4], pInMsg->pData[5] );
   \                     ??CrossCallReturnLabel_302:
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000049   12....       LCALL     ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00004C   12....       LCALL     ?L_SHL
   \   00004F   78..         MOV       R0,#?V0
   \   000051   79..         MOV       R1,#?V4
   \   000053   12....       LCALL     ?L_ADD
   \   000056   8A82         MOV       DPL,R2
   \   000058   8B83         MOV       DPH,R3
   \   00005A   12....       LCALL     ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00005D   12....       LCALL     ?L_SHL
   \   000060   78..         MOV       R0,#?V0
   \   000062   79..         MOV       R1,#?V4
   \   000064   12....       LCALL     ?L_ADD
   \   000067   8A82         MOV       DPL,R2
   \   000069   8B83         MOV       DPH,R3
   \   00006B   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00006E   12....       LCALL     ?L_SHL
   \   000071   78..         MOV       R0,#?V0
   \   000073   79..         MOV       R1,#?V4
   \   000075   12....       LCALL     ?L_ADD
   \   000078   7402         MOV       A,#0x2
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   12....       LCALL     ?L_MOV_TO_X
   1644              cmd.eventType = pInMsg->pData[6];
   \   000082   8A82         MOV       DPL,R2
   \   000084   8B83         MOV       DPH,R3
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   C0E0         PUSH      A
   \   00008F   7406         MOV       A,#0x6
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   D0E0         POP       A
   \   000096   12....       LCALL     ?Subroutine61 & 0xFFFF
   1645              cmd.source = pInMsg->pData[7];
   \                     ??CrossCallReturnLabel_327:
   \   000099   2407         ADD       A,#0x7
   \   00009B   F582         MOV       DPL,A
   \   00009D   E4           CLR       A
   \   00009E   38           ADDC      A,R0
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   C0E0         PUSH      A
   \   0000A4   7407         MOV       A,#0x7
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   D0E0         POP       A
   \   0000AB   12....       LCALL     ?Subroutine61 & 0xFFFF
   1646              cmd.eventIDAlarmCode = pInMsg->pData[8];
   \                     ??CrossCallReturnLabel_328:
   \   0000AE   2408         ADD       A,#0x8
   \   0000B0   F582         MOV       DPL,A
   \   0000B2   E4           CLR       A
   \   0000B3   38           ADDC      A,R0
   \   0000B4   F583         MOV       DPH,A
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   C0E0         PUSH      A
   \   0000B9   7408         MOV       A,#0x8
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   D0E0         POP       A
   \   0000C0   12....       LCALL     ?Subroutine82 & 0xFFFF
   1647              cmd.userID = BUILD_UINT16( pInMsg->pData[9], pInMsg->pData[10] );
   \                     ??CrossCallReturnLabel_183:
   \   0000C3   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   FA           MOV       R2,A
   \   0000D1   8882         MOV       DPL,R0
   \   0000D3   8983         MOV       DPH,R1
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F9           MOV       R1,A
   \   0000E1   7409         MOV       A,#0x9
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   EA           MOV       A,R2
   \   0000E7   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   1648              offset = 11;
   \                     ??CrossCallReturnLabel_300:
   \   0000EA   790B         MOV       R1,#0xb
   1649              for ( i = 0; i < calculatedArrayLen; i++ )
   \   0000EC   7800         MOV       R0,#0x0
   \   0000EE   801A         SJMP      ??zclClosures_ProcessInDoorLockGetLogRecordRsp_3
   1650              {
   1651                cmd.pPIN[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_4:
   \   0000F0   E9           MOV       A,R1
   \   0000F1   FA           MOV       R2,A
   \   0000F2   8E82         MOV       DPL,R6
   \   0000F4   8F83         MOV       DPH,R7
   \   0000F6   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   1652              }
   \                     ??CrossCallReturnLabel_462:
   \   0000F9   C0E0         PUSH      A
   \   0000FB   E8           MOV       A,R0
   \   0000FC   FA           MOV       R2,A
   \   0000FD   740B         MOV       A,#0xb
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000105   D0E0         POP       A
   \   000107   F0           MOVX      @DPTR,A
   \   000108   09           INC       R1
   \   000109   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_3:
   \   00010A   E8           MOV       A,R0
   \   00010B   C3           CLR       C
   \   00010C   95..         SUBB      A,?V8
   \   00010E   40E0         JC        ??zclClosures_ProcessInDoorLockGetLogRecordRsp_4
   1653          
   1654              status = ( pCBs->pfnDoorLockGetLogRecordRsp( pInMsg, &cmd ) );
   \   000110                ; Setup parameters for indirect call
   \   000110   AC..         MOV       R4,?XSP + 0
   \   000112   AD..         MOV       R5,?XSP + 1
   \   000114   AA..         MOV       R2,?V12
   \   000116   AB..         MOV       R3,?V13
   \   000118   85..82       MOV       DPL,?V10
   \   00011B   85..83       MOV       DPH,?V11
   \   00011E   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000121   12....       LCALL     ?CALL_IND
   \   000124   E9           MOV       A,R1
   \   000125   FE           MOV       R6,A
   1655              zcl_mem_free( cmd.pPIN );
   \   000126                ; Setup parameters for call to function osal_mem_free
   \   000126   740B         MOV       A,#0xb
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   1656              return status;
   1657            }
   \                     ??CrossCallReturnLabel_389:
   \   00012E   8002         SJMP      ??zclClosures_ProcessInDoorLockGetLogRecordRsp_2
   1658          
   1659           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_0:
   \   000130   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetLogRecordRsp_2:
   \   000132   02....       LJMP      ?Subroutine2 & 0xFFFF
   1660          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003                REQUIRE ??Subroutine159_0
   \   000003                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000007   8A82         MOV       DPL,R2
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   FA           MOV       R2,A
   \   000001   7B00         MOV       R3,#0x0
   \   000003   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000006   8B..         MOV       ?V1,R3
   \   000008   A9..         MOV       R1,?V1
   \   00000A   740B         MOV       A,#0xb
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C8           XCH       A,R0
   \   000008   240B         ADD       A,#0xb
   \   00000A   F582         MOV       DPL,A
   \   00000C   E4           CLR       A
   \   00000D   38           ADDC      A,R0
   \   00000E   F583         MOV       DPH,A
   \   000010   E0           MOVX      A,@DPTR
   \   000011   04           INC       A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   FE           MOV       R6,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V13
   \   000007   FF           MOV       R7,A
   \   000008   8E82         MOV       DPL,R6
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   740D         MOV       A,#0xd
   \   000002                REQUIRE ??Subroutine191_0
   \   000002                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine192_0
   \   000003                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1661          
   1662          /*********************************************************************
   1663           * @fn      zclClosures_ProcessInDoorLockSetPINCodeRsp
   1664           *
   1665           * @brief   Process in the received Set PIN Code Response cmd
   1666           *
   1667           * @param   pInMsg - pointer to the incoming message
   1668           * @param   pCBs - pointer to the application callbacks
   1669           *
   1670           * @return  ZStatus_t
   1671           */
   1672          static ZStatus_t zclClosures_ProcessInDoorLockSetPINCodeRsp( zclIncoming_t *pInMsg,
   1673                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1674          {
   1675           if ( pCBs->pfnDoorLockSetPINCodeRsp )
   1676           {
   1677             return ( pCBs->pfnDoorLockSetPINCodeRsp( pInMsg, pInMsg->pData[0] ) );
   1678           }
   1679          
   1680           return ( ZFailure );
   1681          }
   1682          
   1683          /*********************************************************************
   1684           * @fn      zclClosures_ProcessInDoorLockGetPINCodeRsp
   1685           *
   1686           * @brief   Process in the received Get PIN Code Response cmd
   1687           *
   1688           * @param   pInMsg - pointer to the incoming message
   1689           * @param   pCBs - pointer to the application callbacks
   1690           *
   1691           * @return  ZStatus_t
   1692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1693          static ZStatus_t zclClosures_ProcessInDoorLockGetPINCodeRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetPINCodeRsp:
   1694                                                                       zclClosures_DoorLockAppCallbacks_t *pCBs )
   1695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1696            ZStatus_t status;
   1697          
   1698            if ( pCBs->pfnDoorLockGetPINCodeRsp )
   \   00000E   EC           MOV       A,R4
   \   00000F   243C         ADD       A,#0x3c
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000014   6060         JZ        ??zclClosures_ProcessInDoorLockGetPINCodeRsp_0
   1699            {
   1700              uint8 i;
   1701              uint8 offset;
   1702              uint8 calculatedArrayLen;
   1703              zclDoorLockGetPINCodeRsp_t cmd;
   1704          
   1705              // first octet of PIN/RFID Code variable string identifies its length
   1706              calculatedArrayLen = pInMsg->pData[4] + 1; // add first byte of string
   \   000016   12....       LCALL     ?Subroutine16 & 0xFFFF
   1707          
   1708              cmd.pCode = zcl_mem_alloc( calculatedArrayLen );
   \                     ??CrossCallReturnLabel_14:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine67 & 0xFFFF
   1709              if ( !cmd.pCode )
   \                     ??CrossCallReturnLabel_149:
   \   00001F   7004         JNZ       ??zclClosures_ProcessInDoorLockGetPINCodeRsp_1
   1710              {
   1711                return ( ZMemError );  // no memory
   \   000021   7910         MOV       R1,#0x10
   \   000023   8053         SJMP      ??zclClosures_ProcessInDoorLockGetPINCodeRsp_2
   1712              }
   1713          
   1714              cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_1:
   \   000025   12....       LCALL     ?Subroutine12 & 0xFFFF
   1715              cmd.userStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_10:
   \   000028   C0E0         PUSH      A
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine26 & 0xFFFF
   1716              cmd.userType = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_63:
   \   000034   C0E0         PUSH      A
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine80 & 0xFFFF
   1717              offset = 4;
   1718              for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_178:
   \   000040   801C         SJMP      ??zclClosures_ProcessInDoorLockGetPINCodeRsp_3
   1719              {
   1720                cmd.pCode[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_4:
   \   000042   E9           MOV       A,R1
   \   000043   FA           MOV       R2,A
   \   000044   85..82       MOV       DPL,?V2
   \   000047   85..83       MOV       DPH,?V3
   \   00004A   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   1721              }
   \                     ??CrossCallReturnLabel_463:
   \   00004D   C0E0         PUSH      A
   \   00004F   E8           MOV       A,R0
   \   000050   FA           MOV       R2,A
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000059   D0E0         POP       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   09           INC       R1
   \   00005D   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_3:
   \   00005E   E8           MOV       A,R0
   \   00005F   C3           CLR       C
   \   000060   95..         SUBB      A,?V4
   \   000062   40DE         JC        ??zclClosures_ProcessInDoorLockGetPINCodeRsp_4
   1722          
   1723              status = ( pCBs->pfnDoorLockGetPINCodeRsp( pInMsg, &cmd ) );
   \   000064                ; Setup parameters for indirect call
   \   000064   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000067   12....       LCALL     ?CALL_IND
   \   00006A   E9           MOV       A,R1
   \   00006B   FE           MOV       R6,A
   1724              zcl_mem_free( cmd.pCode );
   \   00006C                ; Setup parameters for call to function osal_mem_free
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   1725              return status;
   1726            }
   \                     ??CrossCallReturnLabel_390:
   \   000074   8002         SJMP      ??zclClosures_ProcessInDoorLockGetPINCodeRsp_2
   1727          
   1728           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_0:
   \   000076   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetPINCodeRsp_2:
   \   000078   02....       LJMP      ?Subroutine1 & 0xFFFF
   1729          }
   1730          
   1731          /*********************************************************************
   1732           * @fn      zclClosures_ProcessInDoorLockClearPINCodeRsp
   1733           *
   1734           * @brief   Process in the received Clear PIN Code Response cmd
   1735           *
   1736           * @param   pInMsg - pointer to the incoming message
   1737           * @param   pCBs - pointer to the application callbacks
   1738           *
   1739           * @return  ZStatus_t
   1740           */
   1741          static ZStatus_t zclClosures_ProcessInDoorLockClearPINCodeRsp( zclIncoming_t *pInMsg,
   1742                                                                         zclClosures_DoorLockAppCallbacks_t *pCBs )
   1743          {
   1744           if ( pCBs->pfnDoorLockClearPINCodeRsp )
   1745           {
   1746             return ( pCBs->pfnDoorLockClearPINCodeRsp( pInMsg, pInMsg->pData[0] ) );
   1747           }
   1748          
   1749           return ( ZFailure );
   1750          }
   1751          
   1752          /*********************************************************************
   1753           * @fn      zclClosures_ProcessInDoorLockClearAllPINCodesRsp
   1754           *
   1755           * @brief   Process in the received Clear All PIN Codes Response cmd
   1756           *
   1757           * @param   pInMsg - pointer to the incoming message
   1758           * @param   pCBs - pointer to the application callbacks
   1759           *
   1760           * @return  ZStatus_t
   1761           */
   1762          static ZStatus_t zclClosures_ProcessInDoorLockClearAllPINCodesRsp( zclIncoming_t *pInMsg,
   1763                                                                             zclClosures_DoorLockAppCallbacks_t *pCBs )
   1764          {
   1765           if ( pCBs->pfnDoorLockClearAllPINCodesRsp )
   1766           {
   1767             return ( pCBs->pfnDoorLockClearAllPINCodesRsp( pInMsg, pInMsg->pData[0] ) );
   1768           }
   1769          
   1770           return ( ZFailure );
   1771          }
   1772          
   1773          /*********************************************************************
   1774           * @fn      zclClosures_ProcessInDoorLockSetUserStatusRsp
   1775           *
   1776           * @brief   Process in the received Set User Status Response cmd
   1777           *
   1778           * @param   pInMsg - pointer to the incoming message
   1779           * @param   pCBs - pointer to the application callbacks
   1780           *
   1781           * @return  ZStatus_t
   1782           */
   1783          static ZStatus_t zclClosures_ProcessInDoorLockSetUserStatusRsp( zclIncoming_t *pInMsg,
   1784                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
   1785          {
   1786           if ( pCBs->pfnDoorLockSetUserStatusRsp )
   1787           {
   1788             return ( pCBs->pfnDoorLockSetUserStatusRsp( pInMsg, pInMsg->pData[0] ) );
   1789           }
   1790          
   1791           return ( ZFailure );
   1792          }
   1793          
   1794          /*********************************************************************
   1795           * @fn      zclClosures_ProcessInDoorLockGetUserStatusRsp
   1796           *
   1797           * @brief   Process in the received Get User Status Response cmd
   1798           *
   1799           * @param   pInMsg - pointer to the incoming message
   1800           * @param   pCBs - pointer to the application callbacks
   1801           *
   1802           * @return  ZStatus_t
   1803           */
   1804          static ZStatus_t zclClosures_ProcessInDoorLockGetUserStatusRsp( zclIncoming_t *pInMsg,
   1805                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
   1806          {
   1807           if ( pCBs->pfnDoorLockGetUserStatusRsp )
   1808           {
   1809             zclDoorLockGetUserStatusRsp_t cmd;
   1810          
   1811             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1812             cmd.userStatus = pInMsg->pData[2];
   1813          
   1814             return ( pCBs->pfnDoorLockGetUserStatusRsp( pInMsg, &cmd ) );
   1815           }
   1816          
   1817           return ( ZFailure );
   1818          }
   1819          
   1820          /*********************************************************************
   1821           * @fn      zclClosures_ProcessInDoorLockSetWeekDayScheduleRsp
   1822           *
   1823           * @brief   Process in the received Set Week Day Schedule Response cmd
   1824           *
   1825           * @param   pInMsg - pointer to the incoming message
   1826           * @param   pCBs - pointer to the application callbacks
   1827           *
   1828           * @return  ZStatus_t
   1829           */
   1830          static ZStatus_t zclClosures_ProcessInDoorLockSetWeekDayScheduleRsp( zclIncoming_t *pInMsg,
   1831                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1832          {
   1833           if ( pCBs->pfnDoorLockSetWeekDayScheduleRsp )
   1834           {
   1835             return ( pCBs->pfnDoorLockSetWeekDayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1836           }
   1837          
   1838           return ( ZFailure );
   1839          }
   1840          
   1841          /*********************************************************************
   1842           * @fn      zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
   1843           *
   1844           * @brief   Process in the received Get Week Day Schedule Response cmd
   1845           *
   1846           * @param   pInMsg - pointer to the incoming message
   1847           * @param   pCBs - pointer to the application callbacks
   1848           *
   1849           * @return  ZStatus_t
   1850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1851          static ZStatus_t zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp:
   1852                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1853          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1854           if ( pCBs->pfnDoorLockGetWeekDayScheduleRsp )
   \   00000A   EC           MOV       A,R4
   \   00000B   2448         ADD       A,#0x48
   \   00000D   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000010   6072         JZ        ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_1
   1855           {
   1856             zclDoorLockGetWeekDayScheduleRsp_t cmd;
   1857          
   1858             cmd.scheduleID = pInMsg->pData[0];
   \   000012   12....       LCALL     ?Subroutine22 & 0xFFFF
   1859             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_56:
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine71 & 0xFFFF
   1860             cmd.status = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_159:
   \   00001B   FE           MOV       R6,A
   \   00001C   7403         MOV       A,#0x3
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   EE           MOV       A,R6
   \   000022   F0           MOVX      @DPTR,A
   1861          
   1862             if ( cmd.status == ZCL_STATUS_SUCCESS )
   \   000023   704F         JNZ       ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_2
   1863             {
   1864               cmd.daysMask = pInMsg->pData[4];
   \   000025   12....       LCALL     ?Subroutine47 & 0xFFFF
   1865               cmd.startHour = pInMsg->pData[5];
   1866               cmd.startMinute = pInMsg->pData[6];
   1867               cmd.endHour = pInMsg->pData[7];
   1868               cmd.endMinute = pInMsg->pData[8];
   1869             }
   \                     ??CrossCallReturnLabel_108:
   \   000028   C0E0         PUSH      A
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000034   C0E0         PUSH      A
   \   000036   7405         MOV       A,#0x5
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000040   C0E0         PUSH      A
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   D0E0         POP       A
   \   000049   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00004C   2407         ADD       A,#0x7
   \   00004E   F582         MOV       DPL,A
   \   000050   E4           CLR       A
   \   000051   3E           ADDC      A,R6
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   7407         MOV       A,#0x7
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000061   2408         ADD       A,#0x8
   \   000063   F582         MOV       DPL,A
   \   000065   E4           CLR       A
   \   000066   3C           ADDC      A,R4
   \   000067   F583         MOV       DPH,A
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   C0E0         PUSH      A
   \   00006C   7408         MOV       A,#0x8
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   D0E0         POP       A
   \   000073   F0           MOVX      @DPTR,A
   1870          
   1871             return ( pCBs->pfnDoorLockGetWeekDayScheduleRsp( pInMsg, &cmd ) );
   \                     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_2:
   \   000074                ; Setup parameters for indirect call
   \   000074   AC..         MOV       R4,?XSP + 0
   \   000076   AD..         MOV       R5,?XSP + 1
   \   000078   8882         MOV       DPL,R0
   \   00007A   8983         MOV       DPH,R1
   \   00007C   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   1872           }
   \                     ??CrossCallReturnLabel_339:
   \   00007F   12....       LCALL     ?CALL_IND
   \   000082   8002         SJMP      ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_3
   1873          
   1874           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_1:
   \   000084   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetWeekDaySchedu_3:
   \   000086   7409         MOV       A,#0x9
   \   000088   02....       LJMP      ??Subroutine186_0 & 0xFFFF
   1875          }
   1876          
   1877          /*********************************************************************
   1878           * @fn      zclClosures_ProcessInDoorLockClearWeekDayScheduleRsp
   1879           *
   1880           * @brief   Process in the received Clear Week Day Schedule Response cmd
   1881           *
   1882           * @param   pInMsg - pointer to the incoming message
   1883           * @param   pCBs - pointer to the application callbacks
   1884           *
   1885           * @return  ZStatus_t
   1886           */
   1887          static ZStatus_t zclClosures_ProcessInDoorLockClearWeekDayScheduleRsp( zclIncoming_t *pInMsg,
   1888                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs )
   1889          {
   1890           if ( pCBs->pfnDoorLockClearWeekDayScheduleRsp )
   1891           {
   1892             return ( pCBs->pfnDoorLockClearWeekDayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1893           }
   1894          
   1895           return ( ZFailure );
   1896          }
   1897          
   1898          /*********************************************************************
   1899           * @fn      zclClosures_ProcessInDoorLockSetYearDayScheduleRsp
   1900           *
   1901           * @brief   Process in the received Set Year Day Schedule Response cmd
   1902           *
   1903           * @param   pInMsg - pointer to the incoming message
   1904           * @param   pCBs - pointer to the application callbacks
   1905           *
   1906           * @return  ZStatus_t
   1907           */
   1908          static ZStatus_t zclClosures_ProcessInDoorLockSetYearDayScheduleRsp( zclIncoming_t *pInMsg,
   1909                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1910          {
   1911           if ( pCBs->pfnDoorLockSetYearDayScheduleRsp )
   1912           {
   1913             return ( pCBs->pfnDoorLockSetYearDayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1914           }
   1915          
   1916           return ( ZFailure );
   1917          }
   1918          
   1919          /*********************************************************************
   1920           * @fn      zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
   1921           *
   1922           * @brief   Process in the received Get Year Day Schedule Response cmd
   1923           *
   1924           * @param   pInMsg - pointer to the incoming message
   1925           * @param   pCBs - pointer to the application callbacks
   1926           *
   1927           * @return  ZStatus_t
   1928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine155_0
   \   000001                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1929          static ZStatus_t zclClosures_ProcessInDoorLockGetYearDayScheduleRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetYearDayScheduleRsp:
   1930                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1931          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1932           if ( pCBs->pfnDoorLockGetYearDayScheduleRsp )
   \   00000A   EC           MOV       A,R4
   \   00000B   244E         ADD       A,#0x4e
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   FF           MOV       R7,A
   \   000011   8E82         MOV       DPL,R6
   \   000013   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zclClosures_ProcessInDoorLockGetYearDaySchedu_1 & 0xFFFF
   1933           {
   1934             zclDoorLockGetYearDayScheduleRsp_t cmd;
   1935          
   1936             cmd.scheduleID = pInMsg->pData[0];
   \   00001B   12....       LCALL     ?Subroutine30 & 0xFFFF
   1937             cmd.userID = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_77:
   \   00001E   FD           MOV       R5,A
   \   00001F   8C82         MOV       DPL,R4
   \   000021   F583         MOV       DPH,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V2,A
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   \   00002B   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E5..         MOV       A,?V0
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E5..         MOV       A,?V1
   \   000037   12....       LCALL     ?Subroutine87 & 0xFFFF
   1938             cmd.status = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_196:
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FC           MOV       R4,A
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   EC           MOV       A,R4
   \   000042   F0           MOVX      @DPTR,A
   1939          
   1940             if ( cmd.status == ZCL_STATUS_SUCCESS )
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??zclClosures_ProcessInDoorLockGetYearDaySchedu_2 & 0xFFFF
   1941             {
   1942               cmd.zigBeeLocalStartTime = BUILD_UINT32( pInMsg->pData[4], pInMsg->pData[5], pInMsg->pData[6], pInMsg->pData[7] );
   \   000048   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   00004B   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   00004E   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000051   12....       LCALL     ?L_SHL
   \   000054   78..         MOV       R0,#?V0
   \   000056   79..         MOV       R1,#?V4
   \   000058   12....       LCALL     ?L_ADD
   \   00005B   8C82         MOV       DPL,R4
   \   00005D   8D83         MOV       DPH,R5
   \   00005F   12....       LCALL     ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000062   12....       LCALL     ?L_SHL
   \   000065   78..         MOV       R0,#?V0
   \   000067   79..         MOV       R1,#?V4
   \   000069   12....       LCALL     ?L_ADD
   \   00006C   8C82         MOV       DPL,R4
   \   00006E   8D83         MOV       DPH,R5
   \   000070   12....       LCALL     ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000073   12....       LCALL     ?L_SHL
   \   000076   78..         MOV       R0,#?V0
   \   000078   79..         MOV       R1,#?V4
   \   00007A   12....       LCALL     ?L_ADD
   \   00007D   7404         MOV       A,#0x4
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   78..         MOV       R0,#?V0
   \   000084   12....       LCALL     ?L_MOV_TO_X
   1943               cmd.zigBeeLocalEndTime = BUILD_UINT32( pInMsg->pData[8], pInMsg->pData[9], pInMsg->pData[10], pInMsg->pData[11] );
   \   000087   8C82         MOV       DPL,R4
   \   000089   8D83         MOV       DPH,R5
   \   00008B   A3           INC       DPTR
   \   00008C   12....       LCALL     ?Subroutine33 & 0xFFFF
   1944             }
   \                     ??CrossCallReturnLabel_371:
   \   00008F   A3           INC       DPTR
   \   000090   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000093   12....       LCALL     ?L_SHL
   \   000096   78..         MOV       R0,#?V0
   \   000098   79..         MOV       R1,#?V4
   \   00009A   12....       LCALL     ?L_ADD
   \   00009D   8C82         MOV       DPL,R4
   \   00009F   8D83         MOV       DPH,R5
   \   0000A1   A3           INC       DPTR
   \   0000A2   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   0000A5   12....       LCALL     ?L_SHL
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   79..         MOV       R1,#?V4
   \   0000AC   12....       LCALL     ?L_ADD
   \   0000AF   EC           MOV       A,R4
   \   0000B0   240B         ADD       A,#0xb
   \   0000B2   F582         MOV       DPL,A
   \   0000B4   E4           CLR       A
   \   0000B5   3D           ADDC      A,R5
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   12....       LCALL     ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   0000BB   12....       LCALL     ?L_SHL
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   79..         MOV       R1,#?V4
   \   0000C2   12....       LCALL     ?L_ADD
   \   0000C5   7408         MOV       A,#0x8
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   78..         MOV       R0,#?V0
   \   0000CC   12....       LCALL     ?L_MOV_TO_X
   1945          
   1946             return ( pCBs->pfnDoorLockGetYearDayScheduleRsp( pInMsg, &cmd ) );
   \                     ??zclClosures_ProcessInDoorLockGetYearDaySchedu_2:
   \   0000CF                ; Setup parameters for indirect call
   \   0000CF   AC..         MOV       R4,?XSP + 0
   \   0000D1   AD..         MOV       R5,?XSP + 1
   \   0000D3   8E82         MOV       DPL,R6
   \   0000D5   8F83         MOV       DPH,R7
   \   0000D7   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   1947           }
   \                     ??CrossCallReturnLabel_340:
   \   0000DA   12....       LCALL     ?CALL_IND
   \   0000DD   8002         SJMP      ??zclClosures_ProcessInDoorLockGetYearDaySchedu_3
   1948          
   1949           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetYearDaySchedu_1:
   \   0000DF   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetYearDaySchedu_3:
   \   0000E1   740C         MOV       A,#0xc
   \   0000E3   02....       LJMP      ??Subroutine142_0 & 0xFFFF
   1950          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine161_0
   \   000004                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   1951          
   1952          /*********************************************************************
   1953           * @fn      zclClosures_ProcessInDoorLockClearYearDayScheduleRsp
   1954           *
   1955           * @brief   Process in the received Clear Year Day Schedule Response cmd
   1956           *
   1957           * @param   pInMsg - pointer to the incoming message
   1958           * @param   pCBs - pointer to the application callbacks
   1959           *
   1960           * @return  ZStatus_t
   1961           */
   1962          static ZStatus_t zclClosures_ProcessInDoorLockClearYearDayScheduleRsp( zclIncoming_t *pInMsg,
   1963                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs )
   1964          {
   1965           if ( pCBs->pfnDoorLockClearYearDayScheduleRsp )
   1966           {
   1967             return ( pCBs->pfnDoorLockClearYearDayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1968           }
   1969          
   1970           return ( ZFailure );
   1971          }
   1972          
   1973          /*********************************************************************
   1974           * @fn      zclClosures_ProcessInDoorLockSetHolidayScheduleRsp
   1975           *
   1976           * @brief   Process in the received Set Holiday Schedule Response cmd
   1977           *
   1978           * @param   pInMsg - pointer to the incoming message
   1979           * @param   pCBs - pointer to the application callbacks
   1980           *
   1981           * @return  ZStatus_t
   1982           */
   1983          static ZStatus_t zclClosures_ProcessInDoorLockSetHolidayScheduleRsp( zclIncoming_t *pInMsg,
   1984                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   1985          {
   1986           if ( pCBs->pfnDoorLockSetHolidayScheduleRsp )
   1987           {
   1988             return ( pCBs->pfnDoorLockSetHolidayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   1989           }
   1990          
   1991           return ( ZFailure );
   1992          }
   1993          
   1994          /*********************************************************************
   1995           * @fn      zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
   1996           *
   1997           * @brief   Process in the received Get Holiday Schedule Response cmd
   1998           *
   1999           * @param   pInMsg - pointer to the incoming message
   2000           * @param   pCBs - pointer to the application callbacks
   2001           *
   2002           * @return  ZStatus_t
   2003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2004          static ZStatus_t zclClosures_ProcessInDoorLockGetHolidayScheduleRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetHolidayScheduleRsp:
   2005                                                                               zclClosures_DoorLockAppCallbacks_t *pCBs )
   2006          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2007           if ( pCBs->pfnDoorLockGetHolidayScheduleRsp )
   \   00000A   EC           MOV       A,R4
   \   00000B   2454         ADD       A,#0x54
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   FF           MOV       R7,A
   \   000011   8E82         MOV       DPL,R6
   \   000013   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??zclClosures_ProcessInDoorLockGetHolidaySchedu_1 & 0xFFFF
   2008           {
   2009             zclDoorLockGetHolidayScheduleRsp_t cmd;
   2010          
   2011             cmd.holidayScheduleID = pInMsg->pData[0];
   \   00001B   12....       LCALL     ?Subroutine30 & 0xFFFF
   2012             cmd.status = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_78:
   \   00001E   F583         MOV       DPH,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FC           MOV       R4,A
   \   000025   7401         MOV       A,#0x1
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   EC           MOV       A,R4
   \   00002B   F0           MOVX      @DPTR,A
   2013          
   2014             if ( cmd.status == ZCL_STATUS_SUCCESS )
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??zclClosures_ProcessInDoorLockGetHolidaySchedu_2 & 0xFFFF
   2015             {
   2016               cmd.zigBeeLocalStartTime = BUILD_UINT32( pInMsg->pData[2], pInMsg->pData[3], pInMsg->pData[4], pInMsg->pData[5] );
   \   000031   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000034   12....       LCALL     ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000037   12....       LCALL     ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   00003A   12....       LCALL     ?L_SHL
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   79..         MOV       R1,#?V4
   \   000041   12....       LCALL     ?L_ADD
   \   000044   8C82         MOV       DPL,R4
   \   000046   8D83         MOV       DPH,R5
   \   000048   12....       LCALL     ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   00004B   12....       LCALL     ?L_SHL
   \   00004E   78..         MOV       R0,#?V0
   \   000050   79..         MOV       R1,#?V4
   \   000052   12....       LCALL     ?L_ADD
   \   000055   8C82         MOV       DPL,R4
   \   000057   8D83         MOV       DPH,R5
   \   000059   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   00005C   12....       LCALL     ?L_SHL
   \   00005F   78..         MOV       R0,#?V0
   \   000061   79..         MOV       R1,#?V4
   \   000063   12....       LCALL     ?L_ADD
   \   000066   7402         MOV       A,#0x2
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?L_MOV_TO_X
   2017               cmd.zigBeeLocalEndTime = BUILD_UINT32( pInMsg->pData[6], pInMsg->pData[7], pInMsg->pData[8], pInMsg->pData[9] );
   \   000070   8C82         MOV       DPL,R4
   \   000072   8D83         MOV       DPH,R5
   \   000074   12....       LCALL     ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000077   12....       LCALL     ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   00007A   12....       LCALL     ?L_SHL
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   79..         MOV       R1,#?V4
   \   000081   12....       LCALL     ?L_ADD
   \   000084   8C82         MOV       DPL,R4
   \   000086   8D83         MOV       DPH,R5
   \   000088   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00008B   12....       LCALL     ?L_SHL
   \   00008E   78..         MOV       R0,#?V0
   \   000090   79..         MOV       R1,#?V4
   \   000092   12....       LCALL     ?L_ADD
   \   000095   8C82         MOV       DPL,R4
   \   000097   8D83         MOV       DPH,R5
   \   000099   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   00009C   12....       LCALL     ?L_SHL
   \   00009F   78..         MOV       R0,#?V0
   \   0000A1   79..         MOV       R1,#?V4
   \   0000A3   12....       LCALL     ?L_ADD
   \   0000A6   7406         MOV       A,#0x6
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?L_MOV_TO_X
   2018               cmd.operatingModeDuringHoliday = pInMsg->pData[10];
   \   0000B0   8C82         MOV       DPL,R4
   \   0000B2   8D83         MOV       DPH,R5
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   C0E0         PUSH      A
   \   0000C1   740A         MOV       A,#0xa
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   D0E0         POP       A
   \   0000C8   F0           MOVX      @DPTR,A
   2019             }
   2020          
   2021             return ( pCBs->pfnDoorLockGetHolidayScheduleRsp( pInMsg, &cmd ) );
   \                     ??zclClosures_ProcessInDoorLockGetHolidaySchedu_2:
   \   0000C9                ; Setup parameters for indirect call
   \   0000C9   AC..         MOV       R4,?XSP + 0
   \   0000CB   AD..         MOV       R5,?XSP + 1
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   2022           }
   \                     ??CrossCallReturnLabel_341:
   \   0000D4   12....       LCALL     ?CALL_IND
   \   0000D7   8002         SJMP      ??zclClosures_ProcessInDoorLockGetHolidaySchedu_3
   2023          
   2024           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetHolidaySchedu_1:
   \   0000D9   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetHolidaySchedu_3:
   \   0000DB   02....       LJMP      ?Subroutine7 & 0xFFFF
   2025          }
   2026          
   2027          /*********************************************************************
   2028           * @fn      zclClosures_ProcessInDoorLockClearHolidayScheduleRsp
   2029           *
   2030           * @brief   Process in the received Clear Holiday Schedule Response cmd
   2031           *
   2032           * @param   pInMsg - pointer to the incoming message
   2033           * @param   pCBs - pointer to the application callbacks
   2034           *
   2035           * @return  ZStatus_t
   2036           */
   2037          static ZStatus_t zclClosures_ProcessInDoorLockClearHolidayScheduleRsp( zclIncoming_t *pInMsg,
   2038                                                                                 zclClosures_DoorLockAppCallbacks_t *pCBs )
   2039          {
   2040           if ( pCBs->pfnDoorLockClearHolidayScheduleRsp )
   2041           {
   2042             return ( pCBs->pfnDoorLockClearHolidayScheduleRsp( pInMsg, pInMsg->pData[0] ) );
   2043           }
   2044          
   2045           return ( ZFailure );
   2046          }
   2047          
   2048          /*********************************************************************
   2049           * @fn      zclClosures_ProcessInDoorLockSetUserTypeRsp
   2050           *
   2051           * @brief   Process in the received Set User Type Response cmd
   2052           *
   2053           * @param   pInMsg - pointer to the incoming message
   2054           * @param   pCBs - pointer to the application callbacks
   2055           *
   2056           * @return  ZStatus_t
   2057           */
   2058          static ZStatus_t zclClosures_ProcessInDoorLockSetUserTypeRsp( zclIncoming_t *pInMsg,
   2059                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs )
   2060          {
   2061           if ( pCBs->pfnDoorLockSetUserTypeRsp )
   2062           {
   2063             return ( pCBs->pfnDoorLockSetUserTypeRsp( pInMsg, pInMsg->pData[0] ) );
   2064           }
   2065          
   2066           return ( ZFailure );
   2067          }
   2068          
   2069          /*********************************************************************
   2070           * @fn      zclClosures_ProcessInDoorLockGetUserTypeRsp
   2071           *
   2072           * @brief   Process in the received Get User Type Response cmd
   2073           *
   2074           * @param   pInMsg - pointer to the incoming message
   2075           * @param   pCBs - pointer to the application callbacks
   2076           *
   2077           * @return  ZStatus_t
   2078           */
   2079          static ZStatus_t zclClosures_ProcessInDoorLockGetUserTypeRsp( zclIncoming_t *pInMsg,
   2080                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs )
   2081          {
   2082           if ( pCBs->pfnDoorLockGetUserTypeRsp )
   2083           {
   2084             zclDoorLockGetUserTypeRsp_t cmd;
   2085          
   2086             cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   2087             cmd.userType = pInMsg->pData[2];
   2088          
   2089             return ( pCBs->pfnDoorLockGetUserTypeRsp( pInMsg, &cmd ) );
   2090           }
   2091          
   2092           return ( ZFailure );
   2093          }
   2094          
   2095          /*********************************************************************
   2096           * @fn      zclClosures_ProcessInDoorLockSetRFIDCodeRsp
   2097           *
   2098           * @brief   Process in the received Set RFID Code Response cmd
   2099           *
   2100           * @param   pInMsg - pointer to the incoming message
   2101           * @param   pCBs - pointer to the application callbacks
   2102           *
   2103           * @return  ZStatus_t
   2104           */
   2105          static ZStatus_t zclClosures_ProcessInDoorLockSetRFIDCodeRsp( zclIncoming_t *pInMsg,
   2106                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs )
   2107          {
   2108           if ( pCBs->pfnDoorLockSetRFIDCodeRsp )
   2109           {
   2110             return ( pCBs->pfnDoorLockSetRFIDCodeRsp( pInMsg, pInMsg->pData[0] ) );
   2111           }
   2112          
   2113           return ( ZFailure );
   2114          }
   2115          
   2116          /*********************************************************************
   2117           * @fn      zclClosures_ProcessInDoorLockGetRFIDCodeRsp
   2118           *
   2119           * @brief   Process in the received Get RFID Code Response cmd
   2120           *
   2121           * @param   pInMsg - pointer to the incoming message
   2122           * @param   pCBs - pointer to the application callbacks
   2123           *
   2124           * @return  ZStatus_t
   2125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2126          static ZStatus_t zclClosures_ProcessInDoorLockGetRFIDCodeRsp( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockGetRFIDCodeRsp:
   2127                                                                        zclClosures_DoorLockAppCallbacks_t *pCBs )
   2128          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2129            ZStatus_t status;
   2130          
   2131            if ( pCBs->pfnDoorLockGetRFIDCodeRsp )
   \   00000E   EC           MOV       A,R4
   \   00000F   245E         ADD       A,#0x5e
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000014   6060         JZ        ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_0
   2132            {
   2133              uint8 i;
   2134              uint8 offset;
   2135              uint8 calculatedArrayLen;
   2136              zclDoorLockGetRFIDCodeRsp_t cmd;
   2137          
   2138              // first octet of PIN/RFID Code variable string identifies its length
   2139              calculatedArrayLen = pInMsg->pData[4] + 1; // add first byte of string
   \   000016   12....       LCALL     ?Subroutine16 & 0xFFFF
   2140          
   2141              cmd.pRfidCode = zcl_mem_alloc( calculatedArrayLen );
   \                     ??CrossCallReturnLabel_15:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine67 & 0xFFFF
   2142              if ( !cmd.pRfidCode )
   \                     ??CrossCallReturnLabel_150:
   \   00001F   7004         JNZ       ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_1
   2143              {
   2144                return ( ZMemError );  // no memory
   \   000021   7910         MOV       R1,#0x10
   \   000023   8053         SJMP      ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_2
   2145              }
   2146          
   2147              cmd.userID = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_1:
   \   000025   12....       LCALL     ?Subroutine12 & 0xFFFF
   2148              cmd.userStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_11:
   \   000028   C0E0         PUSH      A
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   12....       LCALL     ?Subroutine26 & 0xFFFF
   2149              cmd.userType = pInMsg->pData[3];
   \                     ??CrossCallReturnLabel_64:
   \   000034   C0E0         PUSH      A
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   D0E0         POP       A
   \   00003D   12....       LCALL     ?Subroutine80 & 0xFFFF
   2150              offset = 4;
   2151              for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_179:
   \   000040   801C         SJMP      ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_3
   2152              {
   2153                cmd.pRfidCode[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_4:
   \   000042   E9           MOV       A,R1
   \   000043   FA           MOV       R2,A
   \   000044   85..82       MOV       DPL,?V2
   \   000047   85..83       MOV       DPH,?V3
   \   00004A   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   2154              }
   \                     ??CrossCallReturnLabel_464:
   \   00004D   C0E0         PUSH      A
   \   00004F   E8           MOV       A,R0
   \   000050   FA           MOV       R2,A
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000059   D0E0         POP       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   09           INC       R1
   \   00005D   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_3:
   \   00005E   E8           MOV       A,R0
   \   00005F   C3           CLR       C
   \   000060   95..         SUBB      A,?V4
   \   000062   40DE         JC        ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_4
   2155          
   2156              status = ( pCBs->pfnDoorLockGetRFIDCodeRsp( pInMsg, &cmd ) );
   \   000064                ; Setup parameters for indirect call
   \   000064   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000067   12....       LCALL     ?CALL_IND
   \   00006A   E9           MOV       A,R1
   \   00006B   FE           MOV       R6,A
   2157              zcl_mem_free( cmd.pRfidCode );
   \   00006C                ; Setup parameters for call to function osal_mem_free
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   2158              return status;
   2159            }
   \                     ??CrossCallReturnLabel_391:
   \   000074   8002         SJMP      ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_2
   2160          
   2161           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_0:
   \   000076   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockGetRFIDCodeRsp_2:
   \   000078   02....       LJMP      ?Subroutine1 & 0xFFFF
   2162          }
   2163          
   2164          /*********************************************************************
   2165           * @fn      zclClosures_ProcessInDoorLockClearRFIDCodeRsp
   2166           *
   2167           * @brief   Process in the received Clear RFID Code Response cmd
   2168           *
   2169           * @param   pInMsg - pointer to the incoming message
   2170           * @param   pCBs - pointer to the application callbacks
   2171           *
   2172           * @return  ZStatus_t
   2173           */
   2174          static ZStatus_t zclClosures_ProcessInDoorLockClearRFIDCodeRsp( zclIncoming_t *pInMsg,
   2175                                                                          zclClosures_DoorLockAppCallbacks_t *pCBs )
   2176          {
   2177           if ( pCBs->pfnDoorLockClearRFIDCodeRsp )
   2178           {
   2179             return ( pCBs->pfnDoorLockClearRFIDCodeRsp( pInMsg, pInMsg->pData[0] ) );
   2180           }
   2181          
   2182           return ( ZFailure );
   2183          }
   2184          
   2185          /*********************************************************************
   2186           * @fn      zclClosures_ProcessInDoorLockClearAllRFIDCodesRsp
   2187           *
   2188           * @brief   Process in the received Clear All RFID Codes Response cmd
   2189           *
   2190           * @param   pInMsg - pointer to the incoming message
   2191           * @param   pCBs - pointer to the application callbacks
   2192           *
   2193           * @return  ZStatus_t
   2194           */
   2195          static ZStatus_t zclClosures_ProcessInDoorLockClearAllRFIDCodesRsp( zclIncoming_t *pInMsg,
   2196                                                                              zclClosures_DoorLockAppCallbacks_t *pCBs )
   2197          {
   2198           if ( pCBs->pfnDoorLockClearAllRFIDCodesRsp )
   2199           {
   2200             return ( pCBs->pfnDoorLockClearAllRFIDCodesRsp( pInMsg, pInMsg->pData[0] ) );
   2201           }
   2202          
   2203           return ( ZFailure );
   2204          }
   2205          
   2206          /*********************************************************************
   2207           * @fn      zclClosures_ProcessInDoorLockOperationEventNotification
   2208           *
   2209           * @brief   Process in the received Operation Event Notification cmd
   2210           *
   2211           * @param   pInMsg - pointer to the incoming message
   2212           * @param   pCBs - pointer to the application callbacks
   2213           *
   2214           * @return  ZStatus_t
   2215           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine154_0
   \   000001                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2216          static ZStatus_t zclClosures_ProcessInDoorLockOperationEventNotification( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockOperationEventNotification:
   2217                                                                                    zclClosures_DoorLockAppCallbacks_t *pCBs )
   2218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   2219            uint8 i;
   2220            uint8 offset;
   2221            uint8 calculatedArrayLen;
   2222            zclDoorLockOperationEventNotification_t cmd;
   2223            ZStatus_t status;
   2224          
   2225           if ( pCBs->pfnDoorLockOperationEventNotification )
   \   00000E   EC           MOV       A,R4
   \   00000F   2464         ADD       A,#0x64
   \   000011   F5..         MOV       ?V10,A
   \   000013   E4           CLR       A
   \   000014   3D           ADDC      A,R5
   \   000015   F5..         MOV       ?V11,A
   \   000017   85..82       MOV       DPL,?V10
   \   00001A   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zclClosures_ProcessInDoorLockOperationEventNo_1 & 0xFFFF
   2226           {
   2227              calculatedArrayLen = pInMsg->pData[9] + 1;  // add first byte of string
   \   000022   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000025   12....       LCALL     ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000028   2409         ADD       A,#0x9
   \   00002A   F582         MOV       DPL,A
   \   00002C   E4           CLR       A
   \   00002D   38           ADDC      A,R0
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   04           INC       A
   \   000032   F5..         MOV       ?V8,A
   2228          
   2229              cmd.pData = zcl_mem_alloc( calculatedArrayLen );
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   FA           MOV       R2,A
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003A   8B..         MOV       ?V1,R3
   \   00003C   A9..         MOV       R1,?V1
   \   00003E   7409         MOV       A,#0x9
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine67 & 0xFFFF
   2230              if ( !cmd.pData )
   \                     ??CrossCallReturnLabel_151:
   \   000046   7005         JNZ       ??zclClosures_ProcessInDoorLockOperationEventNo_2
   2231              {
   2232                return ( ZMemError );  // no memory
   \   000048   7910         MOV       R1,#0x10
   \   00004A   02....       LJMP      ??zclClosures_ProcessInDoorLockOperationEventNo_3 & 0xFFFF
   2233              }
   2234          
   2235              cmd.operationEventSource = pInMsg->pData[0];
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_2:
   \   00004D   12....       LCALL     ?Subroutine25 & 0xFFFF
   2236              cmd.operationEventCode = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_59:
   \   000050   C0E0         PUSH      A
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   D0E0         POP       A
   \   000059   12....       LCALL     ?Subroutine31 & 0xFFFF
   2237              cmd.userID = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_79:
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine70 & 0xFFFF
   2238              cmd.pin = pInMsg->pData[4];
   \                     ??CrossCallReturnLabel_156:
   \   000062   C0E0         PUSH      A
   \   000064   7404         MOV       A,#0x4
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   D0E0         POP       A
   \   00006B   12....       LCALL     ?Subroutine37 & 0xFFFF
   2239              cmd.zigBeeLocalTime = BUILD_UINT32( pInMsg->pData[5], pInMsg->pData[6], pInMsg->pData[7], pInMsg->pData[8] );
   \                     ??CrossCallReturnLabel_396:
   \   00006E   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000071   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000074   12....       LCALL     ?L_SHL
   \   000077   78..         MOV       R0,#?V0
   \   000079   79..         MOV       R1,#?V4
   \   00007B   12....       LCALL     ?L_ADD
   \   00007E   8A82         MOV       DPL,R2
   \   000080   8B83         MOV       DPH,R3
   \   000082   12....       LCALL     ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000085   12....       LCALL     ?L_SHL
   \   000088   78..         MOV       R0,#?V0
   \   00008A   79..         MOV       R1,#?V4
   \   00008C   12....       LCALL     ?L_ADD
   \   00008F   8A82         MOV       DPL,R2
   \   000091   8B83         MOV       DPH,R3
   \   000093   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000096   12....       LCALL     ?L_SHL
   \   000099   78..         MOV       R0,#?V0
   \   00009B   79..         MOV       R1,#?V4
   \   00009D   12....       LCALL     ?L_ADD
   \   0000A0   7405         MOV       A,#0x5
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL     ?Subroutine68 & 0xFFFF
   2240              offset = 9;
   \                     ??CrossCallReturnLabel_154:
   \   0000A8   7909         MOV       R1,#0x9
   2241              for ( i = 0; i < calculatedArrayLen; i++ )
   \   0000AA   7800         MOV       R0,#0x0
   \   0000AC   801A         SJMP      ??zclClosures_ProcessInDoorLockOperationEventNo_4
   2242              {
   2243                cmd.pData[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_5:
   \   0000AE   E9           MOV       A,R1
   \   0000AF   FA           MOV       R2,A
   \   0000B0   8E82         MOV       DPL,R6
   \   0000B2   8F83         MOV       DPH,R7
   \   0000B4   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   2244              }
   \                     ??CrossCallReturnLabel_465:
   \   0000B7   C0E0         PUSH      A
   \   0000B9   E8           MOV       A,R0
   \   0000BA   FA           MOV       R2,A
   \   0000BB   7409         MOV       A,#0x9
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000C3   D0E0         POP       A
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   09           INC       R1
   \   0000C7   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_4:
   \   0000C8   E8           MOV       A,R0
   \   0000C9   C3           CLR       C
   \   0000CA   95..         SUBB      A,?V8
   \   0000CC   40E0         JC        ??zclClosures_ProcessInDoorLockOperationEventNo_5
   2245          
   2246              status = ( pCBs->pfnDoorLockOperationEventNotification( pInMsg, &cmd ) );
   \   0000CE                ; Setup parameters for indirect call
   \   0000CE   AC..         MOV       R4,?XSP + 0
   \   0000D0   AD..         MOV       R5,?XSP + 1
   \   0000D2   AA..         MOV       R2,?V12
   \   0000D4   AB..         MOV       R3,?V13
   \   0000D6   85..82       MOV       DPL,?V10
   \   0000D9   85..83       MOV       DPH,?V11
   \   0000DC   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000DF   12....       LCALL     ?CALL_IND
   \   0000E2   E9           MOV       A,R1
   \   0000E3   FE           MOV       R6,A
   2247              zcl_mem_free( cmd.pData );
   \   0000E4                ; Setup parameters for call to function osal_mem_free
   \   0000E4   7409         MOV       A,#0x9
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   2248              return status;
   2249            }
   \                     ??CrossCallReturnLabel_392:
   \   0000EC   8002         SJMP      ??zclClosures_ProcessInDoorLockOperationEventNo_3
   2250           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_1:
   \   0000EE   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockOperationEventNo_3:
   \   0000F0   740B         MOV       A,#0xb
   \   0000F2   02....       LJMP      ??Subroutine191_0 & 0xFFFF
   2251          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine177_0
   \   000001                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine178_0
   \   000003                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   EC           MOV       A,R4
   \   000001   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   8882         MOV       DPL,R0
   \   00000C   8983         MOV       DPH,R1
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FB           MOV       R3,A
   \   000013   7402         MOV       A,#0x2
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000007   85..82       MOV       DPL,?XSP + 0
   \   00000A   85..83       MOV       DPH,?XSP + 1
   \   00000D   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000010   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   22           RET
   2252          
   2253          /*********************************************************************
   2254           * @fn      zclClosures_ProcessInDoorLockProgrammingEventNotification
   2255           *
   2256           * @brief   Process in the received Programming Event Notification cmd
   2257           *
   2258           * @param   pInMsg - pointer to the incoming message
   2259           * @param   pCBs - pointer to the application callbacks
   2260           *
   2261           * @return  ZStatus_t
   2262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2263          static ZStatus_t zclClosures_ProcessInDoorLockProgrammingEventNotification( zclIncoming_t *pInMsg,
   \                     zclClosures_ProcessInDoorLockProgrammingEventNotification:
   2264                                                                                      zclClosures_DoorLockAppCallbacks_t *pCBs )
   2265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   2266            uint8 i;
   2267            uint8 offset;
   2268            uint8 calculatedArrayLen;
   2269            zclDoorLockProgrammingEventNotification_t cmd;
   2270            ZStatus_t status;
   2271          
   2272            if ( pCBs->pfnDoorLockProgrammingEventNotification )
   \   00000E   EC           MOV       A,R4
   \   00000F   2466         ADD       A,#0x66
   \   000011   F5..         MOV       ?V8,A
   \   000013   E4           CLR       A
   \   000014   3D           ADDC      A,R5
   \   000015   F5..         MOV       ?V9,A
   \   000017   85..82       MOV       DPL,?V8
   \   00001A   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zclClosures_ProcessInDoorLockProgrammingEvent_1 & 0xFFFF
   2273            {
   2274              calculatedArrayLen = pInMsg->pData[11] + 1; // add first byte of string
   \   000022   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000025   F5..         MOV       ?V10,A
   2275          
   2276              cmd.pData = zcl_mem_alloc( calculatedArrayLen );
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ?Subroutine67 & 0xFFFF
   2277              if ( !cmd.pData )
   \                     ??CrossCallReturnLabel_152:
   \   000030   7005         JNZ       ??zclClosures_ProcessInDoorLockProgrammingEvent_2
   2278              {
   2279                return ( ZMemError );  // no memory
   \   000032   7910         MOV       R1,#0x10
   \   000034   02....       LJMP      ??zclClosures_ProcessInDoorLockProgrammingEvent_3 & 0xFFFF
   2280              }
   2281          
   2282              cmd.programEventSource = pInMsg->pData[0];
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_2:
   \   000037   12....       LCALL     ?Subroutine25 & 0xFFFF
   2283              cmd.programEventCode = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_60:
   \   00003A   C0E0         PUSH      A
   \   00003C   7401         MOV       A,#0x1
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   D0E0         POP       A
   \   000043   12....       LCALL     ?Subroutine31 & 0xFFFF
   2284              cmd.userID = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_80:
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ?Subroutine70 & 0xFFFF
   2285              cmd.pin = pInMsg->pData[4];
   \                     ??CrossCallReturnLabel_157:
   \   00004C   C0E0         PUSH      A
   \   00004E   7404         MOV       A,#0x4
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   D0E0         POP       A
   \   000055   12....       LCALL     ?Subroutine82 & 0xFFFF
   2286              cmd.userType = pInMsg->pData[5];
   \                     ??CrossCallReturnLabel_184:
   \   000058   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   C0E0         PUSH      A
   \   000063   7405         MOV       A,#0x5
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   D0E0         POP       A
   \   00006A   12....       LCALL     ?Subroutine61 & 0xFFFF
   2287              cmd.userStatus = pInMsg->pData[6];
   \                     ??CrossCallReturnLabel_329:
   \   00006D   2406         ADD       A,#0x6
   \   00006F   F582         MOV       DPL,A
   \   000071   E4           CLR       A
   \   000072   38           ADDC      A,R0
   \   000073   F583         MOV       DPH,A
   \   000075   E0           MOVX      A,@DPTR
   \   000076   C0E0         PUSH      A
   \   000078   7406         MOV       A,#0x6
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   D0E0         POP       A
   \   00007F   12....       LCALL     ?Subroutine37 & 0xFFFF
   2288              cmd.zigBeeLocalTime = BUILD_UINT32( pInMsg->pData[7], pInMsg->pData[8], pInMsg->pData[9], pInMsg->pData[10] );
   \                     ??CrossCallReturnLabel_397:
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   00008C   12....       LCALL     ?L_SHL
   \   00008F   78..         MOV       R0,#?V0
   \   000091   79..         MOV       R1,#?V4
   \   000093   12....       LCALL     ?L_ADD
   \   000096   8A82         MOV       DPL,R2
   \   000098   8B83         MOV       DPH,R3
   \   00009A   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00009D   12....       LCALL     ?L_SHL
   \   0000A0   78..         MOV       R0,#?V0
   \   0000A2   79..         MOV       R1,#?V4
   \   0000A4   12....       LCALL     ?L_ADD
   \   0000A7   8A82         MOV       DPL,R2
   \   0000A9   8B83         MOV       DPH,R3
   \   0000AB   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   0000AE   12....       LCALL     ?L_SHL
   \   0000B1   78..         MOV       R0,#?V0
   \   0000B3   79..         MOV       R1,#?V4
   \   0000B5   12....       LCALL     ?L_ADD
   \   0000B8   7407         MOV       A,#0x7
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL     ?Subroutine68 & 0xFFFF
   2289              offset = 11;
   \                     ??CrossCallReturnLabel_155:
   \   0000C0   790B         MOV       R1,#0xb
   2290              for ( i = 0; i < calculatedArrayLen; i++ )
   \   0000C2   7800         MOV       R0,#0x0
   \   0000C4   801A         SJMP      ??zclClosures_ProcessInDoorLockProgrammingEvent_4
   2291              {
   2292                cmd.pData[i] = pInMsg->pData[offset++];
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_5:
   \   0000C6   E9           MOV       A,R1
   \   0000C7   FA           MOV       R2,A
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   2293              }
   \                     ??CrossCallReturnLabel_466:
   \   0000CF   C0E0         PUSH      A
   \   0000D1   E8           MOV       A,R0
   \   0000D2   FA           MOV       R2,A
   \   0000D3   740B         MOV       A,#0xb
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000DB   D0E0         POP       A
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   09           INC       R1
   \   0000DF   08           INC       R0
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_4:
   \   0000E0   E8           MOV       A,R0
   \   0000E1   C3           CLR       C
   \   0000E2   95..         SUBB      A,?V10
   \   0000E4   40E0         JC        ??zclClosures_ProcessInDoorLockProgrammingEvent_5
   2294          
   2295              status = ( pCBs->pfnDoorLockProgrammingEventNotification( pInMsg, &cmd ) );
   \   0000E6                ; Setup parameters for indirect call
   \   0000E6   AC..         MOV       R4,?XSP + 0
   \   0000E8   AD..         MOV       R5,?XSP + 1
   \   0000EA   AA..         MOV       R2,?V12
   \   0000EC   AB..         MOV       R3,?V13
   \   0000EE   85..82       MOV       DPL,?V8
   \   0000F1   85..83       MOV       DPH,?V9
   \   0000F4   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   0000F7   12....       LCALL     ?CALL_IND
   \   0000FA   E9           MOV       A,R1
   \   0000FB   FE           MOV       R6,A
   2296              zcl_mem_free( cmd.pData );
   \   0000FC                ; Setup parameters for call to function osal_mem_free
   \   0000FC   740B         MOV       A,#0xb
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   2297              return status;
   2298            }
   \                     ??CrossCallReturnLabel_393:
   \   000104   8002         SJMP      ??zclClosures_ProcessInDoorLockProgrammingEvent_3
   2299          
   2300           return ( ZFailure );
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_1:
   \   000106   7901         MOV       R1,#0x1
   \                     ??zclClosures_ProcessInDoorLockProgrammingEvent_3:
   \   000108   02....       LJMP      ?Subroutine2 & 0xFFFF
   2301          }
   2302          
   2303          #endif //ZCL_DOORLOCK_EXT
   2304          
   2305          /*********************************************************************
   2306           * @fn      zclClosures_SendDoorLockRequest
   2307           *
   2308           * @brief   Call to send out a Door Lock Lock/Unlock/Toggle Command
   2309           *
   2310           * @param   srcEP - Sending application's endpoint
   2311           * @param   dstAddr - where you want the message to go
   2312           * @param   cmd - COMMAND_CLOSURES_LOCK_DOOR, COMMAND_CLOSURES_UNLOCK_DOOR, COMMAND_CLOSURES_TOGGLE_DOOR
   2313           * @param   pPayload:
   2314           *           aPinRfidCode - PIN/RFID code in ZCL Octet String Format
   2315           * @param   disableDefaultRsp - decides default response is necessary or not
   2316           * @param   seqNum - sequence number of the command packet
   2317           *
   2318           * @return  ZStatus_t
   2319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2320          ZStatus_t zclClosures_SendDoorLockRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockRequest:
   2321                                                     zclDoorLock_t *pPayload,
   2322                                                     uint8 disableDefaultRsp, uint8 seqNum )
   2323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V2,R5
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V5,A
   2324            uint8 i;
   2325            uint8 *pBuf;  // variable length payload
   2326            uint8 calculatedBufSize;
   2327            ZStatus_t status;
   2328          
   2329            // first octet of PIN/RFID Code variable string identifies its length
   2330            calculatedBufSize = pPayload->pPinRfidCode[0] + 1;  // add first byte of string
   \   00001B   85..82       MOV       DPL,?V4
   \   00001E   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000021   F5..         MOV       ?V7,A
   2331          
   2332            pBuf = zcl_mem_alloc( calculatedBufSize );
   \   000023   FE           MOV       R6,A
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   FA           MOV       R2,A
   \   000025   7B00         MOV       R3,#0x0
   \   000027   12....       LCALL     ??Subroutine200_0 & 0xFFFF
   2333            if ( !pBuf )
   \                     ??CrossCallReturnLabel_526:
   \   00002A   7005         JNZ       ??zclClosures_SendDoorLockRequest_0
   2334            {
   2335              return ( ZMemError );  // no memory
   \   00002C   7910         MOV       R1,#0x10
   \   00002E   02....       LJMP      ??CrossCallReturnLabel_436 & 0xFFFF
   2336            }
   2337          
   2338            // over-the-air is always little endian. Break into a byte stream.
   2339            for ( i = 0; i < calculatedBufSize; i++ )
   \                     ??zclClosures_SendDoorLockRequest_0:
   \   000031   7A00         MOV       R2,#0x0
   \   000033   801B         SJMP      ??zclClosures_SendDoorLockRequest_1
   2340            {
   2341              pBuf[i] = pPayload->pPinRfidCode[i];
   \                     ??zclClosures_SendDoorLockRequest_2:
   \   000035   EA           MOV       A,R2
   \   000036   F8           MOV       R0,A
   \   000037   85..82       MOV       DPL,?V4
   \   00003A   85..83       MOV       DPH,?V5
   \   00003D   12....       LCALL     ?Subroutine51 & 0xFFFF
   2342            }
   \                     ??CrossCallReturnLabel_112:
   \   000040   C0E0         PUSH      A
   \   000042   E5..         MOV       A,?V0
   \   000044   28           ADD       A,R0
   \   000045   F582         MOV       DPL,A
   \   000047   E4           CLR       A
   \   000048   35..         ADDC      A,?V1
   \   00004A   F583         MOV       DPH,A
   \   00004C   D0E0         POP       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   0A           INC       R2
   \                     ??zclClosures_SendDoorLockRequest_1:
   \   000050   EA           MOV       A,R2
   \   000051   C3           CLR       C
   \   000052   95..         SUBB      A,?V7
   \   000054   40DF         JC        ??zclClosures_SendDoorLockRequest_2
   2343          
   2344            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2345                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2346                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   000056                ; Setup parameters for call to function zcl_SendCommand
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   8E..         MOV       ?V4,R6
   \   00005D   75..00       MOV       ?V5,#0x0
   \   000060   78..         MOV       R0,#?V4
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   741A         MOV       A,#0x1a
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F5..         MOV       ?V4,A
   \   00006D   78..         MOV       R0,#?V4
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000072   E4           CLR       A
   \   000073   F5..         MOV       ?V4,A
   \   000075   78..         MOV       R0,#?V4
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   E5..         MOV       A,?V2
   \   00007C   F5..         MOV       ?V4,A
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000083   75..00       MOV       ?V4,#0x0
   \   000086   78..         MOV       R0,#?V4
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008B   75..01       MOV       ?V4,#0x1
   \   00008E   78..         MOV       R0,#?V4
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   E5..         MOV       A,?V6
   \   000095   F5..         MOV       ?V4,A
   \   000097   78..         MOV       R0,#?V4
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009C   7C01         MOV       R4,#0x1
   \   00009E   7D01         MOV       R5,#0x1
   \   0000A0   AA..         MOV       R2,?V8
   \   0000A2   AB..         MOV       R3,?V9
   \   0000A4   A9..         MOV       R1,?V3
   \   0000A6   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AC   E9           MOV       A,R1
   \   0000AD   FE           MOV       R6,A
   2347            zcl_mem_free( pBuf );
   \   0000AE                ; Setup parameters for call to function osal_mem_free
   \   0000AE   AA..         MOV       R2,?V0
   \   0000B0   AB..         MOV       R3,?V1
   \   0000B2   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   2348            return status;
   \                     ??CrossCallReturnLabel_436:
   \   0000B5   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   2349          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000003   EE           MOV       A,R6
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine183_0
   \   000002                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET
   2350          
   2351          /*********************************************************************
   2352           * @fn      zclClosures_SendDoorLockUnlockTimeoutRequest
   2353           *
   2354           * @brief   Call to send out a Unlock with Timeout Command
   2355           *
   2356           * @param   srcEP - Sending application's endpoint
   2357           * @param   dstAddr - where you want the message to go
   2358           * @param   pPayload:
   2359           *           timeout - The timeout in seconds
   2360           *           aPinRfidCode - PIN/RFID code in ZCL Octet String Format
   2361           * @param   disableDefaultRsp - decides default response is necessary or not
   2362           * @param   seqNum - sequence number of the command packet
   2363           *
   2364           * @return  ZStatus_t
   2365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2366          ZStatus_t zclClosures_SendDoorLockUnlockTimeoutRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockUnlockTimeoutRequest:
   2367                                                                  zclDoorLockUnlockTimeout_t *pPayload,
   2368                                                                  uint8 disableDefaultRsp, uint8 seqNum )
   2369          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   2370            uint8 i;
   2371            uint8 *pBuf;  // variable length payload
   2372            uint8 offset;
   2373            uint8 calculatedArrayLen;
   2374            uint8 calculatedBufSize;
   2375            ZStatus_t status;
   2376          
   2377            // first octet of PIN/RFID Code variable string identifies its length
   2378            calculatedArrayLen = pPayload->pPinRfidCode[0] + 1;  // add first byte of string
   \   00000F   EC           MOV       A,R4
   \   000010   2402         ADD       A,#0x2
   \   000012   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000015   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000018   F5..         MOV       ?V3,A
   2379          
   2380            // determine total size of buffer
   2381            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_UNLOCK_TIMEOUT;
   \   00001A   7402         MOV       A,#0x2
   \   00001C   25..         ADD       A,?V3
   2382          
   2383            pBuf = zcl_mem_alloc( calculatedBufSize );
   \   00001E   12....       LCALL     ?Subroutine129 & 0xFFFF
   2384            if ( !pBuf )
   \                     ??CrossCallReturnLabel_271:
   \   000021   7004         JNZ       ??zclClosures_SendDoorLockUnlockTimeoutRequest_0
   2385            {
   2386              return ( ZMemError );  // no memory
   \   000023   7910         MOV       R1,#0x10
   \   000025   8075         SJMP      ??CrossCallReturnLabel_431
   2387            }
   2388          
   2389            // over-the-air is always little endian. Break into a byte stream.
   2390            pBuf[0] = LO_UINT16(pPayload->timeout);
   \                     ??zclClosures_SendDoorLockUnlockTimeoutRequest_0:
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000030   12....       LCALL     ?Subroutine86 & 0xFFFF
   2391            pBuf[1] = HI_UINT16(pPayload->timeout);
   \                     ??CrossCallReturnLabel_193:
   \   000033   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000036   A3           INC       DPTR
   \   000037   F0           MOVX      @DPTR,A
   2392            offset = 2;
   \   000038   7902         MOV       R1,#0x2
   2393            for ( i = 0; i < calculatedArrayLen; i++ )
   \   00003A   7800         MOV       R0,#0x0
   \   00003C   800D         SJMP      ??zclClosures_SendDoorLockUnlockTimeoutRequest_1
   2394            {
   2395              pBuf[offset++] = pPayload->pPinRfidCode[i];
   \                     ??zclClosures_SendDoorLockUnlockTimeoutRequest_2:
   \   00003E   12....       LCALL     ?Subroutine10 & 0xFFFF
   2396            }
   \                     ??CrossCallReturnLabel_468:
   \   000041   C0E0         PUSH      A
   \   000043   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000046   D0E0         POP       A
   \   000048   F0           MOVX      @DPTR,A
   \   000049   09           INC       R1
   \   00004A   08           INC       R0
   \                     ??zclClosures_SendDoorLockUnlockTimeoutRequest_1:
   \   00004B   E8           MOV       A,R0
   \   00004C   C3           CLR       C
   \   00004D   95..         SUBB      A,?V3
   \   00004F   40ED         JC        ??zclClosures_SendDoorLockUnlockTimeoutRequest_2
   2397          
   2398            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2399                                      COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2400                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   000051                ; Setup parameters for call to function zcl_SendCommand
   \   000051   78..         MOV       R0,#?V6
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   78..         MOV       R0,#?V8
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7419         MOV       A,#0x19
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   E4           CLR       A
   \   000067   F5..         MOV       ?V0,A
   \   000069   F5..         MOV       ?V1,A
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   741B         MOV       A,#0x1b
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007B   75..00       MOV       ?V0,#0x0
   \   00007E   78..         MOV       R0,#?V0
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000083   75..01       MOV       ?V0,#0x1
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008B   75..03       MOV       ?V0,#0x3
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   \   000099   12....       LCALL     ?Subroutine93 & 0xFFFF
   2401            zcl_mem_free( pBuf );
   2402            return status;
   \                     ??CrossCallReturnLabel_431:
   \   00009C   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   2403          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV       R2,?V6
   \   000004   AB..         MOV       R3,?V7
   \   000006                REQUIRE ??Subroutine182_0
   \   000006                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   E9           MOV       A,R1
   \   000001   FA           MOV       R2,A
   \   000002   E5..         MOV       A,?V6
   \   000004   2A           ADD       A,R2
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine189_0
   \   000001                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV       A,R0
   \   000001   FA           MOV       R2,A
   \   000002   85..82       MOV       DPL,?V4
   \   000005   85..83       MOV       DPH,?V5
   \   000008                REQUIRE ??Subroutine190_0
   \   000008                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   88..         MOV       ?V4,R0
   \   000006   F5..         MOV       ?V5,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   F5..         MOV       ?V8,A
   \   000002   75..00       MOV       ?V9,#0x0
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   FA           MOV       R2,A
   \   000006   AB..         MOV       R3,?V9
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000B   8A..         MOV       ?V6,R2
   \   00000D   8B..         MOV       ?V7,R3
   \   00000F   EA           MOV       A,R2
   \   000010   4B           ORL       A,R3
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   7C01         MOV       R4,#0x1
   \   000002   7D01         MOV       R5,#0x1
   \   000004   EE           MOV       A,R6
   \   000005   FA           MOV       R2,A
   \   000006   EF           MOV       A,R7
   \   000007   FB           MOV       R3,A
   \   000008   A9..         MOV       R1,?V2
   \   00000A                REQUIRE ??Subroutine196_0
   \   00000A                ; // Fall through to label ??Subroutine196_0
   2404          
   2405          /*********************************************************************
   2406           * @fn      zclClosures_SendDoorLockGetLogRecordRequest
   2407           *
   2408           * @brief   Call to send out a Get Log Record Command
   2409           *
   2410           * @param   srcEP - Sending application's endpoint
   2411           * @param   dstAddr - where you want the message to go
   2412           * @param   logIndex - Log number between 1 - [max log attribute]
   2413           * @param   disableDefaultRsp - decides default response is necessary or not
   2414           * @param   seqNum - sequence number of the command packet
   2415           *
   2416           * @return  ZStatus_t
   2417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2418          ZStatus_t zclClosures_SendDoorLockGetLogRecordRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetLogRecordRequest:
   2419                                                                 uint16 logIndex, uint8 disableDefaultRsp, uint8 seqNum )
   2420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2421            uint8 payload[PAYLOAD_LEN_GET_LOG_RECORD];
   2422          
   2423            payload[0] = LO_UINT16( logIndex );
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   2424            payload[1] = HI_UINT16( logIndex );
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine63 & 0xFFFF
   2425          
   2426            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2427                                    COMMAND_CLOSURES_GET_LOG_RECORD, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2428                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_GET_LOG_RECORD, payload );
   \                     ??CrossCallReturnLabel_489:
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV       ?V0,#0x2
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V0,A
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV       A,#0x13
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   75..00       MOV       ?V0,#0x0
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   75..01       MOV       ?V0,#0x1
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   75..04       MOV       ?V0,#0x4
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000060   7C01         MOV       R4,#0x1
   \   000062   7D01         MOV       R5,#0x1
   \   000064   EE           MOV       A,R6
   \   000065   F9           MOV       R1,A
   \   000066   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   7402         MOV       A,#0x2
   \   00006E   02....       LJMP      ??Subroutine197_0 & 0xFFFF
   2429          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   ED           MOV       A,R5
   \   000001                REQUIRE ??Subroutine195_0
   \   000001                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
   2430          
   2431          /*********************************************************************
   2432           * @fn      zclClosures_SendDoorLockSetPINCodeRequest
   2433           *
   2434           * @brief   Call to send out a Set PIN Code Command
   2435           *
   2436           * @param   srcEP - Sending application's endpoint
   2437           * @param   dstAddr - where you want the message to go
   2438           * @param   pPayload:
   2439           *           userID - User ID is between 0 - [# PINs User supported attribute]
   2440           *           userStatus - Used to indicate what the status is for a specific User ID
   2441           *           userType - Used to indicate what the type is for a specific User ID
   2442           *           pPIN - A ZigBee string indicating the PIN code used to create the event on the door lock
   2443           * @param   disableDefaultRsp - decides default response is necessary or not
   2444           * @param   seqNum - sequence number of the command packet
   2445           *
   2446           * @return  ZStatus_t
   2447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2448          ZStatus_t zclClosures_SendDoorLockSetPINCodeRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetPINCodeRequest:
   2449                                                               zclDoorLockSetPINCode_t *pPayload,
   2450                                                               uint8 disableDefaultRsp, uint8 seqNum )
   2451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   2452            uint8 i;
   2453            uint8 *pBuf;  // variable length payload
   2454            uint8 offset;
   2455            uint8 calculatedArrayLen;
   2456            uint8 calculatedBufSize;
   2457            ZStatus_t status;
   2458          
   2459            // first octet of PIN/RFID Code variable string identifies its length
   2460            calculatedArrayLen = pPayload->pPIN[0] + 1;  // add first byte of string
   2461          
   2462            // determine the total buffer size
   2463            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_SET_PIN_CODE;
   2464          
   2465            pBuf = zcl_mem_alloc( calculatedBufSize );
   2466            if ( !pBuf )
   \                     ??CrossCallReturnLabel_4:
   \   00000D   7004         JNZ       ??zclClosures_SendDoorLockSetPINCodeRequest_0
   2467            {
   2468              return ( ZMemError );  // no memory
   \   00000F   7910         MOV       R1,#0x10
   \   000011   8063         SJMP      ??CrossCallReturnLabel_432
   2469            }
   2470          
   2471            // over-the-air is always little endian. Break into a byte stream.
   2472            pBuf[0] = LO_UINT16(pPayload->userID);
   \                     ??zclClosures_SendDoorLockSetPINCodeRequest_0:
   \   000013   12....       LCALL     ?Subroutine9 & 0xFFFF
   2473            pBuf[1] = HI_UINT16(pPayload->userID);
   2474            pBuf[2] = pPayload->userStatus;
   2475            pBuf[3] = pPayload->userType;
   2476            offset = 4;
   2477            for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_0:
   \   000016   800D         SJMP      ??zclClosures_SendDoorLockSetPINCodeRequest_1
   2478            {
   2479              pBuf[offset++] = pPayload->pPIN[i];
   \                     ??zclClosures_SendDoorLockSetPINCodeRequest_2:
   \   000018   12....       LCALL     ?Subroutine10 & 0xFFFF
   2480            }
   \                     ??CrossCallReturnLabel_469:
   \   00001B   C0E0         PUSH      A
   \   00001D   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000020   D0E0         POP       A
   \   000022   F0           MOVX      @DPTR,A
   \   000023   09           INC       R1
   \   000024   08           INC       R0
   \                     ??zclClosures_SendDoorLockSetPINCodeRequest_1:
   \   000025   E8           MOV       A,R0
   \   000026   C3           CLR       C
   \   000027   95..         SUBB      A,?V3
   \   000029   40ED         JC        ??zclClosures_SendDoorLockSetPINCodeRequest_2
   2481          
   2482          
   2483            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2484                                      COMMAND_CLOSURES_SET_PIN_CODE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2485                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   00002B                ; Setup parameters for call to function zcl_SendCommand
   \   00002B   78..         MOV       R0,#?V6
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   78..         MOV       R0,#?V8
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   741A         MOV       A,#0x1a
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000040   E4           CLR       A
   \   000041   F5..         MOV       ?V0,A
   \   000043   F5..         MOV       ?V1,A
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   741C         MOV       A,#0x1c
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000055   75..00       MOV       ?V0,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   75..01       MOV       ?V0,#0x1
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   75..05       MOV       ?V0,#0x5
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006D   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073   12....       LCALL     ?Subroutine93 & 0xFFFF
   2486            zcl_mem_free( pBuf );
   2487            return status;
   \                     ??CrossCallReturnLabel_432:
   \   000076   02....       LJMP      ?Subroutine3 & 0xFFFF
   2488          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   89..         MOV       ?V2,R1
   \   000002   EA           MOV       A,R2
   \   000003   FE           MOV       R6,A
   \   000004   EB           MOV       A,R3
   \   000005   FF           MOV       R7,A
   \   000006   8C..         MOV       ?V0,R4
   \   000008   8D..         MOV       ?V1,R5
   \   00000A   EC           MOV       A,R4
   \   00000B   2404         ADD       A,#0x4
   \   00000D   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000010   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000013   F5..         MOV       ?V3,A
   \   000015   7404         MOV       A,#0x4
   \   000017   25..         ADD       A,?V3
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000023   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine193_0
   \   000002                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000009   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   00000C   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   00000F   A3           INC       DPTR
   \   000010   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000018   85..82       MOV       DPL,?V0
   \   00001B   85..83       MOV       DPH,?V1
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000023   7904         MOV       R1,#0x4
   \   000025   7800         MOV       R0,#0x0
   \   000027   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine194_0
   \   000001                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine198_0
   \   000005                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
   2489          
   2490          /*********************************************************************
   2491           * @fn      zclClosures_SendDoorLockUserIDRequest
   2492           *
   2493           * @brief   Call to send out a User ID Command
   2494           *
   2495           * @param   srcEP - Sending application's endpoint
   2496           * @param   dstAddr - where you want the message to go
   2497           * @param   cmd - COMMAND_CLOSURES_GET_PIN_CODE, COMMAND_CLOSURES_CLEAR_PIN_CODE,
   2498           *                COMMAND_CLOSURES_GET_USER_STATUS, COMMAND_CLOSURES_GET_USER_TYPE,
   2499           *                COMMAND_CLOSURES_GET_RFID_CODE, COMMAND_CLOSURES_CLEAR_RFID_CODE
   2500           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2501           * @param   disableDefaultRsp - decides default response is necessary or not
   2502           * @param   seqNum - sequence number of the command packet
   2503           *
   2504           * @return  ZStatus_t
   2505           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2506          ZStatus_t zclClosures_SendDoorLockUserIDRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockUserIDRequest:
   2507                                                           uint16 userID, uint8 disableDefaultRsp, uint8 seqNum )
   2508          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   740E         MOV       A,#0xe
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ??Subroutine184_0 & 0xFFFF
   2509            uint8 payload[PAYLOAD_LEN_USER_ID];
   2510          
   2511            payload[0] = LO_UINT16(userID);
   \                     ??CrossCallReturnLabel_445:
   \   000014   E8           MOV       A,R0
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   F0           MOVX      @DPTR,A
   2512            payload[1] = HI_UINT16(userID);
   \   00001C   7401         MOV       A,#0x1
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E9           MOV       A,R1
   \   000022   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   2513          
   2514            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2515                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2516                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_USER_ID, payload );
   \                     ??CrossCallReturnLabel_519:
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..02       MOV       ?V2,#0x2
   \   00002B   75..00       MOV       ?V3,#0x0
   \   00002E   78..         MOV       R0,#?V2
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7414         MOV       A,#0x14
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   E4           CLR       A
   \   00003F   F5..         MOV       ?V2,A
   \   000041   78..         MOV       R0,#?V2
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   ED           MOV       A,R5
   \   000047   F5..         MOV       ?V1,A
   \   000049   78..         MOV       R0,#?V1
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004E   75..00       MOV       ?V1,#0x0
   \   000051   78..         MOV       R0,#?V1
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   75..01       MOV       ?V1,#0x1
   \   000059   78..         MOV       R0,#?V1
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005E   EC           MOV       A,R4
   \   00005F   F5..         MOV       ?V1,A
   \   000061   78..         MOV       R0,#?V1
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   7C01         MOV       R4,#0x1
   \   000068   7D01         MOV       R5,#0x1
   \   00006A   A9..         MOV       R1,?V0
   \   00006C   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   7402         MOV       A,#0x2
   \   000074   80..         SJMP      ??Subroutine186_0
   2517          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V1,A
   \   000003   78..         MOV       R0,#?V1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V2,R0
   \   000007   89..         MOV       ?V3,R1
   \   000009   78..         MOV       R0,#?V2
   \   00000B   22           RET
   2518          
   2519          /*********************************************************************
   2520           * @fn      zclClosures_SendDoorLockClearAllCodesRequest
   2521           *
   2522           * @brief   Call to send out a Clear All Codes Command
   2523           *
   2524           * @param   srcEP - Sending application's endpoint
   2525           * @param   dstAddr - where you want the message to go
   2526           * @param   cmd - COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES, COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES
   2527           * @param   disableDefaultRsp - decides default response is necessary or not
   2528           * @param   seqNum - sequence number of the command packet
   2529           *
   2530           * @return  ZStatus_t
   2531           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2532          ZStatus_t zclClosures_SendDoorLockClearAllCodesRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockClearAllCodesRequest:
   2533                                                                  uint8 disableDefaultRsp, uint8 seqNum )
   2534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2535            // no payload
   2536          
   2537            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2538                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2539                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V2,A
   \   000008   F5..         MOV       ?V3,A
   \   00000A   78..         MOV       R0,#?V2
   \   00000C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000F   78..         MOV       R0,#?V2
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7410         MOV       A,#0x10
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   ED           MOV       A,R5
   \   000025   F5..         MOV       ?V1,A
   \   000027   78..         MOV       R0,#?V1
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002C   75..00       MOV       ?V1,#0x0
   \   00002F   78..         MOV       R0,#?V1
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000034   75..01       MOV       ?V1,#0x1
   \   000037   78..         MOV       R0,#?V1
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003C   EC           MOV       A,R4
   \   00003D   F5..         MOV       ?V1,A
   \   00003F   78..         MOV       R0,#?V1
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000044   7C01         MOV       R4,#0x1
   \   000046   7D01         MOV       R5,#0x1
   \   000048   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   00004B   80..         SJMP      ??Subroutine186_0
   2540          }
   2541          
   2542          /*********************************************************************
   2543           * @fn      zclClosures_SendDoorLockSetUserStatusRequest
   2544           *
   2545           * @brief   Call to send out a Set User Status Command
   2546           *
   2547           * @param   srcEP - Sending application's endpoint
   2548           * @param   dstAddr - where you want the message to go
   2549           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2550           * @param   userStatus - Used to indicate what the status is for a specific User ID
   2551           * @param   disableDefaultRsp - decides default response is necessary or not
   2552           * @param   seqNum - sequence number of the command packet
   2553           *
   2554           * @return  ZStatus_t
   2555           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2556          ZStatus_t zclClosures_SendDoorLockSetUserStatusRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetUserStatusRequest:
   2557                                                                  uint16 userID, uint8 userStatus,
   2558                                                                  uint8 disableDefaultRsp, uint8 seqNum )
   2559          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2560            uint8 payload[PAYLOAD_LEN_SET_USER_STATUS];
   2561          
   2562            payload[0] = LO_UINT16(userID);
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   2563            payload[1] = HI_UINT16(userID);
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   2564            payload[2] = userStatus;
   \   00001B   740D         MOV       A,#0xd
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   2565          
   2566            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2567                                    COMMAND_CLOSURES_SET_USER_STATUS, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2568                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_USER_STATUS, payload );
   \                     ??CrossCallReturnLabel_491:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V0,#0x3
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7415         MOV       A,#0x15
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..00       MOV       ?V0,#0x0
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   75..01       MOV       ?V0,#0x1
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   75..09       MOV       ?V0,#0x9
   \   00006C   02....       LJMP      ?Subroutine4 & 0xFFFF
   2569          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   7C01         MOV       R4,#0x1
   \   000007   7D01         MOV       R5,#0x1
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   00000E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000011   7403         MOV       A,#0x3
   \   000013                REQUIRE ??Subroutine197_0
   \   000013                ; // Fall through to label ??Subroutine197_0
   2570          
   2571          /*********************************************************************
   2572           * @fn      zclClosures_SendDoorLockSetWeekDayScheduleRequest
   2573           *
   2574           * @brief   Call to send out a Set Week Day Schedule Command
   2575           *
   2576           * @param   srcEP - Sending application's endpoint
   2577           * @param   dstAddr - where you want the message to go
   2578           * @param   scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   2579           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2580           * @param   daysMask - Bitmask of the effective days in the order XSFTWTMS
   2581           * @param   startHour - The start hour of the Week Day Schedule: 0-23
   2582           * @param   startMinute - The start minute of the Week Day Schedule: 0-59
   2583           * @param   endHour - The end hour of the Week Day Schedule: 0-23
   2584           * @param   endMinute - The end minute of the Week Day Schedule: 0-59
   2585           * @param   disableDefaultRsp - decides default response is necessary or not
   2586           * @param   seqNum - sequence number of the command packet
   2587           *
   2588           * @return  ZStatus_t
   2589           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2590          ZStatus_t zclClosures_SendDoorLockSetWeekDayScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetWeekDayScheduleRequest:
   2591                                                                       uint8 scheduleID, uint16 userID,
   2592                                                                       uint8 daysMask, uint8 startHour,
   2593                                                                       uint8 startMinute, uint8 endHour,
   2594                                                                       uint8 endMinute, uint8 disableDefaultRsp, uint8 seqNum )
   2595          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   2596            uint8 payload[PAYLOAD_LEN_SET_WEEK_DAY_SCHEDULE];
   2597          
   2598            payload[0] = scheduleID;
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7414         MOV       A,#0x14
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine53 & 0xFFFF
   2599            payload[1] = LO_UINT16(userID);
   \                     ??CrossCallReturnLabel_115:
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E8           MOV       A,R0
   \   000020   F0           MOVX      @DPTR,A
   2600            payload[2] = HI_UINT16(userID);
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E9           MOV       A,R1
   \   000027   F0           MOVX      @DPTR,A
   2601            payload[3] = daysMask;
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   ED           MOV       A,R5
   \   00002E   F0           MOVX      @DPTR,A
   2602            payload[4] = startHour;
   \   00002F   7416         MOV       A,#0x16
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C0E0         PUSH      A
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   2603            payload[5] = startMinute;
   \   00003F   7417         MOV       A,#0x17
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   E0           MOVX      A,@DPTR
   \   000045   C0E0         PUSH      A
   \   000047   7405         MOV       A,#0x5
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   D0E0         POP       A
   \   00004E   F0           MOVX      @DPTR,A
   2604            payload[6] = endHour;
   \   00004F   7418         MOV       A,#0x18
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   7406         MOV       A,#0x6
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   F0           MOVX      @DPTR,A
   2605            payload[7] = endMinute;
   \   00005F   7419         MOV       A,#0x19
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   E0           MOVX      A,@DPTR
   \   000065   C0E0         PUSH      A
   \   000067   7407         MOV       A,#0x7
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   D0E0         POP       A
   \   00006E   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   2606          
   2607            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2608                                    COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2609                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_WEEK_DAY_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_520:
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   75..08       MOV       ?V2,#0x8
   \   000077   75..00       MOV       ?V3,#0x0
   \   00007A   78..         MOV       R0,#?V2
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   741F         MOV       A,#0x1f
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008A   E4           CLR       A
   \   00008B   F5..         MOV       ?V2,A
   \   00008D   78..         MOV       R0,#?V2
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   7421         MOV       A,#0x21
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009D   75..00       MOV       ?V1,#0x0
   \   0000A0   78..         MOV       R0,#?V1
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   75..01       MOV       ?V1,#0x1
   \   0000A8   78..         MOV       R0,#?V1
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   75..0B       MOV       ?V1,#0xb
   \   0000B0   78..         MOV       R0,#?V1
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   7C01         MOV       R4,#0x1
   \   0000B7   7D01         MOV       R5,#0x1
   \   0000B9   A9..         MOV       R1,?V0
   \   0000BB   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C1   02....       LJMP      ?Subroutine8 & 0xFFFF
   2610          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET
   2611          
   2612          /*********************************************************************
   2613           * @fn      zclClosures_SendDoorLockScheduleRequest
   2614           *
   2615           * @brief   Call to send out a Schedule Command
   2616           *
   2617           * @param   srcEP - Sending application's endpoint
   2618           * @param   dstAddr - where you want the message to go
   2619           * @param   cmd - COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE, COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE,
   2620           *                COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE, COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE
   2621           * @param   scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   2622           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2623           * @param   disableDefaultRsp - decides default response is necessary or not
   2624           * @param   seqNum - sequence number of the command packet
   2625           *
   2626           * @return  ZStatus_t
   2627           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2628          ZStatus_t zclClosures_SendDoorLockScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockScheduleRequest:
   2629                                                             uint8 scheduleID, uint16 userID,
   2630                                                             uint8 disableDefaultRsp, uint8 seqNum )
   2631          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2632            uint8 payload[PAYLOAD_LEN_SCHEDULE];
   2633          
   2634            payload[0] = scheduleID;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   740F         MOV       A,#0xf
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine53 & 0xFFFF
   2635            payload[1] = LO_UINT16(userID);
   \                     ??CrossCallReturnLabel_116:
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E8           MOV       A,R0
   \   000020   F0           MOVX      @DPTR,A
   2636            payload[2] = HI_UINT16(userID);
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E9           MOV       A,R1
   \   000027   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   2637          
   2638            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2639                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2640                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_521:
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..03       MOV       ?V2,#0x3
   \   000030   75..00       MOV       ?V3,#0x0
   \   000033   78..         MOV       R0,#?V2
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7416         MOV       A,#0x16
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000043   E4           CLR       A
   \   000044   F5..         MOV       ?V2,A
   \   000046   78..         MOV       R0,#?V2
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   7418         MOV       A,#0x18
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   75..00       MOV       ?V1,#0x0
   \   000059   78..         MOV       R0,#?V1
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005E   75..01       MOV       ?V1,#0x1
   \   000061   78..         MOV       R0,#?V1
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   EC           MOV       A,R4
   \   000067   F5..         MOV       ?V1,A
   \   000069   78..         MOV       R0,#?V1
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006E   7C01         MOV       R4,#0x1
   \   000070   7D01         MOV       R5,#0x1
   \   000072   EE           MOV       A,R6
   \   000073   F9           MOV       R1,A
   \   000074   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007A   7403         MOV       A,#0x3
   \   00007C   02....       LJMP      ??Subroutine186_0 & 0xFFFF
   2641          }
   2642          
   2643          /*********************************************************************
   2644           * @fn      zclClosures_SendDoorLockSetYearDayScheduleRequest
   2645           *
   2646           * @brief   Call to send out a Set Year Day Schedule Command
   2647           *
   2648           * @param   srcEP - Sending application's endpoint
   2649           * @param   dstAddr - where you want the message to go
   2650           * @param   scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   2651           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2652           * @param   zigBeeLocalStartTime - Start time of the Year Day Schedule representing by ZigBeeLocalTime
   2653           * @param   zigBeeLocalEndTime - End time of the Year Day Schedule representing by ZigBeeLocalTime
   2654           * @param   disableDefaultRsp - decides default response is necessary or not
   2655           * @param   seqNum - sequence number of the command packet
   2656           *
   2657           * @return  ZStatus_t
   2658           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2659          ZStatus_t zclClosures_SendDoorLockSetYearDayScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetYearDayScheduleRequest:
   2660                                                                       uint8 scheduleID, uint16 userID,
   2661                                                                       uint32 zigBeeLocalStartTime,
   2662                                                                       uint32 zigBeeLocalEndTime,
   2663                                                                       uint8 disableDefaultRsp, uint8 seqNum )
   2664          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   EC           MOV       A,R4
   2665            uint8 payload[PAYLOAD_LEN_SET_YEAR_DAY_SCHEDULE];
   2666          
   2667            payload[0] = scheduleID;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   \   000014   741C         MOV       A,#0x1c
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine53 & 0xFFFF
   2668            payload[1] = LO_UINT16(userID);
   \                     ??CrossCallReturnLabel_117:
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E8           MOV       A,R0
   \   000020   F0           MOVX      @DPTR,A
   2669            payload[2] = HI_UINT16(userID);
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E9           MOV       A,R1
   \   000027   F0           MOVX      @DPTR,A
   \   000028   741E         MOV       A,#0x1e
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?L_MOV_X
   2670            payload[3] = BREAK_UINT32(zigBeeLocalStartTime, 0);
   \   000032   7403         MOV       A,#0x3
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E5..         MOV       A,?V0
   \   000039   F0           MOVX      @DPTR,A
   2671            payload[4] = BREAK_UINT32(zigBeeLocalStartTime, 1);
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine66 & 0xFFFF
   2672            payload[5] = BREAK_UINT32(zigBeeLocalStartTime, 2);
   \                     ??CrossCallReturnLabel_140:
   \   000042   12....       LCALL     ?UL_SHR
   \   000045   7405         MOV       A,#0x5
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   12....       LCALL     ?Subroutine83 & 0xFFFF
   2673            payload[6] = BREAK_UINT32(zigBeeLocalStartTime, 3);
   \                     ??CrossCallReturnLabel_187:
   \   00004D   12....       LCALL     ?UL_SHR
   \   000050   7406         MOV       A,#0x6
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   E5..         MOV       A,?V0
   \   000057   F0           MOVX      @DPTR,A
   \   000058   7422         MOV       A,#0x22
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?L_MOV_X
   2674            payload[7] = BREAK_UINT32(zigBeeLocalEndTime, 0);
   \   000062   7407         MOV       A,#0x7
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   E5..         MOV       A,?V0
   \   000069   F0           MOVX      @DPTR,A
   2675            payload[8] = BREAK_UINT32(zigBeeLocalEndTime, 1);
   \   00006A   7408         MOV       A,#0x8
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ?Subroutine66 & 0xFFFF
   2676            payload[9] = BREAK_UINT32(zigBeeLocalEndTime, 2);
   \                     ??CrossCallReturnLabel_141:
   \   000072   12....       LCALL     ?UL_SHR
   \   000075   7409         MOV       A,#0x9
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   12....       LCALL     ?Subroutine83 & 0xFFFF
   2677            payload[10] = BREAK_UINT32(zigBeeLocalEndTime, 3);
   \                     ??CrossCallReturnLabel_188:
   \   00007D   12....       LCALL     ?UL_SHR
   \   000080   740A         MOV       A,#0xa
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E5..         MOV       A,?V0
   \   000087   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   2678          
   2679            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2680                                    COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2681                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_YEAR_DAY_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_492:
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   75..0B       MOV       ?V0,#0xb
   \   000090   75..00       MOV       ?V1,#0x0
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   742A         MOV       A,#0x2a
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   E4           CLR       A
   \   0000A4   F5..         MOV       ?V0,A
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   ED           MOV       A,R5
   \   0000AC   F5..         MOV       ?V0,A
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B3   75..00       MOV       ?V0,#0x0
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   75..01       MOV       ?V0,#0x1
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C3   75..0E       MOV       ?V0,#0xe
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CB   7C01         MOV       R4,#0x1
   \   0000CD   7D01         MOV       R5,#0x1
   \   0000CF   EF           MOV       A,R7
   \   0000D0   F9           MOV       R1,A
   \   0000D1   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D7   740B         MOV       A,#0xb
   \   0000D9                REQUIRE ?Subroutine5
   \   0000D9                ; // Fall through to label ?Subroutine5
   2682          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F09         MOV       R7,#0x9
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E5..         MOV       A,?V4
   \   000002   F0           MOVX      @DPTR,A
   \   000003   7418         MOV       A,#0x18
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E5..         MOV       A,?V1
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85....       MOV       ?V4,?V0
   \   000006   F5..         MOV       ?V5,A
   \   000008   85....       MOV       ?V6,?V2
   \   00000B   85....       MOV       ?V7,?V3
   \   00000E   7410         MOV       A,#0x10
   \   000010   78..         MOV       R0,#?V4
   \   000012   22           RET
   2683          
   2684          /*********************************************************************
   2685           * @fn      zclClosures_SendDoorLockSetHolidayScheduleRequest
   2686           *
   2687           * @brief   Call to send out a Set Holiday Schedule Command
   2688           *
   2689           * @param   srcEP - Sending application's endpoint
   2690           * @param   dstAddr - where you want the message to go
   2691           * @param   holidayScheduleID - A unique ID for given Holiday Schedule (0 to 254)
   2692           * @param   zigBeeLocalStartTime - Start time of the Year Day Schedule representing by ZigBeeLocalTime
   2693           * @param   zigBeeLocalEndTime - End time of the Year Day Schedule representing by ZigBeeLocalTime
   2694           * @param   operatingModeDuringHoliday - A valid enumeration value as listed in operating mode attribute
   2695           * @param   disableDefaultRsp - decides default response is necessary or not
   2696           * @param   seqNum - sequence number of the command packet
   2697           *
   2698           * @return  ZStatus_t
   2699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2700          ZStatus_t zclClosures_SendDoorLockSetHolidayScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetHolidayScheduleRequest:
   2701                                                                       uint8 holidayScheduleID,
   2702                                                                       uint32 zigBeeLocalStartTime,
   2703                                                                       uint32 zigBeeLocalEndTime,
   2704                                                                       uint8 operatingModeDuringHoliday,
   2705                                                                       uint8 disableDefaultRsp, uint8 seqNum )
   2706          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V8,R1
   2707            uint8 payload[PAYLOAD_LEN_SET_HOLIDAY_SCHEDULE];
   2708          
   2709            payload[0] = holidayScheduleID;
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   \   000014   741B         MOV       A,#0x1b
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?L_MOV_X
   2710            payload[1] = BREAK_UINT32(zigBeeLocalStartTime, 0);
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E5..         MOV       A,?V0
   \   000025   F0           MOVX      @DPTR,A
   2711            payload[2] = BREAK_UINT32(zigBeeLocalStartTime, 1);
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?Subroutine66 & 0xFFFF
   2712            payload[3] = BREAK_UINT32(zigBeeLocalStartTime, 2);
   \                     ??CrossCallReturnLabel_142:
   \   00002E   12....       LCALL     ?UL_SHR
   \   000031   7403         MOV       A,#0x3
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ?Subroutine83 & 0xFFFF
   2713            payload[4] = BREAK_UINT32(zigBeeLocalStartTime, 3);
   \                     ??CrossCallReturnLabel_189:
   \   000039   12....       LCALL     ?UL_SHR
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   E5..         MOV       A,?V0
   \   000043   F0           MOVX      @DPTR,A
   \   000044   741F         MOV       A,#0x1f
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?L_MOV_X
   2714            payload[5] = BREAK_UINT32(zigBeeLocalEndTime, 0);
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E5..         MOV       A,?V0
   \   000055   F0           MOVX      @DPTR,A
   2715            payload[6] = BREAK_UINT32(zigBeeLocalEndTime, 1);
   \   000056   7406         MOV       A,#0x6
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine66 & 0xFFFF
   2716            payload[7] = BREAK_UINT32(zigBeeLocalEndTime, 2);
   \                     ??CrossCallReturnLabel_143:
   \   00005E   12....       LCALL     ?UL_SHR
   \   000061   7407         MOV       A,#0x7
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ?Subroutine83 & 0xFFFF
   2717            payload[8] = BREAK_UINT32(zigBeeLocalEndTime, 3);
   \                     ??CrossCallReturnLabel_190:
   \   000069   12....       LCALL     ?UL_SHR
   \   00006C   7408         MOV       A,#0x8
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E5..         MOV       A,?V0
   \   000073   F0           MOVX      @DPTR,A
   2718            payload[9] = operatingModeDuringHoliday;
   \   000074   7409         MOV       A,#0x9
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   12....       LCALL     ?Subroutine63 & 0xFFFF
   2719          
   2720            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2721                                    COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2722                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_HOLIDAY_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_490:
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   75..0A       MOV       ?V0,#0xa
   \   000082   75..00       MOV       ?V1,#0x0
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   7428         MOV       A,#0x28
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000095   E4           CLR       A
   \   000096   F5..         MOV       ?V0,A
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   742A         MOV       A,#0x2a
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   75..00       MOV       ?V0,#0x0
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   75..01       MOV       ?V0,#0x1
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   75..11       MOV       ?V0,#0x11
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C0   7C01         MOV       R4,#0x1
   \   0000C2   7D01         MOV       R5,#0x1
   \   0000C4   A9..         MOV       R1,?V8
   \   0000C6   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   0000C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CC   740A         MOV       A,#0xa
   \   0000CE   02....       LJMP      ?Subroutine5 & 0xFFFF
   2723          }
   2724          
   2725          /*********************************************************************
   2726           * @fn      zclClosures_SendDoorLockHolidayScheduleRequest
   2727           *
   2728           * @brief   Call to send out a Holiday Schedule Command
   2729           *
   2730           * @param   srcEP - Sending application's endpoint
   2731           * @param   dstAddr - where you want the message to go
   2732           * @param   cmd - COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE, COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE
   2733           * @param   holidayScheduleID - A unique ID for given Holiday Schedule (0 to 254)
   2734           * @param   disableDefaultRsp - decides default response is necessary or not
   2735           * @param   seqNum - sequence number of the command packet
   2736           *
   2737           * @return  ZStatus_t
   2738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   78..         MOV       R0,#?V1
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   EC           MOV       A,R4
   \   000006   F5..         MOV       ?V1,A
   \   000008                REQUIRE ??Subroutine185_0
   \   000008                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   78..         MOV       R0,#?V1
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   7C01         MOV       R4,#0x1
   \   000007   7D01         MOV       R5,#0x1
   \   000009   EE           MOV       A,R6
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   00000E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000011   7401         MOV       A,#0x1
   \   000013                REQUIRE ??Subroutine186_0
   \   000013                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2739          ZStatus_t zclClosures_SendDoorLockHolidayScheduleRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclClosures_SendDoorLockHolidayScheduleRequest:
   2740                                                                    uint8 holidayScheduleID,
   2741                                                                    uint8 disableDefaultRsp, uint8 seqNum )
   2742          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine64 & 0xFFFF
   2743            uint8 payload[PAYLOAD_LEN_HOLIDAY_SCHEDULE];
   2744          
   2745            payload[0] = holidayScheduleID;
   2746          
   2747            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2748                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2749                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_HOLIDAY_SCHEDULE, payload );
   \                     ??CrossCallReturnLabel_517:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V2,#0x1
   \   000013   75..00       MOV       ?V3,#0x0
   \   000016   78..         MOV       R0,#?V2
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7412         MOV       A,#0x12
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   E4           CLR       A
   \   000027   F5..         MOV       ?V2,A
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7414         MOV       A,#0x14
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   78..         MOV       R0,#?V1
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000041   75..01       MOV       ?V1,#0x1
   \   000044   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   ED           MOV       A,R5
   \   000009                REQUIRE ??Subroutine199_0
   \   000009                ; // Fall through to label ??Subroutine199_0
   2750          }
   2751          
   2752          /*********************************************************************
   2753           * @fn      zclClosures_SendDoorLockSetUserTypeRequest
   2754           *
   2755           * @brief   Call to send out a Set User Type Command
   2756           *
   2757           * @param   srcEP - Sending application's endpoint
   2758           * @param   dstAddr - where you want the message to go
   2759           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   2760           * @param   userType - Used to indicate what the type is for a specific User ID
   2761           * @param   disableDefaultRsp - decides default response is necessary or not
   2762           * @param   seqNum - sequence number of the command packet
   2763           *
   2764           * @return  ZStatus_t
   2765           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2766          ZStatus_t zclClosures_SendDoorLockSetUserTypeRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetUserTypeRequest:
   2767                                                                uint16 userID, uint8 userType,
   2768                                                                uint8 disableDefaultRsp, uint8 seqNum )
   2769          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2770            uint8 payload[PAYLOAD_LEN_SET_USER_TYPE];
   2771          
   2772            payload[0] = LO_UINT16(userID);
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   2773            payload[1] = HI_UINT16(userID);
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   2774            payload[2] = userType;
   \   00001B   740D         MOV       A,#0xd
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   2775          
   2776            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2777                                    COMMAND_CLOSURES_SET_USER_TYPE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2778                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_SET_USER_TYPE, payload );
   \                     ??CrossCallReturnLabel_493:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V0,#0x3
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7415         MOV       A,#0x15
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..00       MOV       ?V0,#0x0
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   75..01       MOV       ?V0,#0x1
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   75..14       MOV       ?V0,#0x14
   \   00006C   02....       LJMP      ?Subroutine4 & 0xFFFF
   2779          }
   2780          
   2781          /*********************************************************************
   2782           * @fn      zclClosures_SendDoorLockSetRFIDCodeRequest
   2783           *
   2784           * @brief   Call to send out a Set RFID Code Command
   2785           *
   2786           * @param   srcEP - Sending application's endpoint
   2787           * @param   dstAddr - where you want the message to go
   2788           * @param   pPayload:
   2789           *           userID - User ID is between 0 - [# PINs User supported attribute]
   2790           *           userStatus - Used to indicate what the status is for a specific User ID
   2791           *           userType - Used to indicate what the type is for a specific User ID
   2792           *           aRfidCode - A ZigBee string indicating the RFID code used to create the event
   2793           * @param   disableDefaultRsp - decides default response is necessary or not
   2794           * @param   seqNum - sequence number of the command packet
   2795           *
   2796           * @return  ZStatus_t
   2797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2798          ZStatus_t zclClosures_SendDoorLockSetRFIDCodeRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockSetRFIDCodeRequest:
   2799                                                                zclDoorLockSetRFIDCode_t *pPayload,
   2800                                                                uint8 disableDefaultRsp, uint8 seqNum )
   2801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   2802            uint8 i;
   2803            uint8 *pBuf;  // variable length payload
   2804            uint8 offset;
   2805            uint8 calculatedArrayLen;
   2806            uint8 calculatedBufSize;
   2807            ZStatus_t status;
   2808          
   2809            // first octet of PIN/RFID Code variable string identifies its length
   2810            calculatedArrayLen = pPayload->pRfidCode[0] + 1;   // add first byte of string
   2811          
   2812            // determine the total buffer size
   2813            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_SET_RFID_CODE;
   2814          
   2815            pBuf = zcl_mem_alloc( calculatedBufSize );
   2816            if ( !pBuf )
   \                     ??CrossCallReturnLabel_5:
   \   00000D   7004         JNZ       ??zclClosures_SendDoorLockSetRFIDCodeRequest_0
   2817            {
   2818              return ( ZMemError );  // no memory
   \   00000F   7910         MOV       R1,#0x10
   \   000011   8063         SJMP      ??CrossCallReturnLabel_433
   2819            }
   2820          
   2821            // over-the-air is always little endian. Break into a byte stream.
   2822            pBuf[0] = LO_UINT16(pPayload->userID);
   \                     ??zclClosures_SendDoorLockSetRFIDCodeRequest_0:
   \   000013   12....       LCALL     ?Subroutine9 & 0xFFFF
   2823            pBuf[1] = HI_UINT16(pPayload->userID);
   2824            pBuf[2] = pPayload->userStatus;
   2825            pBuf[3] = pPayload->userType;
   2826            offset = 4;
   2827            for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_1:
   \   000016   800D         SJMP      ??zclClosures_SendDoorLockSetRFIDCodeRequest_1
   2828            {
   2829              pBuf[offset++] = pPayload->pRfidCode[i];
   \                     ??zclClosures_SendDoorLockSetRFIDCodeRequest_2:
   \   000018   12....       LCALL     ?Subroutine10 & 0xFFFF
   2830            }
   \                     ??CrossCallReturnLabel_470:
   \   00001B   C0E0         PUSH      A
   \   00001D   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000020   D0E0         POP       A
   \   000022   F0           MOVX      @DPTR,A
   \   000023   09           INC       R1
   \   000024   08           INC       R0
   \                     ??zclClosures_SendDoorLockSetRFIDCodeRequest_1:
   \   000025   E8           MOV       A,R0
   \   000026   C3           CLR       C
   \   000027   95..         SUBB      A,?V3
   \   000029   40ED         JC        ??zclClosures_SendDoorLockSetRFIDCodeRequest_2
   2831          
   2832            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2833                                      COMMAND_CLOSURES_SET_RFID_CODE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   2834                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   00002B                ; Setup parameters for call to function zcl_SendCommand
   \   00002B   78..         MOV       R0,#?V6
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   78..         MOV       R0,#?V8
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   741A         MOV       A,#0x1a
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000040   E4           CLR       A
   \   000041   F5..         MOV       ?V0,A
   \   000043   F5..         MOV       ?V1,A
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   741C         MOV       A,#0x1c
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000055   75..00       MOV       ?V0,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   75..01       MOV       ?V0,#0x1
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   75..16       MOV       ?V0,#0x16
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006D   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073   12....       LCALL     ?Subroutine93 & 0xFFFF
   2835            zcl_mem_free( pBuf );
   2836            return status;
   \                     ??CrossCallReturnLabel_433:
   \   000076   02....       LJMP      ?Subroutine3 & 0xFFFF
   2837          }
   2838          
   2839          /*********************************************************************
   2840           * @fn      zclClosures_SendDoorLockStatusResponse
   2841           *
   2842           * @brief   Call to send out a Status Response
   2843           *
   2844           * @param   srcEP - Sending application's endpoint
   2845           * @param   dstAddr - where you want the message to go
   2846           * @param   cmd - COMMAND_CLOSURES_LOCK_DOOR_RSP, COMMAND_CLOSURES_UNLOCK_DOOR_RSP
   2847           *                COMMAND_CLOSURES_TOGGLE_RSP, COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT_RSP,
   2848           *                COMMAND_CLOSURES_SET_PIN_CODE_RSP, COMMAND_CLOSURES_CLEAR_PIN_CODE_RSP,
   2849           *                COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES_RSP, COMMAND_CLOSURES_SET_USER_STATUS_RSP,
   2850           *                COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE_RSP, COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE_RSP,
   2851           *                COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE_RSP, COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE_RSP,
   2852           *                COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE_RSP, COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE_RSP,
   2853           *                COMMAND_CLOSURES_SET_USER_TYPE_RSP, COMMAND_CLOSURES_SET_RFID_CODE_RSP,
   2854           *                COMMAND_CLOSURES_CLEAR_RFID_CODE_RSP, COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES_RSP
   2855           * @param   status - Returns the state due to the requesting command
   2856           * @param   disableDefaultRsp - decides default response is necessary or not
   2857           * @param   seqNum - sequence number of the command packet
   2858           *
   2859           * @return  ZStatus_t
   2860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2861          ZStatus_t zclClosures_SendDoorLockStatusResponse( uint8 srcEP, afAddrType_t *dstAddr,uint8 cmd,
   \                     zclClosures_SendDoorLockStatusResponse:
   2862                                                            uint8 status, uint8 disableDefaultRsp, uint8 seqNum )
   2863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine64 & 0xFFFF
   2864            uint8 payload[1];   // 1 byte payload
   2865          
   2866            payload[0] = status;
   2867          
   2868            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2869                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   2870                                    disableDefaultRsp, 0, seqNum, sizeof( payload ), payload );
   \                     ??CrossCallReturnLabel_518:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V2,#0x1
   \   000013   75..00       MOV       ?V3,#0x0
   \   000016   78..         MOV       R0,#?V2
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7412         MOV       A,#0x12
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   E4           CLR       A
   \   000027   F5..         MOV       ?V2,A
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7414         MOV       A,#0x14
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   75..01       MOV       ?V1,#0x1
   \   00003C   78..         MOV       R0,#?V1
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000041   02....       LJMP      ?Subroutine0 & 0xFFFF
   2871          }
   2872          
   2873          /*********************************************************************
   2874           * @fn      zclClosures_SendDoorLockGetLogRecordResponse
   2875           *
   2876           * @brief   Call to send out a Get Log Record Response
   2877           *
   2878           * @param   srcEP - Sending application's endpoint
   2879           * @param   dstAddr - where you want the message to go
   2880           * @param   pPayload:
   2881           *           logEntryID - The index into the log table where this log entry is stored
   2882           *           timestamp - A ZigBeeLocalTime used to timestamp all events and alarms on the door lock
   2883           *           eventType - Indicates the type of event that took place on the door lock
   2884           *           source - A source value of available sources
   2885           *           eventIDAlarmCode - A one byte value indicating the type of event that took place on the door lock
   2886           *           userID - User ID is between 0 - [# PINs User supported attribute]
   2887           *           aPIN - A ZigBee string indicating the PIN code used to create the event on the door lock
   2888           * @param   disableDefaultRsp - decides default response is necessary or not
   2889           * @param   seqNum - sequence number of the command packet
   2890           *
   2891           * @return  ZStatus_t
   2892           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2893          ZStatus_t zclClosures_SendDoorLockGetLogRecordResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetLogRecordResponse:
   2894                                                                  zclDoorLockGetLogRecordRsp_t *pPayload,
   2895                                                                  uint8 disableDefaultRsp, uint8 seqNum )
   2896          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V11,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   2897            uint8 i;
   2898            uint8 *pBuf;  // variable length payload
   2899            uint8 offset;
   2900            uint8 calculatedArrayLen;
   2901            uint8 calculatedBufSize;
   2902            ZStatus_t status;
   2903          
   2904            // first octet of PIN/RFID Code variable string identifies its length
   2905            calculatedArrayLen = pPayload->pPIN[0] + 1;   // add first byte of string
   \   000014   EC           MOV       A,R4
   \   000015   240B         ADD       A,#0xb
   \   000017   F5..         MOV       ?V8,A
   \   000019   E4           CLR       A
   \   00001A   3F           ADDC      A,R7
   \   00001B   F5..         MOV       ?V9,A
   \   00001D   85..82       MOV       DPL,?V8
   \   000020   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000023   F5..         MOV       ?V10,A
   2906          
   2907            // determine the total buffer size
   2908            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_GET_LOG_RECORD_RSP;
   \   000025   740B         MOV       A,#0xb
   \   000027   25..         ADD       A,?V10
   \   000029   85..82       MOV       DPL,?XSP + 0
   \   00002C   85..83       MOV       DPH,?XSP + 1
   \   00002F   F0           MOVX      @DPTR,A
   2909          
   2910            pBuf = zcl_mem_alloc( calculatedBufSize );
   \   000030   F5..         MOV       ?V2,A
   \   000032   75..00       MOV       ?V3,#0x0
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   FA           MOV       R2,A
   \   000036   AB..         MOV       R3,?V3
   \   000038   12....       LCALL     ??Subroutine200_0 & 0xFFFF
   2911            if ( !pBuf )
   \                     ??CrossCallReturnLabel_527:
   \   00003B   7005         JNZ       ??zclClosures_SendDoorLockGetLogRecordResponse_0
   2912            {
   2913              return ( ZMemError );  // no memory
   \   00003D   7910         MOV       R1,#0x10
   \   00003F   02....       LJMP      ??CrossCallReturnLabel_437 & 0xFFFF
   2914            }
   2915          
   2916            // over-the-air is always little endian. Break into a byte stream.
   2917            pBuf[0] = LO_UINT16(pPayload->logEntryID);
   \                     ??zclClosures_SendDoorLockGetLogRecordResponse_0:
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000049   12....       LCALL     ?Subroutine82 & 0xFFFF
   2918            pBuf[1] = HI_UINT16(pPayload->logEntryID);
   \                     ??CrossCallReturnLabel_185:
   \   00004C   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   00004F   A3           INC       DPTR
   \   000050   F0           MOVX      @DPTR,A
   2919            pBuf[2] = BREAK_UINT32(pPayload->timestamp, 0);
   \   000051   EE           MOV       A,R6
   \   000052   2402         ADD       A,#0x2
   \   000054   FA           MOV       R2,A
   \   000055   E4           CLR       A
   \   000056   3F           ADDC      A,R7
   \   000057   FB           MOV       R3,A
   \   000058   8A82         MOV       DPL,R2
   \   00005A   F583         MOV       DPH,A
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?L_MOV_X
   \   000061   85..82       MOV       DPL,?V0
   \   000064   85..83       MOV       DPH,?V1
   \   000067   12....       LCALL     ?Subroutine73 & 0xFFFF
   2920            pBuf[3] = BREAK_UINT32(pPayload->timestamp, 1);
   \                     ??CrossCallReturnLabel_452:
   \   00006A   12....       LCALL     ?L_MOV_X
   \   00006D   E5..         MOV       A,?V5
   \   00006F   85..82       MOV       DPL,?V0
   \   000072   85..83       MOV       DPH,?V1
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   2921            pBuf[4] = BREAK_UINT32(pPayload->timestamp, 2);
   \                     ??CrossCallReturnLabel_454:
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   7410         MOV       A,#0x10
   \   000080   78..         MOV       R0,#?V4
   \   000082   12....       LCALL     ?UL_SHR
   \   000085   85..82       MOV       DPL,?V0
   \   000088   85..83       MOV       DPH,?V1
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   12....       LCALL     ?Subroutine73 & 0xFFFF
   2922            pBuf[5] = BREAK_UINT32(pPayload->timestamp, 3);
   \                     ??CrossCallReturnLabel_453:
   \   000090   12....       LCALL     ?L_MOV_X
   \   000093   7418         MOV       A,#0x18
   \   000095   78..         MOV       R0,#?V4
   \   000097   12....       LCALL     ?UL_SHR
   \   00009A   85..82       MOV       DPL,?V0
   \   00009D   85..83       MOV       DPH,?V1
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E5..         MOV       A,?V4
   \   0000A7   12....       LCALL     ?Subroutine81 & 0xFFFF
   2923            pBuf[6] = pPayload->eventType;
   \                     ??CrossCallReturnLabel_180:
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0000B2   12....       LCALL     ?Subroutine82 & 0xFFFF
   2924            pBuf[7] = pPayload->source;
   \                     ??CrossCallReturnLabel_186:
   \   0000B5   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000B8   12....       LCALL     ?Subroutine81 & 0xFFFF
   2925            pBuf[8] = pPayload->eventIDAlarmCode;
   \                     ??CrossCallReturnLabel_181:
   \   0000BB   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000BE   A3           INC       DPTR
   \   0000BF   F0           MOVX      @DPTR,A
   2926            pBuf[9] = LO_UINT16(pPayload->userID);
   \   0000C0   EE           MOV       A,R6
   \   0000C1   2409         ADD       A,#0x9
   \   0000C3   F8           MOV       R0,A
   \   0000C4   E4           CLR       A
   \   0000C5   3F           ADDC      A,R7
   \   0000C6   F9           MOV       R1,A
   \   0000C7   8882         MOV       DPL,R0
   \   0000C9   F583         MOV       DPH,A
   \   0000CB   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000CE   12....       LCALL     ?Subroutine79 & 0xFFFF
   2927            pBuf[10] = HI_UINT16(pPayload->userID);
   \                     ??CrossCallReturnLabel_173:
   \   0000D1   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000D4   A3           INC       DPTR
   \   0000D5   F0           MOVX      @DPTR,A
   2928            offset = 11;
   \   0000D6   790B         MOV       R1,#0xb
   2929            for ( i = 0; i < calculatedArrayLen; i++ )
   \   0000D8   7800         MOV       R0,#0x0
   \   0000DA   8015         SJMP      ??zclClosures_SendDoorLockGetLogRecordResponse_1
   2930            {
   2931              pBuf[offset++] = pPayload->pPIN[i];
   \                     ??zclClosures_SendDoorLockGetLogRecordResponse_2:
   \   0000DC   E8           MOV       A,R0
   \   0000DD   FA           MOV       R2,A
   \   0000DE   85..82       MOV       DPL,?V8
   \   0000E1   85..83       MOV       DPH,?V9
   \   0000E4   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   2932            }
   \                     ??CrossCallReturnLabel_467:
   \   0000E7   C0E0         PUSH      A
   \   0000E9   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000EC   D0E0         POP       A
   \   0000EE   F0           MOVX      @DPTR,A
   \   0000EF   09           INC       R1
   \   0000F0   08           INC       R0
   \                     ??zclClosures_SendDoorLockGetLogRecordResponse_1:
   \   0000F1   E8           MOV       A,R0
   \   0000F2   C3           CLR       C
   \   0000F3   95..         SUBB      A,?V10
   \   0000F5   40E5         JC        ??zclClosures_SendDoorLockGetLogRecordResponse_2
   2933          
   2934            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2935                                      COMMAND_CLOSURES_GET_LOG_RECORD_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   2936                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   0000F7                ; Setup parameters for call to function zcl_SendCommand
   \   0000F7   78..         MOV       R0,#?V0
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FC   78..         MOV       R0,#?V2
   \   0000FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000101   741C         MOV       A,#0x1c
   \   000103   12....       LCALL     ?XSTACK_DISP0_8
   \   000106   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010C   E4           CLR       A
   \   00010D   F5..         MOV       ?V2,A
   \   00010F   78..         MOV       R0,#?V2
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000114   741E         MOV       A,#0x1e
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011F   75..01       MOV       ?V2,#0x1
   \   000122   78..         MOV       R0,#?V2
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000127   78..         MOV       R0,#?V2
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012C   75..04       MOV       ?V2,#0x4
   \   00012F   78..         MOV       R0,#?V2
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000134   7C01         MOV       R4,#0x1
   \   000136   7D01         MOV       R5,#0x1
   \   000138   AA..         MOV       R2,?V12
   \   00013A   AB..         MOV       R3,?V13
   \   00013C   A9..         MOV       R1,?V11
   \   00013E   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000141   12....       LCALL     ?DEALLOC_XSTACK8
   \   000144   E9           MOV       A,R1
   \   000145   FE           MOV       R6,A
   2937            zcl_mem_free( pBuf );
   \   000146                ; Setup parameters for call to function osal_mem_free
   \   000146   AA..         MOV       R2,?V0
   \   000148   AB..         MOV       R3,?V1
   \   00014A   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   2938            return status;
   \                     ??CrossCallReturnLabel_437:
   \   00014D   7401         MOV       A,#0x1
   \   00014F   80..         SJMP      ??Subroutine191_0
   2939          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V4
   \   000004                REQUIRE ??Subroutine188_0
   \   000004                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000003   78..         MOV       R0,#?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E9           MOV       A,R1
   \   000001   FA           MOV       R2,A
   \   000002   E5..         MOV       A,?V0
   \   000004   2A           ADD       A,R2
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   35..         ADDC      A,?V1
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   2940          
   2941          /*********************************************************************
   2942           * @fn      zclClosures_SendDoorLockGetPINCodeResponse
   2943           *
   2944           * @brief   Call to send out a Get PIN Code Response
   2945           *
   2946           * @param   srcEP - Sending application's endpoint
   2947           * @param   dstAddr - where you want the message to go
   2948           * @param   pPayload:
   2949           *           userID - User ID is between 0 - [# PINs User supported attribute]
   2950           *           userStatus - Used to indicate what the status is for a specific User ID
   2951           *           userType - Used to indicate what the type is for a specific User ID
   2952           *           aCode - Returned PIN number
   2953           * @param   disableDefaultRsp - decides default response is necessary or not
   2954           * @param   seqNum - sequence number of the command packet
   2955           *
   2956           * @return  ZStatus_t
   2957           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2958          ZStatus_t zclClosures_SendDoorLockGetPINCodeResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetPINCodeResponse:
   2959                                                                zclDoorLockGetPINCodeRsp_t *pPayload,
   2960                                                                uint8 disableDefaultRsp, uint8 seqNum )
   2961          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   2962            uint8 i;
   2963            uint8 *pBuf;  // variable length payload
   2964            uint8 offset;
   2965            uint8 calculatedArrayLen;
   2966            uint8 calculatedBufSize;
   2967            ZStatus_t status;
   2968          
   2969            // first octet of PIN/RFID Code variable string identifies its length
   2970            calculatedArrayLen = pPayload->pCode[0] + 1;   // add first byte of string
   2971          
   2972            // determine the total buffer size
   2973            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_GET_PIN_CODE_RSP;
   2974          
   2975            pBuf = zcl_mem_alloc( calculatedBufSize );
   2976            if ( !pBuf )
   \                     ??CrossCallReturnLabel_6:
   \   00000D   7004         JNZ       ??zclClosures_SendDoorLockGetPINCodeResponse_0
   2977            {
   2978              return ( ZMemError );  // no memory
   \   00000F   7910         MOV       R1,#0x10
   \   000011   8060         SJMP      ??CrossCallReturnLabel_434
   2979            }
   2980          
   2981            // over-the-air is always little endian. Break into a byte stream.
   2982            pBuf[0] = LO_UINT16(pPayload->userID);
   \                     ??zclClosures_SendDoorLockGetPINCodeResponse_0:
   \   000013   12....       LCALL     ?Subroutine9 & 0xFFFF
   2983            pBuf[1] = HI_UINT16(pPayload->userID);
   2984            pBuf[2] = pPayload->userStatus;
   2985            pBuf[3] = pPayload->userType;
   2986            offset = 4;
   2987            for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_2:
   \   000016   800D         SJMP      ??zclClosures_SendDoorLockGetPINCodeResponse_1
   2988            {
   2989              pBuf[offset++] = pPayload->pCode[i];
   \                     ??zclClosures_SendDoorLockGetPINCodeResponse_2:
   \   000018   12....       LCALL     ?Subroutine10 & 0xFFFF
   2990            }
   \                     ??CrossCallReturnLabel_471:
   \   00001B   C0E0         PUSH      A
   \   00001D   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000020   D0E0         POP       A
   \   000022   F0           MOVX      @DPTR,A
   \   000023   09           INC       R1
   \   000024   08           INC       R0
   \                     ??zclClosures_SendDoorLockGetPINCodeResponse_1:
   \   000025   E8           MOV       A,R0
   \   000026   C3           CLR       C
   \   000027   95..         SUBB      A,?V3
   \   000029   40ED         JC        ??zclClosures_SendDoorLockGetPINCodeResponse_2
   2991          
   2992            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   2993                                      COMMAND_CLOSURES_GET_PIN_CODE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   2994                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   00002B                ; Setup parameters for call to function zcl_SendCommand
   \   00002B   78..         MOV       R0,#?V6
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   78..         MOV       R0,#?V8
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   741A         MOV       A,#0x1a
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000040   E4           CLR       A
   \   000041   F5..         MOV       ?V0,A
   \   000043   F5..         MOV       ?V1,A
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   741C         MOV       A,#0x1c
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000055   75..01       MOV       ?V0,#0x1
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000062   75..06       MOV       ?V0,#0x6
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   12....       LCALL     ?Subroutine93 & 0xFFFF
   2995            zcl_mem_free( pBuf );
   2996            return status;
   \                     ??CrossCallReturnLabel_434:
   \   000073   02....       LJMP      ?Subroutine3 & 0xFFFF
   2997          }
   2998          
   2999          /*********************************************************************
   3000           * @fn      zclClosures_SendDoorLockGetUserStatusResponse
   3001           *
   3002           * @brief   Call to send out a Get User Status Response
   3003           *
   3004           * @param   srcEP - Sending application's endpoint
   3005           * @param   dstAddr - where you want the message to go
   3006           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   3007           * @param   userStatus - Used to indicate what the status is for a specific User ID
   3008           * @param   disableDefaultRsp - decides default response is necessary or not
   3009           * @param   seqNum - sequence number of the command packet
   3010           *
   3011           * @return  ZStatus_t
   3012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3013          ZStatus_t zclClosures_SendDoorLockGetUserStatusResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetUserStatusResponse:
   3014                                                                   uint16 userID, uint8 userStatus,
   3015                                                                   uint8 disableDefaultRsp, uint8 seqNum )
   3016          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   3017            uint8 payload[PAYLOAD_LEN_GET_USER_STATUS_RSP];
   3018          
   3019            payload[0] = LO_UINT16(userID);
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   3020            payload[1] = HI_UINT16(userID);
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   3021            payload[2] = userStatus;
   \   00001B   740D         MOV       A,#0xd
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   3022          
   3023            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3024                                    COMMAND_CLOSURES_GET_USER_STATUS_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3025                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_GET_USER_STATUS_RSP, payload );
   \                     ??CrossCallReturnLabel_494:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V0,#0x3
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7415         MOV       A,#0x15
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..01       MOV       ?V0,#0x1
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   75..0A       MOV       ?V0,#0xa
   \   000069   02....       LJMP      ?Subroutine4 & 0xFFFF
   3026          }
   3027          
   3028          /*********************************************************************
   3029           * @fn      zclClosures_SendDoorLockGetWeekDayScheduleResponse
   3030           *
   3031           * @brief   Call to send out a Get Week Day Schedule Response
   3032           *
   3033           * @param   srcEP - Sending application's endpoint
   3034           * @param   dstAddr - where you want the message to go
   3035           * @param   pCmd:
   3036           *               scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   3037           *               userID - User ID is between 0 - [# PINs User supported attribute]
   3038           *               status - Returns the state due to the requesting command
   3039           *               daysMask - Bitmask of the effective days in the order XSFTWTMS
   3040           *               startHour - The start hour of the Week Day Schedule: 0-23
   3041           *               startMinute - The start minute of the Week Day Schedule: 0-59
   3042           *               endHour - The end hour of the Week Day Schedule: 0-23
   3043           *               endMinute - The end minute of the Week Day Schedule: 0-59
   3044           * @param   disableDefaultRsp - decides default response is necessary or not
   3045           * @param   seqNum - sequence number of the command packet
   3046           *
   3047           * @return  ZStatus_t
   3048           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3049          ZStatus_t zclClosures_SendDoorLockGetWeekDayScheduleResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetWeekDayScheduleResponse:
   3050                                                                        zclDoorLockGetWeekDayScheduleRsp_t *pCmd,
   3051                                                                        uint8 disableDefaultRsp, uint8 seqNum )
   3052          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   3053            uint8 payload[PAYLOAD_LEN_GET_WEEK_DAY_SCHEDULE_RSP];
   3054            uint8 payloadLen = sizeof( payload );
   \   00000C   7F09         MOV       R7,#0x9
   3055          
   3056            payload[0] = pCmd->scheduleID;
   \   00000E   12....       LCALL     ?Subroutine105 & 0xFFFF
   3057            payload[1] = LO_UINT16( pCmd->userID );
   \                     ??CrossCallReturnLabel_228:
   \   000011   A882         MOV       R0,DPL
   \   000013   A983         MOV       R1,DPH
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V0,A
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E5..         MOV       A,?V0
   \   00001F   12....       LCALL     ?Subroutine79 & 0xFFFF
   3058            payload[2] = HI_UINT16( pCmd->userID );
   \                     ??CrossCallReturnLabel_174:
   \   000022   E0           MOVX      A,@DPTR
   \   000023   C0E0         PUSH      A
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
   3059            payload[3] = pCmd->status;
   \   00002D   EC           MOV       A,R4
   \   00002E   2403         ADD       A,#0x3
   \   000030   F8           MOV       R0,A
   \   000031   E4           CLR       A
   \   000032   3D           ADDC      A,R5
   \   000033   F9           MOV       R1,A
   \   000034   8882         MOV       DPL,R0
   \   000036   F583         MOV       DPH,A
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C0E0         PUSH      A
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   D0E0         POP       A
   \   000042   F0           MOVX      @DPTR,A
   3060          
   3061            if ( pCmd->status == ZCL_STATUS_SUCCESS )
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   E0           MOVX      A,@DPTR
   \   000048   704C         JNZ       ??zclClosures_SendDoorLockGetWeekDayScheduleRes_1
   3062            {
   3063              payload[4] = pCmd->daysMask;
   \   00004A   8C82         MOV       DPL,R4
   \   00004C   8D83         MOV       DPH,R5
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   C0E0         PUSH      A
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   D0E0         POP       A
   \   00005C   12....       LCALL     ?Subroutine87 & 0xFFFF
   3064              payload[5] = pCmd->startHour;
   3065              payload[6] = pCmd->startMinute;
   3066              payload[7] = pCmd->endHour;
   3067              payload[8] = pCmd->endMinute;
   3068            }
   \                     ??CrossCallReturnLabel_197:
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   C0E0         PUSH      A
   \   000064   7405         MOV       A,#0x5
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   D0E0         POP       A
   \   00006B   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   C0E0         PUSH      A
   \   000071   7406         MOV       A,#0x6
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   D0E0         POP       A
   \   000078   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   C0E0         PUSH      A
   \   00007F   7407         MOV       A,#0x7
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   D0E0         POP       A
   \   000086   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   C0E0         PUSH      A
   \   00008C   7408         MOV       A,#0x8
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   D0E0         POP       A
   \   000093   F0           MOVX      @DPTR,A
   \   000094   8002         SJMP      ??zclClosures_SendDoorLockGetWeekDayScheduleRes_2
   3069            else
   3070            {
   3071              payloadLen = 4;
   \                     ??zclClosures_SendDoorLockGetWeekDayScheduleRes_1:
   \   000096   7F04         MOV       R7,#0x4
   3072            }
   3073          
   3074            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3075                                    COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3076                                    disableDefaultRsp, 0, seqNum, payloadLen, payload );
   \                     ??zclClosures_SendDoorLockGetWeekDayScheduleRes_2:
   \   000098                ; Setup parameters for call to function zcl_SendCommand
   \   000098   A8..         MOV       R0,?XSP + 0
   \   00009A   A9..         MOV       R1,?XSP + 1
   \   00009C   88..         MOV       ?V0,R0
   \   00009E   89..         MOV       ?V1,R1
   \   0000A0   78..         MOV       R0,#?V0
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   EF           MOV       A,R7
   \   0000A6   F5..         MOV       ?V0,A
   \   0000A8   75..00       MOV       ?V1,#0x0
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   7418         MOV       A,#0x18
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   E4           CLR       A
   \   0000BC   F5..         MOV       ?V0,A
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   741A         MOV       A,#0x1a
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CE   75..01       MOV       ?V0,#0x1
   \   0000D1   78..         MOV       R0,#?V0
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D6   78..         MOV       R0,#?V0
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   75..0C       MOV       ?V0,#0xc
   \   0000DE   78..         MOV       R0,#?V0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E3   7C01         MOV       R4,#0x1
   \   0000E5   7D01         MOV       R5,#0x1
   \   0000E7   EE           MOV       A,R6
   \   0000E8   F9           MOV       R1,A
   \   0000E9   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EF   7409         MOV       A,#0x9
   \   0000F1   02....       LJMP      ??Subroutine197_0 & 0xFFFF
   3077          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000007   8C82         MOV       DPL,R4
   \   000009   8D83         MOV       DPH,R5
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET
   3078          
   3079          /*********************************************************************
   3080           * @fn      zclClosures_SendDoorLockGetYearDayScheduleResponse
   3081           *
   3082           * @brief   Call to send out a Get Year Day Schedule Response
   3083           *
   3084           * @param   srcEP - Sending application's endpoint
   3085           * @param   dstAddr - where you want the message to go
   3086           * @param   pCmd:
   3087           *             scheduleID - The Schedule ID # is between 0 - [# Schedule IDs per user attribute]
   3088           *             userID - User ID is between 0 - [# PINs User supported attribute]
   3089           *             status - Returns the state due to the requesting command
   3090           *             zigBeeLocalStartTime - Start time of the Year Day Schedule representing by ZigBeeLocalTime
   3091           *             zigBeeLocalEndTime - End time of the Year Day Schedule representing by ZigBeeLocalTime
   3092           * @param   disableDefaultRsp - decides default response is necessary or not
   3093           * @param   seqNum - sequence number of the command packet
   3094           *
   3095           * @return  ZStatus_t
   3096           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3097          ZStatus_t zclClosures_SendDoorLockGetYearDayScheduleResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetYearDayScheduleResponse:
   3098                                                                        zclDoorLockGetYearDayScheduleRsp_t *pCmd,
   3099                                                                        uint8 disableDefaultRsp, uint8 seqNum )
   3100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   3101            uint8 payload[PAYLOAD_LEN_GET_YEAR_DAY_SCHEDULE_RSP];
   3102            uint8 payloadLen = sizeof( payload );
   \   00000C   790C         MOV       R1,#0xc
   3103          
   3104            payload[0] = pCmd->scheduleID;
   \   00000E   12....       LCALL     ?Subroutine34 & 0xFFFF
   3105            payload[1] = LO_UINT16( pCmd->userID );
   \                     ??CrossCallReturnLabel_81:
   \   000011   F5..         MOV       ?V2,A
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   E5..         MOV       A,?V2
   \   00001A   12....       LCALL     ?Subroutine86 & 0xFFFF
   3106            payload[2] = HI_UINT16( pCmd->userID );
   \                     ??CrossCallReturnLabel_194:
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V0,A
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E5..         MOV       A,?V0
   \   000028   F0           MOVX      @DPTR,A
   3107            payload[3] = pCmd->status;
   \   000029   EC           MOV       A,R4
   \   00002A   2403         ADD       A,#0x3
   \   00002C   F5..         MOV       ?V0,A
   \   00002E   E4           CLR       A
   \   00002F   3D           ADDC      A,R5
   \   000030   F5..         MOV       ?V1,A
   \   000032   85..82       MOV       DPL,?V0
   \   000035   F583         MOV       DPH,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   7403         MOV       A,#0x3
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   D0E0         POP       A
   \   000041   12....       LCALL     ?Subroutine85 & 0xFFFF
   3108          
   3109            if ( pCmd->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_191:
   \   000044   6003         JZ        $+5
   \   000046   02....       LJMP      ??zclClosures_SendDoorLockGetYearDayScheduleRes_1 & 0xFFFF
   3110            {
   3111              payload[4] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 0 );
   \   000049   EC           MOV       A,R4
   \   00004A   2404         ADD       A,#0x4
   \   00004C   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00004F   12....       LCALL     ?L_MOV_X
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine65 & 0xFFFF
   3112              payload[5] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 1 );
   \                     ??CrossCallReturnLabel_131:
   \   00005A   12....       LCALL     ?L_MOV_X
   \   00005D   E5..         MOV       A,?V1
   \   00005F   F5..         MOV       ?V0,A
   \   000061   7405         MOV       A,#0x5
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ?Subroutine65 & 0xFFFF
   3113              payload[6] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 2 );
   \                     ??CrossCallReturnLabel_132:
   \   000069   12....       LCALL     ?L_MOV_X
   \   00006C   7410         MOV       A,#0x10
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?UL_SHR
   \   000073   7406         MOV       A,#0x6
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine65 & 0xFFFF
   3114              payload[7] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 3 );
   \                     ??CrossCallReturnLabel_133:
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   7418         MOV       A,#0x18
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?UL_SHR
   \   000085   7407         MOV       A,#0x7
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   E5..         MOV       A,?V0
   \   00008C   F0           MOVX      @DPTR,A
   3115              payload[8] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 0 );
   \   00008D   EC           MOV       A,R4
   \   00008E   2408         ADD       A,#0x8
   \   000090   FC           MOV       R4,A
   \   000091   5001         JNC       ??zclClosures_SendDoorLockGetYearDayScheduleRes_2
   \   000093   0D           INC       R5
   \                     ??zclClosures_SendDoorLockGetYearDayScheduleRes_2:
   \   000094   F582         MOV       DPL,A
   \   000096   8D83         MOV       DPH,R5
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?L_MOV_X
   \   00009D   7408         MOV       A,#0x8
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?Subroutine75 & 0xFFFF
   3116              payload[9] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 1 );
   3117              payload[10] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 2 );
   3118              payload[11] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 3 );
   3119            }
   \                     ??CrossCallReturnLabel_164:
   \   0000A5   12....       LCALL     ?L_MOV_X
   \   0000A8   E5..         MOV       A,?V1
   \   0000AA   F5..         MOV       ?V0,A
   \   0000AC   7409         MOV       A,#0x9
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0000B4   12....       LCALL     ?L_MOV_X
   \   0000B7   7410         MOV       A,#0x10
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?UL_SHR
   \   0000BE   740A         MOV       A,#0xa
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000C6   12....       LCALL     ?L_MOV_X
   \   0000C9   7418         MOV       A,#0x18
   \   0000CB   78..         MOV       R0,#?V0
   \   0000CD   12....       LCALL     ?UL_SHR
   \   0000D0   740B         MOV       A,#0xb
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   F0           MOVX      @DPTR,A
   \   0000D8   8002         SJMP      ??zclClosures_SendDoorLockGetYearDayScheduleRes_3
   3120            else
   3121            {
   3122              payloadLen = 4;
   \                     ??zclClosures_SendDoorLockGetYearDayScheduleRes_1:
   \   0000DA   7904         MOV       R1,#0x4
   3123            }
   3124          
   3125            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3126                                    COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3127                                    disableDefaultRsp, 0, seqNum, payloadLen, payload );
   \                     ??zclClosures_SendDoorLockGetYearDayScheduleRes_3:
   \   0000DC                ; Setup parameters for call to function zcl_SendCommand
   \   0000DC   AC..         MOV       R4,?XSP + 0
   \   0000DE   AD..         MOV       R5,?XSP + 1
   \   0000E0   8C..         MOV       ?V0,R4
   \   0000E2   8D..         MOV       ?V1,R5
   \   0000E4   78..         MOV       R0,#?V0
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   E9           MOV       A,R1
   \   0000EA   F5..         MOV       ?V0,A
   \   0000EC   75..00       MOV       ?V1,#0x0
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F4   741F         MOV       A,#0x1f
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FF   E4           CLR       A
   \   000100   F5..         MOV       ?V0,A
   \   000102   78..         MOV       R0,#?V0
   \   000104   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000107   7421         MOV       A,#0x21
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   75..01       MOV       ?V0,#0x1
   \   000115   78..         MOV       R0,#?V0
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011A   78..         MOV       R0,#?V0
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011F   75..0F       MOV       ?V0,#0xf
   \   000122   78..         MOV       R0,#?V0
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000127   7C01         MOV       R4,#0x1
   \   000129   7D01         MOV       R5,#0x1
   \   00012B   EE           MOV       A,R6
   \   00012C   F9           MOV       R1,A
   \   00012D   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   \   000133   740C         MOV       A,#0xc
   \   000135                REQUIRE ?Subroutine6
   \   000135                ; // Fall through to label ?Subroutine6
   3128          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F06         MOV       R7,#0x6
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   85....       MOV       ?V4,?V0
   \   000007   F5..         MOV       ?V5,A
   \   000009   85..82       MOV       DPL,?V4
   \   00000C   F583         MOV       DPH,A
   \   00000E   78..         MOV       R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   8582..       MOV       ?V0,DPL
   \   000006   8583..       MOV       ?V1,DPH
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   3129          
   3130          /*********************************************************************
   3131           * @fn      zclClosures_SendDoorLockGetHolidayScheduleResponse
   3132           *
   3133           * @brief   Call to send out a Get Holiday Schedule Response
   3134           *
   3135           * @param   srcEP - Sending application's endpoint
   3136           * @param   dstAddr - where you want the message to go
   3137           * @param   pCmd:
   3138           *             holidayScheduleID - A unique ID for given Holiday Schedule (0 to 254)
   3139           *             status - Returns the state due to the requesting command
   3140           *             zigBeeLocalStartTime - Start time of the Year Day Schedule representing by ZigBeeLocalTime
   3141           *             zigBeeLocalEndTime - End time of the Year Day Schedule representing by ZigBeeLocalTime
   3142           *             operatingModeDuringHoliday - A valid enumeration value as listed in operating mode attribute
   3143           * @param   disableDefaultRsp - decides default response is necessary or not
   3144           * @param   seqNum - sequence number of the command packet
   3145           *
   3146           * @return  ZStatus_t
   3147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3148          ZStatus_t zclClosures_SendDoorLockGetHolidayScheduleResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetHolidayScheduleResponse:
   3149                                                                        zclDoorLockGetHolidayScheduleRsp_t *pCmd,
   3150                                                                        uint8 disableDefaultRsp, uint8 seqNum )
   3151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   3152            uint8 payload[PAYLOAD_LEN_GET_HOLIDAY_SCHEDULE_RSP];
   3153            uint8 payloadLen = sizeof( payload );
   \   00000C   790B         MOV       R1,#0xb
   3154          
   3155            payload[0] = pCmd->holidayScheduleID;
   \   00000E   12....       LCALL     ?Subroutine34 & 0xFFFF
   3156            payload[1] = pCmd->status;
   \                     ??CrossCallReturnLabel_82:
   \   000011   C0E0         PUSH      A
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   D0E0         POP       A
   \   00001A   12....       LCALL     ?Subroutine85 & 0xFFFF
   3157          
   3158            if ( pCmd->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_192:
   \   00001D   6003         JZ        $+5
   \   00001F   02....       LJMP      ??zclClosures_SendDoorLockGetHolidayScheduleRes_1 & 0xFFFF
   3159            {
   3160              payload[2] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 0 );
   \   000022   EC           MOV       A,R4
   \   000023   2402         ADD       A,#0x2
   \   000025   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000028   12....       LCALL     ?L_MOV_X
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine65 & 0xFFFF
   3161              payload[3] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 1 );
   \                     ??CrossCallReturnLabel_134:
   \   000033   12....       LCALL     ?L_MOV_X
   \   000036   E5..         MOV       A,?V1
   \   000038   F5..         MOV       ?V0,A
   \   00003A   7403         MOV       A,#0x3
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine65 & 0xFFFF
   3162              payload[4] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 2 );
   \                     ??CrossCallReturnLabel_135:
   \   000042   12....       LCALL     ?L_MOV_X
   \   000045   7410         MOV       A,#0x10
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?UL_SHR
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine65 & 0xFFFF
   3163              payload[5] = BREAK_UINT32( pCmd->zigBeeLocalStartTime, 3 );
   \                     ??CrossCallReturnLabel_136:
   \   000054   12....       LCALL     ?L_MOV_X
   \   000057   7418         MOV       A,#0x18
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?UL_SHR
   \   00005E   7405         MOV       A,#0x5
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   E5..         MOV       A,?V0
   \   000065   F0           MOVX      @DPTR,A
   3164              payload[6] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 0 );
   \   000066   EC           MOV       A,R4
   \   000067   2406         ADD       A,#0x6
   \   000069   12....       LCALL     ?Subroutine91 & 0xFFFF
   3165              payload[7] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 1 );
   3166              payload[8] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 2 );
   3167              payload[9] = BREAK_UINT32( pCmd->zigBeeLocalEndTime, 3 );
   3168              payload[10] = pCmd->operatingModeDuringHoliday;
   3169            }
   \                     ??CrossCallReturnLabel_204:
   \   00006C   12....       LCALL     ?L_MOV_X
   \   00006F   7406         MOV       A,#0x6
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000077   12....       LCALL     ?L_MOV_X
   \   00007A   E5..         MOV       A,?V1
   \   00007C   F5..         MOV       ?V0,A
   \   00007E   7407         MOV       A,#0x7
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000086   12....       LCALL     ?L_MOV_X
   \   000089   7410         MOV       A,#0x10
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?UL_SHR
   \   000090   7408         MOV       A,#0x8
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000098   12....       LCALL     ?L_MOV_X
   \   00009B   7418         MOV       A,#0x18
   \   00009D   78..         MOV       R0,#?V0
   \   00009F   12....       LCALL     ?UL_SHR
   \   0000A2   7409         MOV       A,#0x9
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   E5..         MOV       A,?V0
   \   0000A9   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   C0E0         PUSH      A
   \   0000B1   740A         MOV       A,#0xa
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   D0E0         POP       A
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   8002         SJMP      ??zclClosures_SendDoorLockGetHolidayScheduleRes_2
   3170            else
   3171            {
   3172              payloadLen = 2;
   \                     ??zclClosures_SendDoorLockGetHolidayScheduleRes_1:
   \   0000BB   7902         MOV       R1,#0x2
   3173            }
   3174          
   3175            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3176                                    COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3177                                    disableDefaultRsp, 0, seqNum, payloadLen, payload );
   \                     ??zclClosures_SendDoorLockGetHolidayScheduleRes_2:
   \   0000BD                ; Setup parameters for call to function zcl_SendCommand
   \   0000BD   AC..         MOV       R4,?XSP + 0
   \   0000BF   AD..         MOV       R5,?XSP + 1
   \   0000C1   8C..         MOV       ?V0,R4
   \   0000C3   8D..         MOV       ?V1,R5
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CA   E9           MOV       A,R1
   \   0000CB   F5..         MOV       ?V0,A
   \   0000CD   75..00       MOV       ?V1,#0x0
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   741E         MOV       A,#0x1e
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E0   E4           CLR       A
   \   0000E1   F5..         MOV       ?V0,A
   \   0000E3   78..         MOV       R0,#?V0
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E8   7420         MOV       A,#0x20
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F3   75..01       MOV       ?V0,#0x1
   \   0000F6   78..         MOV       R0,#?V0
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FB   78..         MOV       R0,#?V0
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000100   75..12       MOV       ?V0,#0x12
   \   000103   78..         MOV       R0,#?V0
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000108   7C01         MOV       R4,#0x1
   \   00010A   7D01         MOV       R5,#0x1
   \   00010C   EE           MOV       A,R6
   \   00010D   F9           MOV       R1,A
   \   00010E   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   \   000114   740B         MOV       A,#0xb
   \   000116   02....       LJMP      ?Subroutine6 & 0xFFFF
   3178          }
   3179          
   3180          /*********************************************************************
   3181           * @fn      zclClosures_SendDoorLockGetUserTypeResponse
   3182           *
   3183           * @brief   Call to send out a Get User Type Response
   3184           *
   3185           * @param   srcEP - Sending application's endpoint
   3186           * @param   dstAddr - where you want the message to go
   3187           * @param   userID - User ID is between 0 - [# PINs User supported attribute]
   3188           * @param   userType - Used to indicate what the type is for a specific User ID
   3189           * @param   disableDefaultRsp - decides default response is necessary or not
   3190           * @param   seqNum - sequence number of the command packet
   3191           *
   3192           * @return  ZStatus_t
   3193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3194          ZStatus_t zclClosures_SendDoorLockGetUserTypeResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetUserTypeResponse:
   3195                                                                 uint16 userID, uint8 userType,
   3196                                                                 uint8 disableDefaultRsp, uint8 seqNum )
   3197          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   3198            uint8 payload[PAYLOAD_LEN_GET_USER_TYPE_RSP];
   3199          
   3200            payload[0] = LO_UINT16(userID);
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   3201            payload[1] = HI_UINT16(userID);
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
   3202            payload[2] = userType;
   \   00001B   740D         MOV       A,#0xd
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   3203          
   3204            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3205                                    COMMAND_CLOSURES_GET_USER_TYPE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3206                                    disableDefaultRsp, 0, seqNum, PAYLOAD_LEN_GET_USER_TYPE_RSP, payload );
   \                     ??CrossCallReturnLabel_495:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V0,#0x3
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7415         MOV       A,#0x15
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..01       MOV       ?V0,#0x1
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   75..15       MOV       ?V0,#0x15
   \   000069                REQUIRE ?Subroutine4
   \   000069                ; // Fall through to label ?Subroutine4
   3207          }
   3208          
   3209          /*********************************************************************
   3210           * @fn      zclClosures_SendDoorLockGetRFIDCodeResponse
   3211           *
   3212           * @brief   Call to send out a Get RFID Code Response
   3213           *
   3214           * @param   srcEP - Sending application's endpoint
   3215           * @param   dstAddr - where you want the message to go
   3216           * @param   pPayload:
   3217           *           userID - User ID is between 0 - [# PINs User supported attribute]
   3218           *           userStatus - Used to indicate what the status is for a specific User ID
   3219           *           userType - Used to indicate what the type is for a specific User ID
   3220           *           aRfidCode - A ZigBee string indicating the RFID code used to create the event
   3221           * @param   disableDefaultRsp - decides default response is necessary or not
   3222           * @param   seqNum - sequence number of the command packet
   3223           *
   3224           * @return  ZStatus_t
   3225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3226          ZStatus_t zclClosures_SendDoorLockGetRFIDCodeResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockGetRFIDCodeResponse:
   3227                                                                 zclDoorLockGetRFIDCodeRsp_t *pPayload,
   3228                                                                 uint8 disableDefaultRsp, uint8 seqNum )
   3229          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   3230            uint8 i;
   3231            uint8 *pBuf;  // variable length payload
   3232            uint8 offset;
   3233            uint8 calculatedArrayLen;
   3234            uint8 calculatedBufSize;
   3235            ZStatus_t status;
   3236          
   3237            // first octet of PIN/RFID Code variable string identifies its length
   3238            calculatedArrayLen = pPayload->pRfidCode[0] + 1;   // add first byte of string
   3239          
   3240            // determine total size of buffer
   3241            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_GET_RFID_CODE_RSP;
   3242          
   3243            pBuf = zcl_mem_alloc( calculatedBufSize );
   3244            if ( !pBuf )
   \                     ??CrossCallReturnLabel_7:
   \   00000D   7004         JNZ       ??zclClosures_SendDoorLockGetRFIDCodeResponse_0
   3245            {
   3246              return ( ZMemError );  // no memory
   \   00000F   7910         MOV       R1,#0x10
   \   000011   8060         SJMP      ??CrossCallReturnLabel_435
   3247            }
   3248          
   3249            // over-the-air is always little endian. Break into a byte stream.
   3250            pBuf[0] = LO_UINT16(pPayload->userID);
   \                     ??zclClosures_SendDoorLockGetRFIDCodeResponse_0:
   \   000013   12....       LCALL     ?Subroutine9 & 0xFFFF
   3251            pBuf[1] = HI_UINT16(pPayload->userID);
   3252            pBuf[2] = pPayload->userStatus;
   3253            pBuf[3] = pPayload->userType;
   3254            offset = 4;
   3255            for ( i = 0; i < calculatedArrayLen; i++ )
   \                     ??CrossCallReturnLabel_3:
   \   000016   800D         SJMP      ??zclClosures_SendDoorLockGetRFIDCodeResponse_1
   3256            {
   3257              pBuf[offset++] = pPayload->pRfidCode[i];
   \                     ??zclClosures_SendDoorLockGetRFIDCodeResponse_2:
   \   000018   12....       LCALL     ?Subroutine10 & 0xFFFF
   3258            }
   \                     ??CrossCallReturnLabel_472:
   \   00001B   C0E0         PUSH      A
   \   00001D   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000020   D0E0         POP       A
   \   000022   F0           MOVX      @DPTR,A
   \   000023   09           INC       R1
   \   000024   08           INC       R0
   \                     ??zclClosures_SendDoorLockGetRFIDCodeResponse_1:
   \   000025   E8           MOV       A,R0
   \   000026   C3           CLR       C
   \   000027   95..         SUBB      A,?V3
   \   000029   40ED         JC        ??zclClosures_SendDoorLockGetRFIDCodeResponse_2
   3259          
   3260            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3261                                      COMMAND_CLOSURES_GET_RFID_CODE_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3262                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   00002B                ; Setup parameters for call to function zcl_SendCommand
   \   00002B   78..         MOV       R0,#?V6
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   78..         MOV       R0,#?V8
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   741A         MOV       A,#0x1a
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000040   E4           CLR       A
   \   000041   F5..         MOV       ?V0,A
   \   000043   F5..         MOV       ?V1,A
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   741C         MOV       A,#0x1c
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000055   75..01       MOV       ?V0,#0x1
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000062   75..17       MOV       ?V0,#0x17
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   12....       LCALL     ?Subroutine93 & 0xFFFF
   3263            zcl_mem_free( pBuf );
   3264            return status;
   \                     ??CrossCallReturnLabel_435:
   \   000073                REQUIRE ?Subroutine3
   \   000073                ; // Fall through to label ?Subroutine3
   3265          }
   3266          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3267          ZStatus_t zclClosures_SendSetTemporaryPinStatusResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendSetTemporaryPinStatusResponse:
   3268                                                            uint8 status, uint8 disableDefaultRsp, uint8 seqNum )
   3269          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   3270            uint8 payload[1];   // 1 byte payload
   3271          
   3272            payload[0] = status;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   3273          
   3274            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3275                                    COMMAND_CLOSURES_SET_TEMPORARY_PIN_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3276                                    disableDefaultRsp, 0, seqNum, sizeof( payload ), payload );
   \                     ??CrossCallReturnLabel_522:
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV       ?V2,#0x1
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7411         MOV       A,#0x11
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002F   E4           CLR       A
   \   000030   F5..         MOV       ?V2,A
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   ED           MOV       A,R5
   \   000038   F5..         MOV       ?V1,A
   \   00003A   78..         MOV       R0,#?V1
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003F   75..01       MOV       ?V1,#0x1
   \   000042   78..         MOV       R0,#?V1
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000047   78..         MOV       R0,#?V1
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   75..1A       MOV       ?V1,#0x1a
   \   00004F   02....       LJMP      ??Subroutine185_0 & 0xFFFF
   3277          }
   3278          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3279          ZStatus_t zclClosures_SendModifyPinStatusResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendModifyPinStatusResponse:
   3280                                                            uint8 status, uint8 disableDefaultRsp, uint8 seqNum )
   3281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   3282            uint8 payload[1];   // 1 byte payload
   3283          
   3284            payload[0] = status;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   3285          
   3286            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3287                                    COMMAND_CLOSURES_MODIFY_PIN_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3288                                    disableDefaultRsp, 0, seqNum, sizeof( payload ), payload );
   \                     ??CrossCallReturnLabel_523:
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV       ?V2,#0x1
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7411         MOV       A,#0x11
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002F   E4           CLR       A
   \   000030   F5..         MOV       ?V2,A
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   ED           MOV       A,R5
   \   000038   F5..         MOV       ?V1,A
   \   00003A   78..         MOV       R0,#?V1
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003F   75..01       MOV       ?V1,#0x1
   \   000042   78..         MOV       R0,#?V1
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000047   78..         MOV       R0,#?V1
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   75..1B       MOV       ?V1,#0x1b
   \   00004F   02....       LJMP      ??Subroutine185_0 & 0xFFFF
   3289          }
   3290          
   3291          /*********************************************************************
   3292           * @fn      zclClosures_SendDoorLockOperationEventNotification
   3293           *
   3294           * @brief   Call to send out a Operation Event Notification
   3295           *
   3296           * @param   srcEP - Sending application's endpoint
   3297           * @param   dstAddr - where you want the message to go
   3298           * @param   pPayload:
   3299           *           operationEventSource - Indicates where the event was triggered from
   3300           *           operationEventCode - (Optional) a notification whenever there is a significant operation event on the lock
   3301           *           userID - User ID is between 0 - [# PINs User supported attribute]
   3302           *           pin - The PIN that is associated with the User ID who performed the event
   3303           *           zigBeeLocalTime - Indicates when the event is triggered
   3304           *           aData - Used to pass data associated with a particular event
   3305           * @param   disableDefaultRsp - decides default response is necessary or not
   3306           * @param   seqNum - sequence number of the command packet
   3307           *
   3308           * @return  ZStatus_t
   3309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3310          ZStatus_t zclClosures_SendDoorLockOperationEventNotification( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockOperationEventNotification:
   3311                                                                        zclDoorLockOperationEventNotification_t *pPayload,
   3312                                                                        uint8 disableDefaultRsp, uint8 seqNum )
   3313          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V7,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   3314            uint8 i;
   3315            uint8 *pBuf;  // variable length payload
   3316            uint8 offset;
   3317            uint8 calculatedArrayLen;
   3318            uint16 calculatedBufSize;
   3319            ZStatus_t status;
   3320          
   3321            // set variable length if data is available
   3322            calculatedArrayLen = pPayload->pData[0] + 1; // add first byte of string
   \   00000F   EC           MOV       A,R4
   \   000010   2409         ADD       A,#0x9
   \   000012   12....       LCALL     ?Subroutine48 & 0xFFFF
   3323          
   3324            // determine total size of buffer
   3325            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_OPERATION_EVENT_NOTIFICATION;
   \                     ??CrossCallReturnLabel_109:
   \   000015   2409         ADD       A,#0x9
   \   000017   12....       LCALL     ?Subroutine88 & 0xFFFF
   3326          
   3327            pBuf = zcl_mem_alloc( calculatedBufSize );
   3328            if ( !pBuf )
   \                     ??CrossCallReturnLabel_524:
   \   00001A   7005         JNZ       ??zclClosures_SendDoorLockOperationEventNotific_1
   3329            {
   3330              return ( ZMemError );  // no memory
   \   00001C   7910         MOV       R1,#0x10
   \   00001E   02....       LJMP      ??CrossCallReturnLabel_438 & 0xFFFF
   3331            }
   3332          
   3333            // over-the-air is always little endian. Break into a byte stream.
   3334            pBuf[0] = pPayload->operationEventSource;
   \                     ??zclClosures_SendDoorLockOperationEventNotific_1:
   \   000021   12....       LCALL     ?Subroutine18 & 0xFFFF
   3335            pBuf[1] = pPayload->operationEventCode;
   3336            pBuf[2] = LO_UINT16( pPayload->userID );
   3337            pBuf[3] = HI_UINT16( pPayload->userID );
   3338            pBuf[4] = pPayload->pin;
   3339            pBuf[5] = BREAK_UINT32(pPayload->zigBeeLocalTime, 0);
   \                     ??CrossCallReturnLabel_16:
   \   000024   EE           MOV       A,R6
   \   000025   2405         ADD       A,#0x5
   \   000027   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00002A   12....       LCALL     ?L_MOV_X
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   3340            pBuf[6] = BREAK_UINT32(pPayload->zigBeeLocalTime, 1);
   \                     ??CrossCallReturnLabel_531:
   \   000036   12....       LCALL     ?L_MOV_X
   \   000039   E5..         MOV       A,?V9
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   3341            pBuf[7] = BREAK_UINT32(pPayload->zigBeeLocalTime, 2);
   \                     ??CrossCallReturnLabel_532:
   \   00004A   12....       LCALL     ?L_MOV_X
   \   00004D   7410         MOV       A,#0x10
   \   00004F   78..         MOV       R0,#?V8
   \   000051   12....       LCALL     ?UL_SHR
   \   000054   12....       LCALL     ?Subroutine69 & 0xFFFF
   3342            pBuf[8] = BREAK_UINT32(pPayload->zigBeeLocalTime, 3);
   \                     ??CrossCallReturnLabel_528:
   \   000057   12....       LCALL     ?L_MOV_X
   \   00005A   7418         MOV       A,#0x18
   \   00005C   78..         MOV       R0,#?V8
   \   00005E   12....       LCALL     ?UL_SHR
   \   000061   85..82       MOV       DPL,?V0
   \   000064   85..83       MOV       DPH,?V1
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E5..         MOV       A,?V8
   \   000071   F0           MOVX      @DPTR,A
   3343            offset = 9;
   \   000072   7909         MOV       R1,#0x9
   3344            for ( i = 0; i < calculatedArrayLen; i++ )
   \   000074   7800         MOV       R0,#0x0
   \   000076   800D         SJMP      ??zclClosures_SendDoorLockOperationEventNotific_2
   3345            {
   3346              pBuf[offset++] = pPayload->pData[i];
   \                     ??zclClosures_SendDoorLockOperationEventNotific_3:
   \   000078   12....       LCALL     ?Subroutine10 & 0xFFFF
   3347            }
   \                     ??CrossCallReturnLabel_473:
   \   00007B   C0E0         PUSH      A
   \   00007D   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000080   D0E0         POP       A
   \   000082   F0           MOVX      @DPTR,A
   \   000083   09           INC       R1
   \   000084   08           INC       R0
   \                     ??zclClosures_SendDoorLockOperationEventNotific_2:
   \   000085   E8           MOV       A,R0
   \   000086   C3           CLR       C
   \   000087   95..         SUBB      A,?V6
   \   000089   40ED         JC        ??zclClosures_SendDoorLockOperationEventNotific_3
   3348          
   3349            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3350                                      COMMAND_CLOSURES_OPERATION_EVENT_NOTIFICATION, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3351                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   00008B                ; Setup parameters for call to function zcl_SendCommand
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   78..         MOV       R0,#?V2
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   741B         MOV       A,#0x1b
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V2,A
   \   0000A3   F5..         MOV       ?V3,A
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   741D         MOV       A,#0x1d
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   75..01       MOV       ?V2,#0x1
   \   0000B8   78..         MOV       R0,#?V2
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BD   78..         MOV       R0,#?V2
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   75..20       MOV       ?V2,#0x20
   \   0000C5   78..         MOV       R0,#?V2
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   7C01         MOV       R4,#0x1
   \   0000CC   7D01         MOV       R5,#0x1
   \   0000CE   AA..         MOV       R2,?V12
   \   0000D0   AB..         MOV       R3,?V13
   \   0000D2   A9..         MOV       R1,?V7
   \   0000D4   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DA   E9           MOV       A,R1
   \   0000DB   FE           MOV       R6,A
   3352            zcl_mem_free( pBuf );
   \   0000DC                ; Setup parameters for call to function osal_mem_free
   \   0000DC   AA..         MOV       R2,?V0
   \   0000DE   AB..         MOV       R3,?V1
   \   0000E0   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   3353            return status;
   \                     ??CrossCallReturnLabel_438:
   \   0000E3   02....       LJMP      ??Subroutine192_0 & 0xFFFF
   3354          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F5..         MOV       ?V2,A
   \   000002   E4           CLR       A
   \   000003   3400         ADDC      A,#0x0
   \   000005   F5..         MOV       ?V3,A
   \   000007                ; Setup parameters for call to function osal_mem_alloc
   \   000007                ; Setup parameters for call to function osal_mem_alloc
   \   000007   AA..         MOV       R2,?V2
   \   000009   FB           MOV       R3,A
   \   00000A                REQUIRE ??Subroutine200_0
   \   00000A                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   FB           MOV       R3,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   F583         MOV       DPH,A
   \   000008   78..         MOV       R0,#?V8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine201_0
   \   000006                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine202_0
   \   000002                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E5..         MOV       A,?V8
   \   000007                REQUIRE ??Subroutine203_0
   \   000007                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000003   78..         MOV       R0,#?V8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V5,A
   \   000006   85..82       MOV       DPL,?V4
   \   000009   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   00000C   F5..         MOV       ?V6,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000007   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00000A   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   00000D   A3           INC       DPTR
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   EE           MOV       A,R6
   \   000010   2402         ADD       A,#0x2
   \   000012   F8           MOV       R0,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F9           MOV       R1,A
   \   000016   8882         MOV       DPL,R0
   \   000018   F583         MOV       DPH,A
   \   00001A   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000006   A3           INC       DPTR
   \   000007   22           RET
   3355          
   3356          /*********************************************************************
   3357           * @fn      zclClosures_SendDoorLockProgrammingEventNotification
   3358           *
   3359           * @brief   Call to send out a Programming Event Notification
   3360           *
   3361           * @param   srcEP - Sending application's endpoint
   3362           * @param   dstAddr - where you want the message to go
   3363           * @param   pPayload:
   3364           *           programEventSource - Indicates where the event was triggered from
   3365           *           programEventCode - (Optional) a notification whenever there is a significant programming event on the lock
   3366           *           userID - User ID is between 0 - [# PINs User supported attribute]
   3367           *           pin - The PIN that is associated with the User ID who performed the event
   3368           *           userType - Used to indicate what the type is for a specific User ID
   3369           *           userStatus - Used to indicate what the status is for a specific User ID
   3370           *           zigBeeLocalTime - Indicates when the event is triggered
   3371           *           dataLen - Manufacture specific, describes length of aData
   3372           *           aData - Used to pass data associated with a particular event
   3373           * @param   disableDefaultRsp - decides default response is necessary or not
   3374           * @param   seqNum - sequence number of the command packet
   3375           *
   3376           * @return  ZStatus_t
   3377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3378          ZStatus_t zclClosures_SendDoorLockProgrammingEventNotification( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclClosures_SendDoorLockProgrammingEventNotification:
   3379                                                                          zclDoorLockProgrammingEventNotification_t *pPayload,
   3380                                                                          uint8 disableDefaultRsp, uint8 seqNum )
   3381          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V7,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   3382            uint8 i;
   3383            uint8 *pBuf;  // variable length payload
   3384            uint8 offset;
   3385            uint8 calculatedArrayLen;
   3386            uint16 calculatedBufSize;
   3387            ZStatus_t status;
   3388          
   3389            // set variable length if data is available
   3390            calculatedArrayLen = pPayload->pData[0] + 1;  // add first byte of string
   \   00000F   EC           MOV       A,R4
   \   000010   240B         ADD       A,#0xb
   \   000012   12....       LCALL     ?Subroutine48 & 0xFFFF
   3391          
   3392            // determine total size of buffer
   3393            calculatedBufSize = calculatedArrayLen + PAYLOAD_LEN_PROGRAMMING_EVENT_NOTIFICATION;
   \                     ??CrossCallReturnLabel_110:
   \   000015   240B         ADD       A,#0xb
   \   000017   12....       LCALL     ?Subroutine88 & 0xFFFF
   3394          
   3395            pBuf = zcl_mem_alloc( calculatedBufSize );
   3396            if ( !pBuf )
   \                     ??CrossCallReturnLabel_525:
   \   00001A   7005         JNZ       ??zclClosures_SendDoorLockProgrammingEventNotif_1
   3397            {
   3398              return ( ZMemError );  // no memory
   \   00001C   7910         MOV       R1,#0x10
   \   00001E   02....       LJMP      ??CrossCallReturnLabel_439 & 0xFFFF
   3399            }
   3400          
   3401            // over-the-air is always little endian. Break into a byte stream.
   3402            pBuf[0] = pPayload->programEventSource;
   \                     ??zclClosures_SendDoorLockProgrammingEventNotif_1:
   \   000021   12....       LCALL     ?Subroutine18 & 0xFFFF
   3403            pBuf[1] = pPayload->programEventCode;
   3404            pBuf[2] = LO_UINT16( pPayload->userID );
   3405            pBuf[3] = HI_UINT16( pPayload->userID );
   3406            pBuf[4] = pPayload->pin;
   3407            pBuf[5] = pPayload->userType;
   \                     ??CrossCallReturnLabel_17:
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00002B   12....       LCALL     ?Subroutine81 & 0xFFFF
   3408            pBuf[6] = pPayload->userStatus;
   \                     ??CrossCallReturnLabel_182:
   \   00002E   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000031   A3           INC       DPTR
   \   000032   F0           MOVX      @DPTR,A
   3409            pBuf[7] = BREAK_UINT32(pPayload->zigBeeLocalTime, 0);
   \   000033   EE           MOV       A,R6
   \   000034   2407         ADD       A,#0x7
   \   000036   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000039   12....       LCALL     ?L_MOV_X
   \   00003C   12....       LCALL     ?Subroutine69 & 0xFFFF
   3410            pBuf[8] = BREAK_UINT32(pPayload->zigBeeLocalTime, 1);
   \                     ??CrossCallReturnLabel_529:
   \   00003F   12....       LCALL     ?L_MOV_X
   \   000042   E5..         MOV       A,?V9
   \   000044   85..82       MOV       DPL,?V0
   \   000047   85..83       MOV       DPH,?V1
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   3411            pBuf[9] = BREAK_UINT32(pPayload->zigBeeLocalTime, 2);
   \                     ??CrossCallReturnLabel_533:
   \   000055   12....       LCALL     ?L_MOV_X
   \   000058   7410         MOV       A,#0x10
   \   00005A   78..         MOV       R0,#?V8
   \   00005C   12....       LCALL     ?UL_SHR
   \   00005F   85..82       MOV       DPL,?V0
   \   000062   85..83       MOV       DPH,?V1
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   3412            pBuf[10] = BREAK_UINT32(pPayload->zigBeeLocalTime, 3);
   \                     ??CrossCallReturnLabel_530:
   \   00006A   12....       LCALL     ?L_MOV_X
   \   00006D   7418         MOV       A,#0x18
   \   00006F   78..         MOV       R0,#?V8
   \   000071   12....       LCALL     ?UL_SHR
   \   000074   85..82       MOV       DPL,?V0
   \   000077   85..83       MOV       DPH,?V1
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   E5..         MOV       A,?V8
   \   000086   F0           MOVX      @DPTR,A
   3413            offset = 11;
   \   000087   790B         MOV       R1,#0xb
   3414            for ( i = 0; i < calculatedArrayLen; i++ )
   \   000089   7800         MOV       R0,#0x0
   \   00008B   800D         SJMP      ??zclClosures_SendDoorLockProgrammingEventNotif_2
   3415            {
   3416              pBuf[offset++] = pPayload->pData[i];
   \                     ??zclClosures_SendDoorLockProgrammingEventNotif_3:
   \   00008D   12....       LCALL     ?Subroutine10 & 0xFFFF
   3417            }
   \                     ??CrossCallReturnLabel_474:
   \   000090   C0E0         PUSH      A
   \   000092   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000095   D0E0         POP       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098   09           INC       R1
   \   000099   08           INC       R0
   \                     ??zclClosures_SendDoorLockProgrammingEventNotif_2:
   \   00009A   E8           MOV       A,R0
   \   00009B   C3           CLR       C
   \   00009C   95..         SUBB      A,?V6
   \   00009E   40ED         JC        ??zclClosures_SendDoorLockProgrammingEventNotif_3
   3418          
   3419            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
   3420                                      COMMAND_CLOSURES_PROGRAMMING_EVENT_NOTIFICATION, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   3421                                      disableDefaultRsp, 0, seqNum, calculatedBufSize, pBuf );
   \   0000A0                ; Setup parameters for call to function zcl_SendCommand
   \   0000A0   78..         MOV       R0,#?V0
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   741B         MOV       A,#0x1b
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   E4           CLR       A
   \   0000B6   F5..         MOV       ?V2,A
   \   0000B8   F5..         MOV       ?V3,A
   \   0000BA   78..         MOV       R0,#?V2
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BF   741D         MOV       A,#0x1d
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   75..01       MOV       ?V2,#0x1
   \   0000CD   78..         MOV       R0,#?V2
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D2   78..         MOV       R0,#?V2
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D7   75..21       MOV       ?V2,#0x21
   \   0000DA   78..         MOV       R0,#?V2
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DF   7C01         MOV       R4,#0x1
   \   0000E1   7D01         MOV       R5,#0x1
   \   0000E3   AA..         MOV       R2,?V12
   \   0000E5   AB..         MOV       R3,?V13
   \   0000E7   A9..         MOV       R1,?V7
   \   0000E9   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EF   E9           MOV       A,R1
   \   0000F0   FE           MOV       R6,A
   3422            zcl_mem_free( pBuf );
   \   0000F1                ; Setup parameters for call to function osal_mem_free
   \   0000F1   AA..         MOV       R2,?V0
   \   0000F3   AB..         MOV       R3,?V1
   \   0000F5   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   3423            return status;
   \                     ??CrossCallReturnLabel_439:
   \   0000F8   02....       LJMP      ??Subroutine192_0 & 0xFFFF
   3424          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000004   A3           INC       DPTR
   \   000005   22           RET
   3425          
   3426          #endif //ZCL_DOORLOCK
   3427          
   3428          #ifdef ZCL_WINDOWCOVERING
   3429          /*********************************************************************
   3430           * @fn      zclClosures_ProcessInWindowCovering
   3431           *
   3432           * @brief   Process in the received Window Covering cluster Command.
   3433           *
   3434           * @param   pInMsg - pointer to the incoming message
   3435           *
   3436           * @return  ZStatus_t
   3437           */
   3438          static ZStatus_t zclClosures_ProcessInWindowCovering( zclIncoming_t *pInMsg,
   3439                                                                zclClosures_WindowCoveringAppCallbacks_t *pCBs )
   3440          {
   3441            ZStatus_t status = ZCL_STATUS_SUCCESS;
   3442            uint8 *pData = pInMsg->pData;
   3443          
   3444            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3445            {
   3446              switch ( pInMsg->hdr.commandID )
   3447              {
   3448              case COMMAND_CLOSURES_UP_OPEN:
   3449                if ( pCBs->pfnWindowCoveringUpOpen )
   3450                {
   3451                  pCBs->pfnWindowCoveringUpOpen();
   3452                }
   3453                break;
   3454          
   3455              case COMMAND_CLOSURES_DOWN_CLOSE:
   3456                if ( pCBs->pfnWindowCoveringDownClose )
   3457                {
   3458                  pCBs->pfnWindowCoveringDownClose();
   3459                }
   3460                break;
   3461          
   3462              case COMMAND_CLOSURES_STOP:
   3463                if ( pCBs->pfnWindowCoveringStop )
   3464                {
   3465                  pCBs->pfnWindowCoveringStop();
   3466                }
   3467                break;
   3468          
   3469              case COMMAND_CLOSURES_GO_TO_LIFT_VALUE:
   3470                if ( pCBs->pfnWindowCoveringGotoLiftValue )
   3471                {
   3472                  if ( pCBs->pfnWindowCoveringGotoLiftValue( BUILD_UINT16( pData[0], pData[1] ) ) == FALSE )
   3473                  {
   3474                    status = ZCL_STATUS_INVALID_VALUE;
   3475                  }
   3476                }
   3477                break;
   3478          
   3479              case COMMAND_CLOSURES_GO_TO_LIFT_PERCENTAGE:
   3480                if ( pCBs->pfnWindowCoveringGotoLiftPercentage )
   3481                {
   3482                  if ( pCBs->pfnWindowCoveringGotoLiftPercentage( pData[0] ) == FALSE )
   3483                  {
   3484                    status = ZCL_STATUS_INVALID_VALUE;
   3485                  }
   3486                }
   3487                break;
   3488          
   3489              case COMMAND_CLOSURES_GO_TO_TILT_VALUE:
   3490                if ( pCBs->pfnWindowCoveringGotoTiltValue )
   3491                {
   3492                  if ( pCBs->pfnWindowCoveringGotoTiltValue( BUILD_UINT16( pData[0], pData[1] ) ) == FALSE )
   3493                  {
   3494                    status = ZCL_STATUS_INVALID_VALUE;
   3495                  }
   3496                }
   3497                break;
   3498          
   3499              case COMMAND_CLOSURES_GO_TO_TILT_PERCENTAGE:
   3500                if ( pCBs->pfnWindowCoveringGotoTiltPercentage )
   3501                {
   3502                  if ( pCBs->pfnWindowCoveringGotoTiltPercentage( pData[0] ) == FALSE )
   3503                  {
   3504                    status = ZCL_STATUS_INVALID_VALUE;
   3505                  }
   3506                }
   3507                break;
   3508          
   3509              default:
   3510                return( ZFailure );
   3511              }
   3512            }
   3513            // no Client command
   3514          
   3515            return ( status );
   3516          }
   3517          
   3518          /*********************************************************************
   3519           * @fn      zclClosures_WindowCoveringSimpleReq
   3520           *
   3521           * @brief   Call to send out a Window Covering command with no payload
   3522           *          as Up/Open, Down/Close or Stop
   3523           *
   3524           * @param   srcEP - Sending application's endpoint
   3525           * @param   dstAddr - where you want the message to go
   3526           * @param   cmd - Command ID
   3527           * @param   disableDefaultRsp - decides default response is necessary or not
   3528           * @param   seqNum - sequence number of the command packet
   3529           *
   3530           * @return  ZStatus_t
   3531           */
   3532          ZStatus_t zclClosures_WindowCoveringSimpleReq( uint8 srcEP, afAddrType_t *dstAddr,
   3533                                                         uint8 cmd, uint8 disableDefaultRsp, uint8 seqNum )
   3534          {
   3535            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
   3536                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   3537                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   3538          }
   3539          
   3540          /*********************************************************************
   3541           * @fn      zclClosures_WindowCoveringSendGoToValueReq
   3542           *
   3543           * @brief   Call to send out a Go to Value Request Command
   3544           *
   3545           * @param   srcEP - Sending application's endpoint
   3546           * @param   dstAddr - where you want the message to go
   3547           * @param   cmd - Command ID for COMMAND_CLOSURES_GO_TO_LIFT_VALUE
   3548           * @param   liftValue - payload
   3549           * @param   disableDefaultRsp - decides default response is necessary or not
   3550           * @param   seqNum - sequence number of the command packet
   3551           *
   3552           * @return  ZStatus_t
   3553           */
   3554          ZStatus_t zclClosures_WindowCoveringSendGoToValueReq( uint8 srcEP, afAddrType_t *dstAddr,
   3555                                                                uint8 cmd, uint16 Value,
   3556                                                                uint8 disableDefaultRsp, uint8 seqNum )
   3557          {
   3558            uint8 buf[ZCL_WC_GOTOVALUEREQ_PAYLOADLEN];
   3559          
   3560            buf[0] = LO_UINT16( Value );
   3561            buf[1] = HI_UINT16( Value );
   3562          
   3563            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
   3564                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   3565                                    disableDefaultRsp, 0, seqNum,
   3566                                    ZCL_WC_GOTOVALUEREQ_PAYLOADLEN, buf );
   3567          }
   3568          
   3569          /*********************************************************************
   3570           * @fn      zclClosures_WindowCoveringSendGoToPercentageReq
   3571           *
   3572           * @brief   Call to send out a Go to Percentage Request Command
   3573           *
   3574           * @param   srcEP - Sending application's endpoint
   3575           * @param   dstAddr - where you want the message to go
   3576           * @param   cmd - Command ID e.g. COMMAND_CLOSURES_GO_TO_LIFT_PERCENTAGE
   3577           * @param   percentageLiftValue - payload
   3578           * @param   disableDefaultRsp - decides default response is necessary or not
   3579           * @param   seqNum - sequence number of the command packet
   3580           *
   3581           * @return  ZStatus_t
   3582           */
   3583          ZStatus_t zclClosures_WindowCoveringSendGoToPercentageReq( uint8 srcEP, afAddrType_t *dstAddr,
   3584                                                                     uint8 cmd, uint8 percentageValue,
   3585                                                                     uint8 disableDefaultRsp, uint8 seqNum )
   3586          {
   3587            uint8 buf[ZCL_WC_GOTOPERCENTAGEREQ_PAYLOADLEN];
   3588          
   3589            buf[0] = percentageValue;
   3590          
   3591            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
   3592                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   3593                                    disableDefaultRsp, 0, seqNum,
   3594                                    ZCL_WC_GOTOPERCENTAGEREQ_PAYLOADLEN, buf );
   3595          }
   3596          #endif //ZCL_WINDOWCOVERING
   3597          
   3598          /********************************************************************************************
   3599          *********************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     12   zclClosures_HdlIncoming
        0     12   -> StubAPS_InterPan
        0     12   -> zclClosures_ProcessInDoorLockCmds
      1     56   zclClosures_ProcessInDoorLock
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
      1     53   zclClosures_ProcessInDoorLockCmds
        0     41   -> zclClosures_ProcessInDoorLock
        0     41   -> zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
        0     41   -> zclClosures_ProcessInDoorLockGetLogRecordRsp
        0     41   -> zclClosures_ProcessInDoorLockGetPINCodeRsp
        0     41   -> zclClosures_ProcessInDoorLockGetRFIDCodeRsp
        0     41   -> zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
        0     41   -> zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
        0     41   -> zclClosures_ProcessInDoorLockOperationEventNotification
        0     41   -> zclClosures_ProcessInDoorLockProgrammingEventNotification
        0     41   -> zclClosures_ProcessInDoorLockSetHolidaySchedule
        0     41   -> zclClosures_ProcessInDoorLockSetPINCode
        0     41   -> zclClosures_ProcessInDoorLockSetRFIDCode
        0     41   -> zclClosures_ProcessInDoorLockSetTemporaryPin
        0     41   -> zclClosures_ProcessInDoorLockSetWeekDaySchedule
        0     41   -> zclClosures_ProcessInDoorLockSetYearDaySchedule
        0     41   -> zclClosures_ProcessInDoorLockUnlockWithTimeout
      1     68   zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
      1     76   zclClosures_ProcessInDoorLockGetLogRecordRsp
        0     35   -> osal_mem_alloc
        0     35   -> osal_mem_free
      1     63   zclClosures_ProcessInDoorLockGetPINCodeRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     63   zclClosures_ProcessInDoorLockGetRFIDCodeRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     62   zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
      1     69   zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
      1     74   zclClosures_ProcessInDoorLockOperationEventNotification
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
      1     76   zclClosures_ProcessInDoorLockProgrammingEventNotification
        0     35   -> osal_mem_alloc
        0     35   -> osal_mem_free
      1     67   zclClosures_ProcessInDoorLockSetHolidaySchedule
      1     63   zclClosures_ProcessInDoorLockSetPINCode
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     63   zclClosures_ProcessInDoorLockSetRFIDCode
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     69   zclClosures_ProcessInDoorLockSetTemporaryPin
        0     28   -> osal_mem_alloc
        0     28   -> osal_mem_free
      1     61   zclClosures_ProcessInDoorLockSetWeekDaySchedule
      1     68   zclClosures_ProcessInDoorLockSetYearDaySchedule
      1     61   zclClosures_ProcessInDoorLockUnlockWithTimeout
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     14   zclClosures_RegisterDoorLockCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin
      0     24   zclClosures_SendDoorLockClearAllCodesRequest
        0     23   -> zcl_SendCommand
      1     38   zclClosures_SendDoorLockGetHolidayScheduleResponse
        0     36   -> zcl_SendCommand
      1     25   zclClosures_SendDoorLockGetLogRecordRequest
        0     23   -> zcl_SendCommand
      1     36   zclClosures_SendDoorLockGetLogRecordResponse
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     34   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockGetPINCodeResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockGetRFIDCodeResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     27   zclClosures_SendDoorLockGetUserStatusResponse
        0     24   -> zcl_SendCommand
      1     27   zclClosures_SendDoorLockGetUserTypeResponse
        0     24   -> zcl_SendCommand
      1     32   zclClosures_SendDoorLockGetWeekDayScheduleResponse
        0     30   -> zcl_SendCommand
      1     39   zclClosures_SendDoorLockGetYearDayScheduleResponse
        0     37   -> zcl_SendCommand
      1     26   zclClosures_SendDoorLockHolidayScheduleRequest
        0     24   -> zcl_SendCommand
      1     35   zclClosures_SendDoorLockOperationEventNotification
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     35   zclClosures_SendDoorLockProgrammingEventNotification
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     30   zclClosures_SendDoorLockScheduleRequest
        0     26   -> zcl_SendCommand
      1     48   zclClosures_SendDoorLockSetHolidayScheduleRequest
        0     38   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockSetPINCodeRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     34   zclClosures_SendDoorLockSetRFIDCodeRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     27   zclClosures_SendDoorLockSetUserStatusRequest
        0     24   -> zcl_SendCommand
      1     27   zclClosures_SendDoorLockSetUserTypeRequest
        0     24   -> zcl_SendCommand
      1     39   zclClosures_SendDoorLockSetWeekDayScheduleRequest
        0     31   -> zcl_SendCommand
      1     50   zclClosures_SendDoorLockSetYearDayScheduleRequest
        0     39   -> zcl_SendCommand
      1     26   zclClosures_SendDoorLockStatusResponse
        0     24   -> zcl_SendCommand
      1     33   zclClosures_SendDoorLockUnlockTimeoutRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     28   zclClosures_SendDoorLockUserIDRequest
        0     25   -> zcl_SendCommand
      1     25   zclClosures_SendModifyPinStatusResponse
        0     24   -> zcl_SendCommand
      1     25   zclClosures_SendSetTemporaryPinStatusResponse
        0     24   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ??Subroutine141_0
       8  ??Subroutine142_0
       7  ??Subroutine143_0
       5  ??Subroutine144_0
       1  ??Subroutine145_0
      17  ??Subroutine146_0
       1  ??Subroutine147_0
       1  ??Subroutine148_0
       1  ??Subroutine149_0
       1  ??Subroutine150_0
       1  ??Subroutine151_0
       1  ??Subroutine152_0
      13  ??Subroutine153_0
       1  ??Subroutine154_0
       1  ??Subroutine155_0
       1  ??Subroutine156_0
       1  ??Subroutine157_0
      16  ??Subroutine158_0
       6  ??Subroutine159_0
       4  ??Subroutine160_0
       9  ??Subroutine161_0
       1  ??Subroutine162_0
       1  ??Subroutine163_0
       1  ??Subroutine164_0
       1  ??Subroutine165_0
       8  ??Subroutine166_0
      11  ??Subroutine167_0
       1  ??Subroutine168_0
       1  ??Subroutine169_0
       1  ??Subroutine170_0
       1  ??Subroutine171_0
       1  ??Subroutine172_0
       1  ??Subroutine173_0
       3  ??Subroutine174_0
      11  ??Subroutine175_0
       6  ??Subroutine176_0
      12  ??Subroutine177_0
       8  ??Subroutine178_0
       2  ??Subroutine179_0
       2  ??Subroutine180_0
       5  ??Subroutine181_0
       6  ??Subroutine182_0
       4  ??Subroutine183_0
       4  ??Subroutine184_0
      19  ??Subroutine185_0
       3  ??Subroutine186_0
       5  ??Subroutine187_0
       6  ??Subroutine188_0
       4  ??Subroutine189_0
       5  ??Subroutine190_0
       3  ??Subroutine191_0
       5  ??Subroutine192_0
       5  ??Subroutine193_0
       6  ??Subroutine194_0
      12  ??Subroutine195_0
       6  ??Subroutine196_0
       8  ??Subroutine197_0
       5  ??Subroutine198_0
      12  ??Subroutine199_0
      10  ??Subroutine200_0
       2  ??Subroutine201_0
       7  ??Subroutine202_0
       6  ??Subroutine203_0
       8  ?Subroutine0
       2  ?Subroutine1
       8  ?Subroutine10
      31  ?Subroutine100
       2  ?Subroutine101
       2  ?Subroutine102
       8  ?Subroutine103
       5  ?Subroutine104
      13  ?Subroutine105
      12  ?Subroutine106
       7  ?Subroutine107
      12  ?Subroutine108
      12  ?Subroutine109
      36  ?Subroutine11
       5  ?Subroutine110
       7  ?Subroutine111
       5  ?Subroutine112
       4  ?Subroutine113
      12  ?Subroutine114
       5  ?Subroutine115
       8  ?Subroutine116
       9  ?Subroutine117
       4  ?Subroutine118
       9  ?Subroutine119
      25  ?Subroutine12
       1  ?Subroutine120
       6  ?Subroutine121
       8  ?Subroutine122
      12  ?Subroutine123
      11  ?Subroutine124
      11  ?Subroutine125
       6  ?Subroutine126
       6  ?Subroutine127
      13  ?Subroutine128
      18  ?Subroutine129
       1  ?Subroutine13
      11  ?Subroutine130
      11  ?Subroutine131
      14  ?Subroutine132
       6  ?Subroutine133
       6  ?Subroutine134
       5  ?Subroutine135
       9  ?Subroutine136
       4  ?Subroutine137
       9  ?Subroutine138
      10  ?Subroutine139
       1  ?Subroutine14
       9  ?Subroutine140
       1  ?Subroutine15
      28  ?Subroutine16
       7  ?Subroutine17
      45  ?Subroutine18
       6  ?Subroutine19
       2  ?Subroutine2
       6  ?Subroutine20
       4  ?Subroutine21
      45  ?Subroutine22
      13  ?Subroutine23
       8  ?Subroutine24
      22  ?Subroutine25
      12  ?Subroutine26
       6  ?Subroutine27
       3  ?Subroutine28
       6  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
      22  ?Subroutine31
       1  ?Subroutine32
       1  ?Subroutine33
      11  ?Subroutine34
      17  ?Subroutine35
       6  ?Subroutine36
       1  ?Subroutine37
       4  ?Subroutine38
      19  ?Subroutine39
      19  ?Subroutine4
       9  ?Subroutine40
      21  ?Subroutine41
       7  ?Subroutine42
      13  ?Subroutine43
      23  ?Subroutine44
      11  ?Subroutine45
       6  ?Subroutine46
       5  ?Subroutine47
      15  ?Subroutine48
       2  ?Subroutine49
       8  ?Subroutine5
      14  ?Subroutine50
       5  ?Subroutine51
       9  ?Subroutine52
       6  ?Subroutine53
       6  ?Subroutine54
       5  ?Subroutine55
      15  ?Subroutine56
       4  ?Subroutine57
       4  ?Subroutine58
       6  ?Subroutine59
       8  ?Subroutine6
       5  ?Subroutine60
       3  ?Subroutine61
       1  ?Subroutine62
       1  ?Subroutine63
       9  ?Subroutine64
      12  ?Subroutine65
      19  ?Subroutine66
       8  ?Subroutine67
      16  ?Subroutine68
       6  ?Subroutine69
       5  ?Subroutine7
       8  ?Subroutine70
      14  ?Subroutine71
       6  ?Subroutine72
       4  ?Subroutine73
       4  ?Subroutine74
       8  ?Subroutine75
      21  ?Subroutine76
       8  ?Subroutine77
      10  ?Subroutine78
       7  ?Subroutine79
       5  ?Subroutine8
       6  ?Subroutine80
       5  ?Subroutine81
       4  ?Subroutine82
       8  ?Subroutine83
       6  ?Subroutine84
       5  ?Subroutine85
       4  ?Subroutine86
       7  ?Subroutine87
      10  ?Subroutine88
      10  ?Subroutine89
      40  ?Subroutine9
      13  ?Subroutine90
      17  ?Subroutine91
       4  ?Subroutine92
       6  ?Subroutine93
      11  ?Subroutine94
      12  ?Subroutine95
      13  ?Subroutine96
      11  ?Subroutine97
      11  ?Subroutine98
      10  ?Subroutine99
       2  zclClosuresDoorLockCBs
     166  zclClosures_HdlIncoming
     165  zclClosures_ProcessInDoorLock
     827  zclClosures_ProcessInDoorLockCmds
     222  zclClosures_ProcessInDoorLockGetHolidayScheduleRsp
     309  zclClosures_ProcessInDoorLockGetLogRecordRsp
     123  zclClosures_ProcessInDoorLockGetPINCodeRsp
     123  zclClosures_ProcessInDoorLockGetRFIDCodeRsp
     139  zclClosures_ProcessInDoorLockGetWeekDayScheduleRsp
     230  zclClosures_ProcessInDoorLockGetYearDayScheduleRsp
     245  zclClosures_ProcessInDoorLockOperationEventNotification
     267  zclClosures_ProcessInDoorLockProgrammingEventNotification
     203  zclClosures_ProcessInDoorLockSetHolidaySchedule
     123  zclClosures_ProcessInDoorLockSetPINCode
     123  zclClosures_ProcessInDoorLockSetRFIDCode
     322  zclClosures_ProcessInDoorLockSetTemporaryPin
     113  zclClosures_ProcessInDoorLockSetWeekDaySchedule
     194  zclClosures_ProcessInDoorLockSetYearDaySchedule
     137  zclClosures_ProcessInDoorLockUnlockWithTimeout
     142  zclClosures_RegisterDoorLockCmdCallbacks
      77  zclClosures_SendDoorLockClearAllCodesRequest
     281  zclClosures_SendDoorLockGetHolidayScheduleResponse
     113  zclClosures_SendDoorLockGetLogRecordRequest
     337  zclClosures_SendDoorLockGetLogRecordResponse
     118  zclClosures_SendDoorLockGetPINCodeResponse
     115  zclClosures_SendDoorLockGetRFIDCodeResponse
     108  zclClosures_SendDoorLockGetUserStatusResponse
     105  zclClosures_SendDoorLockGetUserTypeResponse
     244  zclClosures_SendDoorLockGetWeekDayScheduleResponse
     309  zclClosures_SendDoorLockGetYearDayScheduleResponse
      71  zclClosures_SendDoorLockHolidayScheduleRequest
     230  zclClosures_SendDoorLockOperationEventNotification
     251  zclClosures_SendDoorLockProgrammingEventNotification
     184  zclClosures_SendDoorLockRequest
     127  zclClosures_SendDoorLockScheduleRequest
     209  zclClosures_SendDoorLockSetHolidayScheduleRequest
     121  zclClosures_SendDoorLockSetPINCodeRequest
     121  zclClosures_SendDoorLockSetRFIDCodeRequest
     111  zclClosures_SendDoorLockSetUserStatusRequest
     111  zclClosures_SendDoorLockSetUserTypeRequest
     196  zclClosures_SendDoorLockSetWeekDayScheduleRequest
     217  zclClosures_SendDoorLockSetYearDayScheduleRequest
      68  zclClosures_SendDoorLockStatusResponse
     159  zclClosures_SendDoorLockUnlockTimeoutRequest
     118  zclClosures_SendDoorLockUserIDRequest
      82  zclClosures_SendModifyPinStatusResponse
      82  zclClosures_SendSetTemporaryPinStatusResponse
       1  zclDoorLockPluginRegisted
     276  -- Other

 
 10 122 bytes in segment BANKED_CODE
    276 bytes in segment BANK_RELAYS
      3 bytes in segment XDATA_Z
 
    276 bytes of CODE     memory
 10 122 bytes of HUGECODE memory
      3 bytes of XDATA    memory

Errors: none
Warnings: none
