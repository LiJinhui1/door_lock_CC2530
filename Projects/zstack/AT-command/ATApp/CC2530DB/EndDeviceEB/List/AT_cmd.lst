###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Feb/2022  09:34:57
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\UserAPI\AT_cmd.c
#    Command line       =  
#        -f C:\Users\Administrator\AppData\Local\Temp\EW2D3C.tmp
#        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\UserAPI\AT_cmd.c
#        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
#        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
#        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
#        ISR_KEYINTERRUPT -lC
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\AT_cmd.lst
#    Object file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj\AT_cmd.r51
#
###############################################################################

D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\UserAPI\AT_cmd.c
      1          /**************************************************************************************************
      2            Filename:       AT_uart.c
      3          
      4            Description:    AT command functions
      5            Author:         Yasin Zhang
      6          **************************************************************************************************/
      7          
      8          /*********************************************************************
      9           * INCLUDES
     10           */
     11          #include "string.h"
     12          #include "ZDNwkMgr.h"
     13          #include "ZDObject.h"
     14          #include "zcl.h"
     15          
     16          #include "bdb.h"
     17          #include "bdb_interface.h"
     18          
     19          #include "AT_cmd.h"
     20          #include "ATApp.h"
     21          #include "AT_controller.h"
     22          
     23          /*********************************************************************
     24           * MACROS
     25           */
     26          
     27          /*********************************************************************
     28           * CONSTANTS
     29           */
     30          
     31          /*********************************************************************
     32           * TYPEDEFS
     33           */
     34          
     35          /*********************************************************************
     36           * GLOBAL VARIABLES
     37           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     38          uint8 EBindSeq = 0xFF;
   \                     EBindSeq:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for EBindSeq>`
   \   000001                REQUIRE __INIT_XDATA_I
     39          
     40          /*********************************************************************
     41           * EXTERNAL VARIABLES
     42           */
     43          
     44          /*********************************************************************
     45           * EXTERNAL FUNCTIONS
     46           */
     47          // the Energy scan call back funtion
     48          extern void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
     49          
     50          /*********************************************************************
     51           * LOCAL VARIABLES
     52           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     53          static ATSeqBuffer seqBuff = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \                     seqBuff:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for seqBuff>`
   \   000005                REQUIRE __INIT_XDATA_I
     54          
     55          /*********************************************************************
     56           * LOCAL FUNCTIONS
     57           */
     58          static uint8 GetSeqNumIndexInBuffer( uint8 seqNum );
     59          static void ResetSeqNumInBuffer ( uint8 index );
     60          
     61          static void AT_ZDO_ProcessPowerDescRsp( zdoIncomingMsg_t *inMsg );
     62          static void AT_ZDO_ProcessActEpRsp( zdoIncomingMsg_t *inMsg );
     63          static void AT_ZDO_ProcessSimpleDescRsp( zdoIncomingMsg_t *inMsg );
     64          static void AT_ZDO_ProcessMatchDescRsp( zdoIncomingMsg_t *inMsg );
     65          static void AT_ZDO_ProcessAnnceRsp( zdoIncomingMsg_t *inMsg );
     66          static void AT_ZDO_ProcessMgmtLqiRsp( zdoIncomingMsg_t *inMsg );
     67          static void AT_ZDO_ProcessMgmtRtgRsp( zdoIncomingMsg_t *inMsg );
     68          static void AT_ZDO_ProcessMgmtBindRsp( zdoIncomingMsg_t *inMsg );
     69          static void AT_ZDO_ProcessBindRsp( zdoIncomingMsg_t *inMsg );
     70          static void AT_ZDO_ProcessUnbindRsp( zdoIncomingMsg_t *inMsg );
     71          static void AT_ZDO_ProcessEDbindRsp( zdoIncomingMsg_t *inMsg );
     72          static void AT_ZDO_ProcessMgmtLeaveRsp( zdoIncomingMsg_t *inMsg );
     73          
     74          /*********************************************************************
     75           * PUBLIC FUNCTIONS
     76           */
     77          
     78          /*******************************************************************************
     79          * @fn      AT_ZDO_Register
     80          *
     81          * @brief   Register ZDO messages
     82          *
     83          * @param   pTask_id - tack_id pointer
     84          *
     85          * @return  None
     86          ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          void AT_ZDO_Register( uint8 *pTask_id )
   \                     AT_ZDO_Register:
     88          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     89            uint8 task_id = *pTask_id;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FE           MOV       R6,A
     90            ZDO_RegisterForZDOMsg( task_id, NWK_addr_rsp );
   \   00000B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000B   7A00         MOV       R2,#0x0
   \   00000D   7B80         MOV       R3,#-0x80
   \   00000F   F9           MOV       R1,A
   \   000010   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     91            ZDO_RegisterForZDOMsg( task_id, IEEE_addr_rsp );
   \   000013                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000013   7A01         MOV       R2,#0x1
   \   000015   7B80         MOV       R3,#-0x80
   \   000017   EE           MOV       A,R6
   \   000018   F9           MOV       R1,A
   \   000019   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     92            ZDO_RegisterForZDOMsg( task_id, Power_Desc_rsp );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A03         MOV       R2,#0x3
   \   00001E   7B80         MOV       R3,#-0x80
   \   000020   EE           MOV       A,R6
   \   000021   F9           MOV       R1,A
   \   000022   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     93            ZDO_RegisterForZDOMsg( task_id, Active_EP_rsp );
   \   000025                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000025   7A05         MOV       R2,#0x5
   \   000027   7B80         MOV       R3,#-0x80
   \   000029   EE           MOV       A,R6
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     94            ZDO_RegisterForZDOMsg( task_id, Simple_Desc_rsp );
   \   00002E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00002E   7A04         MOV       R2,#0x4
   \   000030   7B80         MOV       R3,#-0x80
   \   000032   EE           MOV       A,R6
   \   000033   F9           MOV       R1,A
   \   000034   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     95            ZDO_RegisterForZDOMsg( task_id, Match_Desc_rsp );
   \   000037                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000037   7A06         MOV       R2,#0x6
   \   000039   7B80         MOV       R3,#-0x80
   \   00003B   EE           MOV       A,R6
   \   00003C   F9           MOV       R1,A
   \   00003D   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     96            ZDO_RegisterForZDOMsg( task_id, Device_annce );
   \   000040                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000040   7A13         MOV       R2,#0x13
   \   000042   7B00         MOV       R3,#0x0
   \   000044   EE           MOV       A,R6
   \   000045   F9           MOV       R1,A
   \   000046   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     97            ZDO_RegisterForZDOMsg( task_id, Mgmt_Lqi_rsp );
   \   000049                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000049   7A31         MOV       R2,#0x31
   \   00004B   7B80         MOV       R3,#-0x80
   \   00004D   EE           MOV       A,R6
   \   00004E   F9           MOV       R1,A
   \   00004F   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     98            ZDO_RegisterForZDOMsg( task_id, Mgmt_Rtg_rsp );
   \   000052                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000052   7A32         MOV       R2,#0x32
   \   000054   7B80         MOV       R3,#-0x80
   \   000056   EE           MOV       A,R6
   \   000057   F9           MOV       R1,A
   \   000058   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
     99            ZDO_RegisterForZDOMsg( task_id, Mgmt_Bind_rsp );
   \   00005B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00005B   7A33         MOV       R2,#0x33
   \   00005D   7B80         MOV       R3,#-0x80
   \   00005F   EE           MOV       A,R6
   \   000060   F9           MOV       R1,A
   \   000061   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    100            ZDO_RegisterForZDOMsg( task_id, Bind_rsp );
   \   000064                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000064   7A21         MOV       R2,#0x21
   \   000066   7B80         MOV       R3,#-0x80
   \   000068   EE           MOV       A,R6
   \   000069   F9           MOV       R1,A
   \   00006A   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    101            ZDO_RegisterForZDOMsg( task_id, Unbind_rsp );
   \   00006D                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00006D   7A22         MOV       R2,#0x22
   \   00006F   7B80         MOV       R3,#-0x80
   \   000071   EE           MOV       A,R6
   \   000072   F9           MOV       R1,A
   \   000073   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    102            ZDO_RegisterForZDOMsg( task_id, End_Device_Bind_rsp );
   \   000076                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000076   7A20         MOV       R2,#0x20
   \   000078   7B80         MOV       R3,#-0x80
   \   00007A   EE           MOV       A,R6
   \   00007B   F9           MOV       R1,A
   \   00007C   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    103            ZDO_RegisterForZDOMsg( task_id, Mgmt_Leave_rsp );
   \   00007F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00007F   7A34         MOV       R2,#0x34
   \   000081   7B80         MOV       R3,#-0x80
   \   000083   EE           MOV       A,R6
   \   000084   F9           MOV       R1,A
   \   000085   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    104          }
   \   000088                REQUIRE ?Subroutine0
   \   000088                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    105          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void AT_ZDO_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     AT_ZDO_ProcessMsgCBs:
    107          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV       A,#-0x1b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    108            switch ( inMsg->clusterID )
   \   00000E   75....       MOV       ?V6,#`?<Constant ",%02X">` & 0xff
   \   000011   75....       MOV       ?V7,#(`?<Constant ",%02X">` >> 8) & 0xff
   \   000014   EA           MOV       A,R2
   \   000015   240A         ADD       A,#0xa
   \   000017   F5..         MOV       ?V4,A
   \   000019   E4           CLR       A
   \   00001A   35..         ADDC      A,?V1
   \   00001C   F5..         MOV       ?V5,A
   \   00001E   EA           MOV       A,R2
   \   00001F   2402         ADD       A,#0x2
   \   000021   F5..         MOV       ?V2,A
   \   000023   E4           CLR       A
   \   000024   35..         ADDC      A,?V1
   \   000026   F5..         MOV       ?V3,A
   \   000028   EA           MOV       A,R2
   \   000029   240C         ADD       A,#0xc
   \   00002B   F582         MOV       DPL,A
   \   00002D   E4           CLR       A
   \   00002E   35..         ADDC      A,?V1
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V8,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V9,A
   \   000039   78..         MOV       R0,#?V8
   \   00003B   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for AT_ZDO_ProcessMsgCBs>_0`:
   \   00003E   0100         DW        1
   \   000040   0080         DW        32768
   \   000042   0180         DW        32769
   \   000044   ....         DW        ??AT_ZDO_ProcessMsgCBs_0
   \   000046   0C00         DW        12
   \   000048   1300         DW        19
   \   00004A   ....         DW        ??AT_ZDO_ProcessMsgCBs_1
   \   00004C   0380         DW        32771
   \   00004E   ....         DW        ??AT_ZDO_ProcessMsgCBs_2
   \   000050   0480         DW        32772
   \   000052   ....         DW        ??AT_ZDO_ProcessMsgCBs_3
   \   000054   0580         DW        32773
   \   000056   ....         DW        ??AT_ZDO_ProcessMsgCBs_4
   \   000058   0680         DW        32774
   \   00005A   ....         DW        ??AT_ZDO_ProcessMsgCBs_5
   \   00005C   2080         DW        32800
   \   00005E   ....         DW        ??AT_ZDO_ProcessMsgCBs_6
   \   000060   2180         DW        32801
   \   000062   ....         DW        ??AT_ZDO_ProcessMsgCBs_7
   \   000064   2280         DW        32802
   \   000066   ....         DW        ??AT_ZDO_ProcessMsgCBs_8
   \   000068   3180         DW        32817
   \   00006A   ....         DW        ??AT_ZDO_ProcessMsgCBs_9
   \   00006C   3280         DW        32818
   \   00006E   ....         DW        ??AT_ZDO_ProcessMsgCBs_10
   \   000070   3380         DW        32819
   \   000072   ....         DW        ??AT_ZDO_ProcessMsgCBs_11
   \   000074   3480         DW        32820
   \   000076   ....         DW        ??AT_ZDO_ProcessMsgCBs_12
   \   000078   ....         DW        ??AT_ZDO_ProcessMsgCBs_13
    109            {
    110              case NWK_addr_rsp:
    111              case IEEE_addr_rsp:
    112              {
    113                notdoEUIREQcmd = TRUE;
   \                     ??AT_ZDO_ProcessMsgCBs_0:
   \   00007A   90....       MOV       DPTR,#notdoEUIREQcmd
   \   00007D   7401         MOV       A,#0x1
   \   00007F   F0           MOVX      @DPTR,A
    114                ZDO_NwkIEEEAddrResp_t *pAddrRsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc(sizeof(ZDO_NwkIEEEAddrResp_t));
   \   000080                ; Setup parameters for call to function osal_mem_alloc
   \   000080   7A0D         MOV       R2,#0xd
   \   000082   7B00         MOV       R3,#0x0
   \   000084   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    115                pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \   000087                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000087   AA..         MOV       R2,?V0
   \   000089   AB..         MOV       R3,?V1
   \   00008B   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00008E   8A..         MOV       ?V0,R2
   \   000090   8B..         MOV       ?V1,R3
    116                if ( pAddrRsp )
   \   000092   EA           MOV       A,R2
   \   000093   4B           ORL       A,R3
   \   000094   7003         JNZ       $+5
   \   000096   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_13 & 0xFFFF
    117                {
    118                  AT_NEW_LINE();
   \   000099                ; Setup parameters for call to function AT_Uart0_Send
   \   000099   12....       LCALL     ??Subroutine32_0 & 0xFFFF
    119                  printf("AddrResp:%02X", pAddrRsp->status);
   \                     ??CrossCallReturnLabel_84:
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   7A..         MOV       R2,#`?<Constant "AddrResp:%02X">` & 0xff
   \   0000A1   7B..         MOV       R3,#(`?<Constant "AddrResp:%02X">` >> 8) & 0xff
   \   0000A3   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
    120                  if ( pAddrRsp->status == ZSuccess )
   \   0000A9   85..82       MOV       DPL,?V0
   \   0000AC   85..83       MOV       DPH,?V1
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   6003         JZ        $+5
   \   0000B2   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_14 & 0xFFFF
    121                  {
    122                    uint8 i;
    123                    char str[16];
    124                    AT_RESP(",", 1);
   \   0000B5   75....       MOV       ?V2,#`?<Constant ",">` & 0xff
   \   0000B8   75....       MOV       ?V3,#(`?<Constant ",">` >> 8) & 0xff
   \   0000BB                ; Setup parameters for call to function AT_Uart0_Send
   \   0000BB   12....       LCALL     ?Subroutine19 & 0xFFFF
    125                    AT_Int16toChar(pAddrRsp->nwkAddr, (uint8 *)str);
   \                     ??CrossCallReturnLabel_48:
   \   0000BE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C1   85..82       MOV       DPL,?V0
   \   0000C4   85..83       MOV       DPH,?V1
   \   0000C7   A3           INC       DPTR
   \   0000C8   12....       LCALL     ?Subroutine7 & 0xFFFF
    126                    AT_RESP(str, 4);
   \                     ??CrossCallReturnLabel_2:
   \   0000CB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CE   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    127                    AT_RESP(",", 1);
   \   0000D1                ; Setup parameters for call to function AT_Uart0_Send
   \   0000D1   12....       LCALL     ?Subroutine19 & 0xFFFF
    128                    AT_GetIEEEAddrStr(pAddrRsp->extAddr, (uint8 *)str);
   \                     ??CrossCallReturnLabel_49:
   \   0000D4   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D7   E5..         MOV       A,?V0
   \   0000D9   2403         ADD       A,#0x3
   \   0000DB   FA           MOV       R2,A
   \   0000DC   E4           CLR       A
   \   0000DD   35..         ADDC      A,?V1
   \   0000DF   FB           MOV       R3,A
   \   0000E0   12....       LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
    129                    AT_RESP(str, 16);
   \   0000E3                ; Setup parameters for call to function AT_Uart0_Send
   \   0000E3   7C10         MOV       R4,#0x10
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   740B         MOV       A,#0xb
   \   0000E9   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EC   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    130                    for (i = 0; i < pAddrRsp->numAssocDevs; i++) {
   \   0000EF   75..00       MOV       ?V2,#0x0
   \   0000F2   8051         SJMP      ??AT_ZDO_ProcessMsgCBs_15
    131                      AT_NEXT_LINE();
   \                     ??AT_ZDO_ProcessMsgCBs_16:
   \   0000F4                ; Setup parameters for call to function AT_Uart0_Send
   \   0000F4   7C02         MOV       R4,#0x2
   \   0000F6   7D00         MOV       R5,#0x0
   \   0000F8   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000FA   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000FC   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    132                      AT_Int8toChar(i, (uint8 *)str);
   \                     ??CrossCallReturnLabel_50:
   \   0000FF   12....       LCALL     ?XSTACK_DISP101_8
   \   000102   A9..         MOV       R1,?V2
   \   000104   12....       LCALL     `??AT_Int8toChar::?relay`; Banked call to: AT_Int8toChar
    133                      AT_RESP(str, 2); AT_RESP(". ", 2);
   \   000107                ; Setup parameters for call to function AT_Uart0_Send
   \   000107   7C02         MOV       R4,#0x2
   \   000109   7D00         MOV       R5,#0x0
   \   00010B   740B         MOV       A,#0xb
   \   00010D   12....       LCALL     ?XSTACK_DISP101_8
   \   000110   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000113                ; Setup parameters for call to function AT_Uart0_Send
   \   000113   7C02         MOV       R4,#0x2
   \   000115   7D00         MOV       R5,#0x0
   \   000117   7A..         MOV       R2,#`?<Constant ". ">` & 0xff
   \   000119   7B..         MOV       R3,#(`?<Constant ". ">` >> 8) & 0xff
   \   00011B   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    134                      AT_Int16toChar(pAddrRsp->devList[i], (uint8 *)str);
    135                      AT_RESP(str, 4);
    136                    }
   \                     ??CrossCallReturnLabel_51:
   \   00011E   12....       LCALL     ?XSTACK_DISP102_8
   \   000121   A8..         MOV       R0,?V2
   \   000123   E8           MOV       A,R0
   \   000124   28           ADD       A,R0
   \   000125   F8           MOV       R0,A
   \   000126   E4           CLR       A
   \   000127   33           RLC       A
   \   000128   F9           MOV       R1,A
   \   000129   E5..         MOV       A,?V0
   \   00012B   28           ADD       A,R0
   \   00012C   F8           MOV       R0,A
   \   00012D   E5..         MOV       A,?V1
   \   00012F   39           ADDC      A,R1
   \   000130   F9           MOV       R1,A
   \   000131   E8           MOV       A,R0
   \   000132   240D         ADD       A,#0xd
   \   000134   F582         MOV       DPL,A
   \   000136   E4           CLR       A
   \   000137   39           ADDC      A,R1
   \   000138   F583         MOV       DPH,A
   \   00013A   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00013D   12....       LCALL     ?XSTACK_DISP101_8
   \   000140   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000143   05..         INC       ?V2
   \                     ??AT_ZDO_ProcessMsgCBs_15:
   \   000145   12....       LCALL     ?Subroutine23 & 0xFFFF
    137                  }
   \                     ??CrossCallReturnLabel_38:
   \   000148   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00014B   40A7         JC        ??AT_ZDO_ProcessMsgCBs_16
    138          		AT_NEW_LINE();
   \   00014D                ; Setup parameters for call to function AT_Uart0_Send
   \   00014D   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_14 & 0xFFFF
    139                  osal_mem_free( pAddrRsp );
    140                }
    141              }
    142                break;
    143              case Power_Desc_rsp:
    144                AT_ZDO_ProcessPowerDescRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_2:
   \   000150                ; Setup parameters for call to function AT_ZDO_ProcessPowerDescRsp
   \   000150   12....       LCALL     `??AT_ZDO_ProcessPowerDescRsp::?relay`; Banked call to: AT_ZDO_ProcessPowerDescRsp
    145                break;
   \   000153   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_13 & 0xFFFF
    146              case Active_EP_rsp:
    147                AT_ZDO_ProcessActEpRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_4:
   \   000156                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000156   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000159   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015C   85..82       MOV       DPL,?V0
   \   00015F   85..83       MOV       DPH,?V1
   \   000162   A3           INC       DPTR
   \   000163   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000166   7A..         MOV       R2,#`?<Constant "ActEpDesc:%04X,%02X">` & 0xff
   \   000168   7B..         MOV       R3,#(`?<Constant "ActEpDesc:%04X,%02X">` >> 8) & 0xff
   \   00016A   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00016D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000170   85..82       MOV       DPL,?V0
   \   000173   85..83       MOV       DPH,?V1
   \   000176   E0           MOVX      A,@DPTR
   \   000177   705B         JNZ       ??AT_ZDO_ProcessMsgCBs_14
   \   000179   75..00       MOV       ?V2,#0x0
   \   00017C   800E         SJMP      ??AT_ZDO_ProcessMsgCBs_17
   \                     ??AT_ZDO_ProcessMsgCBs_18:
   \   00017E                ; Setup parameters for call to function printf
   \   00017E   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000181   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000184   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000187   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018A   05..         INC       ?V2
   \                     ??AT_ZDO_ProcessMsgCBs_17:
   \   00018C   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00018F   40ED         JC        ??AT_ZDO_ProcessMsgCBs_18
   \                     ??AT_ZDO_ProcessMsgCBs_19:
   \   000191                ; Setup parameters for call to function AT_Uart0_Send
   \   000191   8041         SJMP      ??AT_ZDO_ProcessMsgCBs_14
    148                break;
    149              case Simple_Desc_rsp:
    150                AT_ZDO_ProcessSimpleDescRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_3:
   \   000193                ; Setup parameters for call to function AT_ZDO_ProcessSimpleDescRsp
   \   000193   12....       LCALL     `??AT_ZDO_ProcessSimpleDescRsp::?relay`; Banked call to: AT_ZDO_ProcessSimpleDescRsp
    151                break;
   \   000196   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_13 & 0xFFFF
    152              case Match_Desc_rsp:
    153                AT_ZDO_ProcessMatchDescRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_5:
   \   000199                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000199   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019F   85..82       MOV       DPL,?V0
   \   0001A2   85..83       MOV       DPH,?V1
   \   0001A5   A3           INC       DPTR
   \   0001A6   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001A9   7A..         MOV       R2,#`?<Constant "MatchDesc:%04X,%02X">` & 0xff
   \   0001AB   7B..         MOV       R3,#(`?<Constant "MatchDesc:%04X,%02X">` >> 8) & 0xff
   \   0001AD   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B3   85..82       MOV       DPL,?V0
   \   0001B6   85..83       MOV       DPH,?V1
   \   0001B9   E0           MOVX      A,@DPTR
   \   0001BA   7018         JNZ       ??AT_ZDO_ProcessMsgCBs_14
   \   0001BC   75..00       MOV       ?V2,#0x0
   \   0001BF   800E         SJMP      ??AT_ZDO_ProcessMsgCBs_20
   \                     ??AT_ZDO_ProcessMsgCBs_21:
   \   0001C1                ; Setup parameters for call to function printf
   \   0001C1   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0001C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C7   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0001CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CD   05..         INC       ?V2
   \                     ??AT_ZDO_ProcessMsgCBs_20:
   \   0001CF   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001D2   40ED         JC        ??AT_ZDO_ProcessMsgCBs_21
   \                     ??AT_ZDO_ProcessMsgCBs_14:
   \   0001D4                ; Setup parameters for call to function AT_Uart0_Send
   \   0001D4   7C02         MOV       R4,#0x2
   \   0001D6   7D00         MOV       R5,#0x0
   \   0001D8   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0001DA   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0001DC   12....       LCALL     ?Subroutine17 & 0xFFFF
    154                break;
   \                     ??CrossCallReturnLabel_20:
   \   0001DF   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_13 & 0xFFFF
    155              case Device_annce:
    156                AT_ZDO_ProcessAnnceRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_1:
   \   0001E2                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   0001E2   AC..         MOV       R4,?XSP + 0
   \   0001E4   AD..         MOV       R5,?XSP + 1
   \   0001E6   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   \   0001E9                ; Setup parameters for call to function AT_Uart0_Send
   \   0001E9   7C02         MOV       R4,#0x2
   \   0001EB   7D00         MOV       R5,#0x0
   \   0001ED   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0001EF   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0001F1   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   0001F4   740A         MOV       A,#0xa
   \   0001F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001FC   5008         JNC       ??AT_ZDO_ProcessMsgCBs_22
   \   0001FE   75....       MOV       ?V0,#`?<Constant "COORD">` & 0xff
   \   000201   75....       MOV       ?V1,#(`?<Constant "COORD">` >> 8) & 0xff
   \   000204   8012         SJMP      ??AT_ZDO_ProcessMsgCBs_23
   \                     ??AT_ZDO_ProcessMsgCBs_22:
   \   000206   A2E1         MOV       C,0xE0 /* A   */.1
   \   000208   5008         JNC       ??AT_ZDO_ProcessMsgCBs_24
   \   00020A   75....       MOV       ?V0,#`?<Constant "FFD">` & 0xff
   \   00020D   75....       MOV       ?V1,#(`?<Constant "FFD">` >> 8) & 0xff
   \   000210   8006         SJMP      ??AT_ZDO_ProcessMsgCBs_23
   \                     ??AT_ZDO_ProcessMsgCBs_24:
   \   000212   75....       MOV       ?V0,#`?<Constant "RFD">` & 0xff
   \   000215   75....       MOV       ?V1,#(`?<Constant "RFD">` >> 8) & 0xff
   \                     ??AT_ZDO_ProcessMsgCBs_23:
   \   000218                ; Setup parameters for call to function printf
   \   000218   85..82       MOV       DPL,?XSP + 0
   \   00021B   85..83       MOV       DPH,?XSP + 1
   \   00021E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000221   7404         MOV       A,#0x4
   \   000223   12....       LCALL     ?XSTACK_DISP0_8
   \   000226   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000229   7408         MOV       A,#0x8
   \   00022B   12....       LCALL     ?XSTACK_DISP0_8
   \   00022E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000231   740C         MOV       A,#0xc
   \   000233   12....       LCALL     ?XSTACK_DISP0_8
   \   000236   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000239   7410         MOV       A,#0x10
   \   00023B   12....       LCALL     ?XSTACK_DISP0_8
   \   00023E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000241   78..         MOV       R0,#?V0
   \   000243   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000246   7A..         MOV       R2,#`?<Constant "%s:%04X%04X%04X%04X,%04X">` & 0xff
   \   000248   7B..         MOV       R3,#(`?<Constant "%s:%04X%04X%04X%04X,%04X">` >> 8) & 0xff
   \   00024A   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00024D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000250                ; Setup parameters for call to function AT_Uart0_Send
   \   000250   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_25 & 0xFFFF
    157                break;
    158              case Mgmt_Lqi_rsp:
    159                AT_ZDO_ProcessMgmtLqiRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_9:
   \   000253                ; Setup parameters for call to function AT_ZDO_ProcessMgmtLqiRsp
   \   000253   12....       LCALL     `??AT_ZDO_ProcessMgmtLqiRsp::?relay`; Banked call to: AT_ZDO_ProcessMgmtLqiRsp
    160                break;
   \   000256   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_13 & 0xFFFF
    161              case Mgmt_Rtg_rsp:
    162                AT_ZDO_ProcessMgmtRtgRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_10:
   \   000259                ; Setup parameters for call to function AT_ZDO_ProcessMgmtRtgRsp
   \   000259   12....       LCALL     `??AT_ZDO_ProcessMgmtRtgRsp::?relay`; Banked call to: AT_ZDO_ProcessMgmtRtgRsp
    163                break;
   \   00025C   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_13 & 0xFFFF
    164              case Mgmt_Bind_rsp:
    165                AT_ZDO_ProcessMgmtBindRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_11:
   \   00025F                ; Setup parameters for call to function AT_ZDO_ProcessMgmtBindRsp
   \   00025F   12....       LCALL     `??AT_ZDO_ProcessMgmtBindRsp::?relay`; Banked call to: AT_ZDO_ProcessMgmtBindRsp
    166                break;
   \   000262   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_13 & 0xFFFF
    167              case Bind_rsp:
    168                AT_ZDO_ProcessBindRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_7:
   \   000265   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000268   7018         JNZ       ??AT_ZDO_ProcessMsgCBs_26
   \   00026A                ; Setup parameters for call to function printf
   \   00026A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00026D   85..82       MOV       DPL,?V2
   \   000270   85..83       MOV       DPH,?V3
   \   000273   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000276   7A..         MOV       R2,#`?<Constant "Bind:%04X,%02X">` & 0xff
   \   000278   7B..         MOV       R3,#(`?<Constant "Bind:%04X,%02X">` >> 8) & 0xff
   \   00027A   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00027D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000280   800D         SJMP      ??AT_ZDO_ProcessMsgCBs_27
   \                     ??AT_ZDO_ProcessMsgCBs_26:
   \   000282                ; Setup parameters for call to function printf
   \   000282   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000285   7A..         MOV       R2,#`?<Constant "Bind:UNKNOWN,%02X">` & 0xff
   \   000287   7B..         MOV       R3,#(`?<Constant "Bind:UNKNOWN,%02X">` >> 8) & 0xff
   \   000289   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00028C   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??AT_ZDO_ProcessMsgCBs_27:
   \   00028F                ; Setup parameters for call to function AT_Uart0_Send
   \   00028F   02....       LJMP      ??AT_ZDO_ProcessMsgCBs_25 & 0xFFFF
    169                break;
    170              case Unbind_rsp:
    171                AT_ZDO_ProcessUnbindRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_8:
   \   000292   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000295   7018         JNZ       ??AT_ZDO_ProcessMsgCBs_28
   \   000297                ; Setup parameters for call to function printf
   \   000297   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00029A   85..82       MOV       DPL,?V2
   \   00029D   85..83       MOV       DPH,?V3
   \   0002A0   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002A3   7A..         MOV       R2,#`?<Constant "Unbind:%04X,%02X">` & 0xff
   \   0002A5   7B..         MOV       R3,#(`?<Constant "Unbind:%04X,%02X">` >> 8) & 0xff
   \   0002A7   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0002AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002AD   806F         SJMP      ??AT_ZDO_ProcessMsgCBs_25
   \                     ??AT_ZDO_ProcessMsgCBs_28:
   \   0002AF                ; Setup parameters for call to function printf
   \   0002AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002B2   7A..         MOV       R2,#`?<Constant "Unbind:UNKNOWN,%02X">` & 0xff
   \   0002B4   7B..         MOV       R3,#(`?<Constant "Unbind:UNKNOWN,%02X">` >> 8) & 0xff
   \   0002B6   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0002B9   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??AT_ZDO_ProcessMsgCBs_29:
   \   0002BC                ; Setup parameters for call to function AT_Uart0_Send
   \   0002BC   8060         SJMP      ??AT_ZDO_ProcessMsgCBs_25
    172                break;
    173              case End_Device_Bind_rsp:
    174                AT_ZDO_ProcessEDbindRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_6:
   \   0002BE   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0002C1                ; Setup parameters for call to function AT_Uart0_Send
   \   0002C1   7C02         MOV       R4,#0x2
   \   0002C3   7D00         MOV       R5,#0x0
   \   0002C5   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0002C7   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0002C9   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   0002CC                ; Setup parameters for call to function printf
   \   0002CC   75..00       MOV       ?V1,#0x0
   \   0002CF   78..         MOV       R0,#?V0
   \   0002D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002D4   7A..         MOV       R2,#`?<Constant "EBINDRSP:%02X">` & 0xff
   \   0002D6   7B..         MOV       R3,#(`?<Constant "EBINDRSP:%02X">` >> 8) & 0xff
   \   0002D8   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0002DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002DE                ; Setup parameters for call to function AT_Uart0_Send
   \   0002DE   7C02         MOV       R4,#0x2
   \   0002E0   7D00         MOV       R5,#0x0
   \   0002E2   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0002E4   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0002E6   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0002E9   803B         SJMP      ??AT_ZDO_ProcessMsgCBs_30
    175                break;
    176              case Mgmt_Leave_rsp:
    177                AT_ZDO_ProcessMgmtLeaveRsp( inMsg );
   \                     ??AT_ZDO_ProcessMsgCBs_12:
   \   0002EB   12....       LCALL     ?Subroutine10 & 0xFFFF
    178                break;
    179              default:
    180                break;
    181            }
   \                     ??CrossCallReturnLabel_5:
   \   0002EE                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002EE   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0002F1   8A..         MOV       ?V4,R2
   \   0002F3   8B..         MOV       ?V5,R3
   \   0002F5   A8..         MOV       R0,?V4
   \   0002F7   A9..         MOV       R1,?V5
   \   0002F9   85..82       MOV       DPL,?V2
   \   0002FC   85..83       MOV       DPH,?V3
   \   0002FF   E0           MOVX      A,@DPTR
   \   000300   68           XRL       A,R0
   \   000301   7003         JNZ       ??AT_ZDO_ProcessMsgCBs_31
   \   000303   A3           INC       DPTR
   \   000304   E0           MOVX      A,@DPTR
   \   000305   69           XRL       A,R1
   \                     ??AT_ZDO_ProcessMsgCBs_31:
   \   000306   7021         JNZ       ??AT_ZDO_ProcessMsgCBs_13
   \   000308                ; Setup parameters for call to function AT_Uart0_Send
   \   000308   7C02         MOV       R4,#0x2
   \   00030A   7D00         MOV       R5,#0x0
   \   00030C   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00030E   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000310   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000313   E5..         MOV       A,?V0
   \   000315   7007         JNZ       ??AT_ZDO_ProcessMsgCBs_25
   \   000317                ; Setup parameters for call to function printf
   \   000317   7A..         MOV       R2,#`?<Constant "\\r\\nLEFTPAN\\r\\n">` & 0xff
   \   000319   7B..         MOV       R3,#(`?<Constant "\\r\\nLEFTPAN\\r\\n">` >> 8) & 0xff
   \   00031B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \                     ??AT_ZDO_ProcessMsgCBs_25:
   \   00031E                ; Setup parameters for call to function AT_Uart0_Send
   \   00031E   7C02         MOV       R4,#0x2
   \   000320   7D00         MOV       R5,#0x0
   \   000322   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000324   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \                     ??AT_ZDO_ProcessMsgCBs_30:
   \   000326   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    182          }
   \                     ??AT_ZDO_ProcessMsgCBs_13:
   \   000329   741B         MOV       A,#0x1b
   \   00032B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00032E   7F0A         MOV       R7,#0xa
   \   000330   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7C01         MOV       R4,#0x1
   \   000002   7D00         MOV       R5,#0x0
   \   000004   AA..         MOV       R2,?V2
   \   000006   AB..         MOV       R3,?V3
   \   000008                REQUIRE ??Subroutine28_0
   \   000008                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Int16toChar
   \   000003                ; Setup parameters for call to function AT_GetIEEEAddrStr
   \   000003                ; Setup parameters for call to function AT_Int8toChar
   \   000003                ; Setup parameters for call to function AT_Int16toChar
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV       A,R2
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F583         MOV       DPH,A
   \   000010   8882         MOV       DPL,R0
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V0,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??AT_Int16toChar::?relay`; Banked call to: AT_Int16toChar
   \   000008                ; Setup parameters for call to function AT_Uart0_Send
   \   000008                ; Setup parameters for call to function AT_Uart0_Send
   \   000008   7C04         MOV       R4,#0x4
   \   00000A   7D00         MOV       R5,#0x0
   \   00000C   740B         MOV       A,#0xb
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E5..         MOV       A,?V0
   \   000002   240B         ADD       A,#0xb
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   7C02         MOV       R4,#0x2
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000008   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                REQUIRE ??Subroutine33_0
   \   00000B                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine34_0
   \   000006                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   75..00       MOV       ?V3,#0x0
   \   000006   78..         MOV       R0,#?V2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V2
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET
    183          
    184          /**
    185           * @brief display ACK or NACK prompt
    186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          void AT_Cmd_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
   \                     AT_Cmd_ProcessDataConfirm:
    188          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    189            uint8 indexInSeqBuff;
    190            uint8 sentEP = afDataConfirm->endpoint;
    191            uint8 sentStatus = afDataConfirm->hdr.status;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
    192            uint8 ZDOTransID = afDataConfirm->transID;
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V0,A
    193          
    194            if (sentEP == 0) {
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   7048         JNZ       ??AT_Cmd_ProcessDataConfirm_0
    195              indexInSeqBuff = GetSeqNumIndexInBuffer(ZDOTransID);
   \   00001F                ; Setup parameters for call to function GetSeqNumIndexInBuffer
   \   00001F   A9..         MOV       R1,?V0
   \   000021   12....       LCALL     `??GetSeqNumIndexInBuffer::?relay`; Banked call to: GetSeqNumIndexInBuffer
   \   000024   E9           MOV       A,R1
   \   000025   FE           MOV       R6,A
    196              if (indexInSeqBuff != 0xFF) {
   \   000026   74FF         MOV       A,#-0x1
   \   000028   6E           XRL       A,R6
   \   000029   602D         JZ        ??AT_Cmd_ProcessDataConfirm_1
    197                if (sentStatus == 0) {
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   EF           MOV       A,R7
   \   00002F   78..         MOV       R0,#?V0
   \   000031   7009         JNZ       ??AT_Cmd_ProcessDataConfirm_2
    198                  printf("\r\nACK:%02X\r\n", ZDOTransID);
   \   000033                ; Setup parameters for call to function printf
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7A..         MOV       R2,#`?<Constant "\\r\\nACK:%02X\\r\\n">` & 0xff
   \   000038   7B..         MOV       R3,#(`?<Constant "\\r\\nACK:%02X\\r\\n">` >> 8) & 0xff
   \   00003A   8007         SJMP      ??AT_Cmd_ProcessDataConfirm_3
    199                } else {
    200                  printf("\r\nNACK:%02X\r\n", ZDOTransID);
   \                     ??AT_Cmd_ProcessDataConfirm_2:
   \   00003C                ; Setup parameters for call to function printf
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7A..         MOV       R2,#`?<Constant "\\r\\nNACK:%02X\\r\\n">` & 0xff
   \   000041   7B..         MOV       R3,#(`?<Constant "\\r\\nNACK:%02X\\r\\n">` >> 8) & 0xff
    201                }
   \                     ??AT_Cmd_ProcessDataConfirm_3:
   \   000043   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
    202                ResetSeqNumInBuffer(indexInSeqBuff);
   \   000049   74..         MOV       A,#seqBuff & 0xff
   \   00004B   2E           ADD       A,R6
   \   00004C   F582         MOV       DPL,A
   \   00004E   E4           CLR       A
   \   00004F   34..         ADDC      A,#(seqBuff >> 8) & 0xff
   \   000051   F583         MOV       DPH,A
   \   000053   74FF         MOV       A,#-0x1
   \   000055   F0           MOVX      @DPTR,A
    203              } else if (EBindSeq == ZDOTransID) {
   \   000056   800F         SJMP      ??AT_Cmd_ProcessDataConfirm_0
   \                     ??AT_Cmd_ProcessDataConfirm_1:
   \   000058   90....       MOV       DPTR,#EBindSeq
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   65..         XRL       A,?V0
   \   00005E   7007         JNZ       ??AT_Cmd_ProcessDataConfirm_0
    204                printf("\r\nEBINDACK\r\n");
   \   000060                ; Setup parameters for call to function printf
   \   000060   7A..         MOV       R2,#`?<Constant "\\r\\nEBINDACK\\r\\n">` & 0xff
   \   000062   7B..         MOV       R3,#(`?<Constant "\\r\\nEBINDACK\\r\\n">` >> 8) & 0xff
   \   000064   12....       LCALL     `??printf::?relay`; Banked call to: printf
    205              }
    206            }
    207          }
   \                     ??AT_Cmd_ProcessDataConfirm_0:
   \   000067                REQUIRE ?Subroutine1
   \   000067                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    208          
    209          /**
    210           * @brief  Store seqNum in the buffer
    211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    212          void StoreSeqNumInBuffer( uint8 seqNum )
   \                     StoreSeqNumInBuffer:
    213          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    214            uint8 indexInSeqBuff = GetSeqNumIndexInBuffer( 0xFF );
   \   000007                ; Setup parameters for call to function GetSeqNumIndexInBuffer
   \   000007   79FF         MOV       R1,#-0x1
   \   000009   12....       LCALL     `??GetSeqNumIndexInBuffer::?relay`; Banked call to: GetSeqNumIndexInBuffer
   \   00000C   E9           MOV       A,R1
   \   00000D   F8           MOV       R0,A
    215            if (indexInSeqBuff != 0xFF) {
   \   00000E   74FF         MOV       A,#-0x1
   \   000010   68           XRL       A,R0
   \   000011   600C         JZ        ??StoreSeqNumInBuffer_0
    216              seqBuff[indexInSeqBuff] = seqNum;
   \   000013   74..         MOV       A,#seqBuff & 0xff
   \   000015   29           ADD       A,R1
   \   000016   F582         MOV       DPL,A
   \   000018   E4           CLR       A
   \   000019   34..         ADDC      A,#(seqBuff >> 8) & 0xff
   \   00001B   F583         MOV       DPH,A
   \   00001D   EE           MOV       A,R6
   \   00001E   F0           MOVX      @DPTR,A
    217            }
    218          }
   \                     ??StoreSeqNumInBuffer_0:
   \   00001F   02....       LJMP      ?Subroutine0 & 0xFFFF
    219          
    220          /**
    221           * @brief  Check if the seqNum is in the buffer
    222           * @return index - seqNum index in the buffer    0xFF - Not found
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          static uint8 GetSeqNumIndexInBuffer( uint8 seqNum )
   \                     GetSeqNumIndexInBuffer:
    225          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    226            uint8 rtnIndex = 0xFF;
   \   000006   79FF         MOV       R1,#-0x1
    227            uint8 index;
    228            for ( index = 0; index < SEQ_BUFF_SIZE; index++) {
   \   000008   7800         MOV       R0,#0x0
    229              if (seqBuff[index] == seqNum) {
   \                     ??GetSeqNumIndexInBuffer_0:
   \   00000A   E8           MOV       A,R0
   \   00000B   FA           MOV       R2,A
   \   00000C   74..         MOV       A,#seqBuff & 0xff
   \   00000E   2A           ADD       A,R2
   \   00000F   F582         MOV       DPL,A
   \   000011   E4           CLR       A
   \   000012   34..         ADDC      A,#(seqBuff >> 8) & 0xff
   \   000014   F583         MOV       DPH,A
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6C           XRL       A,R4
   \   000018   7004         JNZ       ??GetSeqNumIndexInBuffer_1
    230                rtnIndex = index;
   \   00001A   E8           MOV       A,R0
   \   00001B   F9           MOV       R1,A
    231                break;
   \   00001C   8007         SJMP      ??GetSeqNumIndexInBuffer_2
    232              }
    233            }
   \                     ??GetSeqNumIndexInBuffer_1:
   \   00001E   08           INC       R0
   \   00001F   E8           MOV       A,R0
   \   000020   C3           CLR       C
   \   000021   9405         SUBB      A,#0x5
   \   000023   40E5         JC        ??GetSeqNumIndexInBuffer_0
    234          
    235            return rtnIndex;
   \                     ??GetSeqNumIndexInBuffer_2:
   \   000025   D083         POP       DPH
   \   000027   D082         POP       DPL
   \   000029   02....       LJMP      ?BRET
    236          }
    237          
    238          /**
    239           * @brief  Reset specific seqNum in the buffer
    240           */
    241          static void ResetSeqNumInBuffer ( uint8 index )
    242          {
    243            seqBuff[index] = 0xFF;
    244          }
    245          
    246          /*******************************************************************************
    247           * @fn      AT_Cmd_ESCAN_CB
    248           *
    249           * @brief   AT+SCAN callback function
    250           *          Response: +ESCAN:  11:XX
    251           *                              ...
    252           *                             26:XX
    253           *                             OK
    254           *                             or ERROR:<errorcode> .
    255           *                   XX represents the average energy on the respective channel
    256           *
    257           * @param       scannedChannels  - scanned channels
    258           * @param       energyDetectList - measured energy for channels
    259           *
    260           * @return  None
    261           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void AT_Cmd_ESCAN_CB( NLME_EDScanConfirm_t *EDScanConfirm)
   \                     AT_Cmd_ESCAN_CB:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    264            AT_NEW_LINE();
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009   7C02         MOV       R4,#0x2
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000F   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000011   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    265            AT_RESP("+ESCAN:", 7);
   \   000014                ; Setup parameters for call to function AT_Uart0_Send
   \   000014   7C07         MOV       R4,#0x7
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7A..         MOV       R2,#`?<Constant "+ESCAN:">` & 0xff
   \   00001A   7B..         MOV       R3,#(`?<Constant "+ESCAN:">` >> 8) & 0xff
   \   00001C   12....       LCALL     ?Subroutine26 & 0xFFFF
    266            AT_NEXT_LINE();
    267            uint8 i;
    268            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \                     ??CrossCallReturnLabel_44:
   \   00001F   75..00       MOV       ?V2,#0x0
    269            {
    270              if ( ( (uint32)1 << i ) & EDScanConfirm->scannedChannels )
   \                     ??AT_Cmd_ESCAN_CB_0:
   \   000022   85..82       MOV       DPL,?V0
   \   000025   85..83       MOV       DPH,?V1
   \   000028   A3           INC       DPTR
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?L_MOV_X
   \   00002E   E5..         MOV       A,?V2
   \   000030   78..         MOV       R0,#?V4
   \   000032   12....       LCALL     ?UL_SHR
   \   000035   E5..         MOV       A,?V4
   \   000037   A2E0         MOV       C,0xE0 /* A   */.0
   \   000039   5043         JNC       ??AT_Cmd_ESCAN_CB_1
    271              {
    272                printf("%d:%02X", i, EDScanConfirm->energyDetectList[i]);
   \   00003B   E5..         MOV       A,?V2
   \   00003D   F5..         MOV       ?V4,A
   \   00003F   75..00       MOV       ?V5,#0x0
   \   000042                ; Setup parameters for call to function printf
   \   000042   85..82       MOV       DPL,?V0
   \   000045   85..83       MOV       DPH,?V1
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   25..         ADD       A,?V4
   \   000050   F8           MOV       R0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   3400         ADDC      A,#0x0
   \   000055   8882         MOV       DPL,R0
   \   000057   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   78..         MOV       R0,#?V4
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7A..         MOV       R2,#`?<Constant "%d:%02X">` & 0xff
   \   000064   7B..         MOV       R3,#(`?<Constant "%d:%02X">` >> 8) & 0xff
   \   000066   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
    273                if(i < ED_SCAN_MAXCHANNELS-1) AT_NEXT_LINE();
   \   00006C   E5..         MOV       A,?V2
   \   00006E   C3           CLR       C
   \   00006F   941A         SUBB      A,#0x1a
   \   000071   500B         JNC       ??AT_Cmd_ESCAN_CB_1
   \   000073                ; Setup parameters for call to function AT_Uart0_Send
   \   000073   7C02         MOV       R4,#0x2
   \   000075   7D00         MOV       R5,#0x0
   \   000077   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000079   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00007B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    274              }
    275            }
   \                     ??AT_Cmd_ESCAN_CB_1:
   \   00007E   05..         INC       ?V2
   \   000080   E5..         MOV       A,?V2
   \   000082   C3           CLR       C
   \   000083   941B         SUBB      A,#0x1b
   \   000085   409B         JC        ??AT_Cmd_ESCAN_CB_0
    276            AT_NEW_LINE();
   \   000087                ; Setup parameters for call to function AT_Uart0_Send
   \   000087   7C02         MOV       R4,#0x2
   \   000089   7D00         MOV       R5,#0x0
   \   00008B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00008D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00008F   12....       LCALL     ?Subroutine16 & 0xFFFF
    277            AT_OK();
    278            NLME_NwkDiscTerm();
   \                     ??CrossCallReturnLabel_18:
   \   000092                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000092   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
    279          
    280            // recover the Energy scan call back funtion to ZDO layer so that ZDO can
    281            // get the energy scan result
    282            pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
   \   000095   90....       MOV       DPTR,#pZDNwkMgr_EDScanConfirmCB
   \   000098   74..         MOV       A,#`??ZDNwkMgr_EDScanConfirmCB::?relay` & 0xff
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   74..         MOV       A,#(`??ZDNwkMgr_EDScanConfirmCB::?relay` >> 8) & 0xff
   \   00009E   F0           MOVX      @DPTR,A
    283          }
   \   00009F   7F08         MOV       R7,#0x8
   \   0000A1   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C06         MOV       R4,#0x6
   \   000005   7D00         MOV       R5,#0x0
   \   000007   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000009   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C02         MOV       R4,#0x2
   \   000005   7D00         MOV       R5,#0x0
   \   000007   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000009   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V6,A
   \   000005   75..00       MOV       ?V7,#0x0
   \   000008   78..         MOV       R0,#?V6
   \   00000A   22           RET
    284          
    285          /*******************************************************************************
    286           * @fn      AT_ZDO_ProcessMgmtNwkDiscRsp
    287           *
    288           * @brief   Response: +PANSCAN:<channel>,<PANID>,<EPANID>,XX,b
    289           *                    OK or ERROR:<errorcode> .
    290           *
    291           *                    <channel> - represents the channel,
    292           *                    <PANID>   - the PAN ID,
    293           *                    <EPANID>  - the extended PAN ID,
    294           *                                The node gives a list of all PANs found.
    295           *                    XX - the ZigBee stack profile
    296           *                         (00 = Custom, 01 = ZigBee, 02 = ZigBee PRO)
    297           *                    b - indicates whether the network is allowing additional
    298           *                        nodes to join (1 = joining permitted).
    299           *
    300           * @param   inMsg - incoming message (response)
    301           *
    302           * @return  None
    303           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          void AT_ZDO_ProcessMgmtNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     AT_ZDO_ProcessMgmtNwkDiscRsp:
    305          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    306            ZDO_MgmNwkDiscRsp_t *MgmNwkDiscRsp;
    307            uint8 i;
    308            mgmtNwkDiscItem_t *NetworkList, *pNwkDesc;
    309            // uint8 ResultCount = 0;
    310            uint8 count = 0; //record the lik quality >0 networks
    311          
    312            MgmNwkDiscRsp = ZDO_ParseMgmNwkDiscRsp(inMsg);
   \   000005                ; Setup parameters for call to function ZDO_ParseMgmNwkDiscRsp
   \   000005   12....       LCALL     `??ZDO_ParseMgmNwkDiscRsp::?relay`; Banked call to: ZDO_ParseMgmNwkDiscRsp
   \   000008   8B..         MOV       ?V1,R3
   \   00000A   A9..         MOV       R1,?V1
    313          
    314            // ResultCount = MgmNwkDiscRsp->networkCount;
    315            count = MgmNwkDiscRsp->networkListCount;
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V2,A
    316            NetworkList = MgmNwkDiscRsp->list;
    317            pNwkDesc = NetworkList;
   \   000016   EA           MOV       A,R2
   \   000017   2404         ADD       A,#0x4
   \   000019   F5..         MOV       ?V0,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F5..         MOV       ?V1,A
    318          
    319            AT_NEW_LINE();
   \   00001F                ; Setup parameters for call to function AT_Uart0_Send
   \   00001F   7C02         MOV       R4,#0x2
   \   000021   7D00         MOV       R5,#0x0
   \   000023   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000025   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000027   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    320            // printf("%d result(s)\n\r",count);
    321            // if (count > 0) {
    322            //   //print:Channel | PANID | EPANID | StackProfile | perimit
    323            //   printf("Channel | PANID | EPANID | StackProfile | perimit");
    324            // }
    325            for ( i = 0; i < count; i++ ) {
   \   00002A   75..00       MOV       ?V3,#0x0
   \   00002D   02....       LJMP      ??AT_ZDO_ProcessMgmtNwkDiscRsp_0 & 0xFFFF
    326              uint16 *ext = (uint16*)pNwkDesc->extendedPANID;
    327              AT_NEXT_LINE();
   \                     ??AT_ZDO_ProcessMgmtNwkDiscRsp_1:
   \   000030                ; Setup parameters for call to function AT_Uart0_Send
   \   000030   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    328              AT_RESP("+PANSCAN:", 9);
   \   000033                ; Setup parameters for call to function AT_Uart0_Send
   \   000033   7C09         MOV       R4,#0x9
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7A..         MOV       R2,#`?<Constant "+PANSCAN:">` & 0xff
   \   000039   7B..         MOV       R3,#(`?<Constant "+PANSCAN:">` >> 8) & 0xff
   \   00003B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    329              printf("%02d,%04X,%04X%04X%04X%04X,%02X,%X",
    330              pNwkDesc->logicalChannel,
    331              pNwkDesc->PANId,
    332              ext[3],ext[2],ext[1],ext[0],
    333              pNwkDesc->stackProfile,
    334              pNwkDesc->permitJoining );
   \   00003E                ; Setup parameters for call to function printf
   \   00003E   E5..         MOV       A,?V0
   \   000040   240F         ADD       A,#0xf
   \   000042   F582         MOV       DPL,A
   \   000044   E4           CLR       A
   \   000045   35..         ADDC      A,?V1
   \   000047   F583         MOV       DPH,A
   \   000049   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F5..         MOV       ?V4,A
   \   000055   78..         MOV       R0,#?V4
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   85..82       MOV       DPL,?V0
   \   00005D   85..83       MOV       DPH,?V1
   \   000060   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000063   85..82       MOV       DPL,?V0
   \   000066   85..83       MOV       DPH,?V1
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00006E   85..82       MOV       DPL,?V0
   \   000071   85..83       MOV       DPH,?V1
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00007B   85..82       MOV       DPL,?V0
   \   00007E   85..83       MOV       DPH,?V1
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008A   85..82       MOV       DPL,?V0
   \   00008D   85..83       MOV       DPH,?V1
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009B   85..82       MOV       DPL,?V0
   \   00009E   85..83       MOV       DPH,?V1
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F5..         MOV       ?V4,A
   \   0000AE   78..         MOV       R0,#?V4
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   7A..         MOV       R2,#`?<Constant "%02d,%04X,%04X%04X%04...">` & 0xff
   \   0000B5   7B..         MOV       R3,#(`?<Constant "%02d,%04X,%04X%04X%04...">` >> 8) & 0xff
   \   0000B7   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000BA   7410         MOV       A,#0x10
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
    335          
    336              pNwkDesc++;
   \   0000BF   E5..         MOV       A,?V0
   \   0000C1   2410         ADD       A,#0x10
   \   0000C3   F5..         MOV       ?V0,A
   \   0000C5   5002         JNC       ??AT_ZDO_ProcessMgmtNwkDiscRsp_2
   \   0000C7   05..         INC       ?V1
    337            }
   \                     ??AT_ZDO_ProcessMgmtNwkDiscRsp_2:
   \   0000C9   05..         INC       ?V3
   \                     ??AT_ZDO_ProcessMgmtNwkDiscRsp_0:
   \   0000CB   E5..         MOV       A,?V3
   \   0000CD   C3           CLR       C
   \   0000CE   95..         SUBB      A,?V2
   \   0000D0   7C02         MOV       R4,#0x2
   \   0000D2   7D00         MOV       R5,#0x0
   \   0000D4   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000D6   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000D8   5003         JNC       $+5
   \   0000DA   02....       LJMP      ??AT_ZDO_ProcessMgmtNwkDiscRsp_1 & 0xFFFF
    338            AT_NEW_LINE();
   \   0000DD                ; Setup parameters for call to function AT_Uart0_Send
   \   0000DD   12....       LCALL     ?Subroutine16 & 0xFFFF
    339            AT_OK();
    340            notdoSCANCmd = TRUE;
   \                     ??CrossCallReturnLabel_19:
   \   0000E0   90....       MOV       DPTR,#notdoSCANCmd
   \   0000E3   7401         MOV       A,#0x1
   \   0000E5   F0           MOVX      @DPTR,A
    341          }
   \   0000E6                REQUIRE ?Subroutine2
   \   0000E6                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   75..00       MOV       ?V5,#0x0
   \   000006   78..         MOV       R0,#?V4
   \   000008   22           RET
    342          
    343          /*******************************************************************************
    344           * @fn      AT_Cmd_FN_CB
    345           *
    346           * @brief   Response: JPAN:<channel>,<PANID>,<EPANID>
    347           *                    OK or ERROR:<errorcode> .
    348           *
    349           *                    <channel> - represents the channel,
    350           *                    <PANID>   - the PAN ID,
    351           *                    <EPANID>  - the extended PAN ID
    352           *
    353           * @param   Status - Result of NLME_NetworkFormationRequest()
    354           *
    355           * @return  None
    356           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void AT_Cmd_FN_CB( ZStatus_t Status )
   \                     AT_Cmd_FN_CB:
    358          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    359            // recover the parameters
    360            // set BDB channel attribute to default
    361            bdb_setChannelAttribute( TRUE, BDB_DEFAULT_PRIMARY_CHANNEL_SET );
   \   000007                ; Setup parameters for call to function bdb_setChannelAttribute
   \   000007   90....       MOV       DPTR,#__Constant_800
   \   00000A   12....       LCALL     ?XLOAD_R2345
   \   00000D   7901         MOV       R1,#0x1
   \   00000F   12....       LCALL     `??bdb_setChannelAttribute::?relay`; Banked call to: bdb_setChannelAttribute
    362            bdb_setChannelAttribute( FALSE, BDB_DEFAULT_SECONDARY_CHANNEL_SET );
   \   000012                ; Setup parameters for call to function bdb_setChannelAttribute
   \   000012   90....       MOV       DPTR,#__Constant_7fff000
   \   000015   12....       LCALL     ?XLOAD_R2345
   \   000018   12....       LCALL     ?Subroutine13 & 0xFFFF
    363          
    364            zgConfigPANID = 0xFFFF;
    365            uint8 status = osal_nv_item_init( ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID );
    366            if ( status == ZSUCCESS ) { // TODO: if status != ZSUCCESS, should we do something??
   \                     ??CrossCallReturnLabel_11:
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   7C02         MOV       R4,#0x2
   \   000020   7D00         MOV       R5,#0x0
   \   000022   7A83         MOV       R2,#-0x7d
   \   000024   7B00         MOV       R3,#0x0
   \   000026   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   E9           MOV       A,R1
   \   00002F   7020         JNZ       ??AT_Cmd_FN_CB_0
    367              osal_nv_write( ZCD_NV_PANID, 0, sizeof(zgConfigPANID), &zgConfigPANID );
   \   000031                ; Setup parameters for call to function osal_nv_write
   \   000031   78..         MOV       R0,#?V2
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   75..02       MOV       ?V2,#0x2
   \   000039   75..00       MOV       ?V3,#0x0
   \   00003C   78..         MOV       R0,#?V2
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV       R4,#0x0
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A83         MOV       R2,#-0x7d
   \   000047   7B00         MOV       R3,#0x0
   \   000049   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
    368            }
    369          
    370            AT_NEW_LINE();
   \                     ??AT_Cmd_FN_CB_0:
   \   000051                ; Setup parameters for call to function AT_Uart0_Send
   \   000051   7C02         MOV       R4,#0x2
   \   000053   7D00         MOV       R5,#0x0
   \   000055   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000057   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000059   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    371            if (Status == ZSUCCESS) {
   \   00005C   E5..         MOV       A,?V0
   \   00005E   702F         JNZ       ??AT_Cmd_FN_CB_1
    372              AT_OK();
   \   000060                ; Setup parameters for call to function AT_Uart0_Send
   \   000060   12....       LCALL     ?Subroutine15 & 0xFFFF
    373              AT_NEXT_LINE();
    374              uint16* ext = (uint16*)_NIB.extendedPANID;
    375              printf("JPAN:%02d,%04X,%04X%04X%04X%04X", _NIB.nwkLogicalChannel,
    376                      _NIB.nwkPanId,ext[3],ext[2],ext[1],ext[0]);
    377            } else {
   \                     ??CrossCallReturnLabel_16:
   \   000063   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000066   90....       MOV       DPTR,#_NIB + 55
   \   000069   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00006C   90....       MOV       DPTR,#_NIB + 57
   \   00006F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000072   90....       MOV       DPTR,#_NIB + 59
   \   000075   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000078   90....       MOV       DPTR,#_NIB + 33
   \   00007B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00007E   90....       MOV       DPTR,#_NIB + 22
   \   000081   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   8006         SJMP      ??AT_Cmd_FN_CB_2
    378              AT_ZDO_ERROR(Status);
   \                     ??AT_Cmd_FN_CB_1:
   \   00008F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00008F   7A03         MOV       R2,#0x3
   \   000091   F9           MOV       R1,A
   \   000092   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
    379            }
    380            AT_NEW_LINE();
   \                     ??AT_Cmd_FN_CB_2:
   \   000095                ; Setup parameters for call to function AT_Uart0_Send
   \   000095   7C02         MOV       R4,#0x2
   \   000097   7D00         MOV       R5,#0x0
   \   000099   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00009B   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00009D   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    381          }
   \   0000A0   7F04         MOV       R7,#0x4
   \   0000A2   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7A..         MOV       R2,#`?<Constant "JPAN:%02d,%04X,%04X%0...">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "JPAN:%02d,%04X,%04X%0...">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine29_0
   \   000004                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000003   740C         MOV       A,#0xc
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7C06         MOV       R4,#0x6
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000008   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                ; Setup parameters for call to function printf
   \   00000B   90....       MOV       DPTR,#_NIB + 53
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7900         MOV       R1,#0x0
   \   000002   12....       LCALL     `??bdb_setChannelAttribute::?relay`; Banked call to: bdb_setChannelAttribute
   \   000005   90....       MOV       DPTR,#zgConfigPANID
   \   000008   74FF         MOV       A,#-0x1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D                ; Setup parameters for call to function osal_nv_item_init
   \   00000D                ; Setup parameters for call to function osal_nv_item_init
   \   00000D   75....       MOV       ?V2,#zgConfigPANID & 0xff
   \   000010   75....       MOV       ?V3,#(zgConfigPANID >> 8) & 0xff
   \   000013   78..         MOV       R0,#?V2
   \   000015   22           RET
    382          
    383          /*******************************************************************************
    384           * @fn      AT_ZDO_ProcessJOIN_CNF_CB
    385           *
    386           * @brief   Response: JPAN:<channel>,<PANID>,<EPANID>
    387           *                    OK or ERROR:<errorcode> .
    388           *
    389           *                    <channel> - represents the channel,
    390           *                    <PANID>   - the PAN ID,
    391           *                    <EPANID>  - the extended PAN ID
    392           *
    393           * @param   param - Join confirm message
    394           *
    395           * @return  None
    396           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    397          void* AT_ZDO_ProcessJOIN_CNF_CB(void *param)
   \                     AT_ZDO_ProcessJOIN_CNF_CB:
    398          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    399              zdoJoinCnf_t *joinCnf = (zdoJoinCnf_t*) param;
    400          
    401              // recover the parameters
    402              // set BDB channel attribute to default
    403              bdb_setChannelAttribute( TRUE, BDB_DEFAULT_PRIMARY_CHANNEL_SET );
   \   000009                ; Setup parameters for call to function bdb_setChannelAttribute
   \   000009   90....       MOV       DPTR,#__Constant_800
   \   00000C   12....       LCALL     ?XLOAD_R2345
   \   00000F   7901         MOV       R1,#0x1
   \   000011   12....       LCALL     `??bdb_setChannelAttribute::?relay`; Banked call to: bdb_setChannelAttribute
    404              bdb_setChannelAttribute( FALSE, BDB_DEFAULT_SECONDARY_CHANNEL_SET );
   \   000014                ; Setup parameters for call to function bdb_setChannelAttribute
   \   000014   90....       MOV       DPTR,#__Constant_7fff000
   \   000017   12....       LCALL     ?XLOAD_R2345
   \   00001A   12....       LCALL     ?Subroutine13 & 0xFFFF
    405          
    406              zgConfigPANID = 0xFFFF;
    407              uint8 status = osal_nv_item_init( ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID );
    408              if ( status == ZSUCCESS ) { // TODO: if status != ZSUCCESS, should we do something??
   \                     ??CrossCallReturnLabel_12:
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   7C02         MOV       R4,#0x2
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7A83         MOV       R2,#-0x7d
   \   000026   7B00         MOV       R3,#0x0
   \   000028   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   E9           MOV       A,R1
   \   000031   7020         JNZ       ??AT_ZDO_ProcessJOIN_CNF_CB_0
    409                osal_nv_write( ZCD_NV_PANID, 0, sizeof(zgConfigPANID), &zgConfigPANID );
   \   000033                ; Setup parameters for call to function osal_nv_write
   \   000033   78..         MOV       R0,#?V2
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   75..02       MOV       ?V2,#0x2
   \   00003B   75..00       MOV       ?V3,#0x0
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7C00         MOV       R4,#0x0
   \   000045   7D00         MOV       R5,#0x0
   \   000047   7A83         MOV       R2,#-0x7d
   \   000049   7B00         MOV       R3,#0x0
   \   00004B   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004E   7404         MOV       A,#0x4
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
    410              }
    411          
    412              // invalid address enable the device allow all the ExtPANid
    413              osal_memcpy( ZDO_UseExtendedPANID, "\0\0\0\0\0\0\0\0", 8);
   \                     ??AT_ZDO_ProcessJOIN_CNF_CB_0:
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   75....       MOV       ?V4,#`?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">` & 0xff
   \   000056   75....       MOV       ?V5,#(`?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">` >> 8) & 0xff
   \   000059   75..00       MOV       ?V6,#0x0
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000061   7C08         MOV       R4,#0x8
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000067   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000069   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006C   7403         MOV       A,#0x3
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
    414          
    415              //cancel the call, because the command will finished in this function
    416              ZDO_RegisterForZdoCB(ZDO_JOIN_CNF_CBID, NULL);
   \   000071                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000071   7A00         MOV       R2,#0x0
   \   000073   7B00         MOV       R3,#0x0
   \   000075   7904         MOV       R1,#0x4
   \   000077   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    417          
    418              AT_NEW_LINE();
   \   00007A                ; Setup parameters for call to function AT_Uart0_Send
   \   00007A   7C02         MOV       R4,#0x2
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000080   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000082   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    419              if (joinCnf->status == ZSUCCESS) {
   \   000085   85..82       MOV       DPL,?V0
   \   000088   85..83       MOV       DPH,?V1
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F9           MOV       R1,A
   \   00008D   702F         JNZ       ??AT_ZDO_ProcessJOIN_CNF_CB_1
    420                AT_OK();
   \   00008F                ; Setup parameters for call to function AT_Uart0_Send
   \   00008F   12....       LCALL     ?Subroutine15 & 0xFFFF
    421                AT_NEXT_LINE();
    422                uint16* ext = (uint16*)_NIB.extendedPANID;
    423                printf("JPAN:%02d,%04X,%04X%04X%04X%04X", _NIB.nwkLogicalChannel,
    424                        _NIB.nwkPanId, ext[3], ext[2], ext[1], ext[0]);
    425              } else {
   \                     ??CrossCallReturnLabel_17:
   \   000092   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000095   90....       MOV       DPTR,#_NIB + 55
   \   000098   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009B   90....       MOV       DPTR,#_NIB + 57
   \   00009E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A1   90....       MOV       DPTR,#_NIB + 59
   \   0000A4   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A7   90....       MOV       DPTR,#_NIB + 33
   \   0000AA   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000AD   90....       MOV       DPTR,#_NIB + 22
   \   0000B0   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B6   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   8005         SJMP      ??AT_ZDO_ProcessJOIN_CNF_CB_2
    426                // This function is called by ZDO_JoinConfirmCB
    427                // only return join error status, so we can not catche errors
    428                // from NLME_NetworkDiscoveryRequest and bdb_rejoinNwk
    429                AT_ZDO_ERROR(joinCnf->status);
   \                     ??AT_ZDO_ProcessJOIN_CNF_CB_1:
   \   0000BE                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000BE   7A03         MOV       R2,#0x3
   \   0000C0   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
    430              }
    431              AT_NEW_LINE();
   \                     ??AT_ZDO_ProcessJOIN_CNF_CB_2:
   \   0000C3                ; Setup parameters for call to function AT_Uart0_Send
   \   0000C3   7C02         MOV       R4,#0x2
   \   0000C5   7D00         MOV       R5,#0x0
   \   0000C7   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000C9   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000CB   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    432              return NULL;
   \   0000CE   7A00         MOV       R2,#0x0
   \   0000D0   7B00         MOV       R3,#0x0
   \   0000D2   7F07         MOV       R7,#0x7
   \   0000D4   02....       LJMP      ?BANKED_LEAVE_XDATA
    433          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   75..00       MOV       ?V1,#0x0
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET
    434          
    435          /*******************************************************************************
    436           * @fn      AT_ZDO_ProcessPowerDescRsp
    437           *
    438           * @brief   Prompt: PowerDesc:<NodeID>,<errorcode>[,<PowerDescriptor>]
    439           *                  <NodeID> - the Remote node’s Node ID.
    440           *                  <PowerDescriptor> - displayed as a 16 bit hexadecimal number
    441           *                                      as described in section 2.3.2.4. of
    442           *                                      ZigBee Pro Specification.
    443           *          Note: In case of an error an errorcode other than 00 will be displayed
    444           *                and the prompt will end after the errorcode
    445           *
    446           * @param   inMsg - incoming message (response)
    447           *
    448           * @return  None
    449           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    450          void AT_ZDO_ProcessPowerDescRsp( zdoIncomingMsg_t *inMsg )
   \                     AT_ZDO_ProcessPowerDescRsp:
    451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    452            ZDO_PowerRsp_t pRsp;
    453            ZDO_ParsePowerDescRsp( inMsg, &pRsp );
   \   00000A                ; Setup parameters for call to function ZDO_ParsePowerDescRsp
   \   00000A   AC..         MOV       R4,?XSP + 0
   \   00000C   AD..         MOV       R5,?XSP + 1
   \   00000E   12....       LCALL     `??ZDO_ParsePowerDescRsp::?relay`; Banked call to: ZDO_ParsePowerDescRsp
    454          
    455            AT_NEW_LINE();
   \   000011                ; Setup parameters for call to function AT_Uart0_Send
   \   000011   12....       LCALL     ?Subroutine6 & 0xFFFF
    456            printf("PowerDesc:%04X,%02X", pRsp.nwkAddr, pRsp.status);
   \                     ??CrossCallReturnLabel_56:
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   7403         MOV       A,#0x3
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00001F   7A..         MOV       R2,#`?<Constant "PowerDesc:%04X,%02X">` & 0xff
   \   000021   7B..         MOV       R3,#(`?<Constant "PowerDesc:%04X,%02X">` >> 8) & 0xff
   \   000023   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
    457            if (pRsp.status == ZDP_SUCCESS) {
   \   000029   85..82       MOV       DPL,?XSP + 0
   \   00002C   85..83       MOV       DPH,?XSP + 1
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   706B         JNZ       ??AT_ZDO_ProcessPowerDescRsp_0
    458              AT_NEXT_LINE();
   \   000032                ; Setup parameters for call to function AT_Uart0_Send
   \   000032   12....       LCALL     ?Subroutine18 & 0xFFFF
    459              printf("PowerMode:%02X", pRsp.pwrDesc.PowerMode);
   \                     ??CrossCallReturnLabel_22:
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7A..         MOV       R2,#`?<Constant "PowerMode:%02X">` & 0xff
   \   000040   7B..         MOV       R3,#(`?<Constant "PowerMode:%02X">` >> 8) & 0xff
   \   000042   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
    460              AT_NEXT_LINE();
   \   000048                ; Setup parameters for call to function AT_Uart0_Send
   \   000048   12....       LCALL     ?Subroutine18 & 0xFFFF
    461              printf("AvailablePowerSources:%02X", pRsp.pwrDesc.AvailablePowerSources);
   \                     ??CrossCallReturnLabel_23:
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   C4           SWAP      A
   \   000050   540F         ANL       A,#0xf
   \   000052   F5..         MOV       ?V0,A
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   7A..         MOV       R2,#`?<Constant "AvailablePowerSources...">` & 0xff
   \   00005B   7B..         MOV       R3,#(`?<Constant "AvailablePowerSources...">` >> 8) & 0xff
   \   00005D   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
    462              AT_NEXT_LINE();
   \   000063                ; Setup parameters for call to function AT_Uart0_Send
   \   000063   12....       LCALL     ?Subroutine18 & 0xFFFF
    463              printf("CurrentPowerSource:%02X", pRsp.pwrDesc.CurrentPowerSource);
   \                     ??CrossCallReturnLabel_24:
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   A3           INC       DPTR
   \   00006A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7A..         MOV       R2,#`?<Constant "CurrentPowerSource:%02X">` & 0xff
   \   000072   7B..         MOV       R3,#(`?<Constant "CurrentPowerSource:%02X">` >> 8) & 0xff
   \   000074   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
    464              AT_NEXT_LINE();
   \   00007A                ; Setup parameters for call to function AT_Uart0_Send
   \   00007A   12....       LCALL     ?Subroutine18 & 0xFFFF
    465              printf("CurrentPowerSourceLevel:%02X", pRsp.pwrDesc.CurrentPowerSourceLevel);
    466            }
   \                     ??CrossCallReturnLabel_25:
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F5..         MOV       ?V0,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F5..         MOV       ?V1,A
   \   000087   740C         MOV       A,#0xc
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?US_SHR
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000093   7A..         MOV       R2,#`?<Constant "CurrentPowerSourceLev...">` & 0xff
   \   000095   7B..         MOV       R3,#(`?<Constant "CurrentPowerSourceLev...">` >> 8) & 0xff
   \   000097   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
    467            AT_NEW_LINE();
   \                     ??AT_ZDO_ProcessPowerDescRsp_0:
   \   00009D                ; Setup parameters for call to function AT_Uart0_Send
   \   00009D   7C02         MOV       R4,#0x2
   \   00009F   7D00         MOV       R5,#0x0
   \   0000A1   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000A3   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000A5   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    468          }
   \   0000A8   7405         MOV       A,#0x5
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AD   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7C02         MOV       R4,#0x2
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000008   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                ; Setup parameters for call to function printf
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011                REQUIRE ??Subroutine30_0
   \   000011                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7C02         MOV       R4,#0x2
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000008   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                ; Setup parameters for call to function printf
   \   00000B                ; Setup parameters for call to function printf
   \   00000B   7403         MOV       A,#0x3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   540F         ANL       A,#0xf
   \   000003   F5..         MOV       ?V0,A
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET
    469          
    470          /*******************************************************************************
    471           * @fn      AT_ZDO_ProcessActEpRsp
    472           *
    473           * @brief   Prompt: ActEpDesc:<NodeID>,<errorcode>[,XX,…]
    474           *                  <NodeID> - the Remote node’s Node ID.
    475           *                  [,XX,...] - active endpoint listed as 8-bit hexadecimal
    476           *                              numbers seperated by commas
    477           *          Note: In case of an error an errorcode other than 00 will be displayed
    478           *                and the prompt will end after the errorcode
    479           *
    480           * @param   inMsg - incoming message (response)
    481           *
    482           * @return  None
    483           ******************************************************************************/
    484          void AT_ZDO_ProcessActEpRsp( zdoIncomingMsg_t *inMsg )
    485          {
    486            ZDO_ActiveEndpointRsp_t * pRsp = ZDO_ParseEPListRsp( inMsg );
    487          
    488            AT_NEW_LINE();
    489            printf("ActEpDesc:%04X,%02X", pRsp->nwkAddr, pRsp->status);
    490            if(pRsp->status == ZDP_SUCCESS){
    491              uint8 i;
    492              for (i = 0; i < pRsp->cnt; i++) {
    493                printf(",%02X", pRsp->epList[i]);
    494              }
    495            }
    496            AT_NEW_LINE();
    497            osal_mem_free(pRsp);
    498          }
    499          
    500          /*******************************************************************************
    501           * @fn      AT_ZDO_ProcessSimpleDescRsp
    502           *
    503           * @brief   Prompt: SimpleDesc:<NodeID>,<errorcode>
    504           *                  EP:XX
    505           *                  ProfileID:XXXX
    506           *                  DeviceID:XXXXvXX
    507           *                  InCluster:<Cluster List>
    508           *                  OutCluster:<Cluster List>
    509           *          Note: In case of an error an errorcode other than 00 will be displayed
    510           *                and the prompt will end after the errorcode
    511           *
    512           * @param   inMsg - incoming message (response)
    513           *
    514           * @return  None
    515           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          void AT_ZDO_ProcessSimpleDescRsp( zdoIncomingMsg_t *inMsg )
   \                     AT_ZDO_ProcessSimpleDescRsp:
    517          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    518            notdoSIMPLEDESCcmd = TRUE;
   \   00000A   90....       MOV       DPTR,#notdoSIMPLEDESCcmd
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
    519            ZDO_SimpleDescRsp_t Rsp;
    520            ZDO_ParseSimpleDescRsp( inMsg, &Rsp );
   \   000010                ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
   \   000010   AC..         MOV       R4,?XSP + 0
   \   000012   AD..         MOV       R5,?XSP + 1
   \   000014   12....       LCALL     `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
    521          
    522            AT_NEW_LINE();
   \   000017                ; Setup parameters for call to function AT_Uart0_Send
   \   000017   12....       LCALL     ?Subroutine6 & 0xFFFF
    523            printf("SimpleDesc:%04X,%02X", Rsp.nwkAddr, Rsp.status);
   \                     ??CrossCallReturnLabel_57:
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   7403         MOV       A,#0x3
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000025   7A..         MOV       R2,#`?<Constant "SimpleDesc:%04X,%02X">` & 0xff
   \   000027   7B..         MOV       R3,#(`?<Constant "SimpleDesc:%04X,%02X">` >> 8) & 0xff
   \   000029   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
    524            if (Rsp.status == ZDP_SUCCESS) {
   \   00002F   85..82       MOV       DPL,?XSP + 0
   \   000032   85..83       MOV       DPH,?XSP + 1
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6003         JZ        $+5
   \   000038   02....       LJMP      ??AT_ZDO_ProcessSimpleDescRsp_0 & 0xFFFF
    525              AT_NEXT_LINE();
   \   00003B                ; Setup parameters for call to function AT_Uart0_Send
   \   00003B   12....       LCALL     ?Subroutine18 & 0xFFFF
    526              printf("EP:%02X", Rsp.simpleDesc.EndPoint);
   \                     ??CrossCallReturnLabel_26:
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F5..         MOV       ?V0,A
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   7A..         MOV       R2,#`?<Constant "EP:%02X">` & 0xff
   \   00004B   7B..         MOV       R3,#(`?<Constant "EP:%02X">` >> 8) & 0xff
   \   00004D   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
    527              AT_NEXT_LINE();
   \   000053                ; Setup parameters for call to function AT_Uart0_Send
   \   000053   7C02         MOV       R4,#0x2
   \   000055   7D00         MOV       R5,#0x0
   \   000057   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000059   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00005B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    528              printf("ProfileID:%04X", Rsp.simpleDesc.AppProfId);
   \   00005E                ; Setup parameters for call to function printf
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000066   7A..         MOV       R2,#`?<Constant "ProfileID:%04X">` & 0xff
   \   000068   7B..         MOV       R3,#(`?<Constant "ProfileID:%04X">` >> 8) & 0xff
   \   00006A   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
    529              AT_NEXT_LINE();
   \   000070                ; Setup parameters for call to function AT_Uart0_Send
   \   000070   7C02         MOV       R4,#0x2
   \   000072   7D00         MOV       R5,#0x0
   \   000074   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000076   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000078   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    530              printf("DeviceID:%04Xv%02X", Rsp.simpleDesc.AppDeviceId, Rsp.simpleDesc.AppDevVer);
   \   00007B                ; Setup parameters for call to function printf
   \   00007B   7408         MOV       A,#0x8
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   7408         MOV       A,#0x8
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008E   7A..         MOV       R2,#`?<Constant "DeviceID:%04Xv%02X">` & 0xff
   \   000090   7B..         MOV       R3,#(`?<Constant "DeviceID:%04Xv%02X">` >> 8) & 0xff
   \   000092   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
    531              AT_NEXT_LINE();
   \   000098                ; Setup parameters for call to function AT_Uart0_Send
   \   000098   7C02         MOV       R4,#0x2
   \   00009A   7D00         MOV       R5,#0x0
   \   00009C   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00009E   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000A0   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    532              uint8 i;
    533              printf("InCluster: ");
   \   0000A3                ; Setup parameters for call to function printf
   \   0000A3   7A..         MOV       R2,#`?<Constant "InCluster: ">` & 0xff
   \   0000A5   7B..         MOV       R3,#(`?<Constant "InCluster: ">` >> 8) & 0xff
   \   0000A7   12....       LCALL     `??printf::?relay`; Banked call to: printf
    534              for (i = 0; i < Rsp.simpleDesc.AppNumInClusters; i++) {
   \   0000AA   75..00       MOV       ?V4,#0x0
   \   0000AD   75....       MOV       ?V0,#`?<Constant "%04X">` & 0xff
   \   0000B0   75....       MOV       ?V1,#(`?<Constant "%04X">` >> 8) & 0xff
   \   0000B3   801A         SJMP      ??AT_ZDO_ProcessSimpleDescRsp_1
    535                  if(i) printf("           %04X",Rsp.simpleDesc.pAppInClusterList[i]);
    536                  else printf("%04X",Rsp.simpleDesc.pAppInClusterList[i]);
   \                     ??AT_ZDO_ProcessSimpleDescRsp_2:
   \   0000B5                ; Setup parameters for call to function printf
   \   0000B5   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000B8   AA..         MOV       R2,?V0
   \   0000BA   AB..         MOV       R3,?V1
   \                     ??AT_ZDO_ProcessSimpleDescRsp_3:
   \   0000BC   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
    537                  AT_NEXT_LINE();
   \   0000C2                ; Setup parameters for call to function AT_Uart0_Send
   \   0000C2   7C02         MOV       R4,#0x2
   \   0000C4   7D00         MOV       R5,#0x0
   \   0000C6   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000C8   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000CA   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   0000CD   05..         INC       ?V4
   \                     ??AT_ZDO_ProcessSimpleDescRsp_1:
   \   0000CF   7409         MOV       A,#0x9
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F8           MOV       R0,A
   \   0000D6   E5..         MOV       A,?V4
   \   0000D8   C3           CLR       C
   \   0000D9   98           SUBB      A,R0
   \   0000DA   5016         JNC       ??AT_ZDO_ProcessSimpleDescRsp_4
   \   0000DC   740A         MOV       A,#0xa
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000E4   60CF         JZ        ??AT_ZDO_ProcessSimpleDescRsp_2
   \   0000E6                ; Setup parameters for call to function printf
   \   0000E6   12....       LCALL     ?Subroutine24 & 0xFFFF
    538              }
   \                     ??CrossCallReturnLabel_40:
   \   0000E9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000EC   7A..         MOV       R2,#`?<Constant "           %04X">` & 0xff
   \   0000EE   7B..         MOV       R3,#(`?<Constant "           %04X">` >> 8) & 0xff
   \   0000F0   80CA         SJMP      ??AT_ZDO_ProcessSimpleDescRsp_3
    539          
    540              printf("OutCluster: ");
   \                     ??AT_ZDO_ProcessSimpleDescRsp_4:
   \   0000F2                ; Setup parameters for call to function printf
   \   0000F2   7A..         MOV       R2,#`?<Constant "OutCluster: ">` & 0xff
   \   0000F4   7B..         MOV       R3,#(`?<Constant "OutCluster: ">` >> 8) & 0xff
   \   0000F6   12....       LCALL     `??printf::?relay`; Banked call to: printf
    541              for (i = 0; i < Rsp.simpleDesc.AppNumOutClusters; i++) {
   \   0000F9   75..00       MOV       ?V4,#0x0
   \   0000FC   8034         SJMP      ??AT_ZDO_ProcessSimpleDescRsp_5
    542                  if(i) printf("            %04X", Rsp.simpleDesc.pAppOutClusterList[i]);
    543                  else printf("%04X",Rsp.simpleDesc.pAppOutClusterList[i]);
   \                     ??AT_ZDO_ProcessSimpleDescRsp_6:
   \   0000FE                ; Setup parameters for call to function printf
   \   0000FE   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000101   AA..         MOV       R2,?V0
   \   000103   AB..         MOV       R3,?V1
   \                     ??AT_ZDO_ProcessSimpleDescRsp_7:
   \   000105   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000108   12....       LCALL     ?DEALLOC_XSTACK8
    544                  if(i < Rsp.simpleDesc.AppNumOutClusters-1) AT_NEXT_LINE();
   \   00010B   740C         MOV       A,#0xc
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   E0           MOVX      A,@DPTR
   \   000111   24FF         ADD       A,#-0x1
   \   000113   F8           MOV       R0,A
   \   000114   E4           CLR       A
   \   000115   34FF         ADDC      A,#-0x1
   \   000117   F9           MOV       R1,A
   \   000118   C3           CLR       C
   \   000119   E5..         MOV       A,?V2
   \   00011B   98           SUBB      A,R0
   \   00011C   E4           CLR       A
   \   00011D   99           SUBB      A,R1
   \   00011E   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000120   65D0         XRL       A,PSW
   \   000122   33           RLC       A
   \   000123   500B         JNC       ??AT_ZDO_ProcessSimpleDescRsp_8
   \   000125                ; Setup parameters for call to function AT_Uart0_Send
   \   000125   7C02         MOV       R4,#0x2
   \   000127   7D00         MOV       R5,#0x0
   \   000129   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00012B   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00012D   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \                     ??AT_ZDO_ProcessSimpleDescRsp_8:
   \   000130   05..         INC       ?V4
   \                     ??AT_ZDO_ProcessSimpleDescRsp_5:
   \   000132   740C         MOV       A,#0xc
   \   000134   12....       LCALL     ?XSTACK_DISP0_8
   \   000137   E0           MOVX      A,@DPTR
   \   000138   F8           MOV       R0,A
   \   000139   E5..         MOV       A,?V4
   \   00013B   C3           CLR       C
   \   00013C   98           SUBB      A,R0
   \   00013D   5018         JNC       ??AT_ZDO_ProcessSimpleDescRsp_0
   \   00013F   740D         MOV       A,#0xd
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000147   F5..         MOV       ?V2,A
   \   000149   60B3         JZ        ??AT_ZDO_ProcessSimpleDescRsp_6
   \   00014B                ; Setup parameters for call to function printf
   \   00014B   12....       LCALL     ?Subroutine24 & 0xFFFF
    545              }
    546            }
   \                     ??CrossCallReturnLabel_41:
   \   00014E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000151   7A..         MOV       R2,#`?<Constant "            %04X">` & 0xff
   \   000153   7B..         MOV       R3,#(`?<Constant "            %04X">` >> 8) & 0xff
   \   000155   80AE         SJMP      ??AT_ZDO_ProcessSimpleDescRsp_7
    547            AT_NEW_LINE();
   \                     ??AT_ZDO_ProcessSimpleDescRsp_0:
   \   000157                ; Setup parameters for call to function AT_Uart0_Send
   \   000157   7C02         MOV       R4,#0x2
   \   000159   7D00         MOV       R5,#0x0
   \   00015B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00015D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00015F   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    548          }
   \   000162   740F         MOV       A,#0xf
   \   000164   12....       LCALL     ?DEALLOC_XSTACK8
   \   000167   7F05         MOV       R7,#0x5
   \   000169   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   E582         MOV       A,DPL
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   E583         MOV       A,DPH
   \   00000D   39           ADDC      A,R1
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E5..         MOV       A,?V4
   \   00000A   22           RET
    549          
    550          /*******************************************************************************
    551           * @fn      AT_ZDO_ProcessMatchDescRsp
    552           *
    553           * @brief   Prompt: MatchDesc:<NodeID>,<errorcode>,<XX>
    554           *                  Where <NodeID> is the Remote node's NodeID. In addition all
    555           *                  endpoints of this node matching the search criterion are listed
    556           *                  as 8 bit hexadecimal numbers separated by commas.
    557           *          Note: In case of an error an errorcode other than 00 will be displayed
    558           *                and the prompt will end after the errorcode
    559           *
    560           * @param   inMsg - incoming message (response)
    561           *
    562           * @return  None
    563           ******************************************************************************/
    564          void AT_ZDO_ProcessMatchDescRsp( zdoIncomingMsg_t *inMsg )
    565          {
    566            ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    567          
    568            AT_NEW_LINE();
    569            printf("MatchDesc:%04X,%02X", pRsp->nwkAddr, pRsp->status);
    570            if (pRsp->status == ZDP_SUCCESS) {
    571              uint8 i;
    572              for (i = 0; i < pRsp->cnt; i++) {
    573                printf(",%02X", pRsp->epList[i]);
    574              }
    575            }
    576            AT_NEW_LINE();
    577            osal_mem_free(pRsp);
    578          }
    579          
    580          /*******************************************************************************
    581           * @fn      AT_ZDO_ProcessAnnceRsp
    582           *
    583           * @brief   Prompt: FFD:<EUI64>,<NodeID>
    584           *          Note: The prompt above will be displayed on all nodes which can
    585           *                hear the announcement.
    586           *
    587           * @param   inMsg - incoming message (response)
    588           *
    589           * @return  None
    590           ******************************************************************************/
    591          void AT_ZDO_ProcessAnnceRsp( zdoIncomingMsg_t *inMsg )
    592          {
    593            ZDO_DeviceAnnce_t Rsp;
    594            ZDO_ParseDeviceAnnce( inMsg,&Rsp );
    595          
    596            uint16* ext= (uint16*) Rsp.extAddr;
    597            AT_NEW_LINE();
    598            printf("%s:%04X%04X%04X%04X,%04X",
    599                   ((Rsp.capabilities&0x01) == CAPINFO_ALTPANCOORD) ? "COORD" :
    600                   (((Rsp.capabilities&0x02) == CAPINFO_DEVICETYPE_FFD) ? "FFD" : "RFD")
    601                   ,ext[3],ext[2],ext[1],ext[0],Rsp.nwkAddr);
    602            AT_NEW_LINE();
    603          }
    604          
    605          /*******************************************************************************
    606           * @fn      AT_ZDO_ProcessMgmtLqiRsp
    607           *
    608           * @brief   Prompt(example)
    609           *          NTable:<NodeID>,<errorcode>
    610           *          Length:03
    611           *          No.| Type | Relation |       EUI        |  ID  | LQI
    612           *          0. |  FFD |  PARENT  | 000D6F000015896B | BC04 | FF
    613           *          1. |  FFD |  CHILD   | 000D6F00000B3E77 | 739D | FF
    614           *          2. |  FFD |  SIBLING | 000D6F00000AAD11 | 75E3 | FF
    615           *
    616           * @param   inMsg - incoming message (response)
    617           *
    618           * @return  None
    619           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AA..         MOV       R2,?V6
   \   000002   AB..         MOV       R3,?V7
   \   000004                REQUIRE ??Subroutine31_0
   \   000004                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    620          void AT_ZDO_ProcessMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     AT_ZDO_ProcessMgmtLqiRsp:
    621          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    622            uint8 i;
    623            ZDO_MgmtLqiRsp_t *pRsp = ZDO_ParseMgmtLqiRsp( inMsg );
   \   000009                ; Setup parameters for call to function ZDO_ParseMgmtLqiRsp
   \   000009   12....       LCALL     `??ZDO_ParseMgmtLqiRsp::?relay`; Banked call to: ZDO_ParseMgmtLqiRsp
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
    624          
    625            AT_NEW_LINE();
   \   000010   75....       MOV       ?V14,#`?<Constant "\\r\\n">` & 0xff
   \   000013   75....       MOV       ?V15,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000016                ; Setup parameters for call to function AT_Uart0_Send
   \   000016   7C02         MOV       R4,#0x2
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   AA..         MOV       R2,?V14
   \   00001C   AB..         MOV       R3,?V15
   \   00001E   12....       LCALL     ?Subroutine14 & 0xFFFF
    626            // NTable:<NodeID>,<errorcode>
    627            if (inMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
   \                     ??CrossCallReturnLabel_13:
   \   000021   7019         JNZ       ??AT_ZDO_ProcessMgmtLqiRsp_0
    628              printf("NTable:%04X,%02X\r\n",(uint16)inMsg->srcAddr.addr.shortAddr,
    629                     pRsp->status);
   \   000023                ; Setup parameters for call to function printf
   \   000023   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    630            }
   \                     ??CrossCallReturnLabel_87:
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000032   7A..         MOV       R2,#`?<Constant "NTable:%04X,%02X\\r\\n">` & 0xff
   \   000034   7B..         MOV       R3,#(`?<Constant "NTable:%04X,%02X\\r\\n">` >> 8) & 0xff
   \   000036   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
    631          
    632            // Length:XX
    633            printf("Length:%02X\r\n", pRsp->neighborLqiCount);
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_0:
   \   00003C   E5..         MOV       A,?V0
   \   00003E   2403         ADD       A,#0x3
   \   000040   F5..         MOV       ?V8,A
   \   000042   E4           CLR       A
   \   000043   35..         ADDC      A,?V1
   \   000045   F5..         MOV       ?V9,A
   \   000047                ; Setup parameters for call to function printf
   \   000047   85..82       MOV       DPL,?V8
   \   00004A   F583         MOV       DPH,A
   \   00004C   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   7A..         MOV       R2,#`?<Constant "Length:%02X\\r\\n">` & 0xff
   \   000054   7B..         MOV       R3,#(`?<Constant "Length:%02X\\r\\n">` >> 8) & 0xff
   \   000056   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    634          
    635            // No.| Type | Relation | EUI | ID | LQI
    636            if(pRsp->neighborLqiCount != 0)
   \   00005C   85..82       MOV       DPL,?V8
   \   00005F   85..83       MOV       DPH,?V9
   \   000062   E0           MOVX      A,@DPTR
   \   000063   6007         JZ        ??AT_ZDO_ProcessMgmtLqiRsp_1
    637              printf("No.| Type | Relation |       EUI        |  ID  | LQI\n\r");
   \   000065                ; Setup parameters for call to function printf
   \   000065   7A..         MOV       R2,#`?<Constant "No.| Type | Relation ...">` & 0xff
   \   000067   7B..         MOV       R3,#(`?<Constant "No.| Type | Relation ...">` >> 8) & 0xff
   \   000069   12....       LCALL     `??printf::?relay`; Banked call to: printf
    638            for (i = 0; i < pRsp->neighborLqiCount; i++) {
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_1:
   \   00006C   75..00       MOV       ?V10,#0x0
   \   00006F   75....       MOV       ?V6,#`?<Constant " %-8s| ">` & 0xff
   \   000072   75....       MOV       ?V7,#(`?<Constant " %-8s| ">` >> 8) & 0xff
   \   000075   8071         SJMP      ??AT_ZDO_ProcessMgmtLqiRsp_2
    639              uint16 *ext = (uint16*) pRsp->list[i].extAddr;
    640              // print No.
    641              printf("\r\n%02X.| ",i+pRsp->startIndex);
    642              // print type
    643              if (pRsp->list[i].devType == ZDP_MGMT_DT_COORD)
    644                printf(" %-3s | ", "COO");
    645              else if (pRsp->list[i].devType == ZDP_MGMT_DT_ROUTER)
    646                printf(" %-3s | ", "RTR");
    647              else if (pRsp->list[i].devType == ZDP_MGMT_DT_ENDDEV)
    648                printf(" %-3s | ", "ZED");
    649              else
    650                printf(" %-3s | ", "UKN");  // for the unknown devices
    651              // print relation
    652              if (pRsp->list[i].relation == ZDP_MGMT_REL_PARENT)
    653                printf(" %-8s| ","PARENT");
    654              else if (pRsp->list[i].relation == ZDP_MGMT_REL_CHILD)
    655                printf(" %-8s| ","CHILD");
    656              else if (pRsp->list[i].relation == ZDP_MGMT_REL_SIBLING)
    657                printf(" %-8s| ","SIBLING");
    658              else
    659                printf(" %-8s| ","UNKNOWN");
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_3:
   \   000077                ; Setup parameters for call to function printf
   \   000077   75....       MOV       ?V12,#`?<Constant "UNKNOWN">` & 0xff
   \   00007A   75....       MOV       ?V13,#(`?<Constant "UNKNOWN">` >> 8) & 0xff
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_4:
   \   00007D   78..         MOV       R0,#?V12
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
    660              //print EUI ID LQI
    661              printf("%04X%04X%04X%04X | %04X | %02X",
    662                     ext[3],ext[2],ext[1],ext[0],pRsp->list[i].nwkAddr,
    663                     pRsp->list[i].lqi);
   \   000088                ; Setup parameters for call to function printf
   \   000088   E5..         MOV       A,?V2
   \   00008A   241D         ADD       A,#0x1d
   \   00008C   F582         MOV       DPL,A
   \   00008E   E4           CLR       A
   \   00008F   35..         ADDC      A,?V3
   \   000091   F583         MOV       DPH,A
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F5..         MOV       ?V12,A
   \   000096   75..00       MOV       ?V13,#0x0
   \   000099   78..         MOV       R0,#?V12
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   E5..         MOV       A,?V2
   \   0000A0   2416         ADD       A,#0x16
   \   0000A2   F582         MOV       DPL,A
   \   0000A4   E4           CLR       A
   \   0000A5   35..         ADDC      A,?V3
   \   0000A7   F583         MOV       DPH,A
   \   0000A9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000AC   85..82       MOV       DPL,?V4
   \   0000AF   85..83       MOV       DPH,?V5
   \   0000B2   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000B5   85..82       MOV       DPL,?V4
   \   0000B8   85..83       MOV       DPH,?V5
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000C0   85..82       MOV       DPL,?V4
   \   0000C3   85..83       MOV       DPH,?V5
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000CD   85..82       MOV       DPL,?V4
   \   0000D0   85..83       MOV       DPH,?V5
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000DC   7A..         MOV       R2,#`?<Constant "%04X%04X%04X%04X | %0...">` & 0xff
   \   0000DE   7B..         MOV       R3,#(`?<Constant "%04X%04X%04X%04X | %0...">` >> 8) & 0xff
   \   0000E0   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E6   05..         INC       ?V10
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_2:
   \   0000E8   85..82       MOV       DPL,?V8
   \   0000EB   85..83       MOV       DPH,?V9
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F8           MOV       R0,A
   \   0000F0   E5..         MOV       A,?V10
   \   0000F2   C3           CLR       C
   \   0000F3   98           SUBB      A,R0
   \   0000F4   4003         JC        $+5
   \   0000F6   02....       LJMP      ??AT_ZDO_ProcessMgmtLqiRsp_5 & 0xFFFF
   \   0000F9   AA..         MOV       R2,?V10
   \   0000FB   EA           MOV       A,R2
   \   0000FC   75F01A       MOV       B,#0x1a
   \   0000FF   A4           MUL       AB
   \   000100   F8           MOV       R0,A
   \   000101   A9F0         MOV       R1,B
   \   000103   E5..         MOV       A,?V0
   \   000105   28           ADD       A,R0
   \   000106   F5..         MOV       ?V2,A
   \   000108   E5..         MOV       A,?V1
   \   00010A   39           ADDC      A,R1
   \   00010B   F5..         MOV       ?V3,A
   \   00010D   E5..         MOV       A,?V2
   \   00010F   240E         ADD       A,#0xe
   \   000111   F5..         MOV       ?V4,A
   \   000113   E4           CLR       A
   \   000114   35..         ADDC      A,?V3
   \   000116   F5..         MOV       ?V5,A
   \   000118                ; Setup parameters for call to function printf
   \   000118   85..82       MOV       DPL,?V0
   \   00011B   85..83       MOV       DPH,?V1
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   F8           MOV       R0,A
   \   000122   EA           MOV       A,R2
   \   000123   28           ADD       A,R0
   \   000124   F5..         MOV       ?V12,A
   \   000126   E4           CLR       A
   \   000127   3400         ADDC      A,#0x0
   \   000129   F5..         MOV       ?V13,A
   \   00012B   78..         MOV       R0,#?V12
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000130   7A..         MOV       R2,#`?<Constant "\\r\\n%02X.| ">` & 0xff
   \   000132   7B..         MOV       R3,#(`?<Constant "\\r\\n%02X.| ">` >> 8) & 0xff
   \   000134   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000137   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013A   E5..         MOV       A,?V2
   \   00013C   2418         ADD       A,#0x18
   \   00013E   F582         MOV       DPL,A
   \   000140   E4           CLR       A
   \   000141   35..         ADDC      A,?V3
   \   000143   F583         MOV       DPH,A
   \   000145   E0           MOVX      A,@DPTR
   \   000146   F8           MOV       R0,A
   \   000147   7008         JNZ       ??AT_ZDO_ProcessMgmtLqiRsp_6
   \   000149                ; Setup parameters for call to function printf
   \   000149   75....       MOV       ?V12,#`?<Constant "COO">` & 0xff
   \   00014C   75....       MOV       ?V13,#(`?<Constant "COO">` >> 8) & 0xff
   \   00014F   8020         SJMP      ??AT_ZDO_ProcessMgmtLqiRsp_7
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_6:
   \   000151   7401         MOV       A,#0x1
   \   000153   68           XRL       A,R0
   \   000154   7008         JNZ       ??AT_ZDO_ProcessMgmtLqiRsp_8
   \   000156                ; Setup parameters for call to function printf
   \   000156   75....       MOV       ?V12,#`?<Constant "RTR">` & 0xff
   \   000159   75....       MOV       ?V13,#(`?<Constant "RTR">` >> 8) & 0xff
   \   00015C   8013         SJMP      ??AT_ZDO_ProcessMgmtLqiRsp_7
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_8:
   \   00015E   7402         MOV       A,#0x2
   \   000160   68           XRL       A,R0
   \   000161   7008         JNZ       ??AT_ZDO_ProcessMgmtLqiRsp_9
   \   000163                ; Setup parameters for call to function printf
   \   000163   75....       MOV       ?V12,#`?<Constant "ZED">` & 0xff
   \   000166   75....       MOV       ?V13,#(`?<Constant "ZED">` >> 8) & 0xff
   \   000169   8006         SJMP      ??AT_ZDO_ProcessMgmtLqiRsp_7
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_9:
   \   00016B                ; Setup parameters for call to function printf
   \   00016B   75....       MOV       ?V12,#`?<Constant "UKN">` & 0xff
   \   00016E   75....       MOV       ?V13,#(`?<Constant "UKN">` >> 8) & 0xff
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_7:
   \   000171   78..         MOV       R0,#?V12
   \   000173   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000176   7A..         MOV       R2,#`?<Constant " %-3s | ">` & 0xff
   \   000178   7B..         MOV       R3,#(`?<Constant " %-3s | ">` >> 8) & 0xff
   \   00017A   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00017D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000180   E5..         MOV       A,?V2
   \   000182   241A         ADD       A,#0x1a
   \   000184   F582         MOV       DPL,A
   \   000186   E4           CLR       A
   \   000187   35..         ADDC      A,?V3
   \   000189   F583         MOV       DPH,A
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   F8           MOV       R0,A
   \   00018D   7009         JNZ       ??AT_ZDO_ProcessMgmtLqiRsp_10
   \   00018F                ; Setup parameters for call to function printf
   \   00018F   75....       MOV       ?V12,#`?<Constant "PARENT">` & 0xff
   \   000192   75....       MOV       ?V13,#(`?<Constant "PARENT">` >> 8) & 0xff
   \   000195   02....       LJMP      ??AT_ZDO_ProcessMgmtLqiRsp_4 & 0xFFFF
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_10:
   \   000198   7401         MOV       A,#0x1
   \   00019A   68           XRL       A,R0
   \   00019B   7009         JNZ       ??AT_ZDO_ProcessMgmtLqiRsp_11
   \   00019D                ; Setup parameters for call to function printf
   \   00019D   75....       MOV       ?V12,#`?<Constant "CHILD">` & 0xff
   \   0001A0   75....       MOV       ?V13,#(`?<Constant "CHILD">` >> 8) & 0xff
   \   0001A3   02....       LJMP      ??AT_ZDO_ProcessMgmtLqiRsp_4 & 0xFFFF
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_11:
   \   0001A6   7402         MOV       A,#0x2
   \   0001A8   68           XRL       A,R0
   \   0001A9   6003         JZ        $+5
   \   0001AB   02....       LJMP      ??AT_ZDO_ProcessMgmtLqiRsp_3 & 0xFFFF
   \   0001AE                ; Setup parameters for call to function printf
   \   0001AE   75....       MOV       ?V12,#`?<Constant "SIBLING">` & 0xff
   \   0001B1   75....       MOV       ?V13,#(`?<Constant "SIBLING">` >> 8) & 0xff
   \   0001B4   02....       LJMP      ??AT_ZDO_ProcessMgmtLqiRsp_4 & 0xFFFF
    664            }
    665            AT_NEW_LINE();
   \                     ??AT_ZDO_ProcessMgmtLqiRsp_5:
   \   0001B7                ; Setup parameters for call to function AT_Uart0_Send
   \   0001B7   7C02         MOV       R4,#0x2
   \   0001B9   7D00         MOV       R5,#0x0
   \   0001BB   AA..         MOV       R2,?V14
   \   0001BD   AB..         MOV       R3,?V15
   \   0001BF   12....       LCALL     ?Subroutine17 & 0xFFFF
    666            osal_mem_free(pRsp);
    667          }
   \                     ??CrossCallReturnLabel_21:
   \   0001C2   7F10         MOV       R7,#0x10
   \   0001C4   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003   AA..         MOV       R2,?V0
   \   000005   AB..         MOV       R3,?V1
   \   000007   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6402         XRL       A,#0x2
   \   000014   22           RET
    668          
    669          /*******************************************************************************
    670           * @fn      AT_ZDO_ProcessMgmtRtgRsp
    671           *
    672           * @brief   Prompt (example)
    673           *          RTable:<NodeID>,<errorcode>
    674           *          Length:03
    675           *          No.| Dest | Next | Status
    676           *          0. | 1234 | ABCD | 00
    677           *          1. | 4321 | 739D | 00
    678           *          2. | 0000 | 0000 | 03
    679           *
    680           * @param   inMsg - incoming message (response)
    681           *
    682           * @return  None
    683           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          void AT_ZDO_ProcessMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     AT_ZDO_ProcessMgmtRtgRsp:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    686            ZDO_MgmtRtgRsp_t* pRsp = (ZDO_MgmtRtgRsp_t*)ZDO_ParseMgmtRtgRsp(inMsg );
   \   000009                ; Setup parameters for call to function ZDO_ParseMgmtRtgRsp
   \   000009   12....       LCALL     `??ZDO_ParseMgmtRtgRsp::?relay`; Banked call to: ZDO_ParseMgmtRtgRsp
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
    687          
    688            AT_NEW_LINE();
   \   000010   75....       MOV       ?V0,#`?<Constant "\\r\\n">` & 0xff
   \   000013   75....       MOV       ?V1,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000016                ; Setup parameters for call to function AT_Uart0_Send
   \   000016   7C02         MOV       R4,#0x2
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   AA..         MOV       R2,?V0
   \   00001C   AB..         MOV       R3,?V1
   \   00001E   12....       LCALL     ?Subroutine14 & 0xFFFF
    689          
    690            // RTable:<NodeID>,<errorcode>
    691            if (inMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
   \                     ??CrossCallReturnLabel_14:
   \   000021   701F         JNZ       ??AT_ZDO_ProcessMgmtRtgRsp_0
    692              printf("RTable:%04X,%02X\r\n", (uint16)inMsg->srcAddr.addr.shortAddr,
    693                     pRsp->status);
   \   000023                ; Setup parameters for call to function printf
   \   000023   85..82       MOV       DPL,?V2
   \   000026   85..83       MOV       DPH,?V3
   \   000029   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    694            }
   \                     ??CrossCallReturnLabel_89:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000038   7A..         MOV       R2,#`?<Constant "RTable:%04X,%02X\\r\\n">` & 0xff
   \   00003A   7B..         MOV       R3,#(`?<Constant "RTable:%04X,%02X\\r\\n">` >> 8) & 0xff
   \   00003C   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
    695            // Length:XX
    696            printf("Length:%02X\r\n", pRsp->rtgCount);
   \                     ??AT_ZDO_ProcessMgmtRtgRsp_0:
   \   000042   85..82       MOV       DPL,?V2
   \   000045   85..83       MOV       DPH,?V3
   \   000048   A3           INC       DPTR
   \   000049   AE82         MOV       R6,DPL
   \   00004B   AF83         MOV       R7,DPH
   \   00004D                ; Setup parameters for call to function printf
   \   00004D   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7A..         MOV       R2,#`?<Constant "Length:%02X\\r\\n">` & 0xff
   \   000055   7B..         MOV       R3,#(`?<Constant "Length:%02X\\r\\n">` >> 8) & 0xff
   \   000057   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
    697          
    698            // No.| Dest | Next | Status
    699           if (pRsp->rtgCount != 0) printf("No.| Dest | Next | Status\n\r");
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6007         JZ        ??AT_ZDO_ProcessMgmtRtgRsp_1
   \   000064                ; Setup parameters for call to function printf
   \   000064   7A..         MOV       R2,#`?<Constant "No.| Dest | Next | St...">` & 0xff
   \   000066   7B..         MOV       R3,#(`?<Constant "No.| Dest | Next | St...">` >> 8) & 0xff
   \   000068   12....       LCALL     `??printf::?relay`; Banked call to: printf
    700          
    701            uint8 i;
    702            for (i = 0; i < pRsp->rtgListCount; i++) {
   \                     ??AT_ZDO_ProcessMgmtRtgRsp_1:
   \   00006B   7E00         MOV       R6,#0x0
   \   00006D   8060         SJMP      ??AT_ZDO_ProcessMgmtRtgRsp_2
    703              // print No.| Dest | Next | Status
    704              printf("\r\n%02X.| %04X | %04X | %02X",
    705                     i+pRsp->startIndex,
    706                     pRsp->list[i].dstAddress,
    707                     pRsp->list[i].nextHopAddress,
    708                     pRsp->list[i].status);
   \                     ??AT_ZDO_ProcessMgmtRtgRsp_3:
   \   00006F   EE           MOV       A,R6
   \   000070   FC           MOV       R4,A
   \   000071   75F007       MOV       B,#0x7
   \   000074   A4           MUL       AB
   \   000075   F8           MOV       R0,A
   \   000076   A9F0         MOV       R1,B
   \   000078   E5..         MOV       A,?V2
   \   00007A   28           ADD       A,R0
   \   00007B   F8           MOV       R0,A
   \   00007C   E5..         MOV       A,?V3
   \   00007E   39           ADDC      A,R1
   \   00007F   F9           MOV       R1,A
   \   000080   E8           MOV       A,R0
   \   000081   FA           MOV       R2,A
   \   000082   E9           MOV       A,R1
   \   000083                ; Setup parameters for call to function printf
   \   000083   8882         MOV       DPL,R0
   \   000085   F583         MOV       DPH,A
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    709            }
   \                     ??CrossCallReturnLabel_91:
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   8A82         MOV       DPL,R2
   \   000094   8983         MOV       DPH,R1
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009F   8A82         MOV       DPL,R2
   \   0000A1   8983         MOV       DPH,R1
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000AA   85..82       MOV       DPL,?V2
   \   0000AD   85..83       MOV       DPH,?V3
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F8           MOV       R0,A
   \   0000B4   EC           MOV       A,R4
   \   0000B5   28           ADD       A,R0
   \   0000B6   F5..         MOV       ?V4,A
   \   0000B8   E4           CLR       A
   \   0000B9   3400         ADDC      A,#0x0
   \   0000BB   F5..         MOV       ?V5,A
   \   0000BD   78..         MOV       R0,#?V4
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C2   7A..         MOV       R2,#`?<Constant "\\r\\n%02X.| %04X | %04X ...">` & 0xff
   \   0000C4   7B..         MOV       R3,#(`?<Constant "\\r\\n%02X.| %04X | %04X ...">` >> 8) & 0xff
   \   0000C6   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000C9   7408         MOV       A,#0x8
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CE   0E           INC       R6
   \                     ??AT_ZDO_ProcessMgmtRtgRsp_2:
   \   0000CF   85..82       MOV       DPL,?V2
   \   0000D2   85..83       MOV       DPH,?V3
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   F8           MOV       R0,A
   \   0000DA   EE           MOV       A,R6
   \   0000DB   C3           CLR       C
   \   0000DC   98           SUBB      A,R0
   \   0000DD   4090         JC        ??AT_ZDO_ProcessMgmtRtgRsp_3
    710            AT_NEW_LINE();
   \   0000DF                ; Setup parameters for call to function AT_Uart0_Send
   \   0000DF   7C02         MOV       R4,#0x2
   \   0000E1   7D00         MOV       R5,#0x0
   \   0000E3   AA..         MOV       R2,?V0
   \   0000E5   AB..         MOV       R3,?V1
   \   0000E7   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    711            osal_mem_free( pRsp );
   \   0000EA                ; Setup parameters for call to function osal_mem_free
   \   0000EA   AA..         MOV       R2,?V2
   \   0000EC   AB..         MOV       R3,?V3
   \   0000EE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    712          }
   \   0000F1   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine36_0
   \   000004                ; // Fall through to label ??Subroutine36_0
    713          
    714          /*******************************************************************************
    715           * @fn      AT_ZDO_ProcessMgmtBindRsp
    716           *
    717           * @brief   Prompt (example)
    718           *          AT+BTABLE:00,0000
    719           *          SEQ:01
    720           *          OK
    721           *          BTable:0000,00
    722           *          Length:03
    723           *          No. | SrcAddr | SrcEP | ClusterID | DstAddr | DstEP
    724           *          00. | 000D6F000059474E | 01 | DEAD |1234567887654321 | 12
    725           *          01. | 000D6F000059474E | 01 | DEAD |E012345678876543 | E0
    726           *          02. | 000D6F000059474E | 01 | DEAD | ABCD
    727           *          ACK:01
    728           *
    729           * @param   inMsg - incoming message (response)
    730           *
    731           * @return  None
    732           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    733          void AT_ZDO_ProcessMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     AT_ZDO_ProcessMgmtBindRsp:
    734          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV       A,#-0x16
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    735            ZDO_MgmtBindRsp_t *pRsp = ZDO_ParseMgmtBindRsp( inMsg );
   \   00000E                ; Setup parameters for call to function ZDO_ParseMgmtBindRsp
   \   00000E   12....       LCALL     `??ZDO_ParseMgmtBindRsp::?relay`; Banked call to: ZDO_ParseMgmtBindRsp
   \   000011   8A..         MOV       ?V4,R2
   \   000013   8B..         MOV       ?V5,R3
    736          
    737            uint8 i;
    738            char dstAddr[17];
    739            char dstEP[5];
    740            zAddrType_t* addr;
    741          
    742            AT_NEW_LINE();
   \   000015   75....       MOV       ?V8,#`?<Constant "\\r\\n">` & 0xff
   \   000018   75....       MOV       ?V9,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00001B                ; Setup parameters for call to function AT_Uart0_Send
   \   00001B   7C02         MOV       R4,#0x2
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   AA..         MOV       R2,?V8
   \   000021   AB..         MOV       R3,?V9
   \   000023   12....       LCALL     ?Subroutine14 & 0xFFFF
    743          
    744            // BTable:<NodeID>,<errorcode>
    745            if (inMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
   \                     ??CrossCallReturnLabel_15:
   \   000026   701F         JNZ       ??AT_ZDO_ProcessMgmtBindRsp_0
    746              printf("BTable:%04X,%02X\r\n", (uint16)inMsg->srcAddr.addr.shortAddr,
    747                     pRsp->status);
   \   000028                ; Setup parameters for call to function printf
   \   000028   85..82       MOV       DPL,?V4
   \   00002B   85..83       MOV       DPH,?V5
   \   00002E   12....       LCALL     ??Subroutine30_0 & 0xFFFF
    748            }
   \                     ??CrossCallReturnLabel_59:
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003D   7A..         MOV       R2,#`?<Constant "BTable:%04X,%02X\\r\\n">` & 0xff
   \   00003F   7B..         MOV       R3,#(`?<Constant "BTable:%04X,%02X\\r\\n">` >> 8) & 0xff
   \   000041   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
    749            // Length:XX
    750            printf("Length:%02X", pRsp->bindingListCount);
   \                     ??AT_ZDO_ProcessMgmtBindRsp_0:
   \   000047   E5..         MOV       A,?V4
   \   000049   2403         ADD       A,#0x3
   \   00004B   F5..         MOV       ?V10,A
   \   00004D   E4           CLR       A
   \   00004E   35..         ADDC      A,?V5
   \   000050   F5..         MOV       ?V11,A
   \   000052                ; Setup parameters for call to function printf
   \   000052   85..82       MOV       DPL,?V10
   \   000055   F583         MOV       DPH,A
   \   000057   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7A..         MOV       R2,#`?<Constant "Length:%02X">` & 0xff
   \   00005F   7B..         MOV       R3,#(`?<Constant "Length:%02X">` >> 8) & 0xff
   \   000061   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
    751            AT_NEXT_LINE();
   \   000067                ; Setup parameters for call to function AT_Uart0_Send
   \   000067   7C02         MOV       R4,#0x2
   \   000069   7D00         MOV       R5,#0x0
   \   00006B   AA..         MOV       R2,?V8
   \   00006D   AB..         MOV       R3,?V9
   \   00006F   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    752          
    753            if(pRsp->bindingListCount)
   \   000072   85..82       MOV       DPL,?V10
   \   000075   85..83       MOV       DPH,?V11
   \   000078   E0           MOVX      A,@DPTR
   \   000079   6007         JZ        ??AT_ZDO_ProcessMgmtBindRsp_1
    754              printf("No. |     SrcAddr      | SrcEP | ClusterID |     DstAddr      | DstEP");
   \   00007B                ; Setup parameters for call to function printf
   \   00007B   7A..         MOV       R2,#`?<Constant "No. |     SrcAddr    ...">` & 0xff
   \   00007D   7B..         MOV       R3,#(`?<Constant "No. |     SrcAddr    ...">` >> 8) & 0xff
   \   00007F   12....       LCALL     `??printf::?relay`; Banked call to: printf
    755            for (i = 0; i < pRsp->bindingListCount; i++) {
   \                     ??AT_ZDO_ProcessMgmtBindRsp_1:
   \   000082   75..00       MOV       ?V2,#0x0
   \   000085   02....       LJMP      ??AT_ZDO_ProcessMgmtBindRsp_2 & 0xFFFF
    756              addr = &pRsp->list[i].dstAddr;
    757              AT_NEXT_LINE();
    758              if (addr->addrMode == (afAddrMode_t)Addr64Bit) {
    759                AT_GetIEEEAddrStr(addr->addr.extAddr, (uint8*)dstAddr);
    760                sprintf(dstEP, "| %02X", pRsp->list[i].dstEP);
    761                dstAddr[16]='\0';
    762              }else{
    763                sprintf(dstAddr,"%04X",addr->addr.shortAddr);
   \                     ??AT_ZDO_ProcessMgmtBindRsp_3:
   \   000088                ; Setup parameters for call to function sprintf
   \   000088   85..82       MOV       DPL,?V6
   \   00008B   85..83       MOV       DPH,?V7
   \   00008E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000091   7C..         MOV       R4,#`?<Constant "%04X">` & 0xff
   \   000093   7D..         MOV       R5,#(`?<Constant "%04X">` >> 8) & 0xff
   \   000095   7407         MOV       A,#0x7
   \   000097   12....       LCALL     ?XSTACK_DISP101_8
   \   00009A   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   00009D   7402         MOV       A,#0x2
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
    764                dstEP[0]='\0';
   \   0000A2   85..82       MOV       DPL,?XSP + 0
   \   0000A5   85..83       MOV       DPH,?XSP + 1
   \                     ??AT_ZDO_ProcessMgmtBindRsp_4:
   \   0000A8   E4           CLR       A
   \   0000A9   F0           MOVX      @DPTR,A
    765              }
    766              uint16 *srcAddr= (uint16*) pRsp->list[i].srcAddr;
   \   0000AA   EE           MOV       A,R6
   \   0000AB   2404         ADD       A,#0x4
   \   0000AD   F8           MOV       R0,A
   \   0000AE   E4           CLR       A
   \   0000AF   3F           ADDC      A,R7
   \   0000B0   F9           MOV       R1,A
   \   0000B1   E8           MOV       A,R0
   \   0000B2   FA           MOV       R2,A
   \   0000B3   E9           MOV       A,R1
   \   0000B4   FB           MOV       R3,A
    767              printf("%02X. | %04X%04X%04X%04X |  %02X   |   %04X    | %s %s ",
    768                     i+pRsp->startIndex,srcAddr[3],srcAddr[2],srcAddr[1],srcAddr[0],
    769                     pRsp->list[i].srcEP, pRsp->list[i].clusterID, dstAddr, dstEP);
   \   0000B5                ; Setup parameters for call to function printf
   \   0000B5   A8..         MOV       R0,?XSP + 0
   \   0000B7   A9..         MOV       R1,?XSP + 1
   \   0000B9   88..         MOV       ?V6,R0
   \   0000BB   89..         MOV       ?V7,R1
   \   0000BD   78..         MOV       R0,#?V6
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C2   7407         MOV       A,#0x7
   \   0000C4   12....       LCALL     ?XSTACK_DISP100_8
   \   0000C7   88..         MOV       ?V6,R0
   \   0000C9   89..         MOV       ?V7,R1
   \   0000CB   78..         MOV       R0,#?V6
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   EE           MOV       A,R6
   \   0000D1   240D         ADD       A,#0xd
   \   0000D3   F582         MOV       DPL,A
   \   0000D5   E4           CLR       A
   \   0000D6   3F           ADDC      A,R7
   \   0000D7   F583         MOV       DPH,A
   \   0000D9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000DC   EE           MOV       A,R6
   \   0000DD   240C         ADD       A,#0xc
   \   0000DF   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   8A82         MOV       DPL,R2
   \   0000E7   8B83         MOV       DPH,R3
   \   0000E9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000EC   8A82         MOV       DPL,R2
   \   0000EE   8B83         MOV       DPH,R3
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000F5   8A82         MOV       DPL,R2
   \   0000F7   8B83         MOV       DPH,R3
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   A3           INC       DPTR
   \   0000FD   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000100   8A82         MOV       DPL,R2
   \   000102   8B83         MOV       DPH,R3
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00010D   85..82       MOV       DPL,?V4
   \   000110   85..83       MOV       DPH,?V5
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   E0           MOVX      A,@DPTR
   \   000116   F8           MOV       R0,A
   \   000117   E5..         MOV       A,?V0
   \   000119   28           ADD       A,R0
   \   00011A   F5..         MOV       ?V0,A
   \   00011C   E4           CLR       A
   \   00011D   3400         ADDC      A,#0x0
   \   00011F   F5..         MOV       ?V1,A
   \   000121   78..         MOV       R0,#?V0
   \   000123   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000126   7A..         MOV       R2,#`?<Constant "%02X. | %04X%04X%04X%...">` & 0xff
   \   000128   7B..         MOV       R3,#(`?<Constant "%02X. | %04X%04X%04X%...">` >> 8) & 0xff
   \   00012A   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00012D   7412         MOV       A,#0x12
   \   00012F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000132   05..         INC       ?V2
   \                     ??AT_ZDO_ProcessMgmtBindRsp_2:
   \   000134   85..82       MOV       DPL,?V10
   \   000137   85..83       MOV       DPH,?V11
   \   00013A   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00013D   506B         JNC       ??AT_ZDO_ProcessMgmtBindRsp_5
   \   00013F   E5..         MOV       A,?V2
   \   000141   F5..         MOV       ?V0,A
   \   000143   75F015       MOV       B,#0x15
   \   000146   A4           MUL       AB
   \   000147   F8           MOV       R0,A
   \   000148   A9F0         MOV       R1,B
   \   00014A   E5..         MOV       A,?V4
   \   00014C   28           ADD       A,R0
   \   00014D   FE           MOV       R6,A
   \   00014E   E5..         MOV       A,?V5
   \   000150   39           ADDC      A,R1
   \   000151   FF           MOV       R7,A
   \   000152   EE           MOV       A,R6
   \   000153   240F         ADD       A,#0xf
   \   000155   F5..         MOV       ?V6,A
   \   000157   E4           CLR       A
   \   000158   3F           ADDC      A,R7
   \   000159   F5..         MOV       ?V7,A
   \   00015B                ; Setup parameters for call to function AT_Uart0_Send
   \   00015B   7C02         MOV       R4,#0x2
   \   00015D   7D00         MOV       R5,#0x0
   \   00015F   AA..         MOV       R2,?V8
   \   000161   AB..         MOV       R3,?V9
   \   000163   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000166   85..82       MOV       DPL,?V6
   \   000169   85..83       MOV       DPH,?V7
   \   00016C   A3           INC       DPTR
   \   00016D   A3           INC       DPTR
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   E0           MOVX      A,@DPTR
   \   000175   6403         XRL       A,#0x3
   \   000177   6003         JZ        $+5
   \   000179   02....       LJMP      ??AT_ZDO_ProcessMgmtBindRsp_3 & 0xFFFF
   \   00017C                ; Setup parameters for call to function AT_GetIEEEAddrStr
   \   00017C   7405         MOV       A,#0x5
   \   00017E   12....       LCALL     ?XSTACK_DISP102_8
   \   000181   AA..         MOV       R2,?V6
   \   000183   AB..         MOV       R3,?V7
   \   000185   12....       LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
   \   000188                ; Setup parameters for call to function sprintf
   \   000188   EE           MOV       A,R6
   \   000189   2418         ADD       A,#0x18
   \   00018B   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000191   7C..         MOV       R4,#`?<Constant "| %02X">` & 0xff
   \   000193   7D..         MOV       R5,#(`?<Constant "| %02X">` >> 8) & 0xff
   \   000195   7402         MOV       A,#0x2
   \   000197   12....       LCALL     ?XSTACK_DISP101_8
   \   00019A   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   00019D   7402         MOV       A,#0x2
   \   00019F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A2   7415         MOV       A,#0x15
   \   0001A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A7   02....       LJMP      ??AT_ZDO_ProcessMgmtBindRsp_4 & 0xFFFF
    770          
    771            }
    772            AT_NEW_LINE();
   \                     ??AT_ZDO_ProcessMgmtBindRsp_5:
   \   0001AA                ; Setup parameters for call to function AT_Uart0_Send
   \   0001AA   7C02         MOV       R4,#0x2
   \   0001AC   7D00         MOV       R5,#0x0
   \   0001AE   AA..         MOV       R2,?V8
   \   0001B0   AB..         MOV       R3,?V9
   \   0001B2   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    773          
    774            osal_mem_free(pRsp);
   \   0001B5                ; Setup parameters for call to function osal_mem_free
   \   0001B5   AA..         MOV       R2,?V4
   \   0001B7   AB..         MOV       R3,?V5
   \   0001B9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    775          }
   \   0001BC   7416         MOV       A,#0x16
   \   0001BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C1   7F0C         MOV       R7,#0xc
   \   0001C3   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004                REQUIRE ??Subroutine38_0
   \   000004                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C02         MOV       R4,#0x2
   \   000005   7D00         MOV       R5,#0x0
   \   000007   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000009   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   85..82       MOV       DPL,?V4
   \   000014   85..83       MOV       DPH,?V5
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6402         XRL       A,#0x2
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007                ; Setup parameters for call to function AT_Uart0_Send
   \   000007                ; Setup parameters for call to function AT_Uart0_Send
   \   000007                REQUIRE ??Subroutine32_0
   \   000007                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A8..         MOV       R0,?V2
   \   000002   E5..         MOV       A,?V0
   \   000004   28           ADD       A,R0
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   35..         ADDC      A,?V1
   \   00000A   F583         MOV       DPH,A
   \   00000C                REQUIRE ??Subroutine35_0
   \   00000C                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009                REQUIRE ??Subroutine37_0
   \   000009                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EBindSeq>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for seqBuff>`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AddrResp:%02X">`:
   \   000000   41646472     DB "AddrResp:%02X"
   \            52657370
   \            3A253032
   \            5800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",">`:
   \   000000   2C00         DB ","

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ". ">`:
   \   000000   2E2000       DB ". "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nACK:%02X\\r\\n">`:
   \   000000   0D0A4143     DB "\015\012ACK:%02X\015\012"
   \            4B3A2530
   \            32580D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nNACK:%02X\\r\\n">`:
   \   000000   0D0A4E41     DB "\015\012NACK:%02X\015\012"
   \            434B3A25
   \            3032580D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nEBINDACK\\r\\n">`:
   \   000000   0D0A4542     DB "\015\012EBINDACK\015\012"
   \            494E4441
   \            434B0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+ESCAN:">`:
   \   000000   2B455343     DB "+ESCAN:"
   \            414E3A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d:%02X">`:
   \   000000   25643A25     DB "%d:%02X"
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nOK\\r\\n">`:
   \   000000   0D0A4F4B     DB "\015\012OK\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+PANSCAN:">`:
   \   000000   2B50414E     DB "+PANSCAN:"
   \            5343414E
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02d,%04X,%04X%04X%04...">`:
   \   000000   25303264     DB "%02d,%04X,%04X%04X%04X%04X,%02X,%X"
   \            2C253034
   \            582C2530
   \            34582530
   \            34582530
   \            34582530
   \            34582C25
   \            3032582C
   \            255800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "JPAN:%02d,%04X,%04X%0...">`:
   \   000000   4A50414E     DB "JPAN:%02d,%04X,%04X%04X%04X%04X"
   \            3A253032
   \            642C2530
   \            34582C25
   \            30345825
   \            30345825
   \            30345825
   \            30345800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">`:
   \   000000   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000008   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PowerDesc:%04X,%02X">`:
   \   000000   506F7765     DB "PowerDesc:%04X,%02X"
   \            72446573
   \            633A2530
   \            34582C25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PowerMode:%02X">`:
   \   000000   506F7765     DB "PowerMode:%02X"
   \            724D6F64
   \            653A2530
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AvailablePowerSources...">`:
   \   000000   41766169     DB "AvailablePowerSources:%02X"
   \            6C61626C
   \            65506F77
   \            6572536F
   \            75726365
   \            733A2530
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CurrentPowerSource:%02X">`:
   \   000000   43757272     DB "CurrentPowerSource:%02X"
   \            656E7450
   \            6F776572
   \            536F7572
   \            63653A25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CurrentPowerSourceLev...">`:
   \   000000   43757272     DB "CurrentPowerSourceLevel:%02X"
   \            656E7450
   \            6F776572
   \            536F7572
   \            63654C65
   \            76656C3A
   \            25303258
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ActEpDesc:%04X,%02X">`:
   \   000000   41637445     DB "ActEpDesc:%04X,%02X"
   \            70446573
   \            633A2530
   \            34582C25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",%02X">`:
   \   000000   2C253032     DB ",%02X"
   \            5800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SimpleDesc:%04X,%02X">`:
   \   000000   53696D70     DB "SimpleDesc:%04X,%02X"
   \            6C654465
   \            73633A25
   \            3034582C
   \            25303258
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EP:%02X">`:
   \   000000   45503A25     DB "EP:%02X"
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ProfileID:%04X">`:
   \   000000   50726F66     DB "ProfileID:%04X"
   \            696C6549
   \            443A2530
   \            345800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DeviceID:%04Xv%02X">`:
   \   000000   44657669     DB "DeviceID:%04Xv%02X"
   \            63654944
   \            3A253034
   \            58762530
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "InCluster: ">`:
   \   000000   496E436C     DB "InCluster: "
   \            75737465
   \            723A2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "           %04X">`:
   \   000000   20202020     DB "           %04X"
   \            20202020
   \            20202025
   \            30345800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%04X">`:
   \   000000   25303458     DB "%04X"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OutCluster: ">`:
   \   000000   4F757443     DB "OutCluster: "
   \            6C757374
   \            65723A20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "            %04X">`:
   \   000000   20202020     DB "            %04X"
   \            20202020
   \            20202020
   \            25303458
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MatchDesc:%04X,%02X">`:
   \   000000   4D617463     DB "MatchDesc:%04X,%02X"
   \            68446573
   \            633A2530
   \            34582C25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%s:%04X%04X%04X%04X,%04X">`:
   \   000000   25733A25     DB "%s:%04X%04X%04X%04X,%04X"
   \            30345825
   \            30345825
   \            30345825
   \            3034582C
   \            25303458
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COORD">`:
   \   000000   434F4F52     DB "COORD"
   \            4400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FFD">`:
   \   000000   46464400     DB "FFD"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RFD">`:
   \   000000   52464400     DB "RFD"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NTable:%04X,%02X\\r\\n">`:
   \   000000   4E546162     DB "NTable:%04X,%02X\015\012"
   \            6C653A25
   \            3034582C
   \            25303258
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Length:%02X\\r\\n">`:
   \   000000   4C656E67     DB "Length:%02X\015\012"
   \            74683A25
   \            3032580D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "No.| Type | Relation ...">`:
   \   000000   4E6F2E7C     DB 4EH, 6FH, 2EH, 7CH, 20H, 54H, 79H, 70H
   \            20547970
   \   000008   65207C20     DB 65H, 20H, 7CH, 20H, 52H, 65H, 6CH, 61H
   \            52656C61
   \   000010   74696F6E     DB 74H, 69H, 6FH, 6EH, 20H, 7CH, 20H, 20H
   \            207C2020
   \   000018   20202020     DB 20H, 20H, 20H, 20H, 20H, 45H, 55H, 49H
   \            20455549
   \   000020   20202020     DB 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \            20202020
   \   000028   7C202049     DB 7CH, 20H, 20H, 49H, 44H, 20H, 20H, 7CH
   \            4420207C
   \   000030   204C5149     DB 20H, 4CH, 51H, 49H, 0AH, 0DH, 0
   \            0A0D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n%02X.| ">`:
   \   000000   0D0A2530     DB "\015\012%02X.| "
   \            32582E7C
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " %-3s | ">`:
   \   000000   20252D33     DB " %-3s | "
   \            73207C20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COO">`:
   \   000000   434F4F00     DB "COO"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RTR">`:
   \   000000   52545200     DB "RTR"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZED">`:
   \   000000   5A454400     DB "ZED"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UKN">`:
   \   000000   554B4E00     DB "UKN"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " %-8s| ">`:
   \   000000   20252D38     DB " %-8s| "
   \            737C2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PARENT">`:
   \   000000   50415245     DB "PARENT"
   \            4E5400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CHILD">`:
   \   000000   4348494C     DB "CHILD"
   \            4400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SIBLING">`:
   \   000000   5349424C     DB "SIBLING"
   \            494E4700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UNKNOWN">`:
   \   000000   554E4B4E     DB "UNKNOWN"
   \            4F574E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%04X%04X%04X%04X | %0...">`:
   \   000000   25303458     DB "%04X%04X%04X%04X | %04X | %02X"
   \            25303458
   \            25303458
   \            25303458
   \            207C2025
   \            30345820
   \            7C202530
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RTable:%04X,%02X\\r\\n">`:
   \   000000   52546162     DB "RTable:%04X,%02X\015\012"
   \            6C653A25
   \            3034582C
   \            25303258
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "No.| Dest | Next | St...">`:
   \   000000   4E6F2E7C     DB "No.| Dest | Next | Status\012\015"
   \            20446573
   \            74207C20
   \            4E657874
   \            207C2053
   \            74617475
   \            730A0D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n%02X.| %04X | %04X ...">`:
   \   000000   0D0A2530     DB "\015\012%02X.| %04X | %04X | %02X"
   \            32582E7C
   \            20253034
   \            58207C20
   \            25303458
   \            207C2025
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BTable:%04X,%02X\\r\\n">`:
   \   000000   42546162     DB "BTable:%04X,%02X\015\012"
   \            6C653A25
   \            3034582C
   \            25303258
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Length:%02X">`:
   \   000000   4C656E67     DB "Length:%02X"
   \            74683A25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "No. |     SrcAddr    ...">`:
   \   000000   4E6F2E20     DB 4EH, 6FH, 2EH, 20H, 7CH, 20H, 20H, 20H
   \            7C202020
   \   000008   20205372     DB 20H, 20H, 53H, 72H, 63H, 41H, 64H, 64H
   \            63416464
   \   000010   72202020     DB 72H, 20H, 20H, 20H, 20H, 20H, 20H, 7CH
   \            2020207C
   \   000018   20537263     DB 20H, 53H, 72H, 63H, 45H, 50H, 20H, 7CH
   \            4550207C
   \   000020   20436C75     DB 20H, 43H, 6CH, 75H, 73H, 74H, 65H, 72H
   \            73746572
   \   000028   4944207C     DB 49H, 44H, 20H, 7CH, 20H, 20H, 20H, 20H
   \            20202020
   \   000030   20447374     DB 20H, 44H, 73H, 74H, 41H, 64H, 64H, 72H
   \            41646472
   \   000038   20202020     DB 20H, 20H, 20H, 20H, 20H, 20H, 7CH, 20H
   \            20207C20
   \   000040   44737445     DB 44H, 73H, 74H, 45H, 50H, 0
   \            5000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "| %02X">`:
   \   000000   7C202530     DB "| %02X"
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02X. | %04X%04X%04X%...">`:
   \   000000   25303258     DB 25H, 30H, 32H, 58H, 2EH, 20H, 7CH, 20H
   \            2E207C20
   \   000008   25303458     DB 25H, 30H, 34H, 58H, 25H, 30H, 34H, 58H
   \            25303458
   \   000010   25303458     DB 25H, 30H, 34H, 58H, 25H, 30H, 34H, 58H
   \            25303458
   \   000018   207C2020     DB 20H, 7CH, 20H, 20H, 25H, 30H, 32H, 58H
   \            25303258
   \   000020   2020207C     DB 20H, 20H, 20H, 7CH, 20H, 20H, 20H, 25H
   \            20202025
   \   000028   30345820     DB 30H, 34H, 58H, 20H, 20H, 20H, 20H, 7CH
   \            2020207C
   \   000030   20257320     DB 20H, 25H, 73H, 20H, 25H, 73H, 20H, 0
   \            25732000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Bind:%04X,%02X">`:
   \   000000   42696E64     DB "Bind:%04X,%02X"
   \            3A253034
   \            582C2530
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Bind:UNKNOWN,%02X">`:
   \   000000   42696E64     DB "Bind:UNKNOWN,%02X"
   \            3A554E4B
   \            4E4F574E
   \            2C253032
   \            5800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Unbind:%04X,%02X">`:
   \   000000   556E6269     DB "Unbind:%04X,%02X"
   \            6E643A25
   \            3034582C
   \            25303258
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Unbind:UNKNOWN,%02X">`:
   \   000000   556E6269     DB "Unbind:UNKNOWN,%02X"
   \            6E643A55
   \            4E4B4E4F
   \            574E2C25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EBINDRSP:%02X">`:
   \   000000   4542494E     DB "EBINDRSP:%02X"
   \            44525350
   \            3A253032
   \            5800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nLEFTPAN\\r\\n">`:
   \   000000   0D0A4C45     DB "\015\012LEFTPAN\015\012"
   \            46545041
   \            4E0D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_800:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff000:
   \   000000   00F0FF07     DD 134213632
    776          
    777          /*******************************************************************************
    778           * @fn      AT_ZDO_ProcessBindRsp
    779           *
    780           * @brief   +BIND - Create Binding on Remote Device (ZDO)
    781           *          Prompt - Bind:<NodeID>,<status>
    782           *
    783           *                   ACK:XX
    784           *          Note: In case of an error an status other than 00 will be displayed
    785           *
    786           * @param   inMsg - incoming message (response)
    787           *
    788           * @return  None
    789           ******************************************************************************/
    790          void AT_ZDO_ProcessBindRsp( zdoIncomingMsg_t *inMsg )
    791          {
    792            uint8 status = ZDO_ParseBindRsp(inMsg);
    793          
    794            AT_NEW_LINE();
    795            if (inMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
    796              printf("Bind:%04X,%02X", inMsg->srcAddr.addr.shortAddr, status);
    797            }else{
    798              printf("Bind:UNKNOWN,%02X", status);
    799            }
    800            AT_NEW_LINE();
    801          }
    802          
    803          /*******************************************************************************
    804           * @fn      AT_ZDO_ProcessUnbindRsp
    805           *
    806           * @brief   +UNBIND - Delete Binding on Remote Device (ZDO)
    807           *          Prompt - Unbind:<NodeID>,<status>
    808           *
    809           *                   ACK:XX
    810           *          Note: In case of an error an status other than 00 will be displayed
    811           *
    812           * @param   inMsg - incoming message (response)
    813           *
    814           * @return  None
    815           ******************************************************************************/
    816          void AT_ZDO_ProcessUnbindRsp( zdoIncomingMsg_t *inMsg )
    817          {
    818            uint8 status = ZDO_ParseBindRsp(inMsg);
    819          
    820            AT_NEW_LINE();
    821            if (inMsg->srcAddr.addrMode == (afAddrMode_t)Addr16Bit) {
    822              printf("Unbind:%04X,%02X", inMsg->srcAddr.addr.shortAddr, status);
    823            }else{
    824              printf("Unbind:UNKNOWN,%02X", status);
    825            }
    826            AT_NEW_LINE();
    827          }
    828          
    829          /*******************************************************************************
    830           * @fn      AT_ZDO_ProcessEDbindRsp
    831           *
    832           * @brief   +EBIND - End Device Bind
    833           *          Prompt - EBINDACK
    834           *                   EBINDRSP:<Status>
    835           *                   OK
    836           *          Note: In case of an error an status other than 00 will be displayed
    837           *
    838           * @param   inMsg - incoming message (response)
    839           *
    840           * @return  None
    841           ******************************************************************************/
    842          void AT_ZDO_ProcessEDbindRsp( zdoIncomingMsg_t *inMsg )
    843          {
    844            uint8 status = ZDO_ParseBindRsp(inMsg);
    845          
    846            AT_NEW_LINE();
    847            // AT_RESP("EBINDACK", 8);
    848            // AT_NEXT_LINE();
    849            printf("EBINDRSP:%02X", status);
    850            AT_NEW_LINE();
    851            AT_OK();
    852          }
    853          
    854          /*******************************************************************************
    855           * @fn      AT_ZDO_ProcessMgmtLeaveRsp
    856           *
    857           * @brief   Prompt - LEFTPAN
    858           *          Note: Instruct device to leave the PAN
    859           *
    860           * @param   inMsg - incoming message (response)
    861           *
    862           * @return  None
    863           ******************************************************************************/
    864          void AT_ZDO_ProcessMgmtLeaveRsp( zdoIncomingMsg_t *inMsg )
    865          {
    866            uint8 status = ZDO_ParseMgmtLeaveRsp( inMsg );
    867          
    868            if ( (uint16)inMsg->srcAddr.addr.shortAddr == NLME_GetShortAddr() ) {
    869              AT_NEW_LINE();
    870              if (status == ZSuccess) {
    871                printf("\r\nLEFTPAN\r\n");
    872              }
    873              AT_NEW_LINE();
    874            }
    875          }
    876          
    877          /******************************************************************************
    878           ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     20   AT_Cmd_ESCAN_CB
        0     16   -> AT_Uart0_Send
        0     16   -> NLME_NwkDiscTerm
        0     20   -> printf
      0     24   AT_Cmd_FN_CB
        0     12   -> AT_UARTWriteErrMsg
        0     12   -> AT_Uart0_Send
        0     12   -> bdb_setChannelAttribute
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
        0     24   -> printf
      0     12   AT_Cmd_ProcessDataConfirm
        0     10   -> GetSeqNumIndexInBuffer
        0     10   -> printf
        0     12   -> printf
      0     27   AT_ZDO_ProcessJOIN_CNF_CB
        0     15   -> AT_UARTWriteErrMsg
        0     15   -> AT_Uart0_Send
        0     15   -> ZDO_RegisterForZdoCB
        0     15   -> bdb_setChannelAttribute
        0     18   -> osal_memcpy
        0     17   -> osal_nv_item_init
        0     19   -> osal_nv_write
        0     27   -> printf
      0    105   AT_ZDO_ProcessMgmtBindRsp
        0     42   -> AT_GetIEEEAddrStr
        0     42   -> AT_Uart0_Send
        0     42   -> ZDO_ParseMgmtBindRsp
        0     42   -> osal_mem_free
        0     42   -> printf
        0     44   -> printf
        0     46   -> printf
        0     60   -> printf
        0     44   -> sprintf
      0     81   AT_ZDO_ProcessMgmtLqiRsp
        0     24   -> AT_Uart0_Send
        0     24   -> ZDO_ParseMgmtLqiRsp
        0     24   -> osal_mem_free
        0     24   -> printf
        0     26   -> printf
        0     28   -> printf
        0     36   -> printf
      0     30   AT_ZDO_ProcessMgmtNwkDiscRsp
        0     14   -> AT_Uart0_Send
        0     14   -> ZDO_ParseMgmNwkDiscRsp
        0     30   -> printf
      0     67   AT_ZDO_ProcessMgmtRtgRsp
        0     14   -> AT_Uart0_Send
        0     14   -> ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_free
        0     14   -> printf
        0     16   -> printf
        0     18   -> printf
        0     22   -> printf
      0     57   AT_ZDO_ProcessMsgCBs
        0     45   -> AT_GetIEEEAddrStr
        0     45   -> AT_Int16toChar
        0     45   -> AT_Int8toChar
        0     45   -> AT_Uart0_Send
        0     45   -> AT_ZDO_ProcessMgmtBindRsp
        0     45   -> AT_ZDO_ProcessMgmtLqiRsp
        0     45   -> AT_ZDO_ProcessMgmtRtgRsp
        0     45   -> AT_ZDO_ProcessPowerDescRsp
        0     45   -> AT_ZDO_ProcessSimpleDescRsp
        0     45   -> NLME_GetShortAddr
        0     45   -> ZDO_ParseAddrRsp
        0     45   -> ZDO_ParseDeviceAnnce
        0     45   -> ZDO_ParseEPListRsp
        0     45   -> osal_mem_alloc
        0     45   -> osal_mem_free
        0     45   -> printf
        0     47   -> printf
        0     49   -> printf
        0     57   -> printf
      0     64   AT_ZDO_ProcessPowerDescRsp
        0     15   -> AT_Uart0_Send
        0     15   -> ZDO_ParsePowerDescRsp
        0     17   -> printf
        0     19   -> printf
      0     77   AT_ZDO_ProcessSimpleDescRsp
        0     28   -> AT_Uart0_Send
        0     28   -> ZDO_ParseSimpleDescRsp
        0     28   -> printf
        0     30   -> printf
        0     32   -> printf
      0      9   AT_ZDO_Register
        0      9   -> ZDO_RegisterForZDOMsg
      2     10   GetSeqNumIndexInBuffer
      1      9   StoreSeqNumInBuffer
        0      9   -> GetSeqNumIndexInBuffer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "            %04X">
      16  ?<Constant "           %04X">
       9  ?<Constant " %-3s | ">
       8  ?<Constant " %-8s| ">
      56  ?<Constant "%02X. | %04X%04X%04X%...">
      35  ?<Constant "%02d,%04X,%04X%04X%04...">
       5  ?<Constant "%04X">
      31  ?<Constant "%04X%04X%04X%04X | %0...">
       8  ?<Constant "%d:%02X">
      25  ?<Constant "%s:%04X%04X%04X%04X,%04X">
       8  ?<Constant "+ESCAN:">
      10  ?<Constant "+PANSCAN:">
       2  ?<Constant ",">
       6  ?<Constant ",%02X">
       3  ?<Constant ". ">
      20  ?<Constant "ActEpDesc:%04X,%02X">
      14  ?<Constant "AddrResp:%02X">
      27  ?<Constant "AvailablePowerSources...">
      19  ?<Constant "BTable:%04X,%02X\r\n">
      15  ?<Constant "Bind:%04X,%02X">
      18  ?<Constant "Bind:UNKNOWN,%02X">
       6  ?<Constant "CHILD">
       4  ?<Constant "COO">
       6  ?<Constant "COORD">
      24  ?<Constant "CurrentPowerSource:%02X">
      29  ?<Constant "CurrentPowerSourceLev...">
      19  ?<Constant "DeviceID:%04Xv%02X">
      14  ?<Constant "EBINDRSP:%02X">
       8  ?<Constant "EP:%02X">
       4  ?<Constant "FFD">
      12  ?<Constant "InCluster: ">
      32  ?<Constant "JPAN:%02d,%04X,%04X%0...">
      12  ?<Constant "Length:%02X">
      14  ?<Constant "Length:%02X\r\n">
      20  ?<Constant "MatchDesc:%04X,%02X">
      19  ?<Constant "NTable:%04X,%02X\r\n">
      70  ?<Constant "No. |     SrcAddr    ...">
      28  ?<Constant "No.| Dest | Next | St...">
      55  ?<Constant "No.| Type | Relation ...">
      13  ?<Constant "OutCluster: ">
       7  ?<Constant "PARENT">
      20  ?<Constant "PowerDesc:%04X,%02X">
      15  ?<Constant "PowerMode:%02X">
      15  ?<Constant "ProfileID:%04X">
       4  ?<Constant "RFD">
       4  ?<Constant "RTR">
      19  ?<Constant "RTable:%04X,%02X\r\n">
       8  ?<Constant "SIBLING">
      21  ?<Constant "SimpleDesc:%04X,%02X">
       4  ?<Constant "UKN">
       8  ?<Constant "UNKNOWN">
      17  ?<Constant "Unbind:%04X,%02X">
      20  ?<Constant "Unbind:UNKNOWN,%02X">
       4  ?<Constant "ZED">
       9  ?<Constant "\000\000\000\000\000\000\000\000">
       3  ?<Constant "\r\n">
      10  ?<Constant "\r\n%02X.| ">
      28  ?<Constant "\r\n%02X.| %04X | %04X ...">
      13  ?<Constant "\r\nACK:%02X\r\n">
      13  ?<Constant "\r\nEBINDACK\r\n">
      12  ?<Constant "\r\nLEFTPAN\r\n">
      14  ?<Constant "\r\nNACK:%02X\r\n">
       7  ?<Constant "\r\nOK\r\n">
       7  ?<Constant "| %02X">
       1  ?<Initializer for EBindSeq>
       5  ?<Initializer for seqBuff>
       6  ??Subroutine28_0
       6  ??Subroutine29_0
       9  ??Subroutine30_0
       6  ??Subroutine31_0
      11  ??Subroutine32_0
       6  ??Subroutine33_0
       9  ??Subroutine34_0
       4  ??Subroutine35_0
       9  ??Subroutine36_0
       7  ??Subroutine37_0
      11  ??Subroutine38_0
       5  ?Subroutine0
       5  ?Subroutine1
       4  ?Subroutine10
       8  ?Subroutine11
      11  ?Subroutine12
      22  ?Subroutine13
      21  ?Subroutine14
      15  ?Subroutine15
       7  ?Subroutine16
      11  ?Subroutine17
      14  ?Subroutine18
       8  ?Subroutine19
       5  ?Subroutine2
       4  ?Subroutine20
       6  ?Subroutine21
       4  ?Subroutine22
      12  ?Subroutine23
      17  ?Subroutine24
      22  ?Subroutine25
      15  ?Subroutine26
      12  ?Subroutine27
      29  ?Subroutine3
       7  ?Subroutine4
      12  ?Subroutine5
      17  ?Subroutine6
      15  ?Subroutine7
       4  ?Subroutine8
       9  ?Subroutine9
     164  AT_Cmd_ESCAN_CB
     165  AT_Cmd_FN_CB
     103  AT_Cmd_ProcessDataConfirm
     215  AT_ZDO_ProcessJOIN_CNF_CB
     454  AT_ZDO_ProcessMgmtBindRsp
     455  AT_ZDO_ProcessMgmtLqiRsp
     230  AT_ZDO_ProcessMgmtNwkDiscRsp
     244  AT_ZDO_ProcessMgmtRtgRsp
     819  AT_ZDO_ProcessMsgCBs
     176  AT_ZDO_ProcessPowerDescRsp
     364  AT_ZDO_ProcessSimpleDescRsp
     136  AT_ZDO_Register
       1  EBindSeq
      44  GetSeqNumIndexInBuffer
      34  StoreSeqNumInBuffer
       4  __Constant_7fff000
       4  __Constant_800
       5  seqBuff
      84  -- Other

 
 4 008 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_I
     6 bytes in segment XDATA_ID
 1 031 bytes in segment XDATA_ROM_C
 
    90 bytes of CODE     memory
 1 023 bytes of CONST    memory (+ 8 bytes shared)
 4 008 bytes of HUGECODE memory
     6 bytes of XDATA    memory

Errors: none
Warnings: none
