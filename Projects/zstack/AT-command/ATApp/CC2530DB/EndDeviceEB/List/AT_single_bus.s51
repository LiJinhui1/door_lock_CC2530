///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              24/Feb/2022  09:44:41
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_single_bus.c
//    Command line       =  
//        -f C:\Users\Administrator\AppData\Local\Temp\EW66D0.tmp
//        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_single_bus.c
//        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
//        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
//        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
//        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
//        ISR_KEYINTERRUPT -lC
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        -lA
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=300 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\AT_single_bus.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AT_single_bus

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AT_single_bus_init::?relay`
        FUNCTION `??AT_single_bus_init::?relay`,0203H
        FUNCTION `??AT_single_bus_input::?relay`,0203H
        PUBLIC `??AT_single_bus_send_buf::?relay`
        FUNCTION `??AT_single_bus_send_buf::?relay`,0203H
        PUBWEAK `??single_bus_Isr::??INTVEC 123`
        PUBLIC AT_single_bus_init
        FUNCTION AT_single_bus_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION AT_single_bus_input,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC AT_single_bus_send_buf
        FUNCTION AT_single_bus_send_buf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBWEAK IEN2
        PUBWEAK IP0
        PUBWEAK IP1
        PUBWEAK P1DIR
        PUBWEAK P1IEN
        PUBWEAK P1IFG
        PUBWEAK P1INP
        PUBWEAK P1SEL
        PUBWEAK P2INP
        PUBWEAK PICTL
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P1
        PUBLIC single_bus_Isr
        FUNCTION single_bus_Isr,0a1233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC single_bus_rcv_bit
        PUBLIC single_bus_rcv_buf
        PUBLIC single_bus_rcv_high
        PUBLIC single_bus_rcv_len
        PUBLIC single_bus_rcv_low
        PUBLIC single_bus_rcv_total
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AT_Timer1_Set_Clear_Start_US SYMBOL "AT_Timer1_Set_Clear_Start_US"
`??AT_Timer1_Set_Clear_Start_US::?relay` SYMBOL "?relay", AT_Timer1_Set_Clear_Start_US
AT_Timer1_Stop_Get  SYMBOL "AT_Timer1_Stop_Get"
`??AT_Timer1_Stop_Get::?relay` SYMBOL "?relay", AT_Timer1_Stop_Get
Onboard_wait        SYMBOL "Onboard_wait"
`??Onboard_wait::?relay` SYMBOL "?relay", Onboard_wait
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
AT_single_bus_init  SYMBOL "AT_single_bus_init"
`??AT_single_bus_init::?relay` SYMBOL "?relay", AT_single_bus_init
AT_single_bus_send_buf SYMBOL "AT_single_bus_send_buf"
`??AT_single_bus_send_buf::?relay` SYMBOL "?relay", AT_single_bus_send_buf
single_bus_Isr      SYMBOL "single_bus_Isr"
`??single_bus_Isr::??INTVEC 123` SYMBOL "??INTVEC 123", single_bus_Isr

        EXTERN `??AT_Timer1_Set_Clear_Start_US::?relay`
        FUNCTION `??AT_Timer1_Set_Clear_Start_US::?relay`,00H
        EXTERN `??AT_Timer1_Stop_Get::?relay`
        FUNCTION `??AT_Timer1_Stop_Get::?relay`,00H
        EXTERN `??Onboard_wait::?relay`
        FUNCTION `??Onboard_wait::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN AT_Timer1_Set_Clear_Start_US
        FUNCTION AT_Timer1_Set_Clear_Start_US,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Timer1_Stop_Get
        FUNCTION AT_Timer1_Stop_Get,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halSleepPconValue
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDoorLock_TaskID

// D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_single_bus.c
//    1 /******************************************************************************
//    2   Filename:       AT_single_bus.c
//    3   Author:         Yang Wang
//    4 ******************************************************************************/
//    5 #include "AT_single_bus.h"

        ASEGN SFR_AN:DATA:NOROOT,08aH
// unsigned char volatile __sfr P1IFG
P1IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr P1IEN
P1IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a9H
// unsigned char volatile __sfr IP0
IP0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b9H
// unsigned char volatile __sfr IP1
IP1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    6 #include "AT_doorlock.h"
//    7 #include "AT_timer1.h"
//    8 #include "zcl_doorlock.h"
//    9 #include "OnBoard.h"
//   10 #include "AT_printf.h"
//   11 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   12 uint8 single_bus_rcv_buf[SINGLE_BUS_RCV_MAX] = {0x00};
single_bus_rcv_buf:
        DS 100
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   13 uint8 single_bus_rcv_len = 0;
single_bus_rcv_len:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   14 uint8 single_bus_rcv_bit = 0;
single_bus_rcv_bit:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   15 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   16 uint16 single_bus_rcv_total = 0;
single_bus_rcv_total:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   17 uint16 single_bus_rcv_high = 0;
single_bus_rcv_high:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   18 uint16 single_bus_rcv_low = 0;
single_bus_rcv_low:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   19 
//   20 static void AT_single_bus_input(void);
//   21 static void AT_single_bus_output(void);
//   22 static void AT_single_bus_send_byte(uint8 dataByte);
//   23 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   24 static void AT_single_bus_input(void)
AT_single_bus_input:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function AT_single_bus_input
        CODE
//   25 {
        ; Saved register size: 0
        ; Auto size: 0
//   26   SINGLE_BUS_SEL &= ~SINGLE_BUS_BV;
        ANL       0xf4,#0xbf
//   27   SINGLE_BUS_DIR &= ~SINGLE_BUS_BV;
        ANL       0xfe,#0xbf
//   28   SINGLE_BUS_INP &= ~SINGLE_BUS_BV;
        ANL       0xf6,#0xbf
//   29 
//   30   P1IFG = 0x00;
        MOV       0x8a,#0x0
//   31   P1IF  = 0x00;
        CLR       0xe8.3
//   32 
//   33   IEN2  |= BV(4); // enable port interrupt
        ORL       0x9a,#0x10
//   34   P1IEN |= SINGLE_BUS_BV; // enable pin interrupt
        ORL       0x8d,#0x40
//   35 
//   36   P2INP &= ~BV(6); // pull up
        ANL       0xf7,#0xbf
//   37   PICTL |=  SINGLE_BUS_EDGE_BV; // falling edge
        ORL       0x8c,#0x4
//   38 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE P1INP
        REQUIRE P1IFG
        REQUIRE _A_IRCON2
        REQUIRE IEN2
        REQUIRE P1IEN
        REQUIRE P2INP
        REQUIRE PICTL
//   39 static void AT_single_bus_output(void)
//   40 {
//   41   SINGLE_BUS_SEL &= ~SINGLE_BUS_BV;
//   42   SINGLE_BUS_DIR |=  SINGLE_BUS_BV;
//   43 
//   44   IEN2  &= ~BV(4); // disable port interrupt
//   45   P1IEN &= ~SINGLE_BUS_BV; // disable pin interrupt
//   46 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   47 void AT_single_bus_init(void)
AT_single_bus_init:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function AT_single_bus_init
        CODE
//   48 {
        FUNCALL AT_single_bus_init, AT_single_bus_input
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   49   AT_single_bus_input();
        ; Setup parameters for call to function AT_single_bus_input
        LCALL     `??AT_single_bus_input::?relay`; Banked call to: AT_single_bus_input
//   50 
//   51   // set IPG4(ENC/T4/P1INT) to the highest priority
//   52   IP0 |= BV(4);
        ORL       0xa9,#0x10
//   53   IP1 |= BV(4);
        ORL       0xb9,#0x10
//   54 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
        REQUIRE IP0
        REQUIRE IP1
//   55 static void AT_single_bus_send_byte(uint8 dataByte)
//   56 {
//   57   uint8 i;
//   58 
//   59   for(i=0; i<8; i++)
//   60   {
//   61     if(dataByte & 0x01)
//   62     {
//   63       SINGLE_BUS_PIN = SINGLE_BUS_HIGH;
//   64       MicroWait(191); // more close to 160 us
//   65 
//   66       SINGLE_BUS_PIN = SINGLE_BUS_LOW;
//   67       MicroWait(92); // more close to 80 us
//   68     }
//   69     else
//   70     {
//   71       SINGLE_BUS_PIN = SINGLE_BUS_HIGH;
//   72       MicroWait(92); // more close to 80 us
//   73 
//   74       SINGLE_BUS_PIN = SINGLE_BUS_LOW;
//   75       MicroWait(191); // more close to 160 us
//   76     }
//   77 
//   78     dataByte >>= 1;
//   79   }
//   80 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   81 void AT_single_bus_send_buf(uint8 *buf, uint8 len)
AT_single_bus_send_buf:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function AT_single_bus_send_buf
        CODE
//   82 {
        FUNCALL AT_single_bus_send_buf, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_single_bus_send_buf, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_single_bus_send_buf, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_single_bus_send_buf, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_single_bus_send_buf, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_single_bus_send_buf, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_single_bus_send_buf, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_single_bus_send_buf, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_single_bus_send_buf, AT_single_bus_input
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V3,R1
//   83   uint8 i;
//   84 
//   85   printf("|down|-----|%02d bytes|: ", len);
        ; Setup parameters for call to function printf
        MOV       A,R1
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#`?<Constant "|down|-----|%02d byte...">` & 0xff
        MOV       R3,#(`?<Constant "|down|-----|%02d byte...">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//   86   for(i=0; i<len; i++)
        MOV       ?V0,#0x0
        SJMP      ??AT_single_bus_send_buf_0
//   87   {
//   88     printf("%02X ", buf[i]);
??AT_single_bus_send_buf_1:
        ; Setup parameters for call to function printf
        LCALL     ?Subroutine0 & 0xFFFF
//   89   }
??CrossCallReturnLabel_0:
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#`?<Constant "%02X ">` & 0xff
        MOV       R3,#(`?<Constant "%02X ">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        INC       ?V0
??AT_single_bus_send_buf_0:
        MOV       A,?V0
        CLR       C
        SUBB      A,?V3
        JC        ??AT_single_bus_send_buf_1
//   90   printf("\r\n");
        ; Setup parameters for call to function printf
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
//   91 
//   92   AT_single_bus_output();
        ANL       0xf4,#0xbf
        ORL       0xfe,#0x40
        ANL       0x9a,#0xef
        ANL       0x8d,#0xbf
//   93 
//   94   SINGLE_BUS_PIN = SINGLE_BUS_LOW;
        CLR       0x90.6
//   95   MicroWait(4900); // more close to 4 ms
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#0x24
        MOV       R3,#0x13
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   96 
//   97   for(i=0; i<len; i++)
        MOV       ?V0,#0x0
        SJMP      ??AT_single_bus_send_buf_2
//   98   {
??AT_single_bus_send_buf_3:
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#0x5c
        MOV       R3,#0x0
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
        CLR       0x90.6
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#-0x41
??AT_single_bus_send_buf_4:
        MOV       R3,#0x0
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
        MOV       A,?V1
        CLR       C
        RRC       A
        MOV       ?V1,A
        DEC       ?V2
        MOV       A,?V2
        JNZ       ??AT_single_bus_send_buf_5
//   99     AT_single_bus_send_byte(buf[i]);
        INC       ?V0
??AT_single_bus_send_buf_2:
        MOV       A,?V0
        CLR       C
        SUBB      A,?V3
        JNC       ??AT_single_bus_send_buf_6
        LCALL     ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV       ?V1,A
        MOV       ?V2,#0x8
??AT_single_bus_send_buf_5:
        MOV       A,?V1
        MOV       C,0xE0 /* A   */.0
        SETB      0x90.6
        JNC       ??AT_single_bus_send_buf_3
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#-0x41
        MOV       R3,#0x0
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
        CLR       0x90.6
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#0x5c
        SJMP      ??AT_single_bus_send_buf_4
//  100   }
//  101 
//  102   SINGLE_BUS_PIN = SINGLE_BUS_HIGH;
??AT_single_bus_send_buf_6:
        SETB      0x90.6
//  103 
//  104   AT_single_bus_input();
        ; Setup parameters for call to function AT_single_bus_input
        LCALL     `??AT_single_bus_input::?relay`; Banked call to: AT_single_bus_input
//  105 }
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
        REQUIRE _A_P1
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE IEN2
        REQUIRE P1IEN

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function AT_single_bus_send_buf
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function AT_single_bus_send_buf
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV       R0,?V0
        MOV       A,R6
        ADD       A,R0
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  106 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  107 HAL_ISR_FUNCTION( single_bus_Isr, P1INT_VECTOR )
single_bus_Isr:
          CFI Block cfiBlock6 Using cfiCommon1
          CFI Function single_bus_Isr
        CODE
//  108 {
        FUNCALL single_bus_Isr, AT_Timer1_Set_Clear_Start_US
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL single_bus_Isr, AT_Timer1_Stop_Get
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL single_bus_Isr, AT_Timer1_Set_Clear_Start_US
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL single_bus_Isr, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL single_bus_Isr, AT_Timer1_Stop_Get
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL single_bus_Isr, AT_Timer1_Set_Clear_Start_US
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL single_bus_Isr, AT_Timer1_Stop_Get
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        PUSH      A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV       A,#-0xf
        LCALL     ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  109   HAL_ENTER_ISR();
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R6,A
        SETB      0xa8.7
//  110 
//  111   IEN2  &= ~BV(4); // disable port interrupt
        ANL       0x9a,#0xef
//  112   P1IEN &= ~SINGLE_BUS_BV; // disable pin interrupt
        ANL       0x8d,#0xbf
//  113 
//  114   if(SINGLE_BUS_PIN)
        MOV       C,0x90.6
        JC        ??single_bus_Isr_0
//  115   {
//  116     goto isr_exit;
//  117   }
//  118 
//  119   // start to capture the head (4 ms)
//  120   AT_Timer1_Set_Clear_Start_US(7000);
        ; Setup parameters for call to function AT_Timer1_Set_Clear_Start_US
        MOV       R2,#0x58
        MOV       R3,#0x1b
        LCALL     `??AT_Timer1_Set_Clear_Start_US::?relay`; Banked call to: AT_Timer1_Set_Clear_Start_US
//  121   while(1)
//  122   {
//  123 #ifdef WDT_IN_PM1
//  124     WatchDogClear();
??single_bus_Isr_1:
        LCALL     ?Subroutine1
//  125 #endif
//  126     if(T1IF)
??CrossCallReturnLabel_2:
        MOV       C,0xc0.1
        JNC       $+5
        LJMP      ??single_bus_Isr_2
//  127     {
//  128       T1IF = 0;
//  129       goto isr_exit;
//  130     }
//  131     if(SINGLE_BUS_PIN)
        MOV       C,0x90.6
        JNC       ??single_bus_Isr_1
//  132       break;
//  133   }
//  134   single_bus_rcv_low = AT_Timer1_Stop_Get();
        ; Setup parameters for call to function AT_Timer1_Stop_Get
        LCALL     ?Subroutine2
//  135   if(single_bus_rcv_low < 2000)
??CrossCallReturnLabel_4:
        MOV       DPTR,#single_bus_rcv_low
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x30
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x7
        JC        ??single_bus_Isr_0
//  136   {
//  137     goto isr_exit;
//  138   }
//  139 
//  140   single_bus_rcv_len = 0;
        MOV       DPTR,#single_bus_rcv_len
        CLR       A
        MOVX      @DPTR,A
//  141   single_bus_rcv_bit = 0;
        MOV       DPTR,#single_bus_rcv_bit
        SJMP      ??single_bus_Isr_3
//  142 
//  143   // start to capture data
//  144   while(1)
//  145   {
//  146 #ifdef WDT_IN_PM1
//  147     WatchDogClear();
//  148 #endif
//  149 
//  150     // get high level time
//  151     AT_Timer1_Set_Clear_Start_US(400);
//  152     while(SINGLE_BUS_PIN)
//  153     {
//  154       if(T1IF)
//  155       {
//  156         T1IF = 0;
//  157 
//  158         if((single_bus_rcv_len > 0) && (single_bus_rcv_bit == 0))
//  159         {
//  160           osal_set_event(zclDoorLock_TaskID, DOORLOCK_HANDLE_RSP_EVT);
//  161           goto isr_exit;
//  162         }
//  163 
//  164         goto isr_exit;
//  165       }
//  166     }
//  167     single_bus_rcv_high = AT_Timer1_Stop_Get();
//  168 
//  169     // get low level time
//  170     AT_Timer1_Set_Clear_Start_US(400);
//  171     while(!SINGLE_BUS_PIN)
//  172     {
//  173       if(T1IF)
//  174       {
//  175         T1IF = 0;
//  176         goto isr_exit;
//  177       }
//  178     }
//  179     single_bus_rcv_low = AT_Timer1_Stop_Get();
//  180 
//  181     // check the total time
//  182     single_bus_rcv_total = single_bus_rcv_high + single_bus_rcv_low;
//  183     if ((single_bus_rcv_total < 120) || (single_bus_rcv_total > 350))
//  184       goto isr_exit; // tolerance of 30%
//  185 
//  186     // save the data bit
//  187     if(single_bus_rcv_high > single_bus_rcv_low)
//  188       single_bus_rcv_buf[single_bus_rcv_len] |= BV(single_bus_rcv_bit++);
//  189     else
//  190       single_bus_rcv_buf[single_bus_rcv_len] &= ~BV(single_bus_rcv_bit++);
??single_bus_Isr_4:
        MOV       A,R4
        CPL       A
        MOV       R2,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        ANL       A,R2
??single_bus_Isr_5:
        MOVX      @DPTR,A
        MOV       DPTR,#single_bus_rcv_bit
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  191 
//  192     // increase the index
//  193     if(single_bus_rcv_bit == 8) // get a whole byte (8 bits)
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??single_bus_Isr_6
//  194     {
//  195       single_bus_rcv_bit = 0;
        CLR       A
        MOVX      @DPTR,A
//  196       single_bus_rcv_len++;
        MOV       DPTR,#single_bus_rcv_len
        MOVX      A,@DPTR
        INC       A
??single_bus_Isr_3:
        MOVX      @DPTR,A
//  197     }
??single_bus_Isr_6:
        LCALL     ?Subroutine1
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function AT_Timer1_Set_Clear_Start_US
        MOV       R2,#-0x70
        MOV       R3,#0x1
        LCALL     `??AT_Timer1_Set_Clear_Start_US::?relay`; Banked call to: AT_Timer1_Set_Clear_Start_US
??single_bus_Isr_7:
        MOV       C,0x90.6
        JNC       ??single_bus_Isr_8
        MOV       C,0xc0.1
        JNC       ??single_bus_Isr_7
        CLR       0xc0.1
        MOV       DPTR,#single_bus_rcv_len
        MOVX      A,@DPTR
        JZ        ??single_bus_Isr_0
        MOV       DPTR,#single_bus_rcv_bit
        MOVX      A,@DPTR
        JNZ       ??single_bus_Isr_0
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x20
        MOV       R3,#0x0
        MOV       DPTR,#zclDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  198   }
//  199 
//  200 isr_exit:
//  201 
//  202   IEN2  |= BV(4); // enable port interrupt
??single_bus_Isr_0:
        ORL       0x9a,#0x10
//  203   P1IEN |= SINGLE_BUS_BV; // enable pin interrupt
        ORL       0x8d,#0x40
//  204 
//  205   P1IFG = 0x00;
        MOV       0x8a,#0x0
//  206   P1IF = 0x00;
        CLR       0xe8.3
//  207 
//  208   CLEAR_SLEEP_MODE();
        MOV       halSleepPconValue,#0x0
//  209   HAL_EXIT_ISR();
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        MOV       0xa8.7,C
//  210 }
        MOV       R7,#0x2
        LJMP      ?INTERRUPT_LEAVE_XSP
??single_bus_Isr_8:
        ; Setup parameters for call to function AT_Timer1_Stop_Get
        LCALL     `??AT_Timer1_Stop_Get::?relay`; Banked call to: AT_Timer1_Stop_Get
        MOV       DPTR,#single_bus_rcv_high
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function AT_Timer1_Set_Clear_Start_US
        MOV       R2,#-0x70
        MOV       R3,#0x1
        LCALL     `??AT_Timer1_Set_Clear_Start_US::?relay`; Banked call to: AT_Timer1_Set_Clear_Start_US
??single_bus_Isr_9:
        MOV       C,0x90.6
        JC        ??single_bus_Isr_10
        MOV       C,0xc0.1
        JNC       ??single_bus_Isr_9
??single_bus_Isr_2:
        CLR       0xc0.1
        SJMP      ??single_bus_Isr_0
??single_bus_Isr_10:
        ; Setup parameters for call to function AT_Timer1_Stop_Get
        LCALL     ?Subroutine2
??CrossCallReturnLabel_5:
        MOV       DPTR,#single_bus_rcv_high
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#single_bus_rcv_low
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       DPTR,#single_bus_rcv_total
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPTR,#single_bus_rcv_total
        MOVX      A,@DPTR
        ADD       A,#-0x78
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,#-0x19
        MOV       A,R1
        SUBB      A,#0x0
        JNC       ??single_bus_Isr_0
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       DPTR,#single_bus_rcv_bit
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        MOV       R4,A
        MOV       DPTR,#single_bus_rcv_len
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#single_bus_rcv_buf & 0xff
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,#(single_bus_rcv_buf >> 8) & 0xff
        MOV       R1,A
        MOV       DPTR,#single_bus_rcv_low
        PUSH      DPL
          CFI CFA_SP SP+-4
        MOV       DPTR,#single_bus_rcv_high
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPH,#(single_bus_rcv_low >> 8) & 0xff
        POP       DPL
          CFI CFA_SP SP+-3
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,R2
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R3
        JC        $+5
        LJMP      ??single_bus_Isr_4
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        ORL       A,R4
        LJMP      ??single_bus_Isr_5
          CFI EndBlock cfiBlock6
        REQUIRE _A_IEN0
        REQUIRE IEN2
        REQUIRE P1IEN
        REQUIRE _A_P1
        REQUIRE WDCTL
        REQUIRE _A_IRCON
        REQUIRE P1IFG
        REQUIRE _A_IRCON2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond7 Using cfiCommon1
          CFI Function single_bus_Isr
          CFI Conditional ??CrossCallReturnLabel_4
          CFI A Frame(CFA_SP, 3)
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond8 Using cfiCommon1
          CFI (cfiCond8) Function single_bus_Isr
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond8) A Frame(CFA_SP, 3)
          CFI (cfiCond8) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-5
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        LCALL     `??AT_Timer1_Stop_Get::?relay`; Banked call to: AT_Timer1_Stop_Get
        MOV       DPTR,#single_bus_rcv_low
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond10 Using cfiCommon1
          CFI Function single_bus_Isr
          CFI Conditional ??CrossCallReturnLabel_2
          CFI A Frame(CFA_SP, 3)
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond11 Using cfiCommon1
          CFI (cfiCond11) Function single_bus_Isr
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond11) A Frame(CFA_SP, 3)
          CFI (cfiCond11) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-5
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV       A,0xc9
        ANL       A,#0xf
        ORL       A,#0xa0
        MOV       0xc9,A
        MOV       A,0xc9
        ANL       A,#0xf
        ORL       A,#0x50
        MOV       0xc9,A
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        COMMON INTVEC:CODE:ROOT(0)
        ORG 123
`??single_bus_Isr::??INTVEC 123`:
        LJMP       (single_bus_Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_single_bus_input::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_single_bus_input

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_single_bus_init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_single_bus_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_single_bus_send_buf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_single_bus_send_buf

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "|down|-----|%02d byte...">`:
        DB "|down|-----|%02d bytes|: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%02X ">`:
        DB "%02X "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        END
// 
// 243 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
// 346 bytes in segment NEAR_CODE
//  15 bytes in segment SFR_AN
//  35 bytes in segment XDATA_ROM_C
// 108 bytes in segment XDATA_Z
// 
// 364 bytes of CODE     memory (+  3 bytes shared)
//  35 bytes of CONST    memory
//   0 bytes of DATA     memory (+ 15 bytes shared)
// 243 bytes of HUGECODE memory
// 108 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
