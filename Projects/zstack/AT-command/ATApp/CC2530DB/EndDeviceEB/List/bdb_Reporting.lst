###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Feb/2022  09:34:59
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb_Reporting.c
#    Command line       =  
#        -f C:\Users\Administrator\AppData\Local\Temp\EW3190.tmp
#        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb_Reporting.c
#        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
#        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
#        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
#        ISR_KEYINTERRUPT -lC
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\bdb_Reporting.lst
#    Object file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj\bdb_Reporting.r51
#
###############################################################################

D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\bdb\bdb_Reporting.c
      1          /**************************************************************************************************
      2          *  Filename:       bdb_Reporting.c
      3          *  Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4          *  Revision:       $Revision: - $
      5          *
      6          *  Description:    This file contains the Reporting Attributes functions.
      7          *
      8          *
      9          *  Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          *
     11          *  IMPORTANT: Your use of this Software is limited to those specific rights
     12          *  granted under the terms of a software license agreement between the user
     13          *  who downloaded the software, his/her employer (which must be your employer)
     14          *  and Texas Instruments Incorporated (the "License").  You may not use this
     15          *  Software unless you agree to abide by the terms of the License. The License
     16          *  limits your use, and you acknowledge, that the Software may not be modified,
     17          *  copied or distributed unless embedded on a Texas Instruments microcontroller
     18          *  or used solely and exclusively in conjunction with a Texas Instruments radio
     19          *  frequency transceiver, which is integrated into your product.  Other than for
     20          *  the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21          *  works of, modify, distribute, perform, display or sell this Software and/or
     22          *  its documentation for any purpose.
     23          *
     24          *  YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25          *  PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26          *  INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27          *  NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28          *  TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29          *  NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30          *  LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31          *  INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32          *  OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33          *  OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34          *  (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          *
     36          *  Should you have any questions regarding your right to use this Software,
     37          *  contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef BDB_REPORTING
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "bdb.h"
     46          #include "zcl.h"
     47          #include "ZDObject.h"
     48          #include "bdb_Reporting.h"
     49          #include "OSAL.h"
     50          #include "zcl_ms.h"
     51          #include "bdb_interface.h"
     52          
     53          /*********************************************************************
     54           * MACROS
     55           */
     56          #define EQUAL_LLISTITEMDATA(a, b) (a.attrID == b.attrID)
     57          #define EQUAL_LLISTCFGATTRITEMDATA(a, b) (a.endpoint == b.endpoint && a.attrID == b.attrID && a.cluster == b.cluster)
     58          #define FLAGS_TURNOFFALLFLAGS(flags) (flags = 0x00)
     59          #define FLAGS_TURNOFFFLAG(flags, flagMask) (flags &= ~flagMask)
     60          #define FLAGS_TURNONFLAG(flags, flagMask) (flags |= flagMask)
     61          #define FLAGS_CHECKFLAG(flags, flagMask) ((flags & flagMask) > 0 ? BDBREPORTING_TRUE : BDBREPORTING_FALSE)
     62          
     63          /*********************************************************************
     64           * CONSTANTS
     65           */
     66          #define BDBREPORTING_HASBINDING_FLAG_MASK      0x01
     67          #define BDBREPORTING_NONEXTINCREMENT_FLAG_MASK 0x02
     68          
     69          
     70          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
     71          #define BDBREPORTING_DEFAULTCHANGEVALUE { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
     72          #endif
     73          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4
     74          #define BDBREPORTING_DEFAULTCHANGEVALUE { 0x00, 0x00, 0x00, 0x00 }
     75          #endif
     76          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
     77          #define BDBREPORTING_DEFAULTCHANGEVALUE { 0x00, 0x00 }
     78          #endif
     79          
     80          #define BDBREPORTING_MAXINTERVAL_DEFAULT 0x0000
     81          #define BDBREPORTING_MININTERVAL_DEFAULT 0xFFFF
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          //Data to hold informaation about an attribute in a linked list thats inside
     87          //the cluster-endpoint entry
     88          typedef struct {
     89          	uint16	attrID;
     90          	uint8	lastValueReported[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
     91          	uint8	reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
     92          } bdbReportAttrLive_t;
     93          
     94          
     95          //This structrue holds the data of a attribute reporting configiration that
     96          //is used at runtime and it's saved in the NV
     97          typedef struct {
     98          	uint8	endpoint;
     99          	uint16	cluster;
    100          	uint16	attrID;
    101          	uint16	minReportInt;
    102          	uint16	maxReportInt;
    103          	uint16	defaultMinReportInt;
    104          	uint16	defaultMaxReportInt;
    105          	uint8	reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
    106          	uint8	defaultReportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
    107          } bdbReportAttrCfgData_t;
    108          
    109          //This structure represents a node in the linked list of the attributes
    110          //data in the cluster-endpoint entry
    111          typedef struct bdbLinkedListAttrItem {
    112          	bdbReportAttrLive_t *		data;
    113          	struct bdbLinkedListAttrItem *	next;
    114          } bdbLinkedListAttrItem_t;
    115          
    116          
    117          //This structure represents a linked list of the attributes
    118          //data in the cluster-endpoint entry
    119          typedef struct bdbAttrLinkedListAttr {
    120          	uint8				numItems;
    121          	bdbLinkedListAttrItem_t *	head;
    122          } bdbAttrLinkedListAttr_t;
    123          
    124          // This structure is an entry of a cluster-endpoint table used by the reporting
    125          //code (the consolidated values) to actually report periodically
    126          typedef struct {
    127          	uint8			flags;
    128          	uint8			endpoint;                       // status field
    129          	uint16			cluster;                        // to send or receive reports of the attribute
    130          	uint16			consolidatedMinReportInt;       // attribute ID
    131          	uint16			consolidatedMaxReportInt;       // attribute data type
    132          	uint16			timeSinceLastReport;
    133          	bdbAttrLinkedListAttr_t attrLinkedList;
    134          } bdbReportAttrClusterEndpoint_t;
    135          
    136          
    137          //This structure serves to hold the flags data of a bdbReportAttrClusterEndpoint_t
    138          //with key =(endpoint,cluster) in instance of the bdb reporting where the table is regenerated
    139          typedef struct {
    140          	uint8	flags;
    141          	uint8	endpoint;
    142          	uint16	cluster;
    143          } bdbReportFlagsHolder_t;
    144          
    145          //This structure holds the data of a default attribute reporting configuration
    146          //entered by the application
    147          typedef struct {
    148          	uint8	endpoint;
    149          	uint16	cluster;
    150          	uint16	attrID;
    151          	uint16	minReportInt;
    152          	uint16	maxReportInt;
    153          	uint8	reportableChange[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
    154          } bdbReportAttrDefaultCfgData_t;
    155          
    156          //This structure represents a node in the linked list of the default attributes
    157          //configurations entered by the application
    158          typedef struct bdbRepAttrDefaultCfgRecordLinkedListItem {
    159          	bdbReportAttrDefaultCfgData_t *				data;
    160          	struct bdbRepAttrDefaultCfgRecordLinkedListItem *	next;
    161          } bdbRepAttrDefaultCfgRecordLinkedListItem_t;
    162          
    163          //This structure represents the linked list of the default attributes
    164          //configurations entered by the application
    165          typedef struct bdbRepAttrDefaultCfgRecordLinkedList {
    166          	uint8						numItems;
    167          	bdbRepAttrDefaultCfgRecordLinkedListItem_t *	head;
    168          } bdbRepAttrDefaultCfgRecordLinkedList_t;
    169          
    170          
    171          
    172          /*********************************************************************
    173           * GLOBAL VARIABLES
    174           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 gAttrDataValue[BDBREPORTING_MAX_ANALOG_ATTR_SIZE];
   \                     gAttrDataValue:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    176          
    177          /*********************************************************************
    178           * EXTERNAL VARIABLES
    179           */
    180          
    181          /*********************************************************************
    182           * EXTERNAL FUNCTIONS
    183           */
    184          
    185          /*********************************************************************
    186           * LOCAL VARIABLES
    187           */
    188          
    189          //Table of cluster-endpoint entries used to report periodically

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          bdbReportAttrClusterEndpoint_t bdb_reportingClusterEndpointArray[BDB_MAX_CLUSTERENDPOINTS_REPORTING];
   \                     bdb_reportingClusterEndpointArray:
   \   000000                DS 65
   \   000041                REQUIRE __INIT_XDATA_Z
    191          //Current size of the cluster-endpoint table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          uint8 bdb_reportingClusterEndpointArrayCount;
   \                     bdb_reportingClusterEndpointArrayCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193          //This variable has the timeout value of the currrent timer use to report peridically

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint16 bdb_reportingNextEventTimeout;
   \                     bdb_reportingNextEventTimeout:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    195          //This variable hasthe index of the cluster-endpoint entry that trigger the current
    196          //timer use to report periodically

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          uint8 bdb_reportingNextClusterEndpointIndex;
   \                     bdb_reportingNextClusterEndpointIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    198          //This is the table that holds in the memory the attribute reporting configurations (dynamic table)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          bdbReportAttrCfgData_t *bdb_reportingAttrCfgRecordsArray;
   \                     bdb_reportingAttrCfgRecordsArray:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    200          //Current size of the attribute reporting configurations table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          uint8 bdb_reportingAttrCfgRecordsArrayCount;
   \                     bdb_reportingAttrCfgRecordsArrayCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    202          //Max size of the attribute reporting configurations table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          uint8 bdb_reportingAttrCfgRecordsArrayMaxSize;
   \                     bdb_reportingAttrCfgRecordsArrayMaxSize:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          //Linked list for holding the default attribute reporting configurations
    205          //enteres by the application

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          bdbRepAttrDefaultCfgRecordLinkedList_t attrDefaultCfgRecordLinkedList;
   \                     attrDefaultCfgRecordLinkedList:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
    207          //Flag used to signal when not to accept more default attribute reporting configurations

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          uint8 bdb_reportingAcceptDefaultConfs;
   \                     bdb_reportingAcceptDefaultConfs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    209          
    210          /*********************************************************************
    211           * PUBLIC FUNCTIONS PROTOYPES
    212           */
    213          
    214          /*********************************************************************
    215           * LOCAL FUNCTIONS PROTOYPES
    216           */
    217          
    218          //Begin: Single linked list for attributes in a cluster-endpoint live entry methods
    219          static void bdb_InitReportAttrLiveValues(bdbReportAttrLive_t *item);
    220          static void bdb_linkedListAttrInit(bdbAttrLinkedListAttr_t *list);
    221          static uint8 bdb_linkedListAttrAdd(bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t *data);
    222          static bdbLinkedListAttrItem_t *bdb_linkedListAttrSearch(bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t *searchdata);
    223          static bdbReportAttrLive_t *bdb_linkedListAttrRemove(bdbAttrLinkedListAttr_t *list);
    224          static uint8 bdb_linkedListAttrFreeAll(bdbAttrLinkedListAttr_t *list);
    225          static void bdb_linkedListAttrClearList(bdbAttrLinkedListAttr_t *list);
    226          static bdbLinkedListAttrItem_t *bdb_linkedListAttrGetAtIndex(bdbAttrLinkedListAttr_t *list, uint8 index);
    227          //End: Single Linked List methods
    228          
    229          //Begin: Cluster-endpoint array live methods
    230          static void bdb_clusterEndpointArrayInit(void);
    231          static uint8 bdb_clusterEndpointArrayAdd(uint8 endpoint, uint16 cluster, uint16 consolidatedMinReportInt, uint16 consolidatedMaxReportInt, uint16 timeSinceLastReport);
    232          static uint8 bdb_clusterEndpointArrayGetMin(void);
    233          static void bdb_clusterEndpointArrayMoveTo(uint8 indexSrc, uint8 indexDest);
    234          static uint8 bdb_clusterEndpointArrayUpdateAt(uint8 index, uint16 newTimeSinceLastReport, uint8 markHasBinding, uint8 noNextIncrement);
    235          static void bdb_clusterEndpointArrayFreeAll(void);
    236          static uint8 bdb_clusterEndpointArraySearch(uint8 endpoint, uint16 cluster);
    237          static uint8 bdb_clusterEndpointArrayRemoveAt(uint8 index);
    238          static void bdb_clusterEndpointArrayIncrementAll(uint16 timeSinceLastReportIncrement, uint8 CheckNoIncrementFlag);
    239          //End: Cluster-endpoint array live methods
    240          
    241          //Begin: Single linked list default attr cfg records methods
    242          static void bdb_repAttrDefaultCfgRecordInitValues(bdbReportAttrDefaultCfgData_t *item);
    243          static void bdb_repAttrDefaultCfgRecordsLinkedListInit(bdbRepAttrDefaultCfgRecordLinkedList_t *list);
    244          static uint8 bdb_repAttrDefaultCfgRecordsLinkedListAdd(bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t *data);
    245          static bdbRepAttrDefaultCfgRecordLinkedListItem_t *bdb_repAttrDefaultCfgRecordsLinkedListSearch(bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t searchdata);
    246          static bdbReportAttrDefaultCfgData_t *bdb_repAttrDefaultCfgRecordsLinkedListRemove(bdbRepAttrDefaultCfgRecordLinkedList_t *list);
    247          static uint8 bdb_repAttrDefaultCfgRecordsLinkedListFreeAll(bdbRepAttrDefaultCfgRecordLinkedList_t *list);
    248          //End: Single linked list default attr cfg records methods
    249          
    250          //Begin: Reporting attr configuration array methods
    251          static void bdb_repAttrCfgRecordsArrayInit(void);
    252          static uint8 bdb_repAttrCfgRecordsArrayCreate(uint8 maxNumRepAttrConfRecords);
    253          static uint8 bdb_repAttrCfgRecordsArrayAdd(uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, uint16 maxReportInt, uint8 reportableChange[], uint16 defMinReportInt, uint16 defMaxReportInt, uint8 defReportChange[]);
    254          static void bdb_repAttrCfgRecordsArrayFreeAll(void);
    255          static uint8 bdb_repAttrCfgRecordsArraySearch(uint8 endpoint, uint16 cluster, uint16 attrID);
    256          static uint8 bdb_repAttrCfgRecordsArrayConsolidateValues(uint8 endpoint, uint16 cluster, uint16 *consolidatedMinReportInt, uint16 *consolidatedMaxReportInt);
    257          //End: Reporting attr configuration array methods
    258          
    259          
    260          static uint8 bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray(void);
    261          static uint8 bdb_RepConstructAttrCfgArray(void);
    262          static void bdb_RepInitAttrCfgRecords(void);
    263          
    264          static endPointDesc_t *bdb_FindEpDesc(uint8 endPoint);
    265          static uint8 bdb_RepFindAttrEntry(uint8 endpoint, uint16 cluster, uint16 attrID, zclAttribute_t *attrRes);
    266          static uint8 bdb_RepLoadCfgRecords(void);
    267          static uint8 bdb_isAttrValueChangedSurpassDelta(uint8 datatype, uint8 *delta, uint8 *curValue, uint8 *lastValue);
    268          static uint16 bdb_RepCalculateEventElapsedTime(uint32 remainingTimeoutTimer, uint16 nextEventTimeout);
    269          static void bdb_RepRestartNextEventTimer(void);
    270          
    271          static void bdb_RepStartReporting(void);
    272          static void bdb_RepStopEventTimer(void);
    273          static void bdb_RepSetupReporting(void);
    274          static void bdb_RepReport(uint8 indexClusterEndpoint);
    275          
    276          extern zclAttrRecsList *zclFindAttrRecsList(uint8 endpoint);   //Definition is located in zcl.h
    277          
    278          /*********************************************************************
    279           * PUBLIC FUNCTIONS DEFINITIONS
    280           */
    281          
    282          /*********************************************************************
    283           * @fn          bdb_RepInit
    284           *
    285           * @brief       Initiates the tables and linked list used in the reporting code.
    286           *
    287           * @param       none
    288           *
    289           * @return      none
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void bdb_RepInit(void)
   \                     bdb_RepInit:
    292          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    293          	bdb_reportingNextEventTimeout = 0;
   \   000004   90....       MOV       DPTR,#bdb_reportingNextEventTimeout
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    294          	bdb_reportingAcceptDefaultConfs = BDBREPORTING_TRUE;
   \   00000B   90....       MOV       DPTR,#bdb_reportingAcceptDefaultConfs
   \   00000E   04           INC       A
   \   00000F   F0           MOVX      @DPTR,A
    295          	bdb_repAttrCfgRecordsArrayInit( );
   \   000010   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
   \   000017   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00001A   F0           MOVX      @DPTR,A
    296          	bdb_repAttrDefaultCfgRecordsLinkedListInit(&attrDefaultCfgRecordLinkedList);
   \   00001B   90....       MOV       DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   F0           MOVX      @DPTR,A
   \   000021   90....       MOV       DPTR,#attrDefaultCfgRecordLinkedList
   \   000024   F0           MOVX      @DPTR,A
    297          	bdb_clusterEndpointArrayInit( );
   \   000025   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000028   02....       LJMP      ?Subroutine0 & 0xFFFF
    298          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine102_0
   \   000001                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    299          
    300          /*********************************************************************
    301           * @fn          bdb_RepConstructReportingData
    302           *
    303           * @brief       Creates the attr reporting configurations by looking at
    304           *              the app endpoints, cluster and attr definitions or loads
    305           *              from NV the previous configurations.
    306           *
    307           * @param       none
    308           *
    309           * @return      none
    310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          void bdb_RepConstructReportingData(void)
   \                     bdb_RepConstructReportingData:
    312          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    313          	//Don't accept anymore default attribute configurations entries
    314          	bdb_reportingAcceptDefaultConfs = BDBREPORTING_FALSE;
   \   000004   90....       MOV       DPTR,#bdb_reportingAcceptDefaultConfs
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    315          	//Construct the attr cfg records
    316          	bdb_RepInitAttrCfgRecords( );
   \   000009                ; Setup parameters for call to function bdb_RepInitAttrCfgRecords
   \   000009   12....       LCALL     `??bdb_RepInitAttrCfgRecords::?relay`; Banked call to: bdb_RepInitAttrCfgRecords
    317          	//Construct the endpoint-cluster array
    318          	bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( );
   \   00000C                ; Setup parameters for call to function bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
   \   00000C   12....       LCALL     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo; Banked call to: bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
    319          	//Delete reporting configuration array, it's saved in NV
    320          	bdb_repAttrCfgRecordsArrayFreeAll( );
   \   00000F                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   00000F   12....       LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
    321          }
   \   000012   02....       LJMP      ??Subroutine102_0 & 0xFFFF
    322          
    323          /*********************************************************************
    324           * @fn          bdb_RepMarkHasBindingInEndpointClusterArray
    325           *
    326           * @brief       Marks the binding flag as ON at the entry containig the
    327           *              cluster-endpoint pair.
    328           *
    329           * @param       endpoint - endpoint id of the entry to locate
    330           * @param       cluster - cluster id of the entry to locate
    331           *
    332           * @return      none
    333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          void bdb_RepMarkHasBindingInEndpointClusterArray(uint8 endpoint, uint16 cluster, uint8 unMark, uint8 setNoNextIncrementFlag)
   \                     bdb_RepMarkHasBindingInEndpointClusterArray:
    335          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   ED           MOV       A,R5
   \   000008   FE           MOV       R6,A
    336          	uint8 foundIndex;
    337          
    338          	if (bdb_reportingClusterEndpointArrayCount > 0) {
   \   000009   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6021         JZ        ??bdb_RepMarkHasBindingInEndpointClusterArray_0
    339          		foundIndex = bdb_clusterEndpointArraySearch(endpoint, cluster);
   \   00000F                ; Setup parameters for call to function bdb_clusterEndpointArraySearch
   \   00000F   12....       LCALL     `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
   \   000012   E9           MOV       A,R1
   \   000013   F9           MOV       R1,A
    340          		if (foundIndex != BDBREPORTING_INVALIDINDEX) {
   \   000014   74FF         MOV       A,#-0x1
   \   000016   69           XRL       A,R1
   \   000017   6017         JZ        ??bdb_RepMarkHasBindingInEndpointClusterArray_0
    341          			if (unMark == BDBREPORTING_TRUE)
   \   000019   7401         MOV       A,#0x1
   \   00001B   65..         XRL       A,?V0
   \   00001D   7006         JNZ       ??bdb_RepMarkHasBindingInEndpointClusterArray_1
    342          				bdb_clusterEndpointArrayUpdateAt(foundIndex, 0, BDBREPORTING_FALSE, setNoNextIncrementFlag);
   \   00001F                ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
   \   00001F   EE           MOV       A,R6
   \   000020   FD           MOV       R5,A
   \   000021   7C00         MOV       R4,#0x0
   \   000023   8004         SJMP      ??bdb_RepMarkHasBindingInEndpointClusterArray_2
    343          			else
    344          				bdb_clusterEndpointArrayUpdateAt(foundIndex, 0, BDBREPORTING_TRUE, setNoNextIncrementFlag);
   \                     ??bdb_RepMarkHasBindingInEndpointClusterArray_1:
   \   000025                ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
   \   000025   EE           MOV       A,R6
   \   000026   FD           MOV       R5,A
   \   000027   7C01         MOV       R4,#0x1
   \                     ??bdb_RepMarkHasBindingInEndpointClusterArray_2:
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
    345          		}
    346          	}
    347          }
   \                     ??bdb_RepMarkHasBindingInEndpointClusterArray_0:
   \   000030   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    348          
    349          /*********************************************************************
    350           * @fn          bdb_RepStartReporting
    351           *
    352           * @brief       Restarts the periodic reporting timer, if the timer was already
    353           *              running it stops it and to before starting timer sets some state
    354           *              variables.
    355           *
    356           * @return      none
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          static void bdb_RepStartReporting(void)
   \                     bdb_RepStartReporting:
    359          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    360          	//Stop if reporting timer is active
    361          	if (!osal_get_timeoutEx(bdb_TaskID, BDB_REPORT_TIMEOUT)) {
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000007   7013         JNZ       ??bdb_RepStartReporting_0
    362          		//timerElapsedTime is zero
    363          		osal_stop_timerEx(bdb_TaskID, BDB_REPORT_TIMEOUT);
   \   000009                ; Setup parameters for call to function osal_stop_timerEx
   \   000009   12....       LCALL     ?Subroutine49 & 0xFFFF
    364          		bdb_reportingNextEventTimeout = 0;
   \                     ??CrossCallReturnLabel_75:
   \   00000C   90....       MOV       DPTR,#bdb_reportingNextEventTimeout
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    365          		bdb_reportingNextClusterEndpointIndex = BDBREPORTING_INVALIDINDEX;
   \   000013   90....       MOV       DPTR,#bdb_reportingNextClusterEndpointIndex
   \   000016   74FF         MOV       A,#-0x1
   \   000018   F0           MOVX      @DPTR,A
    366          		//Start Timer
    367          		bdb_RepRestartNextEventTimer( );
   \   000019                ; Setup parameters for call to function bdb_RepRestartNextEventTimer
   \   000019   12....       LCALL     `??bdb_RepRestartNextEventTimer::?relay`; Banked call to: bdb_RepRestartNextEventTimer
    368          	}
    369          }
   \                     ??bdb_RepStartReporting_0:
   \   00001C   02....       LJMP      ??Subroutine102_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   7A80         MOV       R2,#-0x80
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#bdb_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   4C           ORL       A,R4
   \   00000F   4D           ORL       A,R5
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   7A80         MOV       R2,#-0x80
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#bdb_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00000C   22           RET
    370          
    371          /*********************************************************************
    372           * @fn          bdb_RepStartOrContinueReporting
    373           *
    374           * @brief       Restarts the periodic reporting timer, if the timer was already
    375           *              running it calculates the remaining time of timer before stopping it,
    376           *              then sustracts this elapsed time from the next event endpoint-cluster
    377           *              table.
    378           *
    379           * @return      none
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          void bdb_RepStartOrContinueReporting(void)
   \                     bdb_RepStartOrContinueReporting:
    382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    383          	//Stop if reporting timer is active
    384          	uint32 remainingTimeOfEvent = osal_get_timeoutEx(bdb_TaskID, BDB_REPORT_TIMEOUT);
   \   000005                ; Setup parameters for call to function osal_get_timeoutEx
   \   000005   12....       LCALL     ?Subroutine30 & 0xFFFF
    385          
    386          	if (remainingTimeOfEvent == 0) {
   \                     ??CrossCallReturnLabel_41:
   \   000008   601E         JZ        ??bdb_RepStartOrContinueReporting_0
    387          		//Timer was not running
    388          		bdb_RepStartReporting( );
   \   00000A                ; Setup parameters for call to function bdb_RepStartReporting
    389          	} else {
    390          		uint16 elapsedTime = bdb_RepCalculateEventElapsedTime(remainingTimeOfEvent, bdb_reportingNextEventTimeout);
   \   00000A                ; Setup parameters for call to function bdb_RepCalculateEventElapsedTime
   \   00000A   90....       MOV       DPTR,#bdb_reportingNextEventTimeout
   \   00000D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000010   12....       LCALL     `??bdb_RepCalculateEventElapsedTime::?relay`; Banked call to: bdb_RepCalculateEventElapsedTime
   \   000013   7402         MOV       A,#0x2
   \   000015   12....       LCALL     ?DEALLOC_XSTACK8
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
    391          		bdb_RepStopEventTimer( );
   \   00001C                ; Setup parameters for call to function bdb_RepStopEventTimer
   \   00001C   12....       LCALL     `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
    392          
    393          		bdb_clusterEndpointArrayIncrementAll(elapsedTime, BDBREPORTING_TRUE);
   \   00001F                ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
   \   00001F   7901         MOV       R1,#0x1
   \   000021   AA..         MOV       R2,?V0
   \   000023   AB..         MOV       R3,?V1
   \   000025   12....       LCALL     `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
    394          		bdb_RepStartReporting( );
   \   000028                ; Setup parameters for call to function bdb_RepStartReporting
   \                     ??bdb_RepStartOrContinueReporting_0:
   \   000028   12....       LCALL     `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
    395          	}
    396          }
   \   00002B                REQUIRE ?Subroutine2
   \   00002B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    397          
    398          /*********************************************************************
    399           * @fn          bdb_RepCalculateEventElapsedTime
    400           *
    401           * @brief       Calculate the elapsed time of the currently running timer,
    402           *              the remaining time is roundup.
    403           *
    404           * @param       remainingTimeoutTimer - timeout value from the osal_get_timeoutEx method,
    405           *              its in milliseconds units
    406           * @param       nextEventTimeout - the timeout given to the timer when it started
    407           *
    408           * @return      the elapsed time in seconds
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          static uint16 bdb_RepCalculateEventElapsedTime(uint32 remainingTimeoutTimer, uint16 nextEventTimeout)
   \                     bdb_RepCalculateEventElapsedTime:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   \   000009   8C..         MOV       ?V10,R4
   \   00000B   8D..         MOV       ?V11,R5
    412          	uint32 passTimeOfEvent = 0;
   \   00000D   75..00       MOV       ?V4,#0x0
   \   000010   75..00       MOV       ?V5,#0x0
   \   000013   75..00       MOV       ?V6,#0x0
   \   000016   75..00       MOV       ?V7,#0x0
    413          	uint32 nextEventTimeout_32 = (uint32)nextEventTimeout;
   \   000019   7418         MOV       A,#0x18
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ?Subroutine37 & 0xFFFF
    414          
    415          	passTimeOfEvent = nextEventTimeout_32 * 1000 >= remainingTimeoutTimer ? nextEventTimeout_32 * 1000 - remainingTimeoutTimer : 0;
   \                     ??CrossCallReturnLabel_57:
   \   000021   90....       MOV       DPTR,#__Constant_3e8
   \   000024   78..         MOV       R0,#?V12
   \   000026   12....       LCALL     ?L_MOV_X
   \   000029   78..         MOV       R0,#?V0
   \   00002B   79..         MOV       R1,#?V12
   \   00002D   12....       LCALL     ?L_MUL
   \   000030   78..         MOV       R0,#?V8
   \   000032   79..         MOV       R1,#?V0
   \   000034   12....       LCALL     ?UL_GT
   \   000037   4013         JC        ??bdb_RepCalculateEventElapsedTime_0
   \   000039   85....       MOV       ?V4,?V0
   \   00003C   85....       MOV       ?V5,?V1
   \   00003F   85....       MOV       ?V6,?V2
   \   000042   85....       MOV       ?V7,?V3
   \   000045   78..         MOV       R0,#?V4
   \   000047   79..         MOV       R1,#?V8
   \   000049   12....       LCALL     ?L_SUB
    416          	uint16 elapsedTime = passTimeOfEvent / 1000;
   \                     ??bdb_RepCalculateEventElapsedTime_0:
   \   00004C   85....       MOV       ?V0,?V4
   \   00004F   85....       MOV       ?V1,?V5
   \   000052   85....       MOV       ?V2,?V6
   \   000055   85....       MOV       ?V3,?V7
   \   000058   90....       MOV       DPTR,#__Constant_3e8
   \   00005B   78..         MOV       R0,#?V8
   \   00005D   12....       LCALL     ?L_MOV_X
   \   000060   78..         MOV       R0,#?V0
   \   000062   79..         MOV       R1,#?V8
   \   000064   12....       LCALL     ?UL_DIV_MOD
   \   000067   AC..         MOV       R4,?V0
   \   000069   AD..         MOV       R5,?V1
    417          	elapsedTime = elapsedTime + ((passTimeOfEvent % 1000) > 0 ? 1 : 0); //roundup
   \   00006B   90....       MOV       DPTR,#__Constant_3e8
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?L_MOV_X
   \   000073   78..         MOV       R0,#?V4
   \   000075   79..         MOV       R1,#?V0
   \   000077   12....       LCALL     ?UL_DIV_MOD
   \   00007A   E5..         MOV       A,?V0
   \   00007C   45..         ORL       A,?V1
   \   00007E   45..         ORL       A,?V2
   \   000080   45..         ORL       A,?V3
   \   000082   6008         JZ        ??bdb_RepCalculateEventElapsedTime_1
   \   000084   EC           MOV       A,R4
   \   000085   2401         ADD       A,#0x1
   \   000087   FA           MOV       R2,A
   \   000088   E4           CLR       A
   \   000089   3D           ADDC      A,R5
   \   00008A   8003         SJMP      ??bdb_RepCalculateEventElapsedTime_2
   \                     ??bdb_RepCalculateEventElapsedTime_1:
   \   00008C   EC           MOV       A,R4
   \   00008D   FA           MOV       R2,A
   \   00008E   ED           MOV       A,R5
   \                     ??bdb_RepCalculateEventElapsedTime_2:
   \   00008F   FB           MOV       R3,A
    418          	return elapsedTime;
   \   000090   02....       LJMP      ??Subroutine112_0 & 0xFFFF
    419          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   7F10         MOV       R7,#0x10
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V2,A
   \   000006   F5..         MOV       ?V3,A
   \   000008   22           RET
    420          
    421          /*********************************************************************
    422           * @fn          bdb_RepProcessEvent
    423           *
    424           * @brief       Method that process the timer expired event in the reporting
    425           *              code, it calculate the next cluster-endpoint entry based
    426           *              on the minimum with consolidatedMaxReportInt - timeSinceLastReport,
    427           *              updates timeSinceLastReport of all entries. If the minimum is zero,
    428           *              report the cluster-endpoint attrs.
    429           *
    430           * @return      none
    431           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    432          void bdb_RepProcessEvent(void)
   \                     bdb_RepProcessEvent:
    433          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    434          	bdb_clusterEndpointArrayIncrementAll(bdb_reportingNextEventTimeout, BDBREPORTING_FALSE);
   \   000005                ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
   \   000005   7900         MOV       R1,#0x0
   \   000007   90....       MOV       DPTR,#bdb_reportingNextEventTimeout
   \   00000A   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00000D   12....       LCALL     `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
    435          	uint8 minIndex = bdb_clusterEndpointArrayGetMin( );
   \   000010   7EFF         MOV       R6,#-0x1
   \   000012   7CFF         MOV       R4,#-0x1
   \   000014   7DFF         MOV       R5,#-0x1
   \   000016   7F00         MOV       R7,#0x0
   \   000018   801C         SJMP      ??bdb_RepProcessEvent_0
   \                     ??bdb_RepProcessEvent_1:
   \   00001A   8882         MOV       DPL,R0
   \   00001C   8983         MOV       DPH,R1
   \   00001E   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000021   EA           MOV       A,R2
   \   000022   C3           CLR       C
   \   000023   98           SUBB      A,R0
   \   000024   F8           MOV       R0,A
   \   000025   EB           MOV       A,R3
   \   000026   99           SUBB      A,R1
   \   000027   F9           MOV       R1,A
   \   000028   C3           CLR       C
   \   000029   E8           MOV       A,R0
   \   00002A   9C           SUBB      A,R4
   \   00002B   E9           MOV       A,R1
   \   00002C   9D           SUBB      A,R5
   \   00002D   5006         JNC       ??bdb_RepProcessEvent_2
   \   00002F   EF           MOV       A,R7
   \   000030   FE           MOV       R6,A
   \   000031   E8           MOV       A,R0
   \   000032   FC           MOV       R4,A
   \   000033   E9           MOV       A,R1
   \   000034   FD           MOV       R5,A
   \                     ??bdb_RepProcessEvent_2:
   \   000035   0F           INC       R7
   \                     ??bdb_RepProcessEvent_0:
   \   000036   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F8           MOV       R0,A
   \   00003B   EF           MOV       A,R7
   \   00003C   C3           CLR       C
   \   00003D   98           SUBB      A,R0
   \   00003E   5019         JNC       ??bdb_RepProcessEvent_3
   \   000040   EF           MOV       A,R7
   \   000041   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000044   50EF         JNC       ??bdb_RepProcessEvent_2
   \   000046   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000049   60EA         JZ        ??bdb_RepProcessEvent_2
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   6A           XRL       A,R2
   \   00004E   7003         JNZ       ??bdb_RepProcessEvent_4
   \   000050   74FF         MOV       A,#-0x1
   \   000052   6B           XRL       A,R3
   \                     ??bdb_RepProcessEvent_4:
   \   000053   60E0         JZ        ??bdb_RepProcessEvent_2
   \   000055   EC           MOV       A,R4
   \   000056   4D           ORL       A,R5
   \   000057   70C1         JNZ       ??bdb_RepProcessEvent_1
    436          	if (minIndex == BDBREPORTING_INVALIDINDEX)
   \                     ??bdb_RepProcessEvent_3:
   \   000059   74FF         MOV       A,#-0x1
   \   00005B   6E           XRL       A,R6
   \   00005C   605E         JZ        ??bdb_RepProcessEvent_5
    437          		return;
    438          	uint16 minVal = bdb_reportingClusterEndpointArray[minIndex].consolidatedMaxReportInt - bdb_reportingClusterEndpointArray[minIndex].timeSinceLastReport;
   \   00005E   EE           MOV       A,R6
   \   00005F   75F00D       MOV       B,#0xd
   \   000062   A4           MUL       AB
   \   000063   F8           MOV       R0,A
   \   000064   A9F0         MOV       R1,B
   \   000066   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   000068   28           ADD       A,R0
   \   000069   F8           MOV       R0,A
   \   00006A   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00006C   39           ADDC      A,R1
   \   00006D   8882         MOV       DPL,R0
   \   00006F   F583         MOV       DPH,A
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   C082         PUSH      DPL
   \   000079   C083         PUSH      DPH
   \   00007B   8882         MOV       DPL,R0
   \   00007D   F583         MOV       DPH,A
   \   00007F   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000082   D083         POP       DPH
   \   000084   D082         POP       DPL
   \   000086   E0           MOVX      A,@DPTR
   \   000087   C3           CLR       C
   \   000088   98           SUBB      A,R0
   \   000089   F8           MOV       R0,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   99           SUBB      A,R1
   \   00008D   F9           MOV       R1,A
    439          	if (minVal > 0) {
   \   00008E   E8           MOV       A,R0
   \   00008F   49           ORL       A,R1
   \   000090   6009         JZ        ??bdb_RepProcessEvent_6
    440          		bdb_reportingNextEventTimeout = minVal;
   \   000092   90....       MOV       DPTR,#bdb_reportingNextEventTimeout
   \   000095   E8           MOV       A,R0
   \   000096   F0           MOVX      @DPTR,A
   \   000097   A3           INC       DPTR
   \   000098   E9           MOV       A,R1
   \   000099   801D         SJMP      ??bdb_RepProcessEvent_7
    441          	} else {
    442          		//Something was triggered, report clusterEndpoint with minIndex
    443          		bdb_reportingNextClusterEndpointIndex = minIndex;
   \                     ??bdb_RepProcessEvent_6:
   \   00009B   EE           MOV       A,R6
   \   00009C   90....       MOV       DPTR,#bdb_reportingNextClusterEndpointIndex
   \   00009F   F0           MOVX      @DPTR,A
    444          		bdb_RepReport(BDBREPORTING_INVALIDINDEX);
   \   0000A0                ; Setup parameters for call to function bdb_RepReport
   \   0000A0   79FF         MOV       R1,#-0x1
   \   0000A2   12....       LCALL     `??bdb_RepReport::?relay`; Banked call to: bdb_RepReport
    445          		bdb_clusterEndpointArrayUpdateAt(minIndex, 0, BDBREPORTING_IGNORE, BDBREPORTING_IGNORE);
   \   0000A5                ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
   \   0000A5   7DFF         MOV       R5,#-0x1
   \   0000A7   7CFF         MOV       R4,#-0x1
   \   0000A9   7A00         MOV       R2,#0x0
   \   0000AB   7B00         MOV       R3,#0x0
   \   0000AD   EE           MOV       A,R6
   \   0000AE   F9           MOV       R1,A
   \   0000AF   12....       LCALL     `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
    446          		bdb_reportingNextEventTimeout = 0;
   \   0000B2   90....       MOV       DPTR,#bdb_reportingNextEventTimeout
   \   0000B5   E4           CLR       A
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   A3           INC       DPTR
   \                     ??bdb_RepProcessEvent_7:
   \   0000B8   F0           MOVX      @DPTR,A
    447          	}
    448          	bdb_RepRestartNextEventTimer( );
   \   0000B9                ; Setup parameters for call to function bdb_RepRestartNextEventTimer
   \   0000B9   12....       LCALL     `??bdb_RepRestartNextEventTimer::?relay`; Banked call to: bdb_RepRestartNextEventTimer
    449          }
   \                     ??bdb_RepProcessEvent_5:
   \   0000BC   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine120_0
   \   000006                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine121_0
   \   000001                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine122_0
   \   000001                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    450          
    451          /*********************************************************************
    452           * @fn      bdb_ProcessInConfigReportCmd
    453           *
    454           * @brief   Process the "Profile" Configure Reporting Command
    455           *
    456           * @param   pInMsg - incoming message to process
    457           *
    458           * @return  TRUE if conditions are meet (attr found, memory available, etc.),
    459           *          FALSE if not
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          uint8 bdb_ProcessInConfigReportCmd(zclIncomingMsg_t *pInMsg)
   \                     bdb_ProcessInConfigReportCmd:
    462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E                ; Setup parameters for call to function bdb_FindEpDesc
   \   00000E   EA           MOV       A,R2
   \   00000F   12....       LCALL     ?Subroutine65 & 0xFFFF
    463          	zclCfgReportCmd_t *cfgReportCmd;
    464          	zclCfgReportRec_t *reportRec;
    465          	zclCfgReportRspCmd_t *cfgReportRspCmd;
    466          	zclAttrRec_t attrRec;
    467          	uint8 status = ZCL_STATUS_SUCCESS;
    468          	uint8 i;
    469          	uint8 iNumRspRecords;
    470          
    471          	// Find Ep Descriptor
    472          	endPointDesc_t *epDescriptor = bdb_FindEpDesc(pInMsg->endPoint);
    473          
    474          	if (epDescriptor == NULL)
   \                     ??CrossCallReturnLabel_109:
   \   000012   12....       LCALL     `??bdb_FindEpDesc::?relay`; Banked call to: bdb_FindEpDesc
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   603E         JZ        ??bdb_ProcessInConfigReportCmd_0
    475          		return FALSE;
    476          
    477          	// get a pointer to the report configuration record
    478          	cfgReportCmd = (zclCfgReportCmd_t *)pInMsg->attrCmd;
   \   000019   E5..         MOV       A,?V2
   \   00001B   2417         ADD       A,#0x17
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V3
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   E8           MOV       A,R0
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E9           MOV       A,R1
   \   000031   12....       LCALL     ?Subroutine8 & 0xFFFF
    479          
    480          	if (cfgReportCmd->numAttr == 0)
   \                     ??CrossCallReturnLabel_2:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6020         JZ        ??bdb_ProcessInConfigReportCmd_0
    481          		return FALSE;
    482          
    483          	// Allocate space for the response command
    484          	cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc(sizeof(zclCfgReportRspCmd_t) +
    485          								 (cfgReportCmd->numAttr * sizeof(zclCfgReportStatus_t)));
   \   000037                ; Setup parameters for call to function osal_mem_alloc
   \   000037   F5..         MOV       ?V0,A
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   7402         MOV       A,#0x2
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?S_SHL
   \   000043   E5..         MOV       A,?V0
   \   000045   2401         ADD       A,#0x1
   \   000047   FA           MOV       R2,A
   \   000048   E4           CLR       A
   \   000049   35..         ADDC      A,?V1
   \   00004B   FB           MOV       R3,A
   \   00004C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004F   8A..         MOV       ?V8,R2
   \   000051   8B..         MOV       ?V9,R3
    486          	if (cfgReportRspCmd == NULL)
   \   000053   EA           MOV       A,R2
   \   000054   4B           ORL       A,R3
   \   000055   7005         JNZ       ??bdb_ProcessInConfigReportCmd_1
    487          		return FALSE;
   \                     ??bdb_ProcessInConfigReportCmd_0:
   \   000057   7900         MOV       R1,#0x0
   \   000059   02....       LJMP      ??bdb_ProcessInConfigReportCmd_2 & 0xFFFF
    488          
    489          	//stop any attribute reporting
    490          	bdb_RepStopEventTimer( );
   \                     ??bdb_ProcessInConfigReportCmd_1:
   \   00005C                ; Setup parameters for call to function bdb_RepStopEventTimer
   \   00005C   12....       LCALL     `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
    491          
    492          	//Load cfg records from NV
    493          	status = bdb_RepLoadCfgRecords( );
    494          	if (status != BDBREPORTING_SUCCESS) {
   \   00005F                ; Setup parameters for call to function bdb_RepLoadCfgRecords
   \   00005F   12....       LCALL     `??bdb_RepLoadCfgRecords::?relay`; Banked call to: bdb_RepLoadCfgRecords
   \   000062   E9           MOV       A,R1
   \   000063   6009         JZ        ??bdb_ProcessInConfigReportCmd_3
    495          		osal_mem_free(cfgReportRspCmd);
   \   000065                ; Setup parameters for call to function osal_mem_free
   \   000065   AA..         MOV       R2,?V8
   \   000067   AB..         MOV       R3,?V9
   \   000069   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00006C   80E9         SJMP      ??bdb_ProcessInConfigReportCmd_0
    496          		return FALSE;
    497          	}
    498          
    499          	// Process each Attribute Reporting Configuration record
    500          	uint8 confchanged = BDBREPORTING_FALSE;
   \                     ??bdb_ProcessInConfigReportCmd_3:
   \   00006E   75..00       MOV       ?V0,#0x0
    501          	iNumRspRecords = 0;
   \   000071   75..00       MOV       ?V10,#0x0
    502          	for (i = 0; i < cfgReportCmd->numAttr; i++) {
   \   000074   75..00       MOV       ?V1,#0x0
   \   000077   803D         SJMP      ??bdb_ProcessInConfigReportCmd_4
    503          		reportRec = &(cfgReportCmd->attrList[i]);
    504          
    505          		status = ZCL_STATUS_SUCCESS; // assume success for this rsp record
    506          
    507          		uint8 atrrCfgRecordIndex = bdb_repAttrCfgRecordsArraySearch(pInMsg->endPoint, pInMsg->clusterId, reportRec->attrID);
    508          		uint8 status2 = zclFindAttrRec(pInMsg->endPoint, pInMsg->clusterId, reportRec->attrID, &attrRec);
    509          		if (atrrCfgRecordIndex == BDBREPORTING_INVALIDINDEX || status2 == 0) {
    510          			//No cfg record found,
    511          			status = ZCL_STATUS_INVALID_VALUE;
    512          		} else {
    513          			if (reportRec->direction == ZCL_SEND_ATTR_REPORTS) {
    514          				if (reportRec->dataType == attrRec.attr.dataType) {
    515          					// This the attribute that is to be reported, for now pass all attrs
    516          					if (attrRec.attr.accessControl & ACCESS_REPORTABLE) {
    517          						if (reportRec->minReportInt == BDBREPORTING_MININTERVAL_DEFAULT && reportRec->maxReportInt == BDBREPORTING_MAXINTERVAL_DEFAULT) {
    518          							//Set the saved default configuration
    519          							confchanged = BDBREPORTING_TRUE;
    520          							bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultMinReportInt;
    521          							bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultMaxReportInt;
    522          							osal_memset(bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, 0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
    523          							osal_memcpy(bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].defaultReportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
    524          							status = ZCL_STATUS_SUCCESS;
    525          						} else {
    526          							// valid configuration, change values
    527          							confchanged = BDBREPORTING_TRUE;
    528          							bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt = reportRec->minReportInt;
    529          							bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt = reportRec->maxReportInt;
    530          							// For attributes of 'discrete' data types this field is omitted
    531          							if (zclAnalogDataType(reportRec->dataType)) {
    532          								osal_memset(bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, 0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
    533          								osal_memcpy(bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange, reportRec->reportableChange, zclGetDataTypeLength(reportRec->dataType));
    534          							}
    535          							status = ZCL_STATUS_SUCCESS;
    536          						}
    537          					} else {
    538          						// Attribute cannot be reported
    539          						status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
    540          					}
    541          				} else {
    542          					// Attribute data type is incorrect
    543          					status = ZCL_STATUS_INVALID_DATA_TYPE;
   \                     ??bdb_ProcessInConfigReportCmd_5:
   \   000079   798D         MOV       R1,#-0x73
    544          				}
    545          			}
    546          			// receiving reports
    547          			else {
    548          				status = ZCL_STATUS_SUCCESS;
    549          			}
    550          		}
    551          
    552          		// If not successful then record the status
    553          		if (status != ZCL_STATUS_SUCCESS) {
    554          			cfgReportRspCmd->attrList[iNumRspRecords].status = status;
   \                     ??bdb_ProcessInConfigReportCmd_6:
   \   00007B   E5..         MOV       A,?V10
   \   00007D   F5..         MOV       ?V6,A
   \   00007F   75..00       MOV       ?V7,#0x0
   \   000082   7402         MOV       A,#0x2
   \   000084   78..         MOV       R0,#?V6
   \   000086   12....       LCALL     ?S_SHL
   \   000089   E5..         MOV       A,?V8
   \   00008B   25..         ADD       A,?V6
   \   00008D   FA           MOV       R2,A
   \   00008E   E5..         MOV       A,?V9
   \   000090   35..         ADDC      A,?V7
   \   000092   FB           MOV       R3,A
   \   000093   E9           MOV       A,R1
   \   000094   8A82         MOV       DPL,R2
   \   000096   8B83         MOV       DPH,R3
   \   000098   A3           INC       DPTR
   \   000099   F0           MOVX      @DPTR,A
    555          			cfgReportRspCmd->attrList[iNumRspRecords].direction = reportRec->direction;
   \   00009A   85..82       MOV       DPL,?V4
   \   00009D   85..83       MOV       DPH,?V5
   \   0000A0   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   F0           MOVX      @DPTR,A
    556          			cfgReportRspCmd->attrList[iNumRspRecords].attrID = reportRec->attrID;
   \   0000A6   85..82       MOV       DPL,?V12
   \   0000A9   85..83       MOV       DPH,?V13
   \   0000AC   12....       LCALL     ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000AF   12....       LCALL     ??Subroutine108_0 & 0xFFFF
    557          			++iNumRspRecords;
   \                     ??CrossCallReturnLabel_220:
   \   0000B2   05..         INC       ?V10
    558          		}
   \                     ??bdb_ProcessInConfigReportCmd_7:
   \   0000B4   05..         INC       ?V1
   \                     ??bdb_ProcessInConfigReportCmd_4:
   \   0000B6   85..82       MOV       DPL,?XSP + 0
   \   0000B9   85..83       MOV       DPH,?XSP + 1
   \   0000BC   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000BF   F8           MOV       R0,A
   \   0000C0   E5..         MOV       A,?V1
   \   0000C2   C3           CLR       C
   \   0000C3   98           SUBB      A,R0
   \   0000C4   4003         JC        $+5
   \   0000C6   02....       LJMP      ??bdb_ProcessInConfigReportCmd_8 & 0xFFFF
   \   0000C9   E5..         MOV       A,?V1
   \   0000CB   75F00C       MOV       B,#0xc
   \   0000CE   A4           MUL       AB
   \   0000CF   F8           MOV       R0,A
   \   0000D0   A9F0         MOV       R1,B
   \   0000D2   85..82       MOV       DPL,?XSP + 0
   \   0000D5   85..83       MOV       DPH,?XSP + 1
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   28           ADD       A,R0
   \   0000DA   FA           MOV       R2,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   39           ADDC      A,R1
   \   0000DE   8A82         MOV       DPL,R2
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   8582..       MOV       ?V4,DPL
   \   0000E6   8583..       MOV       ?V5,DPH
   \   0000E9   A3           INC       DPTR
   \   0000EA   8582..       MOV       ?V12,DPL
   \   0000ED   8583..       MOV       ?V13,DPH
   \   0000F0                ; Setup parameters for call to function bdb_repAttrCfgRecordsArraySearch
   \   0000F0   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000F3   12....       LCALL     `??bdb_repAttrCfgRecordsArraySearch::?relay`; Banked call to: bdb_repAttrCfgRecordsArraySearch
   \   0000F6   E9           MOV       A,R1
   \   0000F7   FE           MOV       R6,A
   \   0000F8                ; Setup parameters for call to function zclFindAttrRec
   \   0000F8   7402         MOV       A,#0x2
   \   0000FA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FD   88..         MOV       ?V6,R0
   \   0000FF   89..         MOV       ?V7,R1
   \   000101   78..         MOV       R0,#?V6
   \   000103   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000106   85..82       MOV       DPL,?V12
   \   000109   85..83       MOV       DPH,?V13
   \   00010C   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00010F   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000112   7402         MOV       A,#0x2
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   E9           MOV       A,R1
   \   000118   F8           MOV       R0,A
   \   000119   74FF         MOV       A,#-0x1
   \   00011B   6E           XRL       A,R6
   \   00011C   6003         JZ        ??bdb_ProcessInConfigReportCmd_9
   \   00011E   E9           MOV       A,R1
   \   00011F   7005         JNZ       ??bdb_ProcessInConfigReportCmd_10
   \                     ??bdb_ProcessInConfigReportCmd_9:
   \   000121   7987         MOV       R1,#-0x79
   \   000123   02....       LJMP      ??bdb_ProcessInConfigReportCmd_6 & 0xFFFF
   \                     ??bdb_ProcessInConfigReportCmd_10:
   \   000126   85..82       MOV       DPL,?V4
   \   000129   85..83       MOV       DPH,?V5
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   7085         JNZ       ??bdb_ProcessInConfigReportCmd_7
   \   00012F   E5..         MOV       A,?V4
   \   000131   2403         ADD       A,#0x3
   \   000133   F5..         MOV       ?V6,A
   \   000135   E4           CLR       A
   \   000136   35..         ADDC      A,?V5
   \   000138   F5..         MOV       ?V7,A
   \   00013A   85..82       MOV       DPL,?V6
   \   00013D   F583         MOV       DPH,A
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F8           MOV       R0,A
   \   000141   7406         MOV       A,#0x6
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   E0           MOVX      A,@DPTR
   \   000147   68           XRL       A,R0
   \   000148   6003         JZ        $+5
   \   00014A   02....       LJMP      ??bdb_ProcessInConfigReportCmd_5 & 0xFFFF
   \   00014D   7407         MOV       A,#0x7
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   E0           MOVX      A,@DPTR
   \   000153   A2E2         MOV       C,0xE0 /* A   */.2
   \   000155   4003         JC        $+5
   \   000157   02....       LJMP      ??bdb_ProcessInConfigReportCmd_11 & 0xFFFF
   \   00015A   EE           MOV       A,R6
   \   00015B   75F015       MOV       B,#0x15
   \   00015E   A4           MUL       AB
   \   00015F   FE           MOV       R6,A
   \   000160   AFF0         MOV       R7,B
   \   000162   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000165   2405         ADD       A,#0x5
   \   000167   F8           MOV       R0,A
   \   000168   E4           CLR       A
   \   000169   3B           ADDC      A,R3
   \   00016A   F9           MOV       R1,A
   \   00016B   85..82       MOV       DPL,?V4
   \   00016E   85..83       MOV       DPH,?V5
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   A3           INC       DPTR
   \   000175   E0           MOVX      A,@DPTR
   \   000176   F5..         MOV       ?V12,A
   \   000178   A3           INC       DPTR
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   F5..         MOV       ?V13,A
   \   00017C   E5..         MOV       A,?V4
   \   00017E   2406         ADD       A,#0x6
   \   000180   FC           MOV       R4,A
   \   000181   E4           CLR       A
   \   000182   35..         ADDC      A,?V5
   \   000184   FD           MOV       R5,A
   \   000185   74FF         MOV       A,#-0x1
   \   000187   65..         XRL       A,?V12
   \   000189   7004         JNZ       ??bdb_ProcessInConfigReportCmd_12
   \   00018B   74FF         MOV       A,#-0x1
   \   00018D   65..         XRL       A,?V13
   \                     ??bdb_ProcessInConfigReportCmd_12:
   \   00018F   7061         JNZ       ??bdb_ProcessInConfigReportCmd_13
   \   000191   8C82         MOV       DPL,R4
   \   000193   8D83         MOV       DPH,R5
   \   000195   E0           MOVX      A,@DPTR
   \   000196   F5..         MOV       ?V14,A
   \   000198   A3           INC       DPTR
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   F5..         MOV       ?V15,A
   \   00019C   E5..         MOV       A,?V14
   \   00019E   45..         ORL       A,?V15
   \   0001A0   7050         JNZ       ??bdb_ProcessInConfigReportCmd_13
   \   0001A2   75..01       MOV       ?V0,#0x1
   \   0001A5   8A82         MOV       DPL,R2
   \   0001A7   8B83         MOV       DPH,R3
   \   0001A9   A3           INC       DPTR
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   A3           INC       DPTR
   \   0001AD   A3           INC       DPTR
   \   0001AE   A3           INC       DPTR
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0001B5   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0001B8   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   0001BB                ; Setup parameters for call to function osal_memset
   \   0001BB   7C04         MOV       R4,#0x4
   \   0001BD   7D00         MOV       R5,#0x0
   \   0001BF   7900         MOV       R1,#0x0
   \   0001C1   EA           MOV       A,R2
   \   0001C2   240D         ADD       A,#0xd
   \   0001C4   FA           MOV       R2,A
   \   0001C5   5001         JNC       ??bdb_ProcessInConfigReportCmd_14
   \   0001C7   0B           INC       R3
   \                     ??bdb_ProcessInConfigReportCmd_14:
   \   0001C8   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001CB   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0001CE   2411         ADD       A,#0x11
   \   0001D0   F5..         MOV       ?V4,A
   \   0001D2   E4           CLR       A
   \   0001D3   3B           ADDC      A,R3
   \   0001D4   F5..         MOV       ?V5,A
   \   0001D6   75..00       MOV       ?V6,#0x0
   \   0001D9   78..         MOV       R0,#?V4
   \   0001DB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001DE   7C04         MOV       R4,#0x4
   \   0001E0   7D00         MOV       R5,#0x0
   \   0001E2   EA           MOV       A,R2
   \   0001E3   240D         ADD       A,#0xd
   \   0001E5   FA           MOV       R2,A
   \   0001E6   5001         JNC       ??bdb_ProcessInConfigReportCmd_15
   \   0001E8   0B           INC       R3
   \                     ??bdb_ProcessInConfigReportCmd_15:
   \   0001E9   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0001EC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001EF   02....       LJMP      ??bdb_ProcessInConfigReportCmd_7 & 0xFFFF
   \                     ??bdb_ProcessInConfigReportCmd_13:
   \   0001F2   75..01       MOV       ?V0,#0x1
   \   0001F5   8882         MOV       DPL,R0
   \   0001F7   8983         MOV       DPH,R1
   \   0001F9   E5..         MOV       A,?V12
   \   0001FB   F0           MOVX      @DPTR,A
   \   0001FC   A3           INC       DPTR
   \   0001FD   E5..         MOV       A,?V13
   \   0001FF   F0           MOVX      @DPTR,A
   \   000200   8C82         MOV       DPL,R4
   \   000202   8D83         MOV       DPH,R5
   \   000204   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000207                ; Setup parameters for call to function zclAnalogDataType
   \   000207   85..82       MOV       DPL,?V6
   \   00020A   85..83       MOV       DPH,?V7
   \   00020D   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000210   7003         JNZ       $+5
   \   000212   02....       LJMP      ??bdb_ProcessInConfigReportCmd_7 & 0xFFFF
   \   000215                ; Setup parameters for call to function osal_memset
   \   000215   7C04         MOV       R4,#0x4
   \   000217   7D00         MOV       R5,#0x0
   \   000219   7900         MOV       R1,#0x0
   \   00021B   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00021E   240D         ADD       A,#0xd
   \   000220   FA           MOV       R2,A
   \   000221   5001         JNC       ??bdb_ProcessInConfigReportCmd_16
   \   000223   0B           INC       R3
   \                     ??bdb_ProcessInConfigReportCmd_16:
   \   000224   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000227                ; Setup parameters for call to function zclGetDataTypeLength
   \   000227   85..82       MOV       DPL,?V6
   \   00022A   85..83       MOV       DPH,?V7
   \   00022D   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000230   F9           MOV       R1,A
   \   000231                ; Setup parameters for call to function osal_memcpy
   \   000231   85..82       MOV       DPL,?V4
   \   000234   85..83       MOV       DPH,?V5
   \   000237   A3           INC       DPTR
   \   000238   A3           INC       DPTR
   \   000239   A3           INC       DPTR
   \   00023A   A3           INC       DPTR
   \   00023B   A3           INC       DPTR
   \   00023C   A3           INC       DPTR
   \   00023D   A3           INC       DPTR
   \   00023E   A3           INC       DPTR
   \   00023F   A3           INC       DPTR
   \   000240   A3           INC       DPTR
   \   000241   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000244   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000247   E9           MOV       A,R1
   \   000248   FC           MOV       R4,A
   \   000249   7D00         MOV       R5,#0x0
   \   00024B   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   2E           ADD       A,R6
   \   000250   F8           MOV       R0,A
   \   000251   A3           INC       DPTR
   \   000252   E0           MOVX      A,@DPTR
   \   000253   3F           ADDC      A,R7
   \   000254   F9           MOV       R1,A
   \   000255   E8           MOV       A,R0
   \   000256   240D         ADD       A,#0xd
   \   000258   FA           MOV       R2,A
   \   000259   E4           CLR       A
   \   00025A   39           ADDC      A,R1
   \   00025B   FB           MOV       R3,A
   \   00025C   808B         SJMP      ??bdb_ProcessInConfigReportCmd_15
   \                     ??bdb_ProcessInConfigReportCmd_11:
   \   00025E   798C         MOV       R1,#-0x74
   \   000260   02....       LJMP      ??bdb_ProcessInConfigReportCmd_6 & 0xFFFF
    559          	} // going through each attribute
    560          
    561          	if (confchanged == BDBREPORTING_TRUE) {
   \                     ??bdb_ProcessInConfigReportCmd_8:
   \   000263   E5..         MOV       A,?V0
   \   000265   603B         JZ        ??bdb_ProcessInConfigReportCmd_17
    562          		//Write new configs into NV
    563          		status = osal_nv_item_init(ZCD_NV_BDBREPORTINGCONFIG, sizeof(bdbReportAttrCfgData_t) * bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray);
    564          		if (status == SUCCESS)
   \   000267                ; Setup parameters for call to function osal_nv_item_init
   \   000267   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00026A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00026D   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000270   12....       LCALL     ?DEALLOC_XSTACK8
   \   000273   E9           MOV       A,R1
   \   000274   7029         JNZ       ??bdb_ProcessInConfigReportCmd_18
    565          			//Overwrite values
    566          			osal_nv_write(ZCD_NV_BDBREPORTINGCONFIG, 0, sizeof(bdbReportAttrCfgData_t) * bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray);
   \   000276                ; Setup parameters for call to function osal_nv_write
   \   000276   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000279   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00027C   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00027F   E0           MOVX      A,@DPTR
   \   000280   75F015       MOV       B,#0x15
   \   000283   A4           MUL       AB
   \   000284   F5..         MOV       ?V0,A
   \   000286   E5F0         MOV       A,B
   \   000288   F5..         MOV       ?V1,A
   \   00028A   78..         MOV       R0,#?V0
   \   00028C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00028F   7C00         MOV       R4,#0x0
   \   000291   7D00         MOV       R5,#0x0
   \   000293   7A56         MOV       R2,#0x56
   \   000295   7B00         MOV       R3,#0x0
   \   000297   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00029A   7404         MOV       A,#0x4
   \   00029C   12....       LCALL     ?DEALLOC_XSTACK8
    567          
    568          		bdb_RepSetupReporting( );
   \                     ??bdb_ProcessInConfigReportCmd_18:
   \   00029F                ; Setup parameters for call to function bdb_RepSetupReporting
   \   00029F   12....       LCALL     `??bdb_RepSetupReporting::?relay`; Banked call to: bdb_RepSetupReporting
    569          	}
    570          
    571          	// if no response records, then just say 1 with status of success
    572          	cfgReportRspCmd->numAttr = iNumRspRecords;
   \                     ??bdb_ProcessInConfigReportCmd_17:
   \   0002A2   85..82       MOV       DPL,?V8
   \   0002A5   85..83       MOV       DPH,?V9
   \   0002A8   E5..         MOV       A,?V10
   \   0002AA   F0           MOVX      @DPTR,A
    573          	if (cfgReportRspCmd->numAttr == 0) {
   \   0002AB   700B         JNZ       ??bdb_ProcessInConfigReportCmd_19
    574          		// Since all attributes were configured successfully, include a single
    575          		// attribute status record in the response command with the status field
    576          		// set to SUCCESS and the attribute ID field and direction omitted.
    577          		cfgReportRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0002AD   A3           INC       DPTR
   \   0002AE   E4           CLR       A
   \   0002AF   F0           MOVX      @DPTR,A
    578          		cfgReportRspCmd->numAttr = 1;
   \   0002B0   85..82       MOV       DPL,?V8
   \   0002B3   85..83       MOV       DPH,?V9
   \   0002B6   04           INC       A
   \   0002B7   F0           MOVX      @DPTR,A
    579          	}
    580          
    581          	// Send the response back
    582          	zcl_SendConfigReportRspCmd(pInMsg->endPoint, &(pInMsg->srcAddr),
    583          				   pInMsg->clusterId, cfgReportRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
    584          				   true, pInMsg->zclHdr.transSeqNum);
   \                     ??bdb_ProcessInConfigReportCmd_19:
   \   0002B8                ; Setup parameters for call to function zcl_SendConfigReportRspCmd
   \   0002B8   85..82       MOV       DPL,?V2
   \   0002BB   85..83       MOV       DPH,?V3
   \   0002BE   A3           INC       DPTR
   \   0002BF   A3           INC       DPTR
   \   0002C0   A3           INC       DPTR
   \   0002C1   A3           INC       DPTR
   \   0002C2   A3           INC       DPTR
   \   0002C3   A3           INC       DPTR
   \   0002C4   E0           MOVX      A,@DPTR
   \   0002C5   F5..         MOV       ?V0,A
   \   0002C7   78..         MOV       R0,#?V0
   \   0002C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002CC   75..01       MOV       ?V0,#0x1
   \   0002CF   78..         MOV       R0,#?V0
   \   0002D1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002D4   78..         MOV       R0,#?V0
   \   0002D6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002D9   78..         MOV       R0,#?V8
   \   0002DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002DE   85..82       MOV       DPL,?V2
   \   0002E1   85..83       MOV       DPH,?V3
   \   0002E4   A3           INC       DPTR
   \   0002E5   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0002E8   E5..         MOV       A,?V2
   \   0002EA   240A         ADD       A,#0xa
   \   0002EC   FA           MOV       R2,A
   \   0002ED   E4           CLR       A
   \   0002EE   35..         ADDC      A,?V3
   \   0002F0   FB           MOV       R3,A
   \   0002F1   E5..         MOV       A,?V2
   \   0002F3   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0002F6   12....       LCALL     `??zcl_SendConfigReportRspCmd::?relay`; Banked call to: zcl_SendConfigReportRspCmd
   \   0002F9   7405         MOV       A,#0x5
   \   0002FB   12....       LCALL     ?DEALLOC_XSTACK8
    585          	osal_mem_free(cfgReportRspCmd);
   \   0002FE                ; Setup parameters for call to function osal_mem_free
   \   0002FE   AA..         MOV       R2,?V8
   \   000300   AB..         MOV       R3,?V9
   \   000302   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    586          
    587          	bdb_repAttrCfgRecordsArrayFreeAll( ); //Free reporting conf array from memory, its saved in NV
   \   000305                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   000305   12....       LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
    588          
    589          	bdb_RepStartReporting( );
   \   000308                ; Setup parameters for call to function bdb_RepStartReporting
   \   000308   12....       LCALL     `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
    590          
    591          	return TRUE;
   \   00030B   7901         MOV       R1,#0x1
   \                     ??bdb_ProcessInConfigReportCmd_2:
   \   00030D   02....       LJMP      ?Subroutine3 & 0xFFFF
    592          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   FB           MOV       R3,A
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   EA           MOV       A,R2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000011   E5..         MOV       A,?V2
   \   000013   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   2416         ADD       A,#0x16
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V3
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000005   E9           MOV       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003                REQUIRE ??Subroutine99_0
   \   000003                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   EC           MOV       A,R4
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   ED           MOV       A,R5
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   EA           MOV       A,R2
   \   000001   240B         ADD       A,#0xb
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000003   E0           MOVX      A,@DPTR
   \   000004   75F015       MOV       B,#0x15
   \   000007   A4           MUL       AB
   \   000008   FC           MOV       R4,A
   \   000009   ADF0         MOV       R5,B
   \   00000B   7A56         MOV       R2,#0x56
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000012   7402         MOV       A,#0x2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   75..00       MOV       ?V6,#0x0
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000005   E9           MOV       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003                REQUIRE ??Subroutine106_0
   \   000003                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine107_0
   \   000002                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine108_0
   \   000002                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine109_0
   \   000001                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine110_0
   \   000002                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   740A         MOV       A,#0xa
   \   000002                REQUIRE ??Subroutine111_0
   \   000002                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine112_0
   \   000003                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine115_0
   \   000004                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine116_0
   \   000003                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    593          
    594          
    595          /*********************************************************************
    596           * @fn      bdb_ProcessInReadReportCfgCmd
    597           *
    598           * @brief   Process the "Profile" Read Reporting Configuration Command
    599           *
    600           * @param   pInMsg - incoming message to process
    601           *
    602           * @return  TRUE if conditions are meet (attr found, memory available, etc.) or FALSE
    603           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    604          uint8 bdb_ProcessInReadReportCfgCmd(zclIncomingMsg_t *pInMsg)
   \                     bdb_ProcessInReadReportCfgCmd:
    605          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    606          	zclReadReportCfgCmd_t *readReportCfgCmd;
    607          	zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
    608          	zclReportCfgRspRec_t *reportRspRec;
    609          	uint8 hdrLen;
    610          	uint8 dataLen = 0;
   \   00000E   7F00         MOV       R7,#0x0
   \   000010                ; Setup parameters for call to function bdb_FindEpDesc
   \   000010   EA           MOV       A,R2
   \   000011   12....       LCALL     ??Subroutine90_0 & 0xFFFF
    611          	zclAttrRec_t attrRec;
    612          	uint8 i;
    613          	uint8 reportChangeLen;
    614          	uint8 status;
    615          
    616          	// Find Ep Descriptor
    617          	endPointDesc_t *epDescriptor = bdb_FindEpDesc(pInMsg->endPoint);
   \                     ??CrossCallReturnLabel_152:
   \   000014   12....       LCALL     `??bdb_FindEpDesc::?relay`; Banked call to: bdb_FindEpDesc
   \   000017   8A..         MOV       ?V0,R2
   \   000019   8B..         MOV       ?V1,R3
    618          
    619          	if (epDescriptor == NULL)
   \   00001B   EA           MOV       A,R2
   \   00001C   4B           ORL       A,R3
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??bdb_ProcessInReadReportCfgCmd_0 & 0xFFFF
    620          		return FALSE; // EMBEDDED RETURN
    621          
    622          	readReportCfgCmd = (zclReadReportCfgCmd_t *)pInMsg->attrCmd;
   \   000022   E5..         MOV       A,?V4
   \   000024   2417         ADD       A,#0x17
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   35..         ADDC      A,?V5
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V12,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V13,A
    623          
    624          	// Find out the response length (Reportable Change field is of variable length)
    625          	for (i = 0; i < readReportCfgCmd->numAttr; i++) {
   \   000034   7E00         MOV       R6,#0x0
   \   000036   E5..         MOV       A,?V4
   \   000038   2408         ADD       A,#0x8
   \   00003A   F5..         MOV       ?V14,A
   \   00003C   E4           CLR       A
   \   00003D   35..         ADDC      A,?V5
   \   00003F   F5..         MOV       ?V15,A
   \   000041   8054         SJMP      ??bdb_ProcessInReadReportCfgCmd_1
    626          		// For supported attributes with 'analog' data type, find out the length of
    627          		// the Reportable Change field
    628          		if (zclFindAttrRec(epDescriptor->endPoint, pInMsg->clusterId,
    629          				   readReportCfgCmd->attrList[i].attrID, &attrRec)) {
   \                     ??bdb_ProcessInReadReportCfgCmd_2:
   \   000043                ; Setup parameters for call to function zclFindAttrRec
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP100_8
   \   000048   88..         MOV       ?V2,R0
   \   00004A   89..         MOV       ?V3,R1
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   EE           MOV       A,R6
   \   000052   75F003       MOV       B,#0x3
   \   000055   A4           MUL       AB
   \   000056   F8           MOV       R0,A
   \   000057   A9F0         MOV       R1,B
   \   000059   E5..         MOV       A,?V12
   \   00005B   28           ADD       A,R0
   \   00005C   F582         MOV       DPL,A
   \   00005E   E5..         MOV       A,?V13
   \   000060   39           ADDC      A,R1
   \   000061   F583         MOV       DPH,A
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000073   7402         MOV       A,#0x2
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   \   000078   E9           MOV       A,R1
   \   000079   601B         JZ        ??bdb_ProcessInReadReportCfgCmd_3
    630          			if (zclAnalogDataType(attrRec.attr.dataType)) {
   \   00007B                ; Setup parameters for call to function zclAnalogDataType
   \   00007B   7406         MOV       A,#0x6
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000083   6011         JZ        ??bdb_ProcessInReadReportCfgCmd_3
    631          				reportChangeLen = zclGetDataTypeLength(attrRec.attr.dataType);
   \   000085                ; Setup parameters for call to function zclGetDataTypeLength
   \   000085   7406         MOV       A,#0x6
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00008D   F8           MOV       R0,A
    632          
    633          				// add padding if needed
    634          				if (PADDING_NEEDED(reportChangeLen))
   \   00008E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000090   5001         JNC       ??bdb_ProcessInReadReportCfgCmd_4
    635          					reportChangeLen++;
   \   000092   08           INC       R0
    636          				dataLen += reportChangeLen;
   \                     ??bdb_ProcessInReadReportCfgCmd_4:
   \   000093   E8           MOV       A,R0
   \   000094   2F           ADD       A,R7
   \   000095   FF           MOV       R7,A
    637          			}
    638          		}
    639          	}
   \                     ??bdb_ProcessInReadReportCfgCmd_3:
   \   000096   0E           INC       R6
   \                     ??bdb_ProcessInReadReportCfgCmd_1:
   \   000097   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00009A   40A7         JC        ??bdb_ProcessInReadReportCfgCmd_2
    640          
    641          	hdrLen = sizeof(zclReadReportCfgRspCmd_t) + (readReportCfgCmd->numAttr * sizeof(zclReportCfgRspRec_t));
    642          
    643          	// Allocate space for the response command
    644          	readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc(hdrLen + dataLen);
   \   00009C                ; Setup parameters for call to function osal_mem_alloc
   \   00009C   75F00D       MOV       B,#0xd
   \   00009F   E8           MOV       A,R0
   \   0000A0   A4           MUL       AB
   \   0000A1   04           INC       A
   \   0000A2   F8           MOV       R0,A
   \   0000A3   EF           MOV       A,R7
   \   0000A4   FA           MOV       R2,A
   \   0000A5   E8           MOV       A,R0
   \   0000A6   2A           ADD       A,R2
   \   0000A7   FA           MOV       R2,A
   \   0000A8   E4           CLR       A
   \   0000A9   3400         ADDC      A,#0x0
   \   0000AB   12....       LCALL     ?Subroutine66 & 0xFFFF
    645          	if (readReportCfgRspCmd == NULL)
   \                     ??CrossCallReturnLabel_111:
   \   0000AE   7005         JNZ       ??bdb_ProcessInReadReportCfgCmd_5
    646          		return FALSE; // Out of memory
   \                     ??bdb_ProcessInReadReportCfgCmd_0:
   \   0000B0   7900         MOV       R1,#0x0
   \   0000B2   02....       LJMP      ??bdb_ProcessInReadReportCfgCmd_6 & 0xFFFF
    647          
    648          	//Load cfg records from NV
    649          	status = bdb_RepLoadCfgRecords( );
    650          	if (status != BDBREPORTING_SUCCESS) {
   \                     ??bdb_ProcessInReadReportCfgCmd_5:
   \   0000B5                ; Setup parameters for call to function bdb_RepLoadCfgRecords
   \   0000B5   12....       LCALL     `??bdb_RepLoadCfgRecords::?relay`; Banked call to: bdb_RepLoadCfgRecords
   \   0000B8   E9           MOV       A,R1
   \   0000B9   6009         JZ        ??bdb_ProcessInReadReportCfgCmd_7
    651          		osal_mem_free(readReportCfgRspCmd);
   \   0000BB                ; Setup parameters for call to function osal_mem_free
   \   0000BB   AA..         MOV       R2,?V2
   \   0000BD   AB..         MOV       R3,?V3
   \   0000BF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C2   80EC         SJMP      ??bdb_ProcessInReadReportCfgCmd_0
    652          		return FALSE; //Out of memory
    653          	}
    654          
    655          	readReportCfgRspCmd->numAttr = 0;
   \                     ??bdb_ProcessInReadReportCfgCmd_7:
   \   0000C4   85..82       MOV       DPL,?V2
   \   0000C7   85..83       MOV       DPH,?V3
   \   0000CA   E4           CLR       A
   \   0000CB   F0           MOVX      @DPTR,A
    656          	for (i = 0; i < readReportCfgCmd->numAttr; i++) {
   \   0000CC   7E00         MOV       R6,#0x0
   \   0000CE   802E         SJMP      ??bdb_ProcessInReadReportCfgCmd_8
    657          		reportRspRec = &(readReportCfgRspCmd->attrList[i]);
    658          		status = ZCL_STATUS_SUCCESS; // assume success for this rsp record
    659          
    660          		uint8 atrrCfgRecordIndex = bdb_repAttrCfgRecordsArraySearch(pInMsg->endPoint, pInMsg->clusterId, readReportCfgCmd->attrList[i].attrID);
    661          		uint8 status2 = zclFindAttrRec(pInMsg->endPoint, pInMsg->clusterId, readReportCfgCmd->attrList[i].attrID, &attrRec);
    662          		if (atrrCfgRecordIndex != BDBREPORTING_INVALIDINDEX && status2) {
    663          			if (attrRec.attr.accessControl & ACCESS_REPORTABLE) {
    664          				// Get the Reporting Configuration
    665          				reportRspRec->dataType = attrRec.attr.dataType;
    666          				reportRspRec->minReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].minReportInt;
    667          				reportRspRec->maxReportInt = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].maxReportInt;
    668          				reportRspRec->reportableChange = bdb_reportingAttrCfgRecordsArray[atrrCfgRecordIndex].reportableChange;
    669          			} else {
    670          				// Attribute not in the Mandatory Reportable Attribute list
    671          				status = ZCL_STATUS_UNREPORTABLE_ATTRIBUTE;
    672          			}
    673          		} else {
    674          			// Attribute not found
    675          			status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??bdb_ProcessInReadReportCfgCmd_9:
   \   0000D0   7F86         MOV       R7,#-0x7a
    676          		}
    677          		reportRspRec->status = status;
   \                     ??bdb_ProcessInReadReportCfgCmd_10:
   \   0000D2   EF           MOV       A,R7
   \   0000D3   85..82       MOV       DPL,?V0
   \   0000D6   85..83       MOV       DPH,?V1
   \   0000D9   12....       LCALL     ?Subroutine8 & 0xFFFF
    678          		reportRspRec->direction = readReportCfgCmd->attrList[i].direction;
   \                     ??CrossCallReturnLabel_3:
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   85..82       MOV       DPL,?V0
   \   0000E1   85..83       MOV       DPH,?V1
   \   0000E4   12....       LCALL     ?Subroutine9 & 0xFFFF
    679          		reportRspRec->attrID = readReportCfgCmd->attrList[i].attrID;
   \                     ??CrossCallReturnLabel_155:
   \   0000E7   F8           MOV       R0,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   85..82       MOV       DPL,?V0
   \   0000EE   85..83       MOV       DPH,?V1
   \   0000F1   12....       LCALL     ??Subroutine109_0 & 0xFFFF
    680          		readReportCfgRspCmd->numAttr++;
   \                     ??CrossCallReturnLabel_218:
   \   0000F4   85..82       MOV       DPL,?V2
   \   0000F7   85..83       MOV       DPH,?V3
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   04           INC       A
   \   0000FC   F0           MOVX      @DPTR,A
   \   0000FD   0E           INC       R6
   \                     ??bdb_ProcessInReadReportCfgCmd_8:
   \   0000FE   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000101   85..82       MOV       DPL,?V14
   \   000104   85..83       MOV       DPH,?V15
   \   000107   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00010A   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00010D   4003         JC        $+5
   \   00010F   02....       LJMP      ??bdb_ProcessInReadReportCfgCmd_11 & 0xFFFF
   \   000112   EE           MOV       A,R6
   \   000113   FC           MOV       R4,A
   \   000114   75F00D       MOV       B,#0xd
   \   000117   A4           MUL       AB
   \   000118   F5..         MOV       ?V0,A
   \   00011A   E5F0         MOV       A,B
   \   00011C   F5..         MOV       ?V1,A
   \   00011E   E5..         MOV       A,?V2
   \   000120   25..         ADD       A,?V0
   \   000122   F582         MOV       DPL,A
   \   000124   E5..         MOV       A,?V3
   \   000126   35..         ADDC      A,?V1
   \   000128   F583         MOV       DPH,A
   \   00012A   A3           INC       DPTR
   \   00012B   8582..       MOV       ?V0,DPL
   \   00012E   8583..       MOV       ?V1,DPH
   \   000131   7F00         MOV       R7,#0x0
   \   000133   EC           MOV       A,R4
   \   000134   75F003       MOV       B,#0x3
   \   000137   A4           MUL       AB
   \   000138   FC           MOV       R4,A
   \   000139   ADF0         MOV       R5,B
   \   00013B   E5..         MOV       A,?V12
   \   00013D   2C           ADD       A,R4
   \   00013E   FC           MOV       R4,A
   \   00013F   E5..         MOV       A,?V13
   \   000141   3D           ADDC      A,R5
   \   000142   FD           MOV       R5,A
   \   000143   85..82       MOV       DPL,?XSP + 0
   \   000146   85..83       MOV       DPH,?XSP + 1
   \   000149   12....       LCALL     ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00014C   85..82       MOV       DPL,?XSP + 0
   \   00014F   85..83       MOV       DPH,?XSP + 1
   \   000152   E0           MOVX      A,@DPTR
   \   000153   2402         ADD       A,#0x2
   \   000155   F5..         MOV       ?V8,A
   \   000157   A3           INC       DPTR
   \   000158   E0           MOVX      A,@DPTR
   \   000159   3400         ADDC      A,#0x0
   \   00015B   F5..         MOV       ?V9,A
   \   00015D                ; Setup parameters for call to function bdb_repAttrCfgRecordsArraySearch
   \   00015D   85..82       MOV       DPL,?V8
   \   000160   F583         MOV       DPH,A
   \   000162   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000165   12....       LCALL     `??bdb_repAttrCfgRecordsArraySearch::?relay`; Banked call to: bdb_repAttrCfgRecordsArraySearch
   \   000168   E9           MOV       A,R1
   \   000169   F5..         MOV       ?V6,A
   \   00016B                ; Setup parameters for call to function zclFindAttrRec
   \   00016B   7402         MOV       A,#0x2
   \   00016D   12....       LCALL     ?XSTACK_DISP100_8
   \   000170   88..         MOV       ?V10,R0
   \   000172   89..         MOV       ?V11,R1
   \   000174   78..         MOV       R0,#?V10
   \   000176   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000179   85..82       MOV       DPL,?V8
   \   00017C   85..83       MOV       DPH,?V9
   \   00017F   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000182   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000185   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000188   7402         MOV       A,#0x2
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D   E9           MOV       A,R1
   \   00018E   F8           MOV       R0,A
   \   00018F   74FF         MOV       A,#-0x1
   \   000191   65..         XRL       A,?V6
   \   000193   7003         JNZ       $+5
   \   000195   02....       LJMP      ??bdb_ProcessInReadReportCfgCmd_9 & 0xFFFF
   \   000198   E9           MOV       A,R1
   \   000199   7003         JNZ       $+5
   \   00019B   02....       LJMP      ??bdb_ProcessInReadReportCfgCmd_9 & 0xFFFF
   \   00019E   7407         MOV       A,#0x7
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   A2E2         MOV       C,0xE0 /* A   */.2
   \   0001A6   503F         JNC       ??bdb_ProcessInReadReportCfgCmd_12
   \   0001A8   7406         MOV       A,#0x6
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   85..82       MOV       DPL,?V0
   \   0001B1   85..83       MOV       DPH,?V1
   \   0001B4   A3           INC       DPTR
   \   0001B5   A3           INC       DPTR
   \   0001B6   A3           INC       DPTR
   \   0001B7   A3           INC       DPTR
   \   0001B8   F0           MOVX      @DPTR,A
   \   0001B9   E5..         MOV       A,?V6
   \   0001BB   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001BE   A3           INC       DPTR
   \   0001BF   A3           INC       DPTR
   \   0001C0   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   A3           INC       DPTR
   \   0001C6   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001C9   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0001CC   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0001CF   E8           MOV       A,R0
   \   0001D0   240D         ADD       A,#0xd
   \   0001D2   F8           MOV       R0,A
   \   0001D3   5001         JNC       ??bdb_ProcessInReadReportCfgCmd_13
   \   0001D5   09           INC       R1
   \                     ??bdb_ProcessInReadReportCfgCmd_13:
   \   0001D6   E5..         MOV       A,?V0
   \   0001D8   240B         ADD       A,#0xb
   \   0001DA   F582         MOV       DPL,A
   \   0001DC   E4           CLR       A
   \   0001DD   35..         ADDC      A,?V1
   \   0001DF   F583         MOV       DPH,A
   \   0001E1   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0001E4   02....       LJMP      ??bdb_ProcessInReadReportCfgCmd_10 & 0xFFFF
   \                     ??bdb_ProcessInReadReportCfgCmd_12:
   \   0001E7   7F8C         MOV       R7,#-0x74
   \   0001E9   02....       LJMP      ??bdb_ProcessInReadReportCfgCmd_10 & 0xFFFF
    681          	}
    682          
    683          	// Send the response back
    684          	zcl_SendReadReportCfgRspCmd(pInMsg->endPoint, &(pInMsg->srcAddr),
    685          				    pInMsg->clusterId, readReportCfgRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
    686          				    true, pInMsg->zclHdr.transSeqNum);
   \                     ??bdb_ProcessInReadReportCfgCmd_11:
   \   0001EC                ; Setup parameters for call to function zcl_SendReadReportCfgRspCmd
   \   0001EC   85..82       MOV       DPL,?V4
   \   0001EF   85..83       MOV       DPH,?V5
   \   0001F2   A3           INC       DPTR
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   A3           INC       DPTR
   \   0001F7   A3           INC       DPTR
   \   0001F8   E0           MOVX      A,@DPTR
   \   0001F9   F5..         MOV       ?V0,A
   \   0001FB   78..         MOV       R0,#?V0
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000200   75..01       MOV       ?V0,#0x1
   \   000203   78..         MOV       R0,#?V0
   \   000205   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000208   78..         MOV       R0,#?V0
   \   00020A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00020D   78..         MOV       R0,#?V2
   \   00020F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000212   EA           MOV       A,R2
   \   000213   FC           MOV       R4,A
   \   000214   EB           MOV       A,R3
   \   000215   FD           MOV       R5,A
   \   000216   E5..         MOV       A,?V4
   \   000218   240A         ADD       A,#0xa
   \   00021A   FA           MOV       R2,A
   \   00021B   E4           CLR       A
   \   00021C   35..         ADDC      A,?V5
   \   00021E   FB           MOV       R3,A
   \   00021F   12....       LCALL     `??zcl_SendReadReportCfgRspCmd::?relay`; Banked call to: zcl_SendReadReportCfgRspCmd
   \   000222   7405         MOV       A,#0x5
   \   000224   12....       LCALL     ?DEALLOC_XSTACK8
    687          	osal_mem_free(readReportCfgRspCmd);
   \   000227                ; Setup parameters for call to function osal_mem_free
   \   000227   AA..         MOV       R2,?V2
   \   000229   AB..         MOV       R3,?V3
   \   00022B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    688          
    689          	bdb_repAttrCfgRecordsArrayFreeAll( );//Free reporting cfg array from memory, its saved in NV
   \   00022E                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   00022E   12....       LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
    690          
    691          	return TRUE;
   \   000231   7901         MOV       R1,#0x1
   \                     ??bdb_ProcessInReadReportCfgCmd_6:
   \   000233   02....       LJMP      ?Subroutine3 & 0xFFFF
    692          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E5..         MOV       A,?V4
   \   000002                REQUIRE ??Subroutine90_0
   \   000002                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   2416         ADD       A,#0x16
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V5
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine91_0
   \   000001                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001   85..82       MOV       DPL,?V8
   \   000004   85..83       MOV       DPH,?V9
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine94_0
   \   000001                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine95_0
   \   000004                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine96_0
   \   000002                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   EA           MOV       A,R2
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   EB           MOV       A,R3
   \   000006   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   75F015       MOV       B,#0x15
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   A9F0         MOV       R1,B
   \   000007   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   28           ADD       A,R0
   \   00000C   F8           MOV       R0,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   39           ADDC      A,R1
   \   000010   F9           MOV       R1,A
   \   000011   8882         MOV       DPL,R0
   \   000013   F583         MOV       DPH,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   85..82       MOV       DPL,?V12
   \   000003   85..83       MOV       DPH,?V13
   \   000006                REQUIRE ??Subroutine105_0
   \   000006                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   EE           MOV       A,R6
   \   000003   C3           CLR       C
   \   000004   98           SUBB      A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000004   8A..         MOV       ?V2,R2
   \   000006   8B..         MOV       ?V3,R3
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   85..82       MOV       DPL,?V14
   \   000006   85..83       MOV       DPH,?V15
   \   000009   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00000C   22           RET
    693          
    694          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    695          void bdb_RepUpdateMarkBindings(void)
   \                     bdb_RepUpdateMarkBindings:
    696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    697          	uint8 numMarkedEntries = 0;
   \   000005   75..00       MOV       ?V4,#0x0
    698          	uint8 i;
    699          
    700          	for (i = 0; i < bdb_reportingClusterEndpointArrayCount; i++) {
   \   000008   75..00       MOV       ?V5,#0x0
   \   00000B   800E         SJMP      ??bdb_RepUpdateMarkBindings_0
    701          		BindingEntry_t *bEntry = bindFind(bdb_reportingClusterEndpointArray[i].endpoint, bdb_reportingClusterEndpointArray[i].cluster, 0);
    702          		if (bEntry != NULL) { //Found a binding with the given cluster and endpoint, mark the Endpoint-cluster entry (this activates reporting)
    703          			if (FLAGS_CHECKFLAG(bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK) == BDBREPORTING_FALSE)
    704          				bdb_RepMarkHasBindingInEndpointClusterArray(bdb_reportingClusterEndpointArray[i].endpoint, bdb_reportingClusterEndpointArray[i].cluster, BDBREPORTING_FALSE, BDBREPORTING_IGNORE);
    705          			numMarkedEntries++;
    706          		} else {
    707          			if (FLAGS_CHECKFLAG(bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK) == BDBREPORTING_TRUE)
   \                     ??bdb_RepUpdateMarkBindings_1:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000010   5007         JNC       ??CrossCallReturnLabel_43
    708          				bdb_RepMarkHasBindingInEndpointClusterArray(bdb_reportingClusterEndpointArray[i].endpoint, bdb_reportingClusterEndpointArray[i].cluster, BDBREPORTING_TRUE, BDBREPORTING_IGNORE);
   \   000012                ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
   \   000012   7DFF         MOV       R5,#-0x1
   \   000014   7C01         MOV       R4,#0x1
   \   000016   12....       LCALL     ?Subroutine31 & 0xFFFF
    709          		}
   \                     ??CrossCallReturnLabel_43:
   \   000019   05..         INC       ?V5
   \                     ??bdb_RepUpdateMarkBindings_0:
   \   00001B   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   E5..         MOV       A,?V5
   \   000022   C3           CLR       C
   \   000023   98           SUBB      A,R0
   \   000024   5055         JNC       ??bdb_RepUpdateMarkBindings_2
   \   000026   E5..         MOV       A,?V5
   \   000028   75F00D       MOV       B,#0xd
   \   00002B   A4           MUL       AB
   \   00002C   F8           MOV       R0,A
   \   00002D   A9F0         MOV       R1,B
   \   00002F   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   000031   28           ADD       A,R0
   \   000032   F5..         MOV       ?V2,A
   \   000034   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000036   39           ADDC      A,R1
   \   000037   F5..         MOV       ?V3,A
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   F583         MOV       DPH,A
   \   00003E   A3           INC       DPTR
   \   00003F   AE82         MOV       R6,DPL
   \   000041   AF83         MOV       R7,DPH
   \   000043   E5..         MOV       A,?V2
   \   000045   2402         ADD       A,#0x2
   \   000047   F5..         MOV       ?V0,A
   \   000049   E4           CLR       A
   \   00004A   35..         ADDC      A,?V3
   \   00004C   F5..         MOV       ?V1,A
   \   00004E                ; Setup parameters for call to function bindFind
   \   00004E   7C00         MOV       R4,#0x0
   \   000050   85..82       MOV       DPL,?V0
   \   000053   F583         MOV       DPH,A
   \   000055   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F9           MOV       R1,A
   \   00005E   12....       LCALL     `??bindFind::?relay`; Banked call to: bindFind
   \   000061   EA           MOV       A,R2
   \   000062   4B           ORL       A,R3
   \   000063   85..82       MOV       DPL,?V2
   \   000066   85..83       MOV       DPH,?V3
   \   000069   60A2         JZ        ??bdb_RepUpdateMarkBindings_1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006E   4007         JC        ??CrossCallReturnLabel_44
   \   000070                ; Setup parameters for call to function bdb_RepMarkHasBindingInEndpointClusterArray
   \   000070   7DFF         MOV       R5,#-0x1
   \   000072   7C00         MOV       R4,#0x0
   \   000074   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000077   05..         INC       ?V4
   \   000079   809E         SJMP      ??CrossCallReturnLabel_43
    710          	}
    711          
    712          	//Checking is bdb_reporting timer is active
    713          	if (osal_get_timeoutEx(bdb_TaskID, BDB_REPORT_TIMEOUT) > 0) {
   \                     ??bdb_RepUpdateMarkBindings_2:
   \   00007B                ; Setup parameters for call to function osal_get_timeoutEx
   \   00007B   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00007E   6009         JZ        ??bdb_RepUpdateMarkBindings_3
    714          		//If timer is active
    715          		if (numMarkedEntries == 0) //No entries
   \   000080   E5..         MOV       A,?V4
   \   000082   700C         JNZ       ??bdb_RepUpdateMarkBindings_4
    716          
    717          			//Stop Timer
    718          			osal_stop_timerEx(bdb_TaskID, BDB_REPORT_TIMEOUT);
   \   000084                ; Setup parameters for call to function osal_stop_timerEx
   \   000084   12....       LCALL     ?Subroutine49 & 0xFFFF
    719          	} else {
   \                     ??CrossCallReturnLabel_76:
   \   000087   8007         SJMP      ??bdb_RepUpdateMarkBindings_4
    720          		if (numMarkedEntries > 0)
   \                     ??bdb_RepUpdateMarkBindings_3:
   \   000089   E5..         MOV       A,?V4
   \   00008B   6003         JZ        ??bdb_RepUpdateMarkBindings_4
    721          			//Start timer
    722          			bdb_RepStartReporting( );
   \   00008D                ; Setup parameters for call to function bdb_RepStartReporting
   \   00008D   12....       LCALL     `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
    723          	}
    724          }
   \                     ??bdb_RepUpdateMarkBindings_4:
   \   000090   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??bdb_RepMarkHasBindingInEndpointClusterArray::`; Banked call to: bdb_RepMarkHasBindingInEndpointClusterArray
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    725          
    726          /*********************************************************************
    727           * LOCAL FUNCTIONS DEFINITIONS
    728           */
    729          
    730          /*
    731           * Begin: Single linked list for attributes in a cluster-endpoint live entry methods
    732           */
    733          
    734          /*********************************************************************
    735           * @fn      bdb_InitReportAttrLiveValues
    736           *
    737           * @brief   Set the bdbReportAttrLive_t fields to initiation values
    738           *
    739           * @param   item - Data to initiate
    740           *
    741           * @return
    742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          static void bdb_InitReportAttrLiveValues(bdbReportAttrLive_t *item)
   \                     bdb_InitReportAttrLiveValues:
    744          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    745          	uint8 i;
    746          
    747          	for (i = 0; i < BDBREPORTING_MAX_ANALOG_ATTR_SIZE; i++) {
   \   000004   7C00         MOV       R4,#0x0
    748          		item->lastValueReported[i] = 0x00;
   \                     ??bdb_InitReportAttrLiveValues_0:
   \   000006   EC           MOV       A,R4
   \   000007   F8           MOV       R0,A
   \   000008   EA           MOV       A,R2
   \   000009   28           ADD       A,R0
   \   00000A   F8           MOV       R0,A
   \   00000B   E4           CLR       A
   \   00000C   3B           ADDC      A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   8882         MOV       DPL,R0
   \   000010   F583         MOV       DPH,A
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E4           CLR       A
   \   000015   12....       LCALL     ?Subroutine17 & 0xFFFF
    749          		item->reportableChange[i] = 0x00;
    750          	}
   \                     ??CrossCallReturnLabel_10:
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   0C           INC       R4
   \   00001D   EC           MOV       A,R4
   \   00001E   C3           CLR       C
   \   00001F   9404         SUBB      A,#0x4
   \   000021   40E3         JC        ??bdb_InitReportAttrLiveValues_0
    751          	item->attrID = 0x0000;
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   02....       LJMP      ?Subroutine0 & 0xFFFF
    752          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   22           RET
    753          
    754          /*********************************************************************
    755           * @fn      bdb_linkedListAttrInit
    756           *
    757           * @brief   Initates a linked list for the attrs in the cluster-endpoint entry
    758           *
    759           * @param   list - Pointer to linked list
    760           *
    761           * @return
    762           */
    763          static void bdb_linkedListAttrInit(bdbAttrLinkedListAttr_t *list)
    764          {
    765          	list->head = NULL;
    766          	list->numItems = 0;
    767          }
    768          
    769          /*********************************************************************
    770           * @fn      bdb_linkedListAttrAdd
    771           *
    772           * @brief   Initates a linked list for the attrs in the cluster-endpoint entry
    773           *
    774           * @param   list - Pointer to linked list
    775           *
    776           * @return  Status code (BDBREPORTING_SUCCESS or BDBREPORTING_ERROR)
    777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    778          static uint8 bdb_linkedListAttrAdd(bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t *data)
   \                     bdb_linkedListAttrAdd:
    779          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    780          	bdbLinkedListAttrItem_t *newItem = (bdbLinkedListAttrItem_t *)osal_mem_alloc(sizeof(bdbLinkedListAttrItem_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A04         MOV       R2,#0x4
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    781          
    782          	if (newItem == NULL)
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??bdb_linkedListAttrAdd_0
    783          		return BDBREPORTING_ERROR;
   \   000020   7901         MOV       R1,#0x1
   \   000022   802A         SJMP      ??CrossCallReturnLabel_96
    784          	newItem->data = data;
   \                     ??bdb_linkedListAttrAdd_0:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   EE           MOV       A,R6
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   EF           MOV       A,R7
   \   00002C   F0           MOVX      @DPTR,A
    785          	newItem->next = list->head;
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   A3           INC       DPTR
   \   000034   AA82         MOV       R2,DPL
   \   000036   AB83         MOV       R3,DPH
   \   000038   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00003B   12....       LCALL     ??Subroutine99_0 & 0xFFFF
    786          	list->head = newItem;
   \                     ??CrossCallReturnLabel_181:
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   12....       LCALL     ??Subroutine110_0 & 0xFFFF
    787          	list->numItems++;
   \                     ??CrossCallReturnLabel_210:
   \   000045   85..82       MOV       DPL,?V0
   \   000048   85..83       MOV       DPH,?V1
   \   00004B   12....       LCALL     ?Subroutine56 & 0xFFFF
    788          	return BDBREPORTING_SUCCESS;
   \                     ??CrossCallReturnLabel_96:
   \   00004E   02....       LJMP      ?Subroutine2 & 0xFFFF
    789          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   04           INC       A
   \   000002   F0           MOVX      @DPTR,A
   \   000003   7900         MOV       R1,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
    790          
    791          /*********************************************************************
    792           * @fn      bdb_linkedListAttrSearch
    793           *
    794           * @brief   Travers the linked list and search for a node (bdbReportAttrLive_t
    795           *          data) with a specific attrID
    796           *
    797           * @param   list - Pointer to linked list
    798           * @param   searchdata - data to search the list (has a specific attrID)
    799           *
    800           * @return  A pointer to the node in the list has the searched data, NULL if
    801           *          not found
    802           */
    803          static bdbLinkedListAttrItem_t *bdb_linkedListAttrSearch(bdbAttrLinkedListAttr_t *list, bdbReportAttrLive_t *searchdata)
    804          {
    805          	bdbLinkedListAttrItem_t *cur = list->head;
    806          
    807          	while (cur != NULL) {
    808          		if (EQUAL_LLISTITEMDATA((*(cur->data)), (*searchdata)))
    809          			return cur;
    810          		cur = cur->next;
    811          	}
    812          	return NULL;
    813          }
    814          
    815          /*********************************************************************
    816           * @fn      bdb_linkedListAttrRemove
    817           *
    818           * @brief   Remove the head node from the list
    819           *
    820           * @param   list - Pointer to linked list
    821           *
    822           * @return  A pointer to the data part of the deleted node, NULL if no node was deleted
    823           */
    824          static bdbReportAttrLive_t *bdb_linkedListAttrRemove(bdbAttrLinkedListAttr_t *list)
    825          {
    826          	bdbReportAttrLive_t *resdata = NULL;
    827          	bdbLinkedListAttrItem_t *cur = list->head;
    828          
    829          	if (list->head == NULL)
    830          		return NULL;
    831          	list->head = cur->next;
    832          	resdata = cur->data;
    833          	osal_mem_free(cur);
    834          	list->numItems--;
    835          	return resdata;
    836          }
    837          
    838          /*********************************************************************
    839           * @fn      bdb_linkedListAttrFreeAll
    840           *
    841           * @brief   Deletes and deallocates all the memory from the linked list
    842           *
    843           * @param   list - Pointer to linked list
    844           *
    845           * @return  BDBREPORTING_SUCCESS if operation was successful
    846           */
    847          static uint8 bdb_linkedListAttrFreeAll(bdbAttrLinkedListAttr_t *list)
    848          {
    849          	bdbReportAttrLive_t *toremovedata;
    850          
    851          	while (list->head != NULL) {
    852          		toremovedata = bdb_linkedListAttrRemove(list);
    853          		osal_mem_free(toremovedata);
    854          	}
    855          	return BDBREPORTING_SUCCESS;
    856          }
    857          
    858          /*********************************************************************
    859           * @fn      bdb_linkedListAttrClearList
    860           *
    861           * @brief   Clears the list without freeing the nodes memory
    862           *
    863           * @param   list - Pointer to linked list
    864           *
    865           * @return
    866           */
    867          static void bdb_linkedListAttrClearList(bdbAttrLinkedListAttr_t *list)
    868          {
    869          	list->head = NULL;
    870          	list->numItems = 0;
    871          }
    872          
    873          /*********************************************************************
    874           * @fn      bdb_linkedListAttrGetAtIndex
    875           *
    876           * @brief   Returns the ith element of the list starting from the head
    877           *
    878           * @param   list - Pointer to linked list
    879           *
    880           * @return  A pointer to the ith node element
    881           */
    882          static bdbLinkedListAttrItem_t *bdb_linkedListAttrGetAtIndex(bdbAttrLinkedListAttr_t *list, uint8 index)
    883          {
    884          	if (index > list->numItems - 1)
    885          		return NULL;
    886          	bdbLinkedListAttrItem_t *cur = list->head;
    887          	uint8 i;
    888          	for (i = 0; i <= index; i++) {
    889          		if (cur == NULL)
    890          			return NULL;
    891          		if (i < index)
    892          			cur = cur->next;
    893          	}
    894          	return cur;
    895          }
    896          
    897          /*
    898           * End: Single linked list for attributes in a cluster-endpoint entry methods
    899           */
    900          
    901          
    902          /*
    903           * Begin: Cluster-endpoint array live methods
    904           */
    905          
    906          /*********************************************************************
    907           * @fn      bdb_clusterEndpointArrayInit
    908           *
    909           * @brief   Initiates the clusterEndpoint array variables
    910           *
    911           * @return
    912           */
    913          static void bdb_clusterEndpointArrayInit(void)
    914          {
    915          	bdb_reportingClusterEndpointArrayCount = 0;
    916          }
    917          
    918          /*********************************************************************
    919           * @fn      bdb_clusterEndpointArrayAdd
    920           *
    921           * @brief   Adds a new entry to the clusterEndpoint array
    922           *
    923           * @param   endpoint - Endpoint ID of the entry
    924           * @param   cluster - Cluster ID of the entry
    925           * @param   consolidatedMinReportInterval - Cluster ID of the entry
    926           *
    927           *
    928           * @return  A pointer to the ith node element
    929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    930          static uint8 bdb_clusterEndpointArrayAdd(uint8 endpoint, uint16 cluster, uint16 consolidatedMinReportInt, uint16 consolidatedMaxReportInt, uint16 timeSinceLastReport)
   \                     bdb_clusterEndpointArrayAdd:
    931          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    932          	if (bdb_reportingClusterEndpointArrayCount >= BDB_MAX_CLUSTERENDPOINTS_REPORTING)
   \   000007   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   C3           CLR       C
   \   00000C   9405         SUBB      A,#0x5
   \   00000E   4004         JC        ??bdb_clusterEndpointArrayAdd_0
    933          		return BDBREPORTING_ERROR;
   \   000010   7901         MOV       R1,#0x1
   \   000012   804D         SJMP      ??CrossCallReturnLabel_97
    934          	bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].endpoint = endpoint;
   \                     ??bdb_clusterEndpointArrayAdd_0:
   \   000014   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000017   F8           MOV       R0,A
   \   000018   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00001A   39           ADDC      A,R1
   \   00001B   F9           MOV       R1,A
   \   00001C   EF           MOV       A,R7
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   12....       LCALL     ?Subroutine87 & 0xFFFF
    935          	bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].cluster = cluster;
   \                     ??CrossCallReturnLabel_158:
   \   000024   12....       LCALL     ?Subroutine11 & 0xFFFF
    936          
    937          	bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].consolidatedMinReportInt = consolidatedMinReportInt;
   \                     ??CrossCallReturnLabel_7:
   \   000027   12....       LCALL     ??Subroutine99_0 & 0xFFFF
    938          	bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].consolidatedMaxReportInt = consolidatedMaxReportInt;
   \                     ??CrossCallReturnLabel_182:
   \   00002A   7409         MOV       A,#0x9
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000032   12....       LCALL     ??Subroutine94_0 & 0xFFFF
    939          	bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].timeSinceLastReport = timeSinceLastReport;
   \                     ??CrossCallReturnLabel_164:
   \   000035   740B         MOV       A,#0xb
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00003D   12....       LCALL     ?Subroutine16 & 0xFFFF
    940          	bdb_linkedListAttrInit(&bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].attrLinkedList);
   \                     ??CrossCallReturnLabel_166:
   \   000040   E8           MOV       A,R0
   \   000041   240A         ADD       A,#0xa
   \   000043   F8           MOV       R0,A
   \   000044   5001         JNC       ??bdb_clusterEndpointArrayAdd_1
   \   000046   09           INC       R1
   \                     ??bdb_clusterEndpointArrayAdd_1:
   \   000047   F582         MOV       DPL,A
   \   000049   12....       LCALL     ?Subroutine15 & 0xFFFF
    941          	FLAGS_TURNOFFALLFLAGS(bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount].flags);
   \                     ??CrossCallReturnLabel_8:
   \   00004C   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00004F   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000052   F582         MOV       DPL,A
   \   000054   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000056   39           ADDC      A,R1
   \   000057   F583         MOV       DPH,A
   \   000059   E4           CLR       A
   \   00005A   F0           MOVX      @DPTR,A
    942          
    943          	bdb_reportingClusterEndpointArrayCount++;
   \   00005B   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00005E   12....       LCALL     ?Subroutine56 & 0xFFFF
    944          	return BDBREPORTING_SUCCESS;
   \                     ??CrossCallReturnLabel_97:
   \   000061   02....       LJMP      ?Subroutine1 & 0xFFFF
    945          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine92_0
   \   000001                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   000005   28           ADD       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine93_0
   \   000001                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   75F00D       MOV       B,#0xd
   \   000004   A4           MUL       AB
   \   000005   F8           MOV       R0,A
   \   000006   A9F0         MOV       R1,B
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   22           RET
    946          
    947          static uint8 bdb_clusterEndpointArrayGetMin(void)
    948          {
    949          	uint8 indexMin = 0xFF;
    950          	uint16 ValueMin = 0xFFFF;
    951          	uint16 possibleMin;
    952          	uint8 i;
    953          
    954          	for (i = 0; i < bdb_reportingClusterEndpointArrayCount; i++) {
    955          		if (FLAGS_CHECKFLAG(bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK) == BDBREPORTING_TRUE) { //Only do with valid entries (HasBinding==true)
    956          			if (bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_NOPERIODIC &&
    957          			    bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_REPORTOFF) {
    958          				//If maxInterval is BDBREPORTING_NOPERIODIC=0x0000 or BDBREPORTING_REPORTOFF=0xFFFF, ignore to calculate min
    959          				if (ValueMin == 0)
    960          					//stop if we find a minValue of zero because there no other Min less than that
    961          					break;
    962          				possibleMin = bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt - bdb_reportingClusterEndpointArray[i].timeSinceLastReport;
    963          				if (possibleMin < ValueMin) {
    964          					indexMin = i;
    965          					ValueMin = possibleMin;
    966          				}
    967          			}
    968          		}
    969          	}
    970          	return indexMin;
    971          }
    972          
    973          static uint8 bdb_clusterEndpointArrayRemoveAt(uint8 index)
    974          {
    975          	if (index >= bdb_reportingClusterEndpointArrayCount)
    976          		return BDBREPORTING_ERROR;
    977          	//Freeing list, all the other fields are not dynamic
    978          	bdb_linkedListAttrFreeAll(&bdb_reportingClusterEndpointArray[index].attrLinkedList);
    979          	//moving last element to free slot
    980          	bdb_clusterEndpointArrayMoveTo(index, bdb_reportingClusterEndpointArrayCount - 1);
    981          	bdb_reportingClusterEndpointArrayCount--;
    982          	return BDBREPORTING_SUCCESS;
    983          }
    984          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          static void bdb_clusterEndpointArrayMoveTo(uint8 indexSrc, uint8 indexDest)
   \                     bdb_clusterEndpointArrayMoveTo:
    986          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V1,R2
    987          	bdb_reportingClusterEndpointArray[indexSrc].cluster = bdb_reportingClusterEndpointArray[indexDest].cluster;
   \   000007   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00000A   E8           MOV       A,R0
   \   00000B   FA           MOV       R2,A
   \   00000C   E9           MOV       A,R1
   \   00000D   FB           MOV       R3,A
   \   00000E   E5..         MOV       A,?V1
   \   000010   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
   \   000017   8882         MOV       DPL,R0
   \   000019   F583         MOV       DPH,A
   \   00001B   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00001E   12....       LCALL     ??Subroutine109_0 & 0xFFFF
    988          	bdb_reportingClusterEndpointArray[indexSrc].endpoint = bdb_reportingClusterEndpointArray[indexDest].endpoint;
   \                     ??CrossCallReturnLabel_219:
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000029   A3           INC       DPTR
   \   00002A   12....       LCALL     ?Subroutine73 & 0xFFFF
    989          	bdb_reportingClusterEndpointArray[indexSrc].consolidatedMaxReportInt = bdb_reportingClusterEndpointArray[indexDest].consolidatedMaxReportInt;
   \                     ??CrossCallReturnLabel_129:
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000032   12....       LCALL     ?Subroutine10 & 0xFFFF
    990          	bdb_reportingClusterEndpointArray[indexSrc].consolidatedMinReportInt = bdb_reportingClusterEndpointArray[indexDest].consolidatedMinReportInt;
   \                     ??CrossCallReturnLabel_4:
   \   000035   12....       LCALL     ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000038   12....       LCALL     ?Subroutine10 & 0xFFFF
    991          	bdb_reportingClusterEndpointArray[indexSrc].timeSinceLastReport = bdb_reportingClusterEndpointArray[indexDest].timeSinceLastReport;
   \                     ??CrossCallReturnLabel_5:
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000040   A3           INC       DPTR
   \   000041   12....       LCALL     ??Subroutine106_0 & 0xFFFF
    992          	bdb_reportingClusterEndpointArray[indexSrc].attrLinkedList = bdb_reportingClusterEndpointArray[indexDest].attrLinkedList;
   \                     ??CrossCallReturnLabel_222:
   \   000044   EE           MOV       A,R6
   \   000045   240A         ADD       A,#0xa
   \   000047   F8           MOV       R0,A
   \   000048   E4           CLR       A
   \   000049   3F           ADDC      A,R7
   \   00004A   F9           MOV       R1,A
   \   00004B   8882         MOV       DPL,R0
   \   00004D   F583         MOV       DPH,A
   \   00004F   EA           MOV       A,R2
   \   000050   240A         ADD       A,#0xa
   \   000052   FC           MOV       R4,A
   \   000053   E4           CLR       A
   \   000054   3B           ADDC      A,R3
   \   000055   FD           MOV       R5,A
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    993          	bdb_reportingClusterEndpointArray[indexSrc].flags = bdb_reportingClusterEndpointArray[indexDest].flags;
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000062   F0           MOVX      @DPTR,A
    994          	bdb_linkedListAttrClearList(&bdb_reportingClusterEndpointArray[indexDest].attrLinkedList);
   \   000063   8882         MOV       DPL,R0
   \   000065   12....       LCALL     ?Subroutine15 & 0xFFFF
    995          }
   \                     ??CrossCallReturnLabel_9:
   \   000068                REQUIRE ?Subroutine5
   \   000068                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine97_0
   \   000002                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E8           MOV       A,R0
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   E9           MOV       A,R1
   \   000008   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine98_0
   \   000001                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   75F00D       MOV       B,#0xd
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   A9F0         MOV       R1,B
   \   000007   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   000009   28           ADD       A,R0
   \   00000A   F8           MOV       R0,A
   \   00000B   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
    996          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    997          static uint8 bdb_clusterEndpointArrayUpdateAt(uint8 index, uint16 newTimeSinceLastReport, uint8 markHasBinding, uint8 markNoNextIncrement)
   \                     bdb_clusterEndpointArrayUpdateAt:
    998          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    999          	if (index >= bdb_reportingClusterEndpointArrayCount)
   \   000005   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   E9           MOV       A,R1
   \   00000B   C3           CLR       C
   \   00000C   98           SUBB      A,R0
   \   00000D   4004         JC        ??bdb_clusterEndpointArrayUpdateAt_0
   1000          		return BDBREPORTING_ERROR;
   \   00000F   7901         MOV       R1,#0x1
   \   000011   803A         SJMP      ??bdb_clusterEndpointArrayUpdateAt_1
   1001          	bdb_reportingClusterEndpointArray[index].timeSinceLastReport = newTimeSinceLastReport;
   \                     ??bdb_clusterEndpointArrayUpdateAt_0:
   \   000013   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000016   8882         MOV       DPL,R0
   \   000018   F583         MOV       DPH,A
   \   00001A   12....       LCALL     ?Subroutine16 & 0xFFFF
   1002          	if (markHasBinding != BDBREPORTING_IGNORE) {
   \                     ??CrossCallReturnLabel_167:
   \   00001D   74FF         MOV       A,#-0x1
   \   00001F   6C           XRL       A,R4
   \   000020   6012         JZ        ??bdb_clusterEndpointArrayUpdateAt_2
   1003          		if (markHasBinding == BDBREPORTING_TRUE)
   \   000022   7401         MOV       A,#0x1
   \   000024   6C           XRL       A,R4
   \   000025   8882         MOV       DPL,R0
   \   000027   8983         MOV       DPH,R1
   \   000029   7005         JNZ       ??bdb_clusterEndpointArrayUpdateAt_3
   1004          			FLAGS_TURNONFLAG(bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_HASBINDING_FLAG_MASK);
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   D2E0         SETB      0xE0 /* A   */.0
   \   00002E   8003         SJMP      ??bdb_clusterEndpointArrayUpdateAt_4
   1005          		else
   1006          			FLAGS_TURNOFFFLAG(bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_HASBINDING_FLAG_MASK);
   \                     ??bdb_clusterEndpointArrayUpdateAt_3:
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C2E0         CLR       0xE0 /* A   */.0
   \                     ??bdb_clusterEndpointArrayUpdateAt_4:
   \   000033   F0           MOVX      @DPTR,A
   1007          	}
   1008          	if (markNoNextIncrement != BDBREPORTING_IGNORE) {
   \                     ??bdb_clusterEndpointArrayUpdateAt_2:
   \   000034   74FF         MOV       A,#-0x1
   \   000036   6D           XRL       A,R5
   \   000037   6012         JZ        ??bdb_clusterEndpointArrayUpdateAt_5
   1009          		if (markNoNextIncrement == BDBREPORTING_TRUE)
   \   000039   7401         MOV       A,#0x1
   \   00003B   6D           XRL       A,R5
   \   00003C   8882         MOV       DPL,R0
   \   00003E   8983         MOV       DPH,R1
   \   000040   7005         JNZ       ??bdb_clusterEndpointArrayUpdateAt_6
   1010          			FLAGS_TURNONFLAG(bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK);
   \   000042   E0           MOVX      A,@DPTR
   \   000043   D2E1         SETB      0xE0 /* A   */.1
   \   000045   8003         SJMP      ??bdb_clusterEndpointArrayUpdateAt_7
   1011          		else
   1012          			FLAGS_TURNOFFFLAG(bdb_reportingClusterEndpointArray[index].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK);
   \                     ??bdb_clusterEndpointArrayUpdateAt_6:
   \   000047   E0           MOVX      A,@DPTR
   \   000048   C2E1         CLR       0xE0 /* A   */.1
   \                     ??bdb_clusterEndpointArrayUpdateAt_7:
   \   00004A   F0           MOVX      @DPTR,A
   1013          	}
   1014          	return BDBREPORTING_SUCCESS;
   \                     ??bdb_clusterEndpointArrayUpdateAt_5:
   \   00004B   7900         MOV       R1,#0x0
   \                     ??bdb_clusterEndpointArrayUpdateAt_1:
   \   00004D                REQUIRE ?Subroutine1
   \   00004D                ; // Fall through to label ?Subroutine1
   1015          }
   1016          
   1017          static void bdb_clusterEndpointArrayFreeAll( )
   1018          {
   1019          	uint8 i;
   1020          	uint8 numElements = bdb_reportingClusterEndpointArrayCount;
   1021          
   1022          	for (i = 0; i < numElements; i++)
   1023          		bdb_clusterEndpointArrayRemoveAt(0);
   1024          }
   1025          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          static uint8 bdb_clusterEndpointArraySearch(uint8 endpoint, uint16 cluster)
   \                     bdb_clusterEndpointArraySearch:
   1027          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   1028          	uint8 i;
   1029          	uint8 foundIndex = BDBREPORTING_INVALIDINDEX;
   \   000007   79FF         MOV       R1,#-0x1
   1030          
   1031          	for (i = 0; i < bdb_reportingClusterEndpointArrayCount; i++) {
   \   000009   7800         MOV       R0,#0x0
   \   00000B   8001         SJMP      ??bdb_clusterEndpointArraySearch_0
   \                     ??bdb_clusterEndpointArraySearch_1:
   \   00000D   08           INC       R0
   \                     ??bdb_clusterEndpointArraySearch_0:
   \   00000E   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FC           MOV       R4,A
   \   000013   E8           MOV       A,R0
   \   000014   C3           CLR       C
   \   000015   9C           SUBB      A,R4
   \   000016   502A         JNC       ??bdb_clusterEndpointArraySearch_2
   1032          		if (bdb_reportingClusterEndpointArray[i].endpoint == endpoint && bdb_reportingClusterEndpointArray[i].cluster == cluster) {
   \   000018   E8           MOV       A,R0
   \   000019   75F00D       MOV       B,#0xd
   \   00001C   A4           MUL       AB
   \   00001D   FC           MOV       R4,A
   \   00001E   ADF0         MOV       R5,B
   \   000020   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   000022   2C           ADD       A,R4
   \   000023   FC           MOV       R4,A
   \   000024   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000026   3D           ADDC      A,R5
   \   000027   FD           MOV       R5,A
   \   000028   8C82         MOV       DPL,R4
   \   00002A   F583         MOV       DPH,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6F           XRL       A,R7
   \   00002F   70DC         JNZ       ??bdb_clusterEndpointArraySearch_1
   \   000031   8C82         MOV       DPL,R4
   \   000033   8D83         MOV       DPH,R5
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   6A           XRL       A,R2
   \   000039   7003         JNZ       ??bdb_clusterEndpointArraySearch_3
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6B           XRL       A,R3
   \                     ??bdb_clusterEndpointArraySearch_3:
   \   00003E   70CD         JNZ       ??bdb_clusterEndpointArraySearch_1
   1033          			foundIndex = i;
   \   000040   E8           MOV       A,R0
   \   000041   F9           MOV       R1,A
   1034          			break;
   1035          		}
   1036          	}
   1037          	return foundIndex;
   \                     ??bdb_clusterEndpointArraySearch_2:
   \   000042   80..         SJMP      ?Subroutine1
   1038          }
   1039          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1040          static void bdb_clusterEndpointArrayIncrementAll(uint16 timeSinceLastReportIncrement, uint8 CheckNoIncrementFlag)
   \                     bdb_clusterEndpointArrayIncrementAll:
   1041          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   1042          	uint8 i;
   1043          	uint8 doIncrement;
   1044          
   1045          	for (i = 0; i < bdb_reportingClusterEndpointArrayCount; i++) {
   \   000007   75..00       MOV       ?V2,#0x0
   \   00000A   801C         SJMP      ??bdb_clusterEndpointArrayIncrementAll_0
   1046          		doIncrement = BDBREPORTING_FALSE;
   1047          		if (FLAGS_CHECKFLAG(bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_HASBINDING_FLAG_MASK) == BDBREPORTING_TRUE) {
   1048          			//Only do with valid entries (HasBinding==true)
   1049          			if (CheckNoIncrementFlag == BDBREPORTING_FALSE) {
   1050          				doIncrement = BDBREPORTING_TRUE;
   1051          			} else {
   1052          				if (FLAGS_CHECKFLAG(bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK) == BDBREPORTING_FALSE)
   1053          					doIncrement = BDBREPORTING_TRUE;
   1054          			}
   1055          			if (doIncrement == BDBREPORTING_TRUE) {
   1056          				if (bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_NOPERIODIC && bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt != BDBREPORTING_REPORTOFF) {
   1057          					bdb_reportingClusterEndpointArray[i].timeSinceLastReport = (bdb_reportingClusterEndpointArray[i].timeSinceLastReport + timeSinceLastReportIncrement
   1058          												    > bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt) ?
   1059          												   bdb_reportingClusterEndpointArray[i].consolidatedMaxReportInt :
   1060          												   bdb_reportingClusterEndpointArray[i].timeSinceLastReport + timeSinceLastReportIncrement;
   \                     ??bdb_clusterEndpointArrayIncrementAll_1:
   \   00000C   8E82         MOV       DPL,R6
   \   00000E   8F83         MOV       DPH,R7
   \   000010   E0           MOVX      A,@DPTR
   \   000011   2A           ADD       A,R2
   \   000012   FC           MOV       R4,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   3B           ADDC      A,R3
   \                     ??bdb_clusterEndpointArrayIncrementAll_2:
   \   000016   FD           MOV       R5,A
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   12....       LCALL     ??Subroutine99_0 & 0xFFFF
   1061          				}
   1062          			}
   1063          			FLAGS_TURNOFFFLAG(bdb_reportingClusterEndpointArray[i].flags, BDBREPORTING_NONEXTINCREMENT_FLAG_MASK); //Always turn off, one shot functionality
   \                     ??CrossCallReturnLabel_183:
   \   00001E   8882         MOV       DPL,R0
   \   000020   8983         MOV       DPH,R1
   \   000022   E0           MOVX      A,@DPTR
   \   000023   C2E1         CLR       0xE0 /* A   */.1
   \   000025   F0           MOVX      @DPTR,A
   \                     ??bdb_clusterEndpointArrayIncrementAll_3:
   \   000026   05..         INC       ?V2
   \                     ??bdb_clusterEndpointArrayIncrementAll_0:
   \   000028   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   E5..         MOV       A,?V2
   \   00002F   C3           CLR       C
   \   000030   98           SUBB      A,R0
   \   000031   5055         JNC       ??bdb_clusterEndpointArrayIncrementAll_4
   \   000033   E5..         MOV       A,?V2
   \   000035   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000038   50EC         JNC       ??bdb_clusterEndpointArrayIncrementAll_3
   \   00003A   E5..         MOV       A,?V3
   \   00003C   6005         JZ        ??bdb_clusterEndpointArrayIncrementAll_5
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   A2E1         MOV       C,0xE0 /* A   */.1
   \   000041   40DB         JC        ??CrossCallReturnLabel_183
   \                     ??bdb_clusterEndpointArrayIncrementAll_5:
   \   000043   E8           MOV       A,R0
   \   000044   2406         ADD       A,#0x6
   \   000046   FC           MOV       R4,A
   \   000047   E4           CLR       A
   \   000048   39           ADDC      A,R1
   \   000049   FD           MOV       R5,A
   \   00004A   8C82         MOV       DPL,R4
   \   00004C   F583         MOV       DPH,A
   \   00004E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000051   60CB         JZ        ??CrossCallReturnLabel_183
   \   000053   74FF         MOV       A,#-0x1
   \   000055   65..         XRL       A,?V0
   \   000057   7004         JNZ       ??bdb_clusterEndpointArrayIncrementAll_6
   \   000059   74FF         MOV       A,#-0x1
   \   00005B   65..         XRL       A,?V1
   \                     ??bdb_clusterEndpointArrayIncrementAll_6:
   \   00005D   60BF         JZ        ??CrossCallReturnLabel_183
   \   00005F   E8           MOV       A,R0
   \   000060   2408         ADD       A,#0x8
   \   000062   FE           MOV       R6,A
   \   000063   E4           CLR       A
   \   000064   39           ADDC      A,R1
   \   000065   FF           MOV       R7,A
   \   000066   8E82         MOV       DPL,R6
   \   000068   F583         MOV       DPH,A
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   2A           ADD       A,R2
   \   00006C   F5..         MOV       ?V4,A
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   3B           ADDC      A,R3
   \   000071   F5..         MOV       ?V5,A
   \   000073   C3           CLR       C
   \   000074   E5..         MOV       A,?V0
   \   000076   95..         SUBB      A,?V4
   \   000078   E5..         MOV       A,?V1
   \   00007A   95..         SUBB      A,?V5
   \   00007C   508E         JNC       ??bdb_clusterEndpointArrayIncrementAll_1
   \   00007E   8C82         MOV       DPL,R4
   \   000080   8D83         MOV       DPH,R5
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FC           MOV       R4,A
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   808E         SJMP      ??bdb_clusterEndpointArrayIncrementAll_2
   1064          		}
   1065          	}
   1066          }
   \                     ??bdb_clusterEndpointArrayIncrementAll_4:
   \   000088   7F06         MOV       R7,#0x6
   \   00008A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   75F00D       MOV       B,#0xd
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   A9F0         MOV       R1,B
   \   000007   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   000009   28           ADD       A,R0
   \   00000A   F8           MOV       R0,A
   \   00000B   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   F9           MOV       R1,A
   \   00000F   8882         MOV       DPL,R0
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   A2E0         MOV       C,0xE0 /* A   */.0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   E5..         MOV       A,?V0
   \   000005   45..         ORL       A,?V1
   \   000007   22           RET
   1067          
   1068          /*
   1069           * End: Cluster-endpoint array live data methods
   1070           */
   1071          
   1072          
   1073          /*
   1074           * Begin: Single linked list default attr cfg records methods
   1075           */
   1076          static void bdb_repAttrDefaultCfgRecordInitValues(bdbReportAttrDefaultCfgData_t *item)
   1077          {
   1078          	uint8 i;
   1079          
   1080          	for (i = 0; i < BDBREPORTING_MAX_ANALOG_ATTR_SIZE; i++)
   1081          		item->reportableChange[i] = 0x00;
   1082          	item->attrID = 0x0000;
   1083          	item->endpoint = 0xFF;
   1084          	item->cluster = 0xFFFF;
   1085          	item->maxReportInt = 0x0000;
   1086          	item->minReportInt = 0x0000;
   1087          }
   1088          
   1089          static void bdb_repAttrDefaultCfgRecordsLinkedListInit(bdbRepAttrDefaultCfgRecordLinkedList_t *list)
   1090          {
   1091          	list->head = NULL;
   1092          	list->numItems = 0;
   1093          }
   1094          
   1095          static uint8 bdb_repAttrDefaultCfgRecordsLinkedListAdd(bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t *data)
   1096          {
   1097          	bdbRepAttrDefaultCfgRecordLinkedListItem_t *newItem = (bdbRepAttrDefaultCfgRecordLinkedListItem_t *)osal_mem_alloc(sizeof(bdbRepAttrDefaultCfgRecordLinkedListItem_t));
   1098          
   1099          	if (newItem == NULL)
   1100          		return BDBREPORTING_ERROR;
   1101          	newItem->data = data;
   1102          	newItem->next = list->head;
   1103          	list->head = newItem;
   1104          	list->numItems++;
   1105          	return BDBREPORTING_SUCCESS;
   1106          }
   1107          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1108          static bdbRepAttrDefaultCfgRecordLinkedListItem_t *bdb_repAttrDefaultCfgRecordsLinkedListSearch(bdbRepAttrDefaultCfgRecordLinkedList_t *list, bdbReportAttrDefaultCfgData_t searchdata)
   \                     bdb_repAttrDefaultCfgRecordsLinkedListSearch:
   1109          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1110          	bdbRepAttrDefaultCfgRecordLinkedListItem_t *cur = list->head;
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   8005         SJMP      ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_0
   1111          
   1112          	while (cur != NULL) {
   1113          		if (EQUAL_LLISTCFGATTRITEMDATA((*(cur->data)), searchdata))
   1114          			return cur;
   1115          		cur = cur->next;
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1:
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_0:
   \   00000F   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000012   603F         JZ        ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_2
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FC           MOV       R4,A
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6C           XRL       A,R4
   \   000025   70E3         JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
   \   000027   8882         MOV       DPL,R0
   \   000029   8983         MOV       DPH,R1
   \   00002B   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6C           XRL       A,R4
   \   000035   7003         JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_3
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6D           XRL       A,R5
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_3:
   \   00003A   70CE         JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
   \   00003C   8882         MOV       DPL,R0
   \   00003E   8983         MOV       DPH,R1
   \   000040   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000043   7401         MOV       A,#0x1
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E0           MOVX      A,@DPTR
   \   000049   68           XRL       A,R0
   \   00004A   7003         JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_4
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   69           XRL       A,R1
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_4:
   \   00004F   70B9         JNZ       ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_1
   \   000051   8004         SJMP      ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_5
   1116          	}
   1117          	return NULL;
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_2:
   \   000053   7A00         MOV       R2,#0x0
   \   000055   7B00         MOV       R3,#0x0
   \                     ??bdb_repAttrDefaultCfgRecordsLinkedListSearch_5:
   \   000057   80..         SJMP      ??Subroutine102_0
   1118          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine101_0
   \   000001                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET
   1119          
   1120          static bdbReportAttrDefaultCfgData_t *bdb_repAttrDefaultCfgRecordsLinkedListRemove(bdbRepAttrDefaultCfgRecordLinkedList_t *list)
   1121          {
   1122          	bdbReportAttrDefaultCfgData_t *resdata = NULL;
   1123          	bdbRepAttrDefaultCfgRecordLinkedListItem_t *cur = list->head;
   1124          
   1125          	if (list->head == NULL)
   1126          		return NULL;
   1127          	list->head = cur->next;
   1128          	resdata = cur->data;
   1129          	osal_mem_free(cur);
   1130          	list->numItems--;
   1131          	return resdata;
   1132          }
   1133          
   1134          static uint8 bdb_repAttrDefaultCfgRecordsLinkedListFreeAll(bdbRepAttrDefaultCfgRecordLinkedList_t *list)
   1135          {
   1136          	bdbReportAttrDefaultCfgData_t *toremovedata;
   1137          
   1138          	while (list->head != NULL) {
   1139          		toremovedata = bdb_repAttrDefaultCfgRecordsLinkedListRemove(list);
   1140          		osal_mem_free(toremovedata);
   1141          	}
   1142          	return BDBREPORTING_SUCCESS;
   1143          }
   1144          
   1145          /*
   1146           * End: Single linked list default attr cfg records methods
   1147           */
   1148          
   1149          
   1150          /*
   1151           * Begin: Reporting attr configuration array methods
   1152           */
   1153          static void bdb_repAttrCfgRecordsArrayInit(void)
   1154          {
   1155          	bdb_reportingAttrCfgRecordsArray = NULL;
   1156          	bdb_reportingAttrCfgRecordsArrayCount = 0;
   1157          }
   1158          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          static uint8 bdb_repAttrCfgRecordsArrayCreate(uint8 maxNumRepAttrConfRecords)
   \                     bdb_repAttrCfgRecordsArrayCreate:
   1160          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1161          	if (maxNumRepAttrConfRecords == 0)
   \   000006   6026         JZ        ??bdb_repAttrCfgRecordsArrayCreate_0
   1162          		return BDBREPORTING_SUCCESS;
   1163          
   1164          	bdb_reportingAttrCfgRecordsArrayMaxSize = maxNumRepAttrConfRecords;
   \   000008   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayMaxSize
   \   00000B   F0           MOVX      @DPTR,A
   1165          	bdb_reportingAttrCfgRecordsArray = (bdbReportAttrCfgData_t *)osal_mem_alloc(sizeof(bdbReportAttrCfgData_t) * bdb_reportingAttrCfgRecordsArrayMaxSize);
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C   75F015       MOV       B,#0x15
   \   00000F   A4           MUL       AB
   \   000010   FA           MOV       R2,A
   \   000011   ABF0         MOV       R3,B
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000019   12....       LCALL     ??Subroutine96_0 & 0xFFFF
   1166          	bdb_reportingAttrCfgRecordsArrayCount = 0;
   \                     ??CrossCallReturnLabel_162:
   \   00001C   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00001F   E4           CLR       A
   \   000020   F0           MOVX      @DPTR,A
   1167          	if (bdb_reportingAttrCfgRecordsArray == NULL)
   \   000021   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray + 1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   EA           MOV       A,R2
   \   000027   49           ORL       A,R1
   \   000028   7004         JNZ       ??bdb_repAttrCfgRecordsArrayCreate_0
   1168          		return BDBREPORTING_ERROR;
   \   00002A   7901         MOV       R1,#0x1
   \   00002C   8002         SJMP      ??bdb_repAttrCfgRecordsArrayCreate_1
   1169          	return BDBREPORTING_SUCCESS;
   \                     ??bdb_repAttrCfgRecordsArrayCreate_0:
   \   00002E   7900         MOV       R1,#0x0
   \                     ??bdb_repAttrCfgRecordsArrayCreate_1:
   \   000030   02....       LJMP      ?Subroutine1 & 0xFFFF
   1170          }
   1171          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1172          static uint8 bdb_repAttrCfgRecordsArrayAdd(uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, uint16 maxReportInt, uint8 reportableChange[],
   \                     bdb_repAttrCfgRecordsArrayAdd:
   1173          					   uint16 defMinReportInt, uint16 defMaxReportInt, uint8 defReportChange[])
   1174          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   1175          	if (bdb_reportingAttrCfgRecordsArray == NULL)
   \   00000B   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00000E   600D         JZ        ??bdb_repAttrCfgRecordsArrayAdd_0
   1176          		return BDBREPORTING_ERROR;
   1177          	if (bdb_reportingAttrCfgRecordsArrayCount >= bdb_reportingAttrCfgRecordsArrayMaxSize)
   \   000010   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayMaxSize
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F8           MOV       R0,A
   \   000015   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000018   E0           MOVX      A,@DPTR
   \   000019   C3           CLR       C
   \   00001A   98           SUBB      A,R0
   \   00001B   4005         JC        ??bdb_repAttrCfgRecordsArrayAdd_1
   1178          		return BDBREPORTING_ERROR;
   \                     ??bdb_repAttrCfgRecordsArrayAdd_0:
   \   00001D   7901         MOV       R1,#0x1
   \   00001F   02....       LJMP      ??CrossCallReturnLabel_98 & 0xFFFF
   1179          
   1180          	bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].endpoint = endpoint;
   \                     ??bdb_repAttrCfgRecordsArrayAdd_1:
   \   000022   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000025   8A82         MOV       DPL,R2
   \   000027   F583         MOV       DPH,A
   \   000029   EE           MOV       A,R6
   \   00002A   F0           MOVX      @DPTR,A
   1181          	bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].cluster = cluster;
   \   00002B   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00002E   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   39           ADDC      A,R1
   \   000035   F9           MOV       R1,A
   \   000036   E8           MOV       A,R0
   \   000037   FA           MOV       R2,A
   \   000038   E9           MOV       A,R1
   \   000039   FB           MOV       R3,A
   \   00003A   8882         MOV       DPL,R0
   \   00003C   F583         MOV       DPH,A
   \   00003E   A3           INC       DPTR
   \   00003F   E5..         MOV       A,?V0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E5..         MOV       A,?V1
   \   000045   12....       LCALL     ?Subroutine17 & 0xFFFF
   1182          	bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].attrID = attrID;
   \                     ??CrossCallReturnLabel_11:
   \   000048   12....       LCALL     ??Subroutine99_0 & 0xFFFF
   1183          	bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].minReportInt = minReportInt;
   \                     ??CrossCallReturnLabel_184:
   \   00004B   740B         MOV       A,#0xb
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000053   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   1184          	bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].maxReportInt = maxReportInt;
   \                     ??CrossCallReturnLabel_221:
   \   000056   740D         MOV       A,#0xd
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00005E   740F         MOV       A,#0xf
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine19 & 0xFFFF
   1185          	if (reportableChange != NULL)
   \                     ??CrossCallReturnLabel_14:
   \   000066   6019         JZ        ??bdb_repAttrCfgRecordsArrayAdd_2
   1186          		osal_memcpy(bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].reportableChange, reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \   000068                ; Setup parameters for call to function osal_memcpy
   \   000068   75..00       MOV       ?V2,#0x0
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000070   7C04         MOV       R4,#0x4
   \   000072   7D00         MOV       R5,#0x0
   \   000074   EA           MOV       A,R2
   \   000075   240D         ADD       A,#0xd
   \   000077   FA           MOV       R2,A
   \   000078   5001         JNC       ??bdb_repAttrCfgRecordsArrayAdd_3
   \   00007A   0B           INC       R3
   \                     ??bdb_repAttrCfgRecordsArrayAdd_3:
   \   00007B   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
   1187          	bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultMinReportInt = defMinReportInt;
   \                     ??bdb_repAttrCfgRecordsArrayAdd_2:
   \   000081   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000084   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000087   FB           MOV       R3,A
   \   000088   7411         MOV       A,#0x11
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000090   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   1188          	bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultMaxReportInt = defMaxReportInt;
   \                     ??CrossCallReturnLabel_223:
   \   000093   7413         MOV       A,#0x13
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00009B   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00009E   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000A1   7415         MOV       A,#0x15
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL     ?Subroutine19 & 0xFFFF
   1189          	if (defReportChange != NULL)
   \                     ??CrossCallReturnLabel_15:
   \   0000A9   6019         JZ        ??bdb_repAttrCfgRecordsArrayAdd_4
   1190          		osal_memcpy(bdb_reportingAttrCfgRecordsArray[bdb_reportingAttrCfgRecordsArrayCount].defaultReportableChange, defReportChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \   0000AB                ; Setup parameters for call to function osal_memcpy
   \   0000AB   75..00       MOV       ?V2,#0x0
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B3   7C04         MOV       R4,#0x4
   \   0000B5   7D00         MOV       R5,#0x0
   \   0000B7   EA           MOV       A,R2
   \   0000B8   2411         ADD       A,#0x11
   \   0000BA   FA           MOV       R2,A
   \   0000BB   5001         JNC       ??bdb_repAttrCfgRecordsArrayAdd_5
   \   0000BD   0B           INC       R3
   \                     ??bdb_repAttrCfgRecordsArrayAdd_5:
   \   0000BE   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   1191          	bdb_reportingAttrCfgRecordsArrayCount++;
   \                     ??bdb_repAttrCfgRecordsArrayAdd_4:
   \   0000C4   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   0000C7   12....       LCALL     ?Subroutine56 & 0xFFFF
   1192          	return BDBREPORTING_SUCCESS;
   \                     ??CrossCallReturnLabel_98:
   \   0000CA   7F03         MOV       R7,#0x3
   \   0000CC   02....       LJMP      ?BANKED_LEAVE_XDATA
   1193          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   39           ADDC      A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   75F015       MOV       B,#0x15
   \   000004   A4           MUL       AB
   \   000005   F8           MOV       R0,A
   \   000006   A9F0         MOV       R1,B
   \   000008   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   28           ADD       A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000003                REQUIRE ??Subroutine103_0
   \   000003                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
   1194          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1195          static void bdb_repAttrCfgRecordsArrayFreeAll(void)
   \                     bdb_repAttrCfgRecordsArrayFreeAll:
   1196          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1197          	if (bdb_reportingAttrCfgRecordsArray == NULL)
   \   000004   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000007   6014         JZ        ??bdb_repAttrCfgRecordsArrayFreeAll_0
   1198          		return;
   1199          	osal_mem_free(bdb_reportingAttrCfgRecordsArray);
   \   000009                ; Setup parameters for call to function osal_mem_free
   \   000009   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00000C   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00000F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1200          	bdb_reportingAttrCfgRecordsArrayCount = 0;
   \   000012   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
   1201          	bdb_reportingAttrCfgRecordsArray = NULL;
   \   000017   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   1202          }
   \                     ??bdb_repAttrCfgRecordsArrayFreeAll_0:
   \   00001D   02....       LJMP      ??Subroutine102_0 & 0xFFFF
   1203          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1204          static uint8 bdb_repAttrCfgRecordsArraySearch(uint8 endpoint, uint16 cluster, uint16 attrID)
   \                     bdb_repAttrCfgRecordsArraySearch:
   1205          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   1206          	uint8 i;
   1207          
   1208          	if (bdb_reportingAttrCfgRecordsArray == NULL)
   \   000007   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00000A   6034         JZ        ??bdb_repAttrCfgRecordsArraySearch_0
   1209          		return BDBREPORTING_INVALIDINDEX;
   1210          	for (i = 0; i < bdb_reportingAttrCfgRecordsArrayCount; i++)
   \   00000C   7E00         MOV       R6,#0x0
   \   00000E   8001         SJMP      ??bdb_repAttrCfgRecordsArraySearch_1
   \                     ??bdb_repAttrCfgRecordsArraySearch_2:
   \   000010   0E           INC       R6
   \                     ??bdb_repAttrCfgRecordsArraySearch_1:
   \   000011   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000014   12....       LCALL     ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000017   5027         JNC       ??bdb_repAttrCfgRecordsArraySearch_0
   1211          		if (bdb_reportingAttrCfgRecordsArray[i].endpoint == endpoint && bdb_reportingAttrCfgRecordsArray[i].cluster == cluster && bdb_reportingAttrCfgRecordsArray[i].attrID == attrID)
   \   000019   EE           MOV       A,R6
   \   00001A   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   65..         XRL       A,?V0
   \   000020   70EE         JNZ       ??bdb_repAttrCfgRecordsArraySearch_2
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6A           XRL       A,R2
   \   000025   7003         JNZ       ??bdb_repAttrCfgRecordsArraySearch_3
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6B           XRL       A,R3
   \                     ??bdb_repAttrCfgRecordsArraySearch_3:
   \   00002A   70E4         JNZ       ??bdb_repAttrCfgRecordsArraySearch_2
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6C           XRL       A,R4
   \   000035   7003         JNZ       ??bdb_repAttrCfgRecordsArraySearch_4
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6D           XRL       A,R5
   \                     ??bdb_repAttrCfgRecordsArraySearch_4:
   \   00003A   70D4         JNZ       ??bdb_repAttrCfgRecordsArraySearch_2
   1212          			return i;
   \   00003C   EE           MOV       A,R6
   \   00003D   F9           MOV       R1,A
   \   00003E   8002         SJMP      ??bdb_repAttrCfgRecordsArraySearch_5
   1213          	return BDBREPORTING_INVALIDINDEX;
   \                     ??bdb_repAttrCfgRecordsArraySearch_0:
   \   000040   79FF         MOV       R1,#-0x1
   \                     ??bdb_repAttrCfgRecordsArraySearch_5:
   \   000042   02....       LJMP      ?Subroutine1 & 0xFFFF
   1214          }
   1215          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1216          static uint8 bdb_repAttrCfgRecordsArrayConsolidateValues(uint8 endpoint, uint16 cluster, uint16 *consolidatedMinReportInt, uint16 *consolidatedMaxReportInt)
   \                     bdb_repAttrCfgRecordsArrayConsolidateValues:
   1217          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   1218          	uint8 i;
   1219          
   1220          	*consolidatedMinReportInt = 0xFFFF;
   \   000007   8C82         MOV       DPL,R4
   \   000009   8D83         MOV       DPH,R5
   \   00000B   74FF         MOV       A,#-0x1
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   7410         MOV       A,#0x10
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine32 & 0xFFFF
   1221          	*consolidatedMaxReportInt = 0xFFFF;
   \                     ??CrossCallReturnLabel_45:
   \   000018   74FF         MOV       A,#-0x1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   1222          	uint8 foundAttr = 0;
   \   00001D   75..00       MOV       ?V2,#0x0
   1223          	if (bdb_reportingAttrCfgRecordsArray == NULL)
   \   000020   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000023   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000026   4F           ORL       A,R7
   \   000027   7003         JNZ       $+5
   \   000029   02....       LJMP      ??bdb_repAttrCfgRecordsArrayConsolidateValues_0 & 0xFFFF
   1224          		return BDBREPORTING_ERROR;
   1225          	for (i = 0; i < bdb_reportingAttrCfgRecordsArrayCount; i++) {
   \   00002C   75..00       MOV       ?V3,#0x0
   \   00002F   02....       LJMP      ??bdb_repAttrCfgRecordsArrayConsolidateValues_1 & 0xFFFF
   1226          		if (bdb_reportingAttrCfgRecordsArray[i].endpoint == endpoint && bdb_reportingAttrCfgRecordsArray[i].cluster == cluster) {
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_2:
   \   000032   E5..         MOV       A,?V3
   \   000034   75F015       MOV       B,#0x15
   \   000037   A4           MUL       AB
   \   000038   FE           MOV       R6,A
   \   000039   85F0..       MOV       ?V0,B
   \   00003C   AF..         MOV       R7,?V0
   \   00003E   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000041   E0           MOVX      A,@DPTR
   \   000042   2E           ADD       A,R6
   \   000043   FE           MOV       R6,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   3F           ADDC      A,R7
   \   000047   FF           MOV       R7,A
   \   000048   8E82         MOV       DPL,R6
   \   00004A   F583         MOV       DPH,A
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   65..         XRL       A,?V4
   \   00004F   7062         JNZ       ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   6A           XRL       A,R2
   \   000054   7003         JNZ       ??bdb_repAttrCfgRecordsArrayConsolidateValues_4
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   6B           XRL       A,R3
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_4:
   \   000059   7058         JNZ       ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
   1227          			foundAttr++;
   \   00005B   05..         INC       ?V2
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F5..         MOV       ?V6,A
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F5..         MOV       ?V7,A
   \   00006D   8C82         MOV       DPL,R4
   \   00006F   8D83         MOV       DPH,R5
   \   000071   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000074   C3           CLR       C
   \   000075   E5..         MOV       A,?V6
   \   000077   95..         SUBB      A,?V0
   \   000079   E5..         MOV       A,?V7
   \   00007B   95..         SUBB      A,?V1
   \   00007D   500B         JNC       ??bdb_repAttrCfgRecordsArrayConsolidateValues_5
   1228          			//Consolidate min value
   1229          			if (bdb_reportingAttrCfgRecordsArray[i].minReportInt < *consolidatedMinReportInt)
   1230          				*consolidatedMinReportInt = bdb_reportingAttrCfgRecordsArray[i].minReportInt;
   \   00007F   8C82         MOV       DPL,R4
   \   000081   8D83         MOV       DPH,R5
   \   000083   E5..         MOV       A,?V6
   \   000085   F0           MOVX      @DPTR,A
   \   000086   A3           INC       DPTR
   \   000087   E5..         MOV       A,?V7
   \   000089   F0           MOVX      @DPTR,A
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_5:
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000098   8882         MOV       DPL,R0
   \   00009A   8983         MOV       DPH,R1
   \   00009C   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00009F   C3           CLR       C
   \   0000A0   E5..         MOV       A,?V0
   \   0000A2   9E           SUBB      A,R6
   \   0000A3   E5..         MOV       A,?V1
   \   0000A5   9F           SUBB      A,R7
   \   0000A6   500B         JNC       ??bdb_repAttrCfgRecordsArrayConsolidateValues_3
   1231          
   1232          			//Consolidate max value
   1233          			if (bdb_reportingAttrCfgRecordsArray[i].maxReportInt < *consolidatedMaxReportInt)
   1234          				*consolidatedMaxReportInt = bdb_reportingAttrCfgRecordsArray[i].maxReportInt;
   \   0000A8   8882         MOV       DPL,R0
   \   0000AA   8983         MOV       DPH,R1
   \   0000AC   E5..         MOV       A,?V0
   \   0000AE   F0           MOVX      @DPTR,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E5..         MOV       A,?V1
   \   0000B2   F0           MOVX      @DPTR,A
   1235          		}
   1236          	}
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_3:
   \   0000B3   05..         INC       ?V3
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_1:
   \   0000B5   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   FE           MOV       R6,A
   \   0000BA   E5..         MOV       A,?V3
   \   0000BC   C3           CLR       C
   \   0000BD   9E           SUBB      A,R6
   \   0000BE   5003         JNC       $+5
   \   0000C0   02....       LJMP      ??bdb_repAttrCfgRecordsArrayConsolidateValues_2 & 0xFFFF
   1237          	if (foundAttr == 0)
   \   0000C3   E5..         MOV       A,?V2
   \   0000C5   7004         JNZ       ??bdb_repAttrCfgRecordsArrayConsolidateValues_6
   1238          		return BDBREPORTING_ERROR;
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_0:
   \   0000C7   7901         MOV       R1,#0x1
   \   0000C9   8002         SJMP      ??bdb_repAttrCfgRecordsArrayConsolidateValues_7
   1239          	return BDBREPORTING_SUCCESS;
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_6:
   \   0000CB   7900         MOV       R1,#0x0
   \                     ??bdb_repAttrCfgRecordsArrayConsolidateValues_7:
   \   0000CD   02....       LJMP      ?Subroutine4 & 0xFFFF
   1240          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005                ; Setup parameters for call to function bdb_clusterEndpointArraySearch
   \   000005   EE           MOV       A,R6
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
   1241          
   1242          /*
   1243           * End: Reporting attr configuration array methods
   1244           */
   1245          
   1246          
   1247          /*
   1248           * Begin: Helper methods
   1249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1250          static uint8 bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray(void)
   \                     bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray:
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1252          	uint8 i;
   1253          	uint16 consolidatedMinReportInt = 0xFFFF;
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   74FF         MOV       A,#-0x1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   1254          	uint16 consolidatedMaxReportInt = 0xFFFF;
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   1255          	uint8 status;
   1256          	uint8 returnStatus = BDBREPORTING_SUCCESS;
   \   00001D   75..00       MOV       ?V11,#0x0
   1257          
   1258          	if (bdb_reportingAttrCfgRecordsArray == NULL)
   \   000020   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000023   7005         JNZ       ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_1
   1259          		return BDBREPORTING_ERROR;
   \   000025   7901         MOV       R1,#0x1
   \   000027   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_2 & 0xFFFF
   1260          	for (i = 0; i < bdb_reportingAttrCfgRecordsArrayCount; i++) {
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_1:
   \   00002A   75..00       MOV       ?V7,#0x0
   \   00002D   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_3 & 0xFFFF
   1261          		uint16 curEndpoint = bdb_reportingAttrCfgRecordsArray[i].endpoint;
   1262          		uint16 curCluster = bdb_reportingAttrCfgRecordsArray[i].cluster;
   1263          		//See if there is already a cluster endpoint item
   1264          		uint8 searchedIndex = bdb_clusterEndpointArraySearch(curEndpoint, curCluster);
   1265          		if (searchedIndex == BDBREPORTING_INVALIDINDEX) {
   1266          			//Not found, add entry
   1267          			status = bdb_repAttrCfgRecordsArrayConsolidateValues(curEndpoint, curCluster, &consolidatedMinReportInt, &consolidatedMaxReportInt);
   1268          			if (status == BDBREPORTING_SUCCESS) {
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_4:
   \   000030                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayConsolidateValues
   \   000030   A8..         MOV       R0,?XSP + 0
   \   000032   A9..         MOV       R1,?XSP + 1
   \   000034   88..         MOV       ?V4,R0
   \   000036   89..         MOV       ?V5,R1
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?XSTACK_DISP102_8
   \   000042   EE           MOV       A,R6
   \   000043   FA           MOV       R2,A
   \   000044   EF           MOV       A,R7
   \   000045   FB           MOV       R3,A
   \   000046   A9..         MOV       R1,?V0
   \   000048   12....       LCALL     `??bdb_repAttrCfgRecordsArrayConsolidateValues::`; Banked call to: bdb_repAttrCfgRecordsArrayConsolidateValues
   \   00004B   7402         MOV       A,#0x2
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   E9           MOV       A,R1
   \   000051   6003         JZ        $+5
   \   000053   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5 & 0xFFFF
   1269          				status = bdb_clusterEndpointArrayAdd(curEndpoint, curCluster, consolidatedMinReportInt, consolidatedMaxReportInt, 0);
   1270          				if (status == BDBREPORTING_SUCCESS) {
   \   000056                ; Setup parameters for call to function bdb_clusterEndpointArrayAdd
   \   000056   E4           CLR       A
   \   000057   F5..         MOV       ?V4,A
   \   000059   F5..         MOV       ?V5,A
   \   00005B   78..         MOV       R0,#?V4
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000068   7406         MOV       A,#0x6
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000070   EE           MOV       A,R6
   \   000071   FA           MOV       R2,A
   \   000072   EF           MOV       A,R7
   \   000073   FB           MOV       R3,A
   \   000074   A9..         MOV       R1,?V0
   \   000076   12....       LCALL     `??bdb_clusterEndpointArrayAdd::?relay`; Banked call to: bdb_clusterEndpointArrayAdd
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007E   E9           MOV       A,R1
   \   00007F   6003         JZ        $+5
   \   000081   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
   1271          					zclAttribute_t zclAttribute;
   1272          					uint8 status;
   1273          					//Add attr value
   1274          					bdbReportAttrLive_t *newItemData;
   1275          					newItemData = (bdbReportAttrLive_t *)osal_mem_alloc(sizeof(bdbReportAttrLive_t));
   \   000084                ; Setup parameters for call to function osal_mem_alloc
   \   000084   12....       LCALL     ?Subroutine67 & 0xFFFF
   1276          					if (newItemData == NULL) {
   \                     ??CrossCallReturnLabel_113:
   \   000087   7003         JNZ       $+5
   \   000089   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
   1277          						//Out of memory
   1278          						returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   1279          						break;
   1280          					}
   1281          					bdb_InitReportAttrLiveValues(newItemData);
   \   00008C                ; Setup parameters for call to function bdb_InitReportAttrLiveValues
   \   00008C   12....       LCALL     ?Subroutine7 & 0xFFFF
   1282          					newItemData->attrID = bdb_reportingAttrCfgRecordsArray[i].attrID;
   1283          					osal_memcpy(newItemData->reportableChange, bdb_reportingAttrCfgRecordsArray[i].reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \                     ??CrossCallReturnLabel_0:
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000092   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   1284          
   1285          					//Read the attribute to keep the table updated
   1286          					if (BDBREPORTING_TRUE == bdb_RepFindAttrEntry(curEndpoint, curCluster, newItemData->attrID, &zclAttribute))
   \   000098                ; Setup parameters for call to function bdb_RepFindAttrEntry
   \   000098   7404         MOV       A,#0x4
   \   00009A   12....       LCALL     ?XSTACK_DISP100_8
   \   00009D   88..         MOV       ?V2,R0
   \   00009F   89..         MOV       ?V3,R1
   \   0000A1   78..         MOV       R0,#?V2
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AC   E9           MOV       A,R1
   \   0000AD   6401         XRL       A,#0x1
   \   0000AF   7019         JNZ       ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_7
   1287          						osal_memcpy(newItemData->lastValueReported, zclAttribute.dataPtr, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   7408         MOV       A,#0x8
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BC   7C04         MOV       R4,#0x4
   \   0000BE   7D00         MOV       R5,#0x0
   \   0000C0   E5..         MOV       A,?V4
   \   0000C2   2402         ADD       A,#0x2
   \   0000C4   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0000C7   12....       LCALL     ?DEALLOC_XSTACK8
   1288          
   1289          					status = bdb_linkedListAttrAdd(&(bdb_reportingClusterEndpointArray[bdb_reportingClusterEndpointArrayCount - 1].attrLinkedList), newItemData);
   1290          					if (status == BDBREPORTING_ERROR) {
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_7:
   \   0000CA                ; Setup parameters for call to function bdb_linkedListAttrAdd
   \   0000CA   AC..         MOV       R4,?V4
   \   0000CC   AD..         MOV       R5,?V5
   \   0000CE   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   0000D1   12....       LCALL     ?Subroutine84 & 0xFFFF
   1291          						returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   1292          						break;
   1293          					}
   1294          				} else {
   1295          					//Out of memory,
   1296          					returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   1297          					break;
   1298          				}
   1299          			}
   1300          		} else {
   \                     ??CrossCallReturnLabel_146:
   \   0000D4   74..         MOV       A,#(bdb_reportingClusterEndpointArray + 253) & 0xff
   \   0000D6   28           ADD       A,R0
   \   0000D7   FA           MOV       R2,A
   \   0000D8   74..         MOV       A,#((bdb_reportingClusterEndpointArray - 3) >> 8) & 0xff
   \   0000DA   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000DD   7003         JNZ       $+5
   \   0000DF   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6 & 0xFFFF
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5:
   \   0000E2   05..         INC       ?V7
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_3:
   \   0000E4   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   F8           MOV       R0,A
   \   0000E9   E5..         MOV       A,?V7
   \   0000EB   C3           CLR       C
   \   0000EC   98           SUBB      A,R0
   \   0000ED   4003         JC        $+5
   \   0000EF   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_8 & 0xFFFF
   \   0000F2   E5..         MOV       A,?V7
   \   0000F4   75F015       MOV       B,#0x15
   \   0000F7   A4           MUL       AB
   \   0000F8   F5..         MOV       ?V2,A
   \   0000FA   E5F0         MOV       A,B
   \   0000FC   F5..         MOV       ?V3,A
   \   0000FE   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000101   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000104   E0           MOVX      A,@DPTR
   \   000105   F5..         MOV       ?V0,A
   \   000107   A3           INC       DPTR
   \   000108   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00010B   FA           MOV       R2,A
   \   00010C   EF           MOV       A,R7
   \   00010D   FB           MOV       R3,A
   \   00010E   A9..         MOV       R1,?V0
   \   000110   12....       LCALL     `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
   \   000113   E9           MOV       A,R1
   \   000114   F5..         MOV       ?V6,A
   \   000116   74FF         MOV       A,#-0x1
   \   000118   69           XRL       A,R1
   \   000119   7003         JNZ       $+5
   \   00011B   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_4 & 0xFFFF
   1301          			zclAttribute_t zclAttribute;
   1302          			uint8 status;
   1303          			//Entry found, just add attr data to linked list
   1304          			bdbReportAttrLive_t *newItemData;
   1305          			newItemData = (bdbReportAttrLive_t *)osal_mem_alloc(sizeof(bdbReportAttrLive_t));
   \   00011E                ; Setup parameters for call to function osal_mem_alloc
   \   00011E   12....       LCALL     ?Subroutine67 & 0xFFFF
   1306          			if (newItemData == NULL) {
   \                     ??CrossCallReturnLabel_114:
   \   000121   6059         JZ        ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6
   1307          				returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   1308          				break;
   1309          			}
   1310          			bdb_InitReportAttrLiveValues(newItemData);
   \   000123                ; Setup parameters for call to function bdb_InitReportAttrLiveValues
   \   000123   12....       LCALL     ?Subroutine7 & 0xFFFF
   1311          			newItemData->attrID = bdb_reportingAttrCfgRecordsArray[i].attrID;
   1312          			osal_memcpy(newItemData->reportableChange, bdb_reportingAttrCfgRecordsArray[i].reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \                     ??CrossCallReturnLabel_1:
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000129   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
   1313          
   1314          			//Read the attribute to keep the table updated
   1315          			if (BDBREPORTING_TRUE == bdb_RepFindAttrEntry(curEndpoint, curCluster, newItemData->attrID, &zclAttribute))
   \   00012F                ; Setup parameters for call to function bdb_RepFindAttrEntry
   \   00012F   7404         MOV       A,#0x4
   \   000131   12....       LCALL     ?XSTACK_DISP100_8
   \   000134   88..         MOV       ?V2,R0
   \   000136   89..         MOV       ?V3,R1
   \   000138   78..         MOV       R0,#?V2
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013D   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000140   12....       LCALL     ?DEALLOC_XSTACK8
   \   000143   E9           MOV       A,R1
   \   000144   6401         XRL       A,#0x1
   \   000146   7019         JNZ       ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_9
   1316          				osal_memcpy(newItemData->lastValueReported, zclAttribute.dataPtr, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \   000148                ; Setup parameters for call to function osal_memcpy
   \   000148   7408         MOV       A,#0x8
   \   00014A   12....       LCALL     ?XSTACK_DISP0_8
   \   00014D   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000153   7C04         MOV       R4,#0x4
   \   000155   7D00         MOV       R5,#0x0
   \   000157   E5..         MOV       A,?V4
   \   000159   2402         ADD       A,#0x2
   \   00015B   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00015E   12....       LCALL     ?DEALLOC_XSTACK8
   1317          
   1318          			status = bdb_linkedListAttrAdd(&(bdb_reportingClusterEndpointArray[searchedIndex].attrLinkedList), newItemData);
   1319          			if (status == BDBREPORTING_ERROR) {
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_9:
   \   000161                ; Setup parameters for call to function bdb_linkedListAttrAdd
   \   000161   AC..         MOV       R4,?V4
   \   000163   AD..         MOV       R5,?V5
   \   000165   E5..         MOV       A,?V6
   \   000167   75F00D       MOV       B,#0xd
   \   00016A   A4           MUL       AB
   \   00016B   F8           MOV       R0,A
   \   00016C   A9F0         MOV       R1,B
   \   00016E   74..         MOV       A,#(bdb_reportingClusterEndpointArray + 10) & 0xff
   \   000170   28           ADD       A,R0
   \   000171   FA           MOV       R2,A
   \   000172   74..         MOV       A,#((bdb_reportingClusterEndpointArray + 10) >> 8) & 0xff
   \   000174   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000177   6003         JZ        $+5
   \   000179   02....       LJMP      ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_5 & 0xFFFF
   1320          				returnStatus = BDBREPORTING_OUTOFMEMORYERROR;
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_6:
   \   00017C   75..02       MOV       ?V11,#0x2
   1321          				break;
   1322          			}
   1323          		}
   1324          	}
   1325          	return returnStatus;
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_8:
   \   00017F   A9..         MOV       R1,?V11
   \                     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo_2:
   \   000181   740A         MOV       A,#0xa
   \   000183   12....       LCALL     ?DEALLOC_XSTACK8
   \   000186                REQUIRE ?Subroutine6
   \   000186                ; // Fall through to label ?Subroutine6
   1326          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   7A0A         MOV       R2,#0xa
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8A..         MOV       ?V4,R2
   \   000009   8B..         MOV       ?V5,R3
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   7C04         MOV       R4,#0x4
   \   000002   7D00         MOV       R5,#0x0
   \   000004   E5..         MOV       A,?V4
   \   000006   2406         ADD       A,#0x6
   \   000008                REQUIRE ??Subroutine104_0
   \   000008                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V5
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000008   7403         MOV       A,#0x3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   39           ADDC      A,R1
   \   000001   FB           MOV       R3,A
   \   000002   12....       LCALL     `??bdb_linkedListAttrAdd::?relay`; Banked call to: bdb_linkedListAttrAdd
   \   000005   E9           MOV       A,R1
   \   000006   6401         XRL       A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   A9..         MOV       R1,?V0
   \   00000F   12....       LCALL     `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
   \   000012   7402         MOV       A,#0x2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     `??bdb_InitReportAttrLiveValues::?relay`; Banked call to: bdb_InitReportAttrLiveValues
   \   000003   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000006   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000009   F9           MOV       R1,A
   \   00000A   8882         MOV       DPL,R0
   \   00000C   F583         MOV       DPH,A
   \   00000E   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000011   85..82       MOV       DPL,?V4
   \   000014   85..83       MOV       DPH,?V5
   \   000017   EA           MOV       A,R2
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   EB           MOV       A,R3
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C                ; Setup parameters for call to function osal_memcpy
   \   00001C                ; Setup parameters for call to function osal_memcpy
   \   00001C   E8           MOV       A,R0
   \   00001D   240D         ADD       A,#0xd
   \   00001F   F5..         MOV       ?V8,A
   \   000021   E4           CLR       A
   \   000022   39           ADDC      A,R1
   \   000023   F5..         MOV       ?V9,A
   \   000025   75..00       MOV       ?V10,#0x0
   \   000028   78..         MOV       R0,#?V8
   \   00002A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   25..         ADD       A,?V2
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   35..         ADDC      A,?V3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   75..00       MOV       ?V2,#0x0
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET
   1327          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1328          static void bdb_RepInitAttrCfgRecords(void)
   \                     bdb_RepInitAttrCfgRecords:
   1329          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1330          	bdb_RepConstructAttrCfgArray( ); //Here bdb_reportingAttrCfgRecordsArray is filled
   \   000005                ; Setup parameters for call to function bdb_RepConstructAttrCfgArray
   \   000005   12....       LCALL     `??bdb_RepConstructAttrCfgArray::?relay`; Banked call to: bdb_RepConstructAttrCfgArray
   1331          
   1332          	uint8 status = osal_nv_item_init(ZCD_NV_BDBREPORTINGCONFIG, sizeof(bdbReportAttrCfgData_t) * bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray);
   \   000008                ; Setup parameters for call to function osal_nv_item_init
   \   000008   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   00000B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00000E   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000011   12....       LCALL     ?DEALLOC_XSTACK8
   \   000014   E9           MOV       A,R1
   \   000015   F8           MOV       R0,A
   1333          	if (status == NV_OPER_FAILED) {
   \   000016   740A         MOV       A,#0xa
   \   000018   68           XRL       A,R0
   \   000019   606F         JZ        ??bdb_RepInitAttrCfgRecords_0
   1334          		return;
   1335          	} else {
   1336          		if (status == NV_ITEM_UNINIT) {
   \   00001B   7409         MOV       A,#0x9
   \   00001D   68           XRL       A,R0
   \   00001E   6062         JZ        ??bdb_RepInitAttrCfgRecords_1
   1337          			//Do nothing because the reporting cf array data was written in the osal_nv_item method
   1338          		} else {
   1339          			//SUCCESS, There is NV data, read the data
   1340          			bdb_repAttrCfgRecordsArrayFreeAll(); //Clear previous cfg data
   \   000020                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   000020   12....       LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
   1341          			uint16 sizeNVRecord = osal_nv_item_len(ZCD_NV_BDBREPORTINGCONFIG);
   1342          			uint8 attrCfgRecordsArrayCount = sizeNVRecord / sizeof(bdbReportAttrCfgData_t);
   \   000023                ; Setup parameters for call to function osal_nv_item_len
   \   000023   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000026   12....       LCALL     ?US_DIV_MOD
   \   000029   E8           MOV       A,R0
   \   00002A   FE           MOV       R6,A
   1343          
   1344          			status = bdb_repAttrCfgRecordsArrayCreate(attrCfgRecordsArrayCount);
   1345          			if (status == BDBREPORTING_ERROR)
   \   00002B                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
   \   00002B   F9           MOV       R1,A
   \   00002C   12....       LCALL     `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
   \   00002F   E9           MOV       A,R1
   \   000030   6401         XRL       A,#0x1
   \   000032   6056         JZ        ??bdb_RepInitAttrCfgRecords_0
   1346          				return; // No memory
   1347          			osal_nv_read(ZCD_NV_BDBREPORTINGCONFIG, 0, sizeof(bdbReportAttrCfgData_t) * attrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray);
   \   000034                ; Setup parameters for call to function osal_nv_read
   \   000034   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000037   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003A   EE           MOV       A,R6
   \   00003B   75F015       MOV       B,#0x15
   \   00003E   A4           MUL       AB
   \   00003F   F5..         MOV       ?V0,A
   \   000041   E5F0         MOV       A,B
   \   000043   F5..         MOV       ?V1,A
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7C00         MOV       R4,#0x0
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   7A56         MOV       R2,#0x56
   \   000050   7B00         MOV       R3,#0x0
   \   000052   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   1348          			bdb_reportingAttrCfgRecordsArrayCount = attrCfgRecordsArrayCount;
   \   00005A   EE           MOV       A,R6
   \   00005B   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   8021         SJMP      ??bdb_RepInitAttrCfgRecords_1
   1349          		}
   1350          	}
   \                     ??bdb_RepInitAttrCfgRecords_2:
   \   000061   8A82         MOV       DPL,R2
   \   000063   8B83         MOV       DPH,R3
   \   000065   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000068   90....       MOV       DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   00006B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00006E   FE           MOV       R6,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   FF           MOV       R7,A
   \   000072                ; Setup parameters for call to function osal_mem_free
   \   000072   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000075   90....       MOV       DPTR,#attrDefaultCfgRecordLinkedList
   \   000078   E0           MOVX      A,@DPTR
   \   000079   14           DEC       A
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B                ; Setup parameters for call to function osal_mem_free
   \   00007B   EE           MOV       A,R6
   \   00007C   FA           MOV       R2,A
   \   00007D   EF           MOV       A,R7
   \   00007E   FB           MOV       R3,A
   \   00007F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??bdb_RepInitAttrCfgRecords_1:
   \   000082   90....       MOV       DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   000085   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000088   70D7         JNZ       ??bdb_RepInitAttrCfgRecords_2
   1351          
   1352          	bdb_repAttrDefaultCfgRecordsLinkedListFreeAll(&attrDefaultCfgRecordLinkedList); //Free the attr default cfg list
   1353          }
   \                     ??bdb_RepInitAttrCfgRecords_0:
   \   00008A   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   7A56         MOV       R2,#0x56
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000007   EA           MOV       A,R2
   \   000008   F8           MOV       R0,A
   \   000009   EB           MOV       A,R3
   \   00000A   F9           MOV       R1,A
   \   00000B   7A15         MOV       R2,#0x15
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine118_0
   \   000004                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zclGetDataTypeLength
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
   1354          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1355          static uint8 bdb_RepConstructAttrCfgArray(void)
   \                     bdb_RepConstructAttrCfgArray:
   1356          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1357          	epList_t *epCur = epList;
   1358          	uint8 status;
   1359          	uint8 i;
   1360          
   1361          	if (bdb_reportingAttrCfgRecordsArray != NULL)
   \   00000A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00000D   6003         JZ        ??bdb_RepConstructAttrCfgArray_0
   1362          		bdb_repAttrCfgRecordsArrayFreeAll( );
   \   00000F                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   00000F   12....       LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
   1363          
   1364          	uint8 numRepAttr = 0;
   \                     ??bdb_RepConstructAttrCfgArray_0:
   \   000012   7F00         MOV       R7,#0x0
   1365          	//First count the number of reportable attributes accross all endpoints
   1366          	for (epCur = epList; epCur != NULL; epCur = epCur->nextDesc) {
   \   000014   90....       MOV       DPTR,#epList
   \   000017   8034         SJMP      ??bdb_RepConstructAttrCfgArray_1
   1367          		zclAttrRecsList *attrItem = zclFindAttrRecsList(epCur->epDesc->endPoint);
   1368          		if (attrItem == NULL)
   1369          			continue;
   1370          		if (attrItem->numAttributes > 0) {
   1371          			for (i = 0; i < attrItem->numAttributes; i++)
   1372          				if (attrItem->attrs[i].attr.accessControl & ACCESS_REPORTABLE)
   \                     ??bdb_RepConstructAttrCfgArray_2:
   \   000019   EE           MOV       A,R6
   \   00001A   F5..         MOV       ?V2,A
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   7403         MOV       A,#0x3
   \   000021   78..         MOV       R0,#?V2
   \   000023   12....       LCALL     ?S_SHL
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   E4           CLR       A
   \   00003B   93           MOVC      A,@A+DPTR
   \   00003C   A2E2         MOV       C,0xE0 /* A   */.2
   \   00003E   5001         JNC       ??bdb_RepConstructAttrCfgArray_3
   1373          					numRepAttr++;
   \   000040   0F           INC       R7
   \                     ??bdb_RepConstructAttrCfgArray_3:
   \   000041   0E           INC       R6
   \                     ??bdb_RepConstructAttrCfgArray_4:
   \   000042   EE           MOV       A,R6
   \   000043   C3           CLR       C
   \   000044   99           SUBB      A,R1
   \   000045   40D2         JC        ??bdb_RepConstructAttrCfgArray_2
   \                     ??bdb_RepConstructAttrCfgArray_5:
   \   000047   85..82       MOV       DPL,?V0
   \   00004A   85..83       MOV       DPH,?V1
   \                     ??bdb_RepConstructAttrCfgArray_1:
   \   00004D   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000050   6022         JZ        ??bdb_RepConstructAttrCfgArray_6
   \   000052                ; Setup parameters for call to function zclFindAttrRecsList
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00005D   EA           MOV       A,R2
   \   00005E   4B           ORL       A,R3
   \   00005F   60E6         JZ        ??bdb_RepConstructAttrCfgArray_5
   \   000061   8A82         MOV       DPL,R2
   \   000063   8B83         MOV       DPH,R3
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   60D7         JZ        ??bdb_RepConstructAttrCfgArray_5
   \   000070   7E00         MOV       R6,#0x0
   \   000072   80CE         SJMP      ??bdb_RepConstructAttrCfgArray_4
   1374          		}
   1375          	}
   1376          	status = bdb_repAttrCfgRecordsArrayCreate(numRepAttr);
   \                     ??bdb_RepConstructAttrCfgArray_6:
   \   000074                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
   \   000074   EF           MOV       A,R7
   \   000075   F9           MOV       R1,A
   \   000076   12....       LCALL     `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
   \   000079   E9           MOV       A,R1
   \   00007A   F9           MOV       R1,A
   1377          	if (status != BDBREPORTING_SUCCESS)
   \   00007B   6003         JZ        $+5
   \   00007D   02....       LJMP      ??bdb_RepConstructAttrCfgArray_7 & 0xFFFF
   1378          		return status;
   1379          
   1380          
   1381          	for (epCur = epList; epCur != NULL; epCur = epCur->nextDesc) {
   \   000080   90....       MOV       DPTR,#epList
   \   000083   8006         SJMP      ??bdb_RepConstructAttrCfgArray_8
   \                     ??bdb_RepConstructAttrCfgArray_9:
   \   000085   85..82       MOV       DPL,?V0
   \   000088   85..83       MOV       DPH,?V1
   \                     ??bdb_RepConstructAttrCfgArray_8:
   \   00008B   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00008E   7003         JNZ       $+5
   \   000090   02....       LJMP      ??bdb_RepConstructAttrCfgArray_10 & 0xFFFF
   1382          		zclAttrRecsList *attrItem = zclFindAttrRecsList(epCur->epDesc->endPoint);
   \   000093   E5..         MOV       A,?V0
   \   000095   2402         ADD       A,#0x2
   \   000097   F5..         MOV       ?V2,A
   \   000099   E4           CLR       A
   \   00009A   35..         ADDC      A,?V1
   \   00009C   F5..         MOV       ?V3,A
   \   00009E                ; Setup parameters for call to function zclFindAttrRecsList
   \   00009E   85..82       MOV       DPL,?V2
   \   0000A1   F583         MOV       DPH,A
   \   0000A3   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000A6   8B..         MOV       ?V5,R3
   \   0000A8   A9..         MOV       R1,?V5
   1383          		if (attrItem == NULL)
   \   0000AA   EA           MOV       A,R2
   \   0000AB   49           ORL       A,R1
   \   0000AC   60D7         JZ        ??bdb_RepConstructAttrCfgArray_9
   1384          			continue;
   1385          		if (attrItem->numAttributes > 0) {
   \   0000AE   EA           MOV       A,R2
   \   0000AF   2407         ADD       A,#0x7
   \   0000B1   F5..         MOV       ?V8,A
   \   0000B3   E4           CLR       A
   \   0000B4   39           ADDC      A,R1
   \   0000B5   F5..         MOV       ?V9,A
   \   0000B7   85..82       MOV       DPL,?V8
   \   0000BA   F583         MOV       DPH,A
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   60C6         JZ        ??bdb_RepConstructAttrCfgArray_9
   1386          			for (i = 0; i < attrItem->numAttributes; i++) {
   \   0000BF   7E00         MOV       R6,#0x0
   \   0000C1   EA           MOV       A,R2
   \   0000C2   2408         ADD       A,#0x8
   \   0000C4   F5..         MOV       ?V6,A
   \   0000C6   E4           CLR       A
   \   0000C7   39           ADDC      A,R1
   \   0000C8   F5..         MOV       ?V7,A
   \   0000CA   02....       LJMP      ??bdb_RepConstructAttrCfgArray_11 & 0xFFFF
   1387          				if (attrItem->attrs[i].attr.accessControl & ACCESS_REPORTABLE) {
   1388          					bdbReportAttrDefaultCfgData_t toSearch;
   1389          					toSearch.endpoint = epCur->epDesc->endPoint;
   1390          					toSearch.cluster = attrItem->attrs[i].clusterID;
   1391          					toSearch.attrID = attrItem->attrs[i].attr.attrId;
   1392          					bdbRepAttrDefaultCfgRecordLinkedListItem_t *lLItemFound = bdb_repAttrDefaultCfgRecordsLinkedListSearch(&attrDefaultCfgRecordLinkedList, toSearch);
   1393          					if (lLItemFound == NULL) {
   1394          						//Add with default static values
   1395          						uint8 changeValue[] = BDBREPORTING_DEFAULTCHANGEVALUE;
   1396          						status = bdb_repAttrCfgRecordsArrayAdd(epCur->epDesc->endPoint, attrItem->attrs[i].clusterID,
   1397          										       attrItem->attrs[i].attr.attrId, BDBREPORTING_DEFAULTMININTERVAL, BDBREPORTING_DEFAULTMAXINTERVAL,
   1398          										       changeValue, BDBREPORTING_DEFAULTMININTERVAL, BDBREPORTING_DEFAULTMAXINTERVAL, changeValue);
   1399          					} else {
   1400          						//Add with user defined default values
   1401          						status = bdb_repAttrCfgRecordsArrayAdd(epCur->epDesc->endPoint, attrItem->attrs[i].clusterID,
   1402          										       attrItem->attrs[i].attr.attrId, lLItemFound->data->minReportInt, lLItemFound->data->maxReportInt,
   1403          										       lLItemFound->data->reportableChange, lLItemFound->data->minReportInt, lLItemFound->data->maxReportInt,
   1404          										       lLItemFound->data->reportableChange);
   \                     ??bdb_RepConstructAttrCfgArray_12:
   \   0000CD   12....       LCALL     ?Subroutine32 & 0xFFFF
   1405          					}
   \                     ??CrossCallReturnLabel_47:
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000D8   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0000DB   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000DE   E8           MOV       A,R0
   \   0000DF   2409         ADD       A,#0x9
   \   0000E1   F5..         MOV       ?V12,A
   \   0000E3   E4           CLR       A
   \   0000E4   39           ADDC      A,R1
   \   0000E5   F5..         MOV       ?V13,A
   \   0000E7                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayAdd
   \   0000E7   85....       MOV       ?V10,?V12
   \   0000EA   F5..         MOV       ?V11,A
   \   0000EC   78..         MOV       R0,#?V10
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F1   8C..         MOV       ?V10,R4
   \   0000F3   8D..         MOV       ?V11,R5
   \   0000F5   78..         MOV       R0,#?V10
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FA   8A..         MOV       ?V10,R2
   \   0000FC   8B..         MOV       ?V11,R3
   \   0000FE   78..         MOV       R0,#?V10
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   85....       MOV       ?V10,?V12
   \   000106   85....       MOV       ?V11,?V13
   \   000109   78..         MOV       R0,#?V10
   \   00010B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010E   8C..         MOV       ?V10,R4
   \   000110   8D..         MOV       ?V11,R5
   \   000112   78..         MOV       R0,#?V10
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000117   8A..         MOV       ?V10,R2
   \   000119   8B..         MOV       ?V11,R3
   \                     ??bdb_RepConstructAttrCfgArray_13:
   \   00011B   78..         MOV       R0,#?V10
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   85..82       MOV       DPL,?V4
   \   000123   85..83       MOV       DPH,?V5
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   E4           CLR       A
   \   000129   93           MOVC      A,@A+DPTR
   \   00012A   FC           MOV       R4,A
   \   00012B   7401         MOV       A,#0x1
   \   00012D   93           MOVC      A,@A+DPTR
   \   00012E   FD           MOV       R5,A
   \   00012F   85..82       MOV       DPL,?V4
   \   000132   85..83       MOV       DPH,?V5
   \   000135   E4           CLR       A
   \   000136   93           MOVC      A,@A+DPTR
   \   000137   FA           MOV       R2,A
   \   000138   7401         MOV       A,#0x1
   \   00013A   93           MOVC      A,@A+DPTR
   \   00013B   FB           MOV       R3,A
   \   00013C   85..82       MOV       DPL,?V2
   \   00013F   85..83       MOV       DPH,?V3
   \   000142   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000145   12....       LCALL     `??bdb_repAttrCfgRecordsArrayAdd::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayAdd
   \   000148   740C         MOV       A,#0xc
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??bdb_RepConstructAttrCfgArray_14:
   \   00014D   0E           INC       R6
   \                     ??bdb_RepConstructAttrCfgArray_11:
   \   00014E   85..82       MOV       DPL,?V8
   \   000151   85..83       MOV       DPH,?V9
   \   000154   12....       LCALL     ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000157   4003         JC        $+5
   \   000159   02....       LJMP      ??bdb_RepConstructAttrCfgArray_9 & 0xFFFF
   \   00015C   EE           MOV       A,R6
   \   00015D   F5..         MOV       ?V10,A
   \   00015F   75..00       MOV       ?V11,#0x0
   \   000162   7403         MOV       A,#0x3
   \   000164   78..         MOV       R0,#?V10
   \   000166   12....       LCALL     ?S_SHL
   \   000169   85....       MOV       ?V4,?V10
   \   00016C   85....       MOV       ?V5,?V11
   \   00016F   85..82       MOV       DPL,?V6
   \   000172   85..83       MOV       DPH,?V7
   \   000175   E0           MOVX      A,@DPTR
   \   000176   25..         ADD       A,?V4
   \   000178   F8           MOV       R0,A
   \   000179   A3           INC       DPTR
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   35..         ADDC      A,?V5
   \   00017D   F9           MOV       R1,A
   \   00017E   E8           MOV       A,R0
   \   00017F   FA           MOV       R2,A
   \   000180   E9           MOV       A,R1
   \   000181   FB           MOV       R3,A
   \   000182   8882         MOV       DPL,R0
   \   000184   F583         MOV       DPH,A
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   E4           CLR       A
   \   00018C   93           MOVC      A,@A+DPTR
   \   00018D   A2E2         MOV       C,0xE0 /* A   */.2
   \   00018F   50BC         JNC       ??bdb_RepConstructAttrCfgArray_14
   \   000191   85..82       MOV       DPL,?V2
   \   000194   85..83       MOV       DPH,?V3
   \   000197   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00019A   C0E0         PUSH      A
   \   00019C   7404         MOV       A,#0x4
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   D0E0         POP       A
   \   0001A3   F0           MOVX      @DPTR,A
   \   0001A4   8A82         MOV       DPL,R2
   \   0001A6   8983         MOV       DPH,R1
   \   0001A8   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0001AB   7405         MOV       A,#0x5
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0001B3   8A82         MOV       DPL,R2
   \   0001B5   8B83         MOV       DPH,R3
   \   0001B7   A3           INC       DPTR
   \   0001B8   A3           INC       DPTR
   \   0001B9   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0001BC   7407         MOV       A,#0x7
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0001C4                ; Setup parameters for call to function bdb_repAttrDefaultCfgRecordsLinkedListSearch
   \   0001C4   7404         MOV       A,#0x4
   \   0001C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C9   740D         MOV       A,#0xd
   \   0001CB   12....       LCALL     ?PUSH_XSTACK8_X
   \   0001CE   7A..         MOV       R2,#attrDefaultCfgRecordLinkedList & 0xff
   \   0001D0   7B..         MOV       R3,#(attrDefaultCfgRecordLinkedList >> 8) & 0xff
   \   0001D2   12....       LCALL     `??bdb_repAttrDefaultCfgRecordsLinkedListSearch:`; Banked call to: bdb_repAttrDefaultCfgRecordsLinkedListSearch
   \   0001D5   740D         MOV       A,#0xd
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DA   8A82         MOV       DPL,R2
   \   0001DC   8B83         MOV       DPH,R3
   \   0001DE   E582         MOV       A,DPL
   \   0001E0   4583         ORL       A,DPH
   \   0001E2   6003         JZ        $+5
   \   0001E4   02....       LJMP      ??bdb_RepConstructAttrCfgArray_12 & 0xFFFF
   \   0001E7   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0}>`
   \   0001EA   AC..         MOV       R4,?XSP + 0
   \   0001EC   AD..         MOV       R5,?XSP + 1
   \   0001EE   7404         MOV       A,#0x4
   \   0001F0   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0001F3   12....       LCALL     ?Subroutine48 & 0xFFFF
   1406          				}
   1407          			}
   1408          		}
   1409          	}
   \                     ??CrossCallReturnLabel_74:
   \   0001F6                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayAdd
   \   0001F6   A8..         MOV       R0,?XSP + 0
   \   0001F8   A9..         MOV       R1,?XSP + 1
   \   0001FA   88..         MOV       ?V10,R0
   \   0001FC   89..         MOV       ?V11,R1
   \   0001FE   78..         MOV       R0,#?V10
   \   000200   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000203   75..FF       MOV       ?V10,#-0x1
   \   000206   75..FF       MOV       ?V11,#-0x1
   \   000209   78..         MOV       R0,#?V10
   \   00020B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020E   75..0A       MOV       ?V10,#0xa
   \   000211   75..00       MOV       ?V11,#0x0
   \   000214   78..         MOV       R0,#?V10
   \   000216   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000219   7406         MOV       A,#0x6
   \   00021B   12....       LCALL     ?XSTACK_DISP100_8
   \   00021E   88..         MOV       ?V10,R0
   \   000220   89..         MOV       ?V11,R1
   \   000222   78..         MOV       R0,#?V10
   \   000224   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000227   75..FF       MOV       ?V10,#-0x1
   \   00022A   75..FF       MOV       ?V11,#-0x1
   \   00022D   78..         MOV       R0,#?V10
   \   00022F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000232   75..0A       MOV       ?V10,#0xa
   \   000235   75..00       MOV       ?V11,#0x0
   \   000238   02....       LJMP      ??bdb_RepConstructAttrCfgArray_13 & 0xFFFF
   1410          	return BDBREPORTING_SUCCESS;
   \                     ??bdb_RepConstructAttrCfgArray_10:
   \   00023B   7900         MOV       R1,#0x0
   \                     ??bdb_RepConstructAttrCfgArray_7:
   \   00023D   7411         MOV       A,#0x11
   \   00023F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000242   7F0E         MOV       R7,#0xe
   \   000244   02....       LJMP      ?BANKED_LEAVE_XDATA
   1411          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   E0           MOVX      A,@DPTR
   \   000007   25..         ADD       A,?V4
   \   000009   F5..         MOV       ?V4,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   35..         ADDC      A,?V5
   \   00000F   F5..         MOV       ?V5,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E4           CLR       A
   \   000001   93           MOVC      A,@A+DPTR
   \   000002   F8           MOV       R0,A
   \   000003   7401         MOV       A,#0x1
   \   000005   93           MOVC      A,@A+DPTR
   \   000006   F9           MOV       R1,A
   \   000007   22           RET
   1412          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1413          static uint8 bdb_RepLoadCfgRecords(void)
   \                     bdb_RepLoadCfgRecords:
   1414          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1415          	uint8 status;
   1416          
   1417          	if (bdb_reportingAttrCfgRecordsArrayCount > 0 && bdb_reportingAttrCfgRecordsArray == NULL)
   \   000005   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6008         JZ        ??bdb_RepLoadCfgRecords_0
   \   00000B   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00000E   7003         JNZ       ??bdb_RepLoadCfgRecords_0
   1418          		bdb_repAttrCfgRecordsArrayFreeAll( );
   \   000010                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayFreeAll
   \   000010   12....       LCALL     `??bdb_repAttrCfgRecordsArrayFreeAll::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayFreeAll
   1419          
   1420          	status = osal_nv_item_init(ZCD_NV_BDBREPORTINGCONFIG, sizeof(bdbReportAttrCfgData_t) * bdb_reportingAttrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray);
   \                     ??bdb_RepLoadCfgRecords_0:
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000016   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000019   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001F   E9           MOV       A,R1
   \   000020   F8           MOV       R0,A
   1421          	if (status == NV_OPER_FAILED) {
   \   000021   740A         MOV       A,#0xa
   \   000023   68           XRL       A,R0
   \   000024   6005         JZ        ??bdb_RepLoadCfgRecords_1
   1422          		return BDBREPORTING_ERROR;
   1423          	} else {
   1424          		if (status == NV_ITEM_UNINIT) {
   \   000026   7409         MOV       A,#0x9
   \   000028   68           XRL       A,R0
   \   000029   7004         JNZ       ??bdb_RepLoadCfgRecords_2
   1425          			//was written, this is an error
   1426          			return BDBREPORTING_ERROR;
   \                     ??bdb_RepLoadCfgRecords_1:
   \   00002B   7901         MOV       R1,#0x1
   \   00002D   8042         SJMP      ??bdb_RepLoadCfgRecords_3
   1427          		} else {
   1428          			//SUCCESS, There is NV data, read the data
   1429          			uint16 sizeNVRecord = osal_nv_item_len(ZCD_NV_BDBREPORTINGCONFIG);
   1430          			uint8 attrCfgRecordsArrayCount = sizeNVRecord / sizeof(bdbReportAttrCfgData_t);
   \                     ??bdb_RepLoadCfgRecords_2:
   \   00002F                ; Setup parameters for call to function osal_nv_item_len
   \   00002F   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000032   12....       LCALL     ?US_DIV_MOD
   \   000035   E8           MOV       A,R0
   \   000036   FE           MOV       R6,A
   1431          
   1432          			status = bdb_repAttrCfgRecordsArrayCreate(attrCfgRecordsArrayCount);
   1433          			if (status == BDBREPORTING_ERROR)
   \   000037                ; Setup parameters for call to function bdb_repAttrCfgRecordsArrayCreate
   \   000037   F9           MOV       R1,A
   \   000038   12....       LCALL     `??bdb_repAttrCfgRecordsArrayCreate::?relay`; Banked call to: bdb_repAttrCfgRecordsArrayCreate
   \   00003B   E9           MOV       A,R1
   \   00003C   6401         XRL       A,#0x1
   \   00003E   7004         JNZ       ??bdb_RepLoadCfgRecords_4
   1434          				return BDBREPORTING_OUTOFMEMORYERROR;
   \   000040   7902         MOV       R1,#0x2
   \   000042   802D         SJMP      ??bdb_RepLoadCfgRecords_3
   1435          			osal_nv_read(ZCD_NV_BDBREPORTINGCONFIG, 0, sizeof(bdbReportAttrCfgData_t) * attrCfgRecordsArrayCount, bdb_reportingAttrCfgRecordsArray);
   \                     ??bdb_RepLoadCfgRecords_4:
   \   000044                ; Setup parameters for call to function osal_nv_read
   \   000044   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArray
   \   000047   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004A   EE           MOV       A,R6
   \   00004B   75F015       MOV       B,#0x15
   \   00004E   A4           MUL       AB
   \   00004F   F5..         MOV       ?V0,A
   \   000051   E5F0         MOV       A,B
   \   000053   F5..         MOV       ?V1,A
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV       R4,#0x0
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7A56         MOV       R2,#0x56
   \   000060   7B00         MOV       R3,#0x0
   \   000062   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   1436          			bdb_reportingAttrCfgRecordsArrayCount = attrCfgRecordsArrayCount;
   \   00006A   EE           MOV       A,R6
   \   00006B   90....       MOV       DPTR,#bdb_reportingAttrCfgRecordsArrayCount
   \   00006E   F0           MOVX      @DPTR,A
   1437          			return BDBREPORTING_SUCCESS;
   \   00006F   7900         MOV       R1,#0x0
   1438          		}
   1439          	}
   \                     ??bdb_RepLoadCfgRecords_3:
   \   000071   02....       LJMP      ?Subroutine5 & 0xFFFF
   1440          }
   1441          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1442          static void bdb_RepReport(uint8 specificCLusterEndpointIndex)
   \                     bdb_RepReport:
   1443          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1444          	afAddrType_t dstAddr;
   1445          	zclReportCmd_t *pReportCmd;
   1446          	uint8 i;
   1447          
   1448          	bdbReportAttrClusterEndpoint_t *clusterEndpointItem = NULL;
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   7F00         MOV       R7,#0x0
   1449          
   1450          	if (specificCLusterEndpointIndex == BDBREPORTING_INVALIDINDEX) {
   \   00000E   74FF         MOV       A,#-0x1
   \   000010   69           XRL       A,R1
   \   000011   7010         JNZ       ??bdb_RepReport_0
   1451          		if (bdb_reportingNextClusterEndpointIndex < bdb_reportingClusterEndpointArrayCount)
   \   000013   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   90....       MOV       DPTR,#bdb_reportingNextClusterEndpointIndex
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C3           CLR       C
   \   00001D   98           SUBB      A,R0
   \   00001E   5013         JNC       ??bdb_RepReport_1
   1452          			clusterEndpointItem = &(bdb_reportingClusterEndpointArray[bdb_reportingNextClusterEndpointIndex]);
   \   000020   E0           MOVX      A,@DPTR
   \   000021   8001         SJMP      ??bdb_RepReport_2
   1453          	} else {
   1454          		clusterEndpointItem = &(bdb_reportingClusterEndpointArray[specificCLusterEndpointIndex]);
   \                     ??bdb_RepReport_0:
   \   000023   E9           MOV       A,R1
   \                     ??bdb_RepReport_2:
   \   000024   75F00D       MOV       B,#0xd
   \   000027   A4           MUL       AB
   \   000028   F8           MOV       R0,A
   \   000029   A9F0         MOV       R1,B
   \   00002B   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   00002D   28           ADD       A,R0
   \   00002E   FE           MOV       R6,A
   \   00002F   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000031   39           ADDC      A,R1
   \   000032   FF           MOV       R7,A
   1455          	}
   1456          
   1457          	// actually send the report
   1458          	if (clusterEndpointItem->consolidatedMaxReportInt != ZCL_REPORTING_OFF && clusterEndpointItem->attrLinkedList.numItems) {
   \                     ??bdb_RepReport_1:
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F4           CPL       A
   \   00003F   7003         JNZ       ??bdb_RepReport_3
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F4           CPL       A
   \                     ??bdb_RepReport_3:
   \   000044   7003         JNZ       $+5
   \   000046   02....       LJMP      ??bdb_RepReport_4 & 0xFFFF
   \   000049   EE           MOV       A,R6
   \   00004A   240A         ADD       A,#0xa
   \   00004C   F5..         MOV       ?V8,A
   \   00004E   E4           CLR       A
   \   00004F   3F           ADDC      A,R7
   \   000050   F5..         MOV       ?V9,A
   \   000052   85..82       MOV       DPL,?V8
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   7003         JNZ       $+5
   \   00005A   02....       LJMP      ??bdb_RepReport_4 & 0xFFFF
   1459          		dstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00005D   740E         MOV       A,#0xe
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E4           CLR       A
   \   000063   F0           MOVX      @DPTR,A
   1460          		dstAddr.addr.shortAddr = 0;
   \   000064   7406         MOV       A,#0x6
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   F0           MOVX      @DPTR,A
   1461          		dstAddr.endPoint = clusterEndpointItem->endpoint;
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   A3           INC       DPTR
   \   000072   8582..       MOV       ?V12,DPL
   \   000075   8583..       MOV       ?V13,DPH
   \   000078   E0           MOVX      A,@DPTR
   \   000079   C0E0         PUSH      A
   \   00007B   740F         MOV       A,#0xf
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   D0E0         POP       A
   \   000082   F0           MOVX      @DPTR,A
   1462          		dstAddr.panId = _NIB.nwkPanId;
   \   000083   90....       MOV       DPTR,#_NIB + 33
   \   000086   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000089   7410         MOV       A,#0x10
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   E8           MOV       A,R0
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   E9           MOV       A,R1
   \   000092   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   1463          
   1464          		pReportCmd = osal_mem_alloc(sizeof(zclReportCmd_t) + (clusterEndpointItem->attrLinkedList.numItems * sizeof(zclReport_t)));
   \                     ??CrossCallReturnLabel_157:
   \   000095   75F005       MOV       B,#0x5
   \   000098   A4           MUL       AB
   \   000099   A9F0         MOV       R1,B
   \   00009B   2401         ADD       A,#0x1
   \   00009D   FA           MOV       R2,A
   \   00009E   E4           CLR       A
   \   00009F   39           ADDC      A,R1
   \   0000A0   12....       LCALL     ?Subroutine66 & 0xFFFF
   1465          		if (pReportCmd != NULL) {
   \                     ??CrossCallReturnLabel_112:
   \   0000A3   7003         JNZ       $+5
   \   0000A5   02....       LJMP      ??bdb_RepReport_4 & 0xFFFF
   1466          			pReportCmd->numAttr = clusterEndpointItem->attrLinkedList.numItems;
   \   0000A8   85..82       MOV       DPL,?V8
   \   0000AB   85..83       MOV       DPH,?V9
   \   0000AE   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000B1   F0           MOVX      @DPTR,A
   1467          			for (i = 0; i < clusterEndpointItem->attrLinkedList.numItems; ++i) {
   \   0000B2   75..00       MOV       ?V0,#0x0
   \   0000B5   EE           MOV       A,R6
   \   0000B6   2402         ADD       A,#0x2
   \   0000B8   F5..         MOV       ?V14,A
   \   0000BA   E4           CLR       A
   \   0000BB   3F           ADDC      A,R7
   \   0000BC   F5..         MOV       ?V15,A
   \   0000BE   02....       LJMP      ??bdb_RepReport_5 & 0xFFFF
   \                     ??bdb_RepReport_6:
   \   0000C1   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0000C4   7A00         MOV       R2,#0x0
   \                     ??bdb_RepReport_7:
   \   0000C6   EE           MOV       A,R6
   \   0000C7   4F           ORL       A,R7
   \   0000C8   7003         JNZ       $+5
   \   0000CA   02....       LJMP      ??bdb_RepReport_8 & 0xFFFF
   \   0000CD   EA           MOV       A,R2
   \   0000CE   C3           CLR       C
   \   0000CF   95..         SUBB      A,?V0
   \   0000D1   5008         JNC       ??CrossCallReturnLabel_240
   \   0000D3   8E82         MOV       DPL,R6
   \   0000D5   8F83         MOV       DPH,R7
   \   0000D7   A3           INC       DPTR
   \   0000D8   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   0000DB   0A           INC       R2
   \   0000DC   E5..         MOV       A,?V0
   \   0000DE   C3           CLR       C
   \   0000DF   9A           SUBB      A,R2
   \   0000E0   50E4         JNC       ??bdb_RepReport_7
   1468          				pReportCmd->attrList[i].attrID = 0xFFFF;
   1469          				pReportCmd->attrList[i].dataType = 0xFF;
   1470          				pReportCmd->attrList[i].attrData = NULL;
   1471          
   1472          				bdbLinkedListAttrItem_t *attrListItem = bdb_linkedListAttrGetAtIndex(&clusterEndpointItem->attrLinkedList, i);
   1473          				if (attrListItem != NULL) {
   \   0000E2   EE           MOV       A,R6
   \   0000E3   4F           ORL       A,R7
   \   0000E4   7003         JNZ       $+5
   \   0000E6   02....       LJMP      ??bdb_RepReport_8 & 0xFFFF
   1474          					pReportCmd->attrList[i].attrID = attrListItem->data->attrID;
   \   0000E9   8E82         MOV       DPL,R6
   \   0000EB   8F83         MOV       DPH,R7
   \   0000ED   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000F0   12....       LCALL     ?Subroutine14 & 0xFFFF
   1475          					zclAttribute_t attrRec;
   1476          					uint8 attrRes = bdb_RepFindAttrEntry(clusterEndpointItem->endpoint, clusterEndpointItem->cluster, attrListItem->data->attrID, &attrRec);
   1477          					if (attrRes == BDBREPORTING_TRUE) {
   \                     ??CrossCallReturnLabel_186:
   \   0000F3                ; Setup parameters for call to function bdb_RepFindAttrEntry
   \   0000F3   A8..         MOV       R0,?XSP + 0
   \   0000F5   A9..         MOV       R1,?XSP + 1
   \   0000F7   88..         MOV       ?V10,R0
   \   0000F9   89..         MOV       ?V11,R1
   \   0000FB   78..         MOV       R0,#?V10
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000100   8A82         MOV       DPL,R2
   \   000102   8B83         MOV       DPH,R3
   \   000104   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000107   85..82       MOV       DPL,?V12
   \   00010A   85..83       MOV       DPH,?V13
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   F9           MOV       R1,A
   \   00010F   12....       LCALL     `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
   \   000112   7402         MOV       A,#0x2
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   E9           MOV       A,R1
   \   000118   6401         XRL       A,#0x1
   \   00011A   7055         JNZ       ??bdb_RepReport_8
   1478          						pReportCmd->attrList[i].dataType = attrRec.dataType;
   \   00011C   7402         MOV       A,#0x2
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   E0           MOVX      A,@DPTR
   \   000122   85..82       MOV       DPL,?V6
   \   000125   85..83       MOV       DPH,?V7
   \   000128   F0           MOVX      @DPTR,A
   1479          						pReportCmd->attrList[i].attrData = attrRec.dataPtr;
   \   000129   7404         MOV       A,#0x4
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000131   85..82       MOV       DPL,?V4
   \   000134   85..83       MOV       DPH,?V5
   \   000137   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   1480          						//Update last value reported
   1481          						if (zclAnalogDataType(attrRec.dataType)) {
   \                     ??CrossCallReturnLabel_214:
   \   00013A                ; Setup parameters for call to function zclAnalogDataType
   \   00013A   7402         MOV       A,#0x2
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000142   602D         JZ        ??bdb_RepReport_8
   1482          							//Only if the datatype is analog
   1483          							osal_memset(attrListItem->data->lastValueReported, 0x00, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \   000144                ; Setup parameters for call to function osal_memset
   \   000144   7C04         MOV       R4,#0x4
   \   000146   7D00         MOV       R5,#0x0
   \   000148   7900         MOV       R1,#0x0
   \   00014A   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00014D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1484          							osal_memcpy(attrListItem->data->lastValueReported, attrRec.dataPtr, zclGetDataTypeLength(attrRec.dataType));
   \   000150                ; Setup parameters for call to function zclGetDataTypeLength
   \   000150   7402         MOV       A,#0x2
   \   000152   12....       LCALL     ?XSTACK_DISP0_8
   \   000155   12....       LCALL     ?Subroutine54 & 0xFFFF
   1485          						}
   1486          					}
   1487          				}
   \                     ??CrossCallReturnLabel_91:
   \   000158   F9           MOV       R1,A
   \   000159                ; Setup parameters for call to function osal_memcpy
   \   000159   7404         MOV       A,#0x4
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000161   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000164   E9           MOV       A,R1
   \   000165   FC           MOV       R4,A
   \   000166   7D00         MOV       R5,#0x0
   \   000168   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00016B   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00016E   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??bdb_RepReport_8:
   \   000171   05..         INC       ?V0
   \                     ??bdb_RepReport_5:
   \   000173   85..82       MOV       DPL,?V8
   \   000176   85..83       MOV       DPH,?V9
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   F8           MOV       R0,A
   \   00017B   E5..         MOV       A,?V0
   \   00017D   C3           CLR       C
   \   00017E   98           SUBB      A,R0
   \   00017F   505D         JNC       ??bdb_RepReport_9
   \   000181   AA..         MOV       R2,?V0
   \   000183   EA           MOV       A,R2
   \   000184   75F005       MOV       B,#0x5
   \   000187   A4           MUL       AB
   \   000188   F8           MOV       R0,A
   \   000189   A9F0         MOV       R1,B
   \   00018B   E5..         MOV       A,?V2
   \   00018D   28           ADD       A,R0
   \   00018E   FC           MOV       R4,A
   \   00018F   E5..         MOV       A,?V3
   \   000191   39           ADDC      A,R1
   \   000192   FD           MOV       R5,A
   \   000193   8C82         MOV       DPL,R4
   \   000195   F583         MOV       DPH,A
   \   000197   A3           INC       DPTR
   \   000198   A882         MOV       R0,DPL
   \   00019A   A983         MOV       R1,DPH
   \   00019C   74FF         MOV       A,#-0x1
   \   00019E   F0           MOVX      @DPTR,A
   \   00019F   A3           INC       DPTR
   \   0001A0   F0           MOVX      @DPTR,A
   \   0001A1   EC           MOV       A,R4
   \   0001A2   2403         ADD       A,#0x3
   \   0001A4   F5..         MOV       ?V6,A
   \   0001A6   E4           CLR       A
   \   0001A7   3D           ADDC      A,R5
   \   0001A8   F5..         MOV       ?V7,A
   \   0001AA   85..82       MOV       DPL,?V6
   \   0001AD   F583         MOV       DPH,A
   \   0001AF   74FF         MOV       A,#-0x1
   \   0001B1   F0           MOVX      @DPTR,A
   \   0001B2   EC           MOV       A,R4
   \   0001B3   2404         ADD       A,#0x4
   \   0001B5   F5..         MOV       ?V4,A
   \   0001B7   E4           CLR       A
   \   0001B8   3D           ADDC      A,R5
   \   0001B9   F5..         MOV       ?V5,A
   \   0001BB   85..82       MOV       DPL,?V4
   \   0001BE   F583         MOV       DPH,A
   \   0001C0   E4           CLR       A
   \   0001C1   F0           MOVX      @DPTR,A
   \   0001C2   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   0001C5   24FF         ADD       A,#-0x1
   \   0001C7   FC           MOV       R4,A
   \   0001C8   E4           CLR       A
   \   0001C9   34FF         ADDC      A,#-0x1
   \   0001CB   FD           MOV       R5,A
   \   0001CC   C3           CLR       C
   \   0001CD   EC           MOV       A,R4
   \   0001CE   9A           SUBB      A,R2
   \   0001CF   ED           MOV       A,R5
   \   0001D0   9400         SUBB      A,#0x0
   \   0001D2   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001D4   65D0         XRL       A,PSW
   \   0001D6   33           RLC       A
   \   0001D7   4003         JC        $+5
   \   0001D9   02....       LJMP      ??bdb_RepReport_6 & 0xFFFF
   \   0001DC   8093         SJMP      ??bdb_RepReport_8
   1488          			}
   1489          
   1490          			zcl_SendReportCmd(clusterEndpointItem->endpoint, &dstAddr,
   1491          					  clusterEndpointItem->cluster, pReportCmd,
   1492          					  ZCL_FRAME_SERVER_CLIENT_DIR, BDB_REPORTING_DISABLE_DEFAULT_RSP, bdb_getZCLFrameCounter( ));
   \                     ??bdb_RepReport_9:
   \   0001DE                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0001DE   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   0001E1   E9           MOV       A,R1
   \   0001E2                ; Setup parameters for call to function zcl_SendReportCmd
   \   0001E2   F5..         MOV       ?V0,A
   \   0001E4   78..         MOV       R0,#?V0
   \   0001E6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001E9   75..01       MOV       ?V0,#0x1
   \   0001EC   78..         MOV       R0,#?V0
   \   0001EE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F1   78..         MOV       R0,#?V0
   \   0001F3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F6   78..         MOV       R0,#?V2
   \   0001F8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001FB   85..82       MOV       DPL,?V14
   \   0001FE   85..83       MOV       DPH,?V15
   \   000201   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000204   740B         MOV       A,#0xb
   \   000206   12....       LCALL     ?XSTACK_DISP101_8
   \   000209   85..82       MOV       DPL,?V12
   \   00020C   85..83       MOV       DPH,?V13
   \   00020F   E0           MOVX      A,@DPTR
   \   000210   F9           MOV       R1,A
   \   000211   12....       LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   000214   7405         MOV       A,#0x5
   \   000216   12....       LCALL     ?DEALLOC_XSTACK8
   1493          
   1494          			osal_mem_free(pReportCmd);
   \   000219                ; Setup parameters for call to function osal_mem_free
   \   000219   AA..         MOV       R2,?V2
   \   00021B   AB..         MOV       R3,?V3
   \   00021D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1495          		}
   1496          	}
   1497          }
   \                     ??bdb_RepReport_4:
   \   000220   7412         MOV       A,#0x12
   \   000222   80..         SJMP      ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   2402         ADD       A,#0x2
   \   000007   FA           MOV       R2,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   3400         ADDC      A,#0x0
   \   00000C   FB           MOV       R3,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   8A82         MOV       DPL,R2
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET
   1498          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1499          static uint8 bdb_isAttrValueChangedSurpassDelta(uint8 datatype, uint8 *delta, uint8 *curValue, uint8 *lastValue)
   \                     bdb_isAttrValueChangedSurpassDelta:
   1500          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   1501          	uint8 res = BDBREPORTING_FALSE;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7414         MOV       A,#0x14
   \   000009   12....       LCALL     ?XSTACK_DISP0_8
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   1502          
   1503          	switch (datatype) {
   \   000014   E9           MOV       A,R1
   \   000015   24E0         ADD       A,#-0x20
   \   000017   6035         JZ        ??bdb_isAttrValueChangedSurpassDelta_0
   \   000019   14           DEC       A
   \   00001A   6054         JZ        ??bdb_isAttrValueChangedSurpassDelta_1
   \   00001C   14           DEC       A
   \   00001D   606F         JZ        ??bdb_isAttrValueChangedSurpassDelta_2
   \   00001F   14           DEC       A
   \   000020   7003         JNZ       $+5
   \   000022   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_3 & 0xFFFF
   \   000025   24FB         ADD       A,#-0x5
   \   000027   7003         JNZ       $+5
   \   000029   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_4 & 0xFFFF
   \   00002C   14           DEC       A
   \   00002D   7003         JNZ       $+5
   \   00002F   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_5 & 0xFFFF
   \   000032   14           DEC       A
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_6 & 0xFFFF
   \   000038   14           DEC       A
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_6 & 0xFFFF
   \   00003E   24F2         ADD       A,#-0xe
   \   000040   7003         JNZ       $+5
   \   000042   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_7 & 0xFFFF
   \   000045   14           DEC       A
   \   000046   7003         JNZ       $+5
   \   000048   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_8 & 0xFFFF
   \   00004B   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_9 & 0xFFFF
   1504          	case ZCL_DATATYPE_UINT8:
   1505          	{
   1506          		uint8 L = *((uint8 *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_0:
   \   00004E   12....       LCALL     ?Subroutine27 & 0xFFFF
   1507          		uint8 D = *((uint8 *)delta);
   1508          		uint8 C = *((uint8 *)curValue);
   1509          		if (L >= C)
   \                     ??CrossCallReturnLabel_34:
   \   000051   AA..         MOV       R2,?V1
   \   000053   A8..         MOV       R0,?V0
   \   000055   E8           MOV       A,R0
   \   000056   C3           CLR       C
   \   000057   95..         SUBB      A,?V1
   \   000059   4005         JC        ??bdb_isAttrValueChangedSurpassDelta_10
   1510          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \   00005B   E8           MOV       A,R0
   \   00005C   C3           CLR       C
   \   00005D   9A           SUBB      A,R2
   \   00005E   8003         SJMP      ??bdb_isAttrValueChangedSurpassDelta_11
   1511          		else
   1512          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_10:
   \   000060   EA           MOV       A,R2
   \   000061   C3           CLR       C
   \   000062   98           SUBB      A,R0
   \                     ??bdb_isAttrValueChangedSurpassDelta_11:
   \   000063   F8           MOV       R0,A
   \   000064   95E0         SUBB      A,0xE0 /* A   */
   \   000066   F9           MOV       R1,A
   \   000067   C3           CLR       C
   \   000068   E8           MOV       A,R0
   \   000069   9C           SUBB      A,R4
   \   00006A   E9           MOV       A,R1
   \   00006B   9400         SUBB      A,#0x0
   \   00006D   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_12 & 0xFFFF
   1513          		break;
   1514          	}
   1515          	case ZCL_DATATYPE_UINT16:
   1516          	{
   1517          		uint16 L = *((uint16 *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_1:
   \   000070   12....       LCALL     ?Subroutine22 & 0xFFFF
   1518          		uint16 D = *((uint16 *)delta);
   1519          		uint16 C = *((uint16 *)curValue);
   1520          		if (L >= C)
   \                     ??CrossCallReturnLabel_22:
   \   000073   4008         JC        ??bdb_isAttrValueChangedSurpassDelta_13
   1521          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \   000075   E8           MOV       A,R0
   \   000076   C3           CLR       C
   \   000077   9A           SUBB      A,R2
   \   000078   F8           MOV       R0,A
   \   000079   E9           MOV       A,R1
   \   00007A   9B           SUBB      A,R3
   \   00007B   8006         SJMP      ??bdb_isAttrValueChangedSurpassDelta_14
   1522          		else
   1523          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_13:
   \   00007D   EA           MOV       A,R2
   \   00007E   C3           CLR       C
   \   00007F   98           SUBB      A,R0
   \   000080   F8           MOV       R0,A
   \   000081   EB           MOV       A,R3
   \   000082   99           SUBB      A,R1
   \                     ??bdb_isAttrValueChangedSurpassDelta_14:
   \   000083   F9           MOV       R1,A
   \   000084   C3           CLR       C
   \   000085   E8           MOV       A,R0
   \   000086   95..         SUBB      A,?V0
   \   000088   E9           MOV       A,R1
   \   000089   95..         SUBB      A,?V1
   \   00008B   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
   1524          		break;
   1525          	}
   1526          	case ZCL_DATATYPE_UINT24:
   1527          	{
   1528          		uint24 L = *((uint24 *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_2:
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?L_MOV_X
   1529          		uint24 D = *((uint24 *)delta);
   \   000093   8A82         MOV       DPL,R2
   \   000095   8B83         MOV       DPH,R3
   \   000097   78..         MOV       R0,#?V4
   \   000099   12....       LCALL     ?L_MOV_X
   1530          		uint24 C = *((uint24 *)curValue);
   \   00009C   8C82         MOV       DPL,R4
   \   00009E   8D83         MOV       DPH,R5
   \   0000A0   78..         MOV       R0,#?V8
   \   0000A2   12....       LCALL     ?L_MOV_X
   1531          		if (L >= C)
   \   0000A5   78..         MOV       R0,#?V8
   \   0000A7   79..         MOV       R1,#?V0
   \   0000A9   12....       LCALL     ?UL_GT
   \   0000AC   4033         JC        ??bdb_isAttrValueChangedSurpassDelta_16
   1532          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \   0000AE   8020         SJMP      ??bdb_isAttrValueChangedSurpassDelta_17
   1533          		else
   1534          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   1535          		break;
   1536          	}
   1537          	case ZCL_DATATYPE_UINT32:
   1538          	{
   1539          		uint32 L = *((uint32 *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_3:
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?L_MOV_X
   1540          		uint32 D = *((uint32 *)delta);
   \   0000B5   8A82         MOV       DPL,R2
   \   0000B7   8B83         MOV       DPH,R3
   \   0000B9   78..         MOV       R0,#?V4
   \   0000BB   12....       LCALL     ?L_MOV_X
   1541          		uint32 C = *((uint32 *)curValue);
   \   0000BE   8C82         MOV       DPL,R4
   \   0000C0   8D83         MOV       DPH,R5
   \   0000C2   78..         MOV       R0,#?V8
   \   0000C4   12....       LCALL     ?L_MOV_X
   1542          		if (L >= C)
   \   0000C7   78..         MOV       R0,#?V8
   \   0000C9   79..         MOV       R1,#?V0
   \   0000CB   12....       LCALL     ?UL_GT
   \   0000CE   4011         JC        ??bdb_isAttrValueChangedSurpassDelta_16
   1543          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_17:
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   79..         MOV       R1,#?V8
   \   0000D4   12....       LCALL     ?L_SUB
   \   0000D7   78..         MOV       R0,#?V4
   \   0000D9   79..         MOV       R1,#?V0
   \   0000DB   12....       LCALL     ?UL_GT
   \   0000DE   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
   1544          		else
   1545          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_16:
   \   0000E1   78..         MOV       R0,#?V8
   \   0000E3   79..         MOV       R1,#?V0
   \   0000E5   12....       LCALL     ?L_SUB
   \   0000E8   78..         MOV       R0,#?V4
   \   0000EA   79..         MOV       R1,#?V8
   \   0000EC   12....       LCALL     ?UL_GT
   \   0000EF   02....       LJMP      ??bdb_isAttrValueChangedSurpassDelta_15 & 0xFFFF
   1546          		break;
   1547          	}
   1548          	case ZCL_DATATYPE_INT8:
   1549          	{
   1550          		int8 L = *((int8 *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_4:
   \   0000F2   12....       LCALL     ?Subroutine27 & 0xFFFF
   1551          		int8 D = *((int8 *)delta);
   1552          		int8 C = *((int8 *)curValue);
   1553          		if (L >= C)
   \                     ??CrossCallReturnLabel_35:
   \   0000F5   33           RLC       A
   \   0000F6   95E0         SUBB      A,0xE0 /* A   */
   \   0000F8   FD           MOV       R5,A
   \   0000F9   E5..         MOV       A,?V1
   \   0000FB   FA           MOV       R2,A
   \   0000FC   33           RLC       A
   \   0000FD   95E0         SUBB      A,0xE0 /* A   */
   \   0000FF   FB           MOV       R3,A
   \   000100   E5..         MOV       A,?V0
   \   000102   F8           MOV       R0,A
   \   000103   33           RLC       A
   \   000104   95E0         SUBB      A,0xE0 /* A   */
   \   000106   F9           MOV       R1,A
   \   000107   E8           MOV       A,R0
   \   000108   C3           CLR       C
   \   000109   95..         SUBB      A,?V1
   \   00010B   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00010D   65D0         XRL       A,PSW
   \   00010F   33           RLC       A
   \   000110   4008         JC        ??bdb_isAttrValueChangedSurpassDelta_18
   1554          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \   000112   E8           MOV       A,R0
   \   000113   C3           CLR       C
   \   000114   9A           SUBB      A,R2
   \   000115   F8           MOV       R0,A
   \   000116   E9           MOV       A,R1
   \   000117   9B           SUBB      A,R3
   \   000118   8006         SJMP      ??bdb_isAttrValueChangedSurpassDelta_19
   1555          		else
   1556          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_18:
   \   00011A   EA           MOV       A,R2
   \   00011B   C3           CLR       C
   \   00011C   98           SUBB      A,R0
   \   00011D   F8           MOV       R0,A
   \   00011E   EB           MOV       A,R3
   \   00011F   99           SUBB      A,R1
   \                     ??bdb_isAttrValueChangedSurpassDelta_19:
   \   000120   F9           MOV       R1,A
   \   000121   C3           CLR       C
   \   000122   E8           MOV       A,R0
   \   000123   9C           SUBB      A,R4
   \   000124   E9           MOV       A,R1
   \   000125   9D           SUBB      A,R5
   \   000126   8020         SJMP      ??bdb_isAttrValueChangedSurpassDelta_12
   1557          		break;
   1558          	}
   1559          	case ZCL_DATATYPE_INT16:
   1560          	{
   1561          		int16 L = *((int16 *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_5:
   \   000128   12....       LCALL     ?Subroutine22 & 0xFFFF
   1562          		int16 D = *((int16 *)delta);
   1563          		int16 C = *((int16 *)curValue);
   1564          		if (L >= C)
   \                     ??CrossCallReturnLabel_23:
   \   00012B   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00012D   65D0         XRL       A,PSW
   \   00012F   33           RLC       A
   \   000130   4008         JC        ??bdb_isAttrValueChangedSurpassDelta_20
   1565          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \   000132   E8           MOV       A,R0
   \   000133   C3           CLR       C
   \   000134   9A           SUBB      A,R2
   \   000135   F8           MOV       R0,A
   \   000136   E9           MOV       A,R1
   \   000137   9B           SUBB      A,R3
   \   000138   8006         SJMP      ??bdb_isAttrValueChangedSurpassDelta_21
   1566          		else
   1567          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_20:
   \   00013A   EA           MOV       A,R2
   \   00013B   C3           CLR       C
   \   00013C   98           SUBB      A,R0
   \   00013D   F8           MOV       R0,A
   \   00013E   EB           MOV       A,R3
   \   00013F   99           SUBB      A,R1
   \                     ??bdb_isAttrValueChangedSurpassDelta_21:
   \   000140   F9           MOV       R1,A
   \   000141   C3           CLR       C
   \   000142   E8           MOV       A,R0
   \   000143   95..         SUBB      A,?V0
   \   000145   E9           MOV       A,R1
   \   000146   95..         SUBB      A,?V1
   \                     ??bdb_isAttrValueChangedSurpassDelta_12:
   \   000148   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00014A   65D0         XRL       A,PSW
   \   00014C   33           RLC       A
   \   00014D   803E         SJMP      ??bdb_isAttrValueChangedSurpassDelta_15
   1568          		break;
   1569          	}
   1570          	case ZCL_DATATYPE_INT24:
   1571          	{
   1572          		int24 L = *((int24 *)lastValue);
   1573          		int24 D = *((int24 *)delta);
   1574          		int24 C = *((int24 *)curValue);
   1575          		if (L >= C)
   1576          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   1577          		else
   1578          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   1579          		break;
   1580          	}
   1581          	case ZCL_DATATYPE_INT32:
   1582          	{
   1583          		int32 L = *((int32 *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_6:
   \   00014F   78..         MOV       R0,#?V0
   \   000151   12....       LCALL     ?L_MOV_X
   1584          		int32 D = *((int32 *)delta);
   \   000154   8A82         MOV       DPL,R2
   \   000156   8B83         MOV       DPH,R3
   \   000158   78..         MOV       R0,#?V4
   \   00015A   12....       LCALL     ?L_MOV_X
   1585          		int32 C = *((int32 *)curValue);
   \   00015D   8C82         MOV       DPL,R4
   \   00015F   8D83         MOV       DPH,R5
   \   000161   78..         MOV       R0,#?V8
   \   000163   12....       LCALL     ?L_MOV_X
   1586          		if (L >= C)
   \   000166   78..         MOV       R0,#?V8
   \   000168   79..         MOV       R1,#?V0
   \   00016A   12....       LCALL     ?SL_GT
   \   00016D   4010         JC        ??bdb_isAttrValueChangedSurpassDelta_22
   1587          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \   00016F   78..         MOV       R0,#?V0
   \   000171   79..         MOV       R1,#?V8
   \   000173   12....       LCALL     ?L_SUB
   \   000176   78..         MOV       R0,#?V4
   \   000178   79..         MOV       R1,#?V0
   \   00017A   12....       LCALL     ?SL_GT
   \   00017D   800E         SJMP      ??bdb_isAttrValueChangedSurpassDelta_15
   1588          		else
   1589          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_22:
   \   00017F   78..         MOV       R0,#?V8
   \   000181   79..         MOV       R1,#?V0
   \   000183   12....       LCALL     ?L_SUB
   \   000186   78..         MOV       R0,#?V4
   \   000188   79..         MOV       R1,#?V8
   \   00018A   12....       LCALL     ?SL_GT
   \                     ??bdb_isAttrValueChangedSurpassDelta_15:
   \   00018D   4076         JC        ??bdb_isAttrValueChangedSurpassDelta_9
   \   00018F   8072         SJMP      ??bdb_isAttrValueChangedSurpassDelta_23
   1590          		break;
   1591          	}
   1592          	case ZCL_DATATYPE_SINGLE_PREC:
   1593          	{
   1594          		float L = *((float *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_7:
   \   000191   78..         MOV       R0,#?V0
   \   000193   12....       LCALL     ?L_MOV_X
   1595          		float D = *((float *)delta);
   \   000196   8A82         MOV       DPL,R2
   \   000198   8B83         MOV       DPH,R3
   \   00019A   78..         MOV       R0,#?V4
   \   00019C   12....       LCALL     ?L_MOV_X
   1596          		float C = *((float *)curValue);
   \   00019F   8C82         MOV       DPL,R4
   \   0001A1   8D83         MOV       DPH,R5
   \   0001A3   78..         MOV       R0,#?V8
   \   0001A5   12....       LCALL     ?L_MOV_X
   1597          		if (L >= C)
   \   0001A8   78..         MOV       R0,#?V0
   \   0001AA   79..         MOV       R1,#?V8
   \   0001AC   12....       LCALL     ?FLT_GE
   \   0001AF   4030         JC        ??bdb_isAttrValueChangedSurpassDelta_24
   1598          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   1599          		else
   1600          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \   0001B1   78..         MOV       R0,#?V8
   \   0001B3   79..         MOV       R1,#?V0
   \   0001B5   12....       LCALL     ?FLT_SUB
   \   0001B8   78..         MOV       R0,#?V8
   \   0001BA   79..         MOV       R1,#?V4
   \   0001BC   12....       LCALL     ?FLT_GE
   \   0001BF   802E         SJMP      ??bdb_isAttrValueChangedSurpassDelta_25
   1601          		break;
   1602          	}
   1603          	case ZCL_DATATYPE_DOUBLE_PREC:
   1604          	{
   1605          		double L = *((double *)lastValue);
   \                     ??bdb_isAttrValueChangedSurpassDelta_8:
   \   0001C1   78..         MOV       R0,#?V0
   \   0001C3   12....       LCALL     ?L_MOV_X
   1606          		double D = *((double *)delta);
   \   0001C6   8A82         MOV       DPL,R2
   \   0001C8   8B83         MOV       DPH,R3
   \   0001CA   78..         MOV       R0,#?V4
   \   0001CC   12....       LCALL     ?L_MOV_X
   1607          		double C = *((double *)curValue);
   \   0001CF   8C82         MOV       DPL,R4
   \   0001D1   8D83         MOV       DPH,R5
   \   0001D3   78..         MOV       R0,#?V8
   \   0001D5   12....       LCALL     ?L_MOV_X
   1608          		if (L >= C)
   \   0001D8   78..         MOV       R0,#?V0
   \   0001DA   79..         MOV       R1,#?V8
   \   0001DC   12....       LCALL     ?FLT_GE
   \   0001DF   5012         JNC       ??bdb_isAttrValueChangedSurpassDelta_26
   1609          			res = (L - C >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_24:
   \   0001E1   78..         MOV       R0,#?V0
   \   0001E3   79..         MOV       R1,#?V8
   \   0001E5   12....       LCALL     ?FLT_SUB
   \   0001E8   78..         MOV       R0,#?V0
   \   0001EA   79..         MOV       R1,#?V4
   \   0001EC   12....       LCALL     ?FLT_GE
   \                     ??bdb_isAttrValueChangedSurpassDelta_25:
   \   0001EF   5014         JNC       ??bdb_isAttrValueChangedSurpassDelta_9
   \   0001F1   8010         SJMP      ??bdb_isAttrValueChangedSurpassDelta_23
   1610          		else
   1611          			res = (C - L >= D) ? BDBREPORTING_TRUE : BDBREPORTING_FALSE;
   \                     ??bdb_isAttrValueChangedSurpassDelta_26:
   \   0001F3   78..         MOV       R0,#?V8
   \   0001F5   79..         MOV       R1,#?V0
   \   0001F7   12....       LCALL     ?FLT_SUB
   \   0001FA   78..         MOV       R0,#?V8
   \   0001FC   79..         MOV       R1,#?V4
   \   0001FE   12....       LCALL     ?FLT_GE
   \   000201   5002         JNC       ??bdb_isAttrValueChangedSurpassDelta_9
   \                     ??bdb_isAttrValueChangedSurpassDelta_23:
   \   000203   7E01         MOV       R6,#0x1
   1612          		break;
   1613          	}
   1614          	case ZCL_DATATYPE_INT40:
   1615          	case ZCL_DATATYPE_INT48:
   1616          	case ZCL_DATATYPE_INT56:
   1617          	case ZCL_DATATYPE_UINT64:
   1618          	case ZCL_DATATYPE_INT64:
   1619          	case ZCL_DATATYPE_SEMI_PREC:
   1620          	case ZCL_DATATYPE_UINT40:
   1621          	case ZCL_DATATYPE_UINT48:
   1622          	case ZCL_DATATYPE_UINT56:
   1623          	case ZCL_DATATYPE_TOD:
   1624          	case ZCL_DATATYPE_DATE:
   1625          	case ZCL_DATATYPE_UTC:
   1626          	{
   1627          		// Not implemented
   1628          		res = BDBREPORTING_FALSE;
   1629          		break;
   1630          	}
   1631          	default:
   1632          	{
   1633          		res = BDBREPORTING_FALSE;
   1634          		break;
   1635          	}
   1636          	}
   1637          	return res;
   \                     ??bdb_isAttrValueChangedSurpassDelta_9:
   \   000205   EE           MOV       A,R6
   \   000206   F9           MOV       R1,A
   \   000207   02....       LJMP      ?Subroutine6 & 0xFFFF
   1638          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V1,A
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000003   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000006   8C82         MOV       DPL,R4
   \   000008   8D83         MOV       DPH,R5
   \   00000A   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00000D   C3           CLR       C
   \   00000E   E8           MOV       A,R0
   \   00000F   9A           SUBB      A,R2
   \   000010   E9           MOV       A,R1
   \   000011   9B           SUBB      A,R3
   \   000012   22           RET
   1639          
   1640          /*
   1641           * End: Helper methods
   1642           */
   1643          
   1644          
   1645          /*
   1646           * Begin: Reporting timer related methods
   1647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1648          static void bdb_RepRestartNextEventTimer(void)
   \                     bdb_RepRestartNextEventTimer:
   1649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1650          	uint32 timeMs;
   1651          
   1652          	// convert from seconds to milliseconds
   1653          	timeMs = 1000L * (bdb_reportingNextEventTimeout);
   1654          	osal_start_timerEx(bdb_TaskID, BDB_REPORT_TIMEOUT, timeMs);
   \   000005                ; Setup parameters for call to function osal_start_timerEx
   \   000005   90....       MOV       DPTR,#bdb_reportingNextEventTimeout
   \   000008   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00000B   90....       MOV       DPTR,#__Constant_3e8
   \   00000E   78..         MOV       R0,#?V4
   \   000010   12....       LCALL     ?L_MOV_X
   \   000013   78..         MOV       R0,#?V0
   \   000015   79..         MOV       R1,#?V4
   \   000017   12....       LCALL     ?L_MUL
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00001F   7A80         MOV       R2,#-0x80
   \   000021   7B00         MOV       R3,#0x0
   \   000023   90....       MOV       DPTR,#bdb_TaskID
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00002B   7404         MOV       A,#0x4
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   1655          }
   \   000030                REQUIRE ?Subroutine4
   \   000030                ; // Fall through to label ?Subroutine4
   1656          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1657          static void bdb_RepSetupReporting(void)
   \                     bdb_RepSetupReporting:
   1658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   1659          	uint8 numArrayFlags, i;
   1660          
   1661          	//Stop if reporting timer is active
   1662          	osal_stop_timerEx(bdb_TaskID, BDB_REPORT_TIMEOUT);
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005   12....       LCALL     ?Subroutine49 & 0xFFFF
   1663          
   1664          	numArrayFlags = bdb_reportingClusterEndpointArrayCount;
   \                     ??CrossCallReturnLabel_77:
   \   000008   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V2,A
   1665          	bdbReportFlagsHolder_t *arrayFlags = (bdbReportFlagsHolder_t *)osal_mem_alloc(sizeof(bdbReportFlagsHolder_t) * numArrayFlags);
   \   00000E                ; Setup parameters for call to function osal_mem_alloc
   \   00000E   F5..         MOV       ?V0,A
   \   000010   75..00       MOV       ?V1,#0x0
   \   000013   7402         MOV       A,#0x2
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?S_SHL
   \   00001A   AA..         MOV       R2,?V0
   \   00001C   AB..         MOV       R3,?V1
   \   00001E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV       ?V0,R2
   \   000023   8B..         MOV       ?V1,R3
   \   000025   AE..         MOV       R6,?V0
   \   000027   AF..         MOV       R7,?V1
   1666          	if (arrayFlags == NULL)
   \   000029   EA           MOV       A,R2
   \   00002A   4F           ORL       A,R7
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??bdb_RepSetupReporting_0 & 0xFFFF
   1667          		return;
   1668          	for (i = 0; i < numArrayFlags; i++) {
   \   000030   75..00       MOV       ?V3,#0x0
   \   000033   8046         SJMP      ??bdb_RepSetupReporting_1
   1669          		arrayFlags[i].endpoint = bdb_reportingClusterEndpointArray[i].endpoint;
   \                     ??bdb_RepSetupReporting_2:
   \   000035   AA..         MOV       R2,?V3
   \   000037   8A..         MOV       ?V0,R2
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   7402         MOV       A,#0x2
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?S_SHL
   \   000043   EE           MOV       A,R6
   \   000044   25..         ADD       A,?V0
   \   000046   F8           MOV       R0,A
   \   000047   EF           MOV       A,R7
   \   000048   35..         ADDC      A,?V1
   \   00004A   F9           MOV       R1,A
   \   00004B   EA           MOV       A,R2
   \   00004C   75F00D       MOV       B,#0xd
   \   00004F   A4           MUL       AB
   \   000050   FA           MOV       R2,A
   \   000051   ABF0         MOV       R3,B
   \   000053   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   000055   2A           ADD       A,R2
   \   000056   FA           MOV       R2,A
   \   000057   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000059   3B           ADDC      A,R3
   \   00005A   FB           MOV       R3,A
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   F583         MOV       DPH,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   8882         MOV       DPL,R0
   \   000063   8983         MOV       DPH,R1
   \   000065   12....       LCALL     ?Subroutine74 & 0xFFFF
   1670          		arrayFlags[i].cluster = bdb_reportingClusterEndpointArray[i].cluster;
   1671          		arrayFlags[i].flags = bdb_reportingClusterEndpointArray[i].flags;
   1672          	}
   \                     ??CrossCallReturnLabel_265:
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00006D   EC           MOV       A,R4
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   ED           MOV       A,R5
   \   000071   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000074   8882         MOV       DPL,R0
   \   000076   8983         MOV       DPH,R1
   \   000078   F0           MOVX      @DPTR,A
   \   000079   05..         INC       ?V3
   \                     ??bdb_RepSetupReporting_1:
   \   00007B   E5..         MOV       A,?V3
   \   00007D   C3           CLR       C
   \   00007E   95..         SUBB      A,?V2
   \   000080   40B3         JC        ??bdb_RepSetupReporting_2
   1673          
   1674          	if (bdb_reportingClusterEndpointArrayCount > 0)
   \   000082   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   000085   E0           MOVX      A,@DPTR
   \   000086   6051         JZ        ??bdb_RepSetupReporting_3
   1675          		bdb_clusterEndpointArrayFreeAll( );
   \   000088   F5..         MOV       ?V4,A
   \   00008A   75..00       MOV       ?V3,#0x0
   \   00008D   803E         SJMP      ??bdb_RepSetupReporting_4
   \                     ??bdb_RepSetupReporting_5:
   \   00008F   8A82         MOV       DPL,R2
   \   000091   8B83         MOV       DPH,R3
   \   000093   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000096   90....       MOV       DPTR,#bdb_reportingClusterEndpointArray + 11
   \   000099   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00009C   F5..         MOV       ?V0,A
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F5..         MOV       ?V1,A
   \   0000A2                ; Setup parameters for call to function osal_mem_free
   \   0000A2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A5   90....       MOV       DPTR,#bdb_reportingClusterEndpointArray + 10
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   14           DEC       A
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB                ; Setup parameters for call to function osal_mem_free
   \   0000AB   AA..         MOV       R2,?V0
   \   0000AD   AB..         MOV       R3,?V1
   \   0000AF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??bdb_RepSetupReporting_6:
   \   0000B2   90....       MOV       DPTR,#bdb_reportingClusterEndpointArray + 11
   \   0000B5   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0000B8   70D5         JNZ       ??bdb_RepSetupReporting_5
   \   0000BA                ; Setup parameters for call to function bdb_clusterEndpointArrayMoveTo
   \   0000BA   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   14           DEC       A
   \   0000BF   FA           MOV       R2,A
   \   0000C0   7900         MOV       R1,#0x0
   \   0000C2   12....       LCALL     `??bdb_clusterEndpointArrayMoveTo::?relay`; Banked call to: bdb_clusterEndpointArrayMoveTo
   \   0000C5   90....       MOV       DPTR,#bdb_reportingClusterEndpointArrayCount
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   14           DEC       A
   \   0000CA   F0           MOVX      @DPTR,A
   \                     ??bdb_RepSetupReporting_7:
   \   0000CB   05..         INC       ?V3
   \                     ??bdb_RepSetupReporting_4:
   \   0000CD   E5..         MOV       A,?V3
   \   0000CF   C3           CLR       C
   \   0000D0   95..         SUBB      A,?V4
   \   0000D2   5005         JNC       ??bdb_RepSetupReporting_3
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   70DB         JNZ       ??bdb_RepSetupReporting_6
   \   0000D7   80F2         SJMP      ??bdb_RepSetupReporting_7
   1676          
   1677          	//Built or rebuilt the clusterEndpoint array
   1678          	bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray( );
   \                     ??bdb_RepSetupReporting_3:
   \   0000D9                ; Setup parameters for call to function bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
   \   0000D9   12....       LCALL     ??bdb_repAttrBuildClusterEndPointArrayBasedOnCo; Banked call to: bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
   1679          
   1680          	for (i = 0; i < numArrayFlags; i++) {
   \   0000DC   75..00       MOV       ?V3,#0x0
   \   0000DF   8054         SJMP      ??bdb_RepSetupReporting_8
   1681          		uint8 clusterEndpointIndex = bdb_clusterEndpointArraySearch(arrayFlags[i].endpoint, arrayFlags[i].cluster);
   \                     ??bdb_RepSetupReporting_9:
   \   0000E1   E5..         MOV       A,?V3
   \   0000E3   F5..         MOV       ?V0,A
   \   0000E5   75..00       MOV       ?V1,#0x0
   \   0000E8   7402         MOV       A,#0x2
   \   0000EA   78..         MOV       R0,#?V0
   \   0000EC   12....       LCALL     ?S_SHL
   \   0000EF   EE           MOV       A,R6
   \   0000F0   25..         ADD       A,?V0
   \   0000F2   F8           MOV       R0,A
   \   0000F3   EF           MOV       A,R7
   \   0000F4   35..         ADDC      A,?V1
   \   0000F6   88..         MOV       ?V0,R0
   \   0000F8   F5..         MOV       ?V1,A
   \   0000FA                ; Setup parameters for call to function bdb_clusterEndpointArraySearch
   \   0000FA   8882         MOV       DPL,R0
   \   0000FC   F583         MOV       DPH,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000103   8882         MOV       DPL,R0
   \   000105   85..83       MOV       DPH,?V1
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   F9           MOV       R1,A
   \   00010B   12....       LCALL     `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
   \   00010E   E9           MOV       A,R1
   \   00010F   F8           MOV       R0,A
   1682          		if (clusterEndpointIndex != BDBREPORTING_INVALIDINDEX)
   \   000110   74FF         MOV       A,#-0x1
   \   000112   68           XRL       A,R0
   \   000113   601E         JZ        ??bdb_RepSetupReporting_10
   1683          			bdb_reportingClusterEndpointArray[clusterEndpointIndex].flags = arrayFlags[i].flags;
   \   000115   85..82       MOV       DPL,?V0
   \   000118   85..83       MOV       DPH,?V1
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   C0E0         PUSH      A
   \   00011E   E9           MOV       A,R1
   \   00011F   75F00D       MOV       B,#0xd
   \   000122   A4           MUL       AB
   \   000123   F8           MOV       R0,A
   \   000124   A9F0         MOV       R1,B
   \   000126   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   000128   28           ADD       A,R0
   \   000129   F582         MOV       DPL,A
   \   00012B   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   00012D   39           ADDC      A,R1
   \   00012E   F583         MOV       DPH,A
   \   000130   D0E0         POP       A
   \   000132   F0           MOVX      @DPTR,A
   1684          	}
   \                     ??bdb_RepSetupReporting_10:
   \   000133   05..         INC       ?V3
   \                     ??bdb_RepSetupReporting_8:
   \   000135   E5..         MOV       A,?V3
   \   000137   C3           CLR       C
   \   000138   95..         SUBB      A,?V2
   \   00013A   40A5         JC        ??bdb_RepSetupReporting_9
   1685          	osal_mem_free(arrayFlags);
   \   00013C                ; Setup parameters for call to function osal_mem_free
   \   00013C   EE           MOV       A,R6
   \   00013D   FA           MOV       R2,A
   \   00013E   EF           MOV       A,R7
   \   00013F   FB           MOV       R3,A
   \   000140   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1686          }
   \                     ??bdb_RepSetupReporting_0:
   \   000143   7F05         MOV       R7,#0x5
   \   000145   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine119_0
   \   000001                ; // Fall through to label ??Subroutine119_0
   1687          
   1688          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1689          static void bdb_RepStopEventTimer(void)
   \                     bdb_RepStopEventTimer:
   1690          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1691          	osal_stop_timerEx(bdb_TaskID, BDB_REPORT_TIMEOUT);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   12....       LCALL     ?Subroutine49 & 0xFFFF
   1692          }
   \                     ??CrossCallReturnLabel_78:
   \   000007   02....       LJMP      ??Subroutine102_0 & 0xFFFF
   1693          
   1694          /*
   1695           * End: Reporting timer related methods
   1696           */
   1697          
   1698          /*
   1699           * Begin: Ztack zcl helper methods
   1700           */
   1701          
   1702          /*********************************************************************
   1703           * @fn      bdb_FindEpDesc
   1704           *
   1705           * @brief   Find the EndPoint descriptor pointer
   1706           *
   1707           * @param   endPoint - EndPoint Id
   1708           *
   1709           * @return  CurrEpDescriptor - Pointer to found Simple Descriptor, NULL otherwise
   1710           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1711          static endPointDesc_t *bdb_FindEpDesc(uint8 endPoint)
   \                     bdb_FindEpDesc:
   1712          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1713          	endPointDesc_t *CurrEpDescriptor = NULL;
   1714          
   1715          	epList_t *bdb_CurrEpDescriptorNextInList;
   1716          
   1717          	bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
   \   000004   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FC           MOV       R4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   8003         SJMP      ??bdb_FindEpDesc_0
   1718          	CurrEpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   1719          
   1720          	while (CurrEpDescriptor->endPoint != endPoint) {
   1721          		if (bdb_CurrEpDescriptorNextInList->nextDesc->nextDesc != NULL) {
   1722          			bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   \                     ??bdb_FindEpDesc_1:
   \   00000D   EA           MOV       A,R2
   \   00000E   FC           MOV       R4,A
   \   00000F   EB           MOV       A,R3
   \                     ??bdb_FindEpDesc_0:
   \   000010   FD           MOV       R5,A
   1723          			CurrEpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   \   000011   8C82         MOV       DPL,R4
   \   000013   F583         MOV       DPH,A
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FA           MOV       R2,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   F583         MOV       DPH,A
   1724          		} else {
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   69           XRL       A,R1
   \   000021   6014         JZ        ??bdb_FindEpDesc_2
   \   000023   8C82         MOV       DPL,R4
   \   000025   8D83         MOV       DPH,R5
   \   000027   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00002A   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   00002D   EC           MOV       A,R4
   \   00002E   4D           ORL       A,R5
   \   00002F   70DC         JNZ       ??bdb_FindEpDesc_1
   1725          			return NULL;
   \   000031   7A00         MOV       R2,#0x0
   \   000033   7B00         MOV       R3,#0x0
   \   000035   8004         SJMP      ??bdb_FindEpDesc_3
   1726          		}
   1727          	}
   1728          	return CurrEpDescriptor;
   \                     ??bdb_FindEpDesc_2:
   \   000037   AA82         MOV       R2,DPL
   \   000039   AB83         MOV       R3,DPH
   \                     ??bdb_FindEpDesc_3:
   \   00003B   02....       LJMP      ??Subroutine102_0 & 0xFFFF
   1729          }
   1730          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1731          static uint8 bdb_RepFindAttrEntry(uint8 endpoint, uint16 cluster, uint16 attrID, zclAttribute_t *attrRes)
   \                     bdb_RepFindAttrEntry:
   1732          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
   1733          	epList_t *epCur = epList;
   1734          	uint8 i;
   1735          
   1736          	zcl_memset(gAttrDataValue, 0, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C04         MOV       R4,#0x4
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   7A..         MOV       R2,#gAttrDataValue & 0xff
   \   00001C   7B..         MOV       R3,#(gAttrDataValue >> 8) & 0xff
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1737          	for (epCur = epList; epCur != NULL; epCur = epCur->nextDesc) {
   \   000021   90....       MOV       DPTR,#epList
   \   000024   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000027   E8           MOV       A,R0
   \   000028   FE           MOV       R6,A
   \   000029   E9           MOV       A,R1
   \   00002A   8008         SJMP      ??bdb_RepFindAttrEntry_0
   \                     ??bdb_RepFindAttrEntry_1:
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   E0           MOVX      A,@DPTR
   \   000031   FE           MOV       R6,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \                     ??bdb_RepFindAttrEntry_0:
   \   000034   FF           MOV       R7,A
   \   000035   EE           MOV       A,R6
   \   000036   4F           ORL       A,R7
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??bdb_RepFindAttrEntry_2 & 0xFFFF
   1738          		if (epCur->epDesc->endPoint == endpoint) {
   \   00003C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00003F   E5..         MOV       A,?V0
   \   000041   69           XRL       A,R1
   \   000042   70E8         JNZ       ??bdb_RepFindAttrEntry_1
   1739          			zclAttrRecsList *attrItem = zclFindAttrRecsList(epCur->epDesc->endPoint);
   \   000044                ; Setup parameters for call to function zclFindAttrRecsList
   \   000044   12....       LCALL     ?Subroutine72 & 0xFFFF
   1740          
   1741          			if ((attrItem != NULL) && ((attrItem->numAttributes > 0) && (attrItem->attrs != NULL))) {
   \                     ??CrossCallReturnLabel_127:
   \   000047   60E3         JZ        ??bdb_RepFindAttrEntry_1
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F5..         MOV       ?V1,A
   \   000057   60D3         JZ        ??bdb_RepFindAttrEntry_1
   \   000059   EA           MOV       A,R2
   \   00005A   2408         ADD       A,#0x8
   \   00005C   5001         JNC       ??bdb_RepFindAttrEntry_3
   \   00005E   09           INC       R1
   \                     ??bdb_RepFindAttrEntry_3:
   \   00005F   FC           MOV       R4,A
   \   000060   E9           MOV       A,R1
   \   000061   FD           MOV       R5,A
   \   000062   8C82         MOV       DPL,R4
   \   000064   F583         MOV       DPH,A
   \   000066   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000069   60C1         JZ        ??bdb_RepFindAttrEntry_1
   1742          				for (i = 0; i < attrItem->numAttributes; i++) {
   \   00006B   75..00       MOV       ?V10,#0x0
   \   00006E   8002         SJMP      ??bdb_RepFindAttrEntry_4
   \                     ??bdb_RepFindAttrEntry_5:
   \   000070   05..         INC       ?V10
   \                     ??bdb_RepFindAttrEntry_4:
   \   000072   E5..         MOV       A,?V10
   \   000074   C3           CLR       C
   \   000075   95..         SUBB      A,?V1
   \   000077   50B3         JNC       ??bdb_RepFindAttrEntry_1
   1743          					if ((attrItem->attrs[i].clusterID == cluster) && (attrItem->attrs[i].attr.attrId == attrID)) {
   \   000079   E5..         MOV       A,?V10
   \   00007B   F5..         MOV       ?V6,A
   \   00007D   75..00       MOV       ?V7,#0x0
   \   000080   7403         MOV       A,#0x3
   \   000082   78..         MOV       R0,#?V6
   \   000084   12....       LCALL     ?S_SHL
   \   000087   A8..         MOV       R0,?V6
   \   000089   A9..         MOV       R1,?V7
   \   00008B   EA           MOV       A,R2
   \   00008C   28           ADD       A,R0
   \   00008D   F5..         MOV       ?V6,A
   \   00008F   EB           MOV       A,R3
   \   000090   39           ADDC      A,R1
   \   000091   F5..         MOV       ?V7,A
   \   000093   85..82       MOV       DPL,?V6
   \   000096   F583         MOV       DPH,A
   \   000098   E4           CLR       A
   \   000099   93           MOVC      A,@A+DPTR
   \   00009A   F5..         MOV       ?V8,A
   \   00009C   7401         MOV       A,#0x1
   \   00009E   93           MOVC      A,@A+DPTR
   \   00009F   F5..         MOV       ?V9,A
   \   0000A1   E5..         MOV       A,?V2
   \   0000A3   65..         XRL       A,?V8
   \   0000A5   7004         JNZ       ??bdb_RepFindAttrEntry_6
   \   0000A7   E5..         MOV       A,?V3
   \   0000A9   65..         XRL       A,?V9
   \                     ??bdb_RepFindAttrEntry_6:
   \   0000AB   70C3         JNZ       ??bdb_RepFindAttrEntry_5
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E4           CLR       A
   \   0000B0   93           MOVC      A,@A+DPTR
   \   0000B1   C0E0         PUSH      A
   \   0000B3   7401         MOV       A,#0x1
   \   0000B5   93           MOVC      A,@A+DPTR
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   D082         POP       DPL
   \   0000BA   8582..       MOV       ?V8,DPL
   \   0000BD   8583..       MOV       ?V9,DPH
   \   0000C0   E5..         MOV       A,?V4
   \   0000C2   65..         XRL       A,?V8
   \   0000C4   7004         JNZ       ??bdb_RepFindAttrEntry_7
   \   0000C6   E5..         MOV       A,?V5
   \   0000C8   65..         XRL       A,?V9
   \                     ??bdb_RepFindAttrEntry_7:
   \   0000CA   70A4         JNZ       ??bdb_RepFindAttrEntry_5
   \   0000CC   7415         MOV       A,#0x15
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   1744          						uint16 dataLen;
   1745          
   1746          						attrRes->attrId = attrItem->attrs[i].attr.attrId;
   \                     ??CrossCallReturnLabel_238:
   \   0000D4   8E82         MOV       DPL,R6
   \   0000D6   F583         MOV       DPH,A
   \   0000D8   E5..         MOV       A,?V8
   \   0000DA   F0           MOVX      @DPTR,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   E5..         MOV       A,?V9
   \   0000DE   F0           MOVX      @DPTR,A
   1747          						attrRes->dataType = attrItem->attrs[i].attr.dataType;
   \   0000DF   EE           MOV       A,R6
   \   0000E0   2402         ADD       A,#0x2
   \   0000E2   FA           MOV       R2,A
   \   0000E3   E4           CLR       A
   \   0000E4   3F           ADDC      A,R7
   \   0000E5   FB           MOV       R3,A
   \   0000E6   85..82       MOV       DPL,?V6
   \   0000E9   85..83       MOV       DPH,?V7
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   E4           CLR       A
   \   0000F1   93           MOVC      A,@A+DPTR
   \   0000F2   8A82         MOV       DPL,R2
   \   0000F4   8B83         MOV       DPH,R3
   \   0000F6   F0           MOVX      @DPTR,A
   1748          						attrRes->accessControl = attrItem->attrs[i].attr.accessControl;
   \   0000F7   8C82         MOV       DPL,R4
   \   0000F9   8D83         MOV       DPH,R5
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   28           ADD       A,R0
   \   0000FD   FC           MOV       R4,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   39           ADDC      A,R1
   \   000101   8C82         MOV       DPL,R4
   \   000103   F583         MOV       DPH,A
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   E4           CLR       A
   \   00010B   93           MOVC      A,@A+DPTR
   \   00010C   8E82         MOV       DPL,R6
   \   00010E   8F83         MOV       DPH,R7
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   1749          
   1750          						dataLen = zclGetDataTypeLength(attrRes->dataType);
   \                     ??CrossCallReturnLabel_262:
   \   000116   F9           MOV       R1,A
   \   000117   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   00011A   E9           MOV       A,R1
   \   00011B   85..82       MOV       DPL,?XSP + 0
   \   00011E   85..83       MOV       DPH,?XSP + 1
   \   000121   F0           MOVX      @DPTR,A
   \   000122   A3           INC       DPTR
   \   000123   E4           CLR       A
   \   000124   F0           MOVX      @DPTR,A
   1751          						zcl_ReadAttrData(endpoint, cluster, attrRes->attrId, gAttrDataValue, &dataLen);
   \   000125                ; Setup parameters for call to function zcl_ReadAttrData
   \   000125   A8..         MOV       R0,?XSP + 0
   \   000127   A9..         MOV       R1,?XSP + 1
   \   000129   88..         MOV       ?V4,R0
   \   00012B   89..         MOV       ?V5,R1
   \   00012D   78..         MOV       R0,#?V4
   \   00012F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000132   75....       MOV       ?V4,#gAttrDataValue & 0xff
   \   000135   75....       MOV       ?V5,#(gAttrDataValue >> 8) & 0xff
   \   000138   78..         MOV       R0,#?V4
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013D   8E82         MOV       DPL,R6
   \   00013F   8F83         MOV       DPH,R7
   \   000141   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000144   AA..         MOV       R2,?V2
   \   000146   AB..         MOV       R3,?V3
   \   000148   A9..         MOV       R1,?V0
   \   00014A   12....       LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   00014D   7404         MOV       A,#0x4
   \   00014F   12....       LCALL     ?DEALLOC_XSTACK8
   1752          						attrRes->dataPtr = gAttrDataValue;
   \   000152   8E82         MOV       DPL,R6
   \   000154   8F83         MOV       DPH,R7
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   74..         MOV       A,#gAttrDataValue & 0xff
   \   00015C   F0           MOVX      @DPTR,A
   \   00015D   A3           INC       DPTR
   \   00015E   74..         MOV       A,#(gAttrDataValue >> 8) & 0xff
   \   000160   F0           MOVX      @DPTR,A
   1753          						return BDBREPORTING_TRUE;
   \   000161   7901         MOV       R1,#0x1
   \   000163   8002         SJMP      ??bdb_RepFindAttrEntry_8
   1754          					}
   1755          				}
   1756          			}
   1757          		}
   1758          	}
   1759          	return BDBREPORTING_FALSE;
   \                     ??bdb_RepFindAttrEntry_2:
   \   000165   7900         MOV       R1,#0x0
   \                     ??bdb_RepFindAttrEntry_8:
   \   000167   7402         MOV       A,#0x2
   \   000169   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016C   7F0B         MOV       R7,#0xb
   \   00016E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1760          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine117_0
   \   000006                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000003   8B..         MOV       ?V7,R3
   \   000005   A9..         MOV       R1,?V7
   \   000007   EA           MOV       A,R2
   \   000008   49           ORL       A,R1
   \   000009   22           RET
   1761          
   1762          /*
   1763           * End: Ztack zcl helper methods
   1764           */
   1765          
   1766          
   1767          
   1768          
   1769          /*********************************************************************
   1770          *********************************************************************/
   1771          
   1772          /*
   1773           * Begin: Reporting attr app API methods
   1774           */
   1775          
   1776          
   1777          
   1778          /*********************************************************************
   1779           * @fn          bdb_RepAddAttrCfgRecordDefaultToList
   1780           *
   1781           * @brief       Adds default configuration values for a Reportable Attribute Record
   1782           *
   1783           * @param       endpoint
   1784           * @param       cluster
   1785           * @param       attrID - Reporable attribute ID
   1786           * @param       minReportInt - Default value for minimum reportable interval
   1787           * @param       maxReportInt - Default value for maximum reportable interval
   1788           * @param       reportableChange - buffer containing attribute value that is the
   1789           *              delta change to trigger a report
   1790           *
   1791           * @return      ZInvalidParameter - No endpoint, cluster, attribute ID found in simple desc
   1792           *              ZFailure - No memory to allocate entry
   1793           *              ZSuccess
   1794           *
   1795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine100_0
   \   000005                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1796          ZStatus_t bdb_RepAddAttrCfgRecordDefaultToList(uint8 endpoint, uint16 cluster, uint16 attrID, uint16 minReportInt, uint16 maxReportInt, uint8 *reportableChange)
   \                     bdb_RepAddAttrCfgRecordDefaultToList:
   1797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V2,R2
   \   000009   8B..         MOV       ?V3,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   1798          	uint8 status;
   1799          	epList_t *epCur;
   1800          	uint8 i;
   1801          
   1802          	if (bdb_reportingAcceptDefaultConfs == BDBREPORTING_FALSE)
   \   00000F   90....       MOV       DPTR,#bdb_reportingAcceptDefaultConfs
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6077         JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_0
   1803          		//Don't accept anymore default attribute configurations
   1804          		return ZFailure;
   1805          
   1806          	//Find if endpoint and cluster values are valid
   1807          	uint8 foundEndpCluster = BDBREPORTING_FALSE;
   1808          	for (epCur = epList; epCur != NULL; epCur = epCur->nextDesc) {
   \   000015   90....       MOV       DPTR,#epList
   \   000018   8004         SJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_1
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_2:
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_1:
   \   00001E   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000021   4F           ORL       A,R7
   \   000022   606D         JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_3
   1809          		if (epCur->epDesc->endPoint != endpoint)
   \   000024   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000027   E5..         MOV       A,?V4
   \   000029   69           XRL       A,R1
   \   00002A   70EE         JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_2
   1810          			continue;
   1811          		zclAttrRecsList *attrItem = zclFindAttrRecsList(epCur->epDesc->endPoint);
   \   00002C                ; Setup parameters for call to function zclFindAttrRecsList
   \   00002C   12....       LCALL     ?Subroutine72 & 0xFFFF
   1812          		if (attrItem == NULL)
   \                     ??CrossCallReturnLabel_128:
   \   00002F   60E9         JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_2
   1813          			continue;
   1814          		if (attrItem->numAttributes == 0 || attrItem->attrs == NULL)
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   FD           MOV       R5,A
   \   00003E   60DA         JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_2
   \   000040   8A82         MOV       DPL,R2
   \   000042   8B83         MOV       DPH,R3
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000049   60CF         JZ        ??bdb_RepAddAttrCfgRecordDefaultToList_2
   1815          			continue;
   1816          		for (i = 0; i < attrItem->numAttributes; i++) {
   \   00004B   7C00         MOV       R4,#0x0
   \   00004D   8001         SJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_4
   1817          			if (attrItem->attrs[i].clusterID != cluster)
   1818          				continue;
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_5:
   \   00004F   0C           INC       R4
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_4:
   \   000050   EC           MOV       A,R4
   \   000051   C3           CLR       C
   \   000052   9D           SUBB      A,R5
   \   000053   503C         JNC       ??bdb_RepAddAttrCfgRecordDefaultToList_3
   \   000055   EC           MOV       A,R4
   \   000056   F5..         MOV       ?V6,A
   \   000058   75..00       MOV       ?V7,#0x0
   \   00005B   7403         MOV       A,#0x3
   \   00005D   78..         MOV       R0,#?V6
   \   00005F   12....       LCALL     ?S_SHL
   \   000062   EA           MOV       A,R2
   \   000063   25..         ADD       A,?V6
   \   000065   F582         MOV       DPL,A
   \   000067   EB           MOV       A,R3
   \   000068   35..         ADDC      A,?V7
   \   00006A   F583         MOV       DPH,A
   \   00006C   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00006F   E5..         MOV       A,?V2
   \   000071   68           XRL       A,R0
   \   000072   7003         JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_6
   \   000074   E5..         MOV       A,?V3
   \   000076   69           XRL       A,R1
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_6:
   \   000077   70D6         JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_5
   1819          			foundEndpCluster = BDBREPORTING_TRUE;
   1820          			break;
   1821          		}
   1822          		break;
   1823          	}
   1824          	if (foundEndpCluster == BDBREPORTING_FALSE)
   1825          		return ZInvalidParameter;
   1826          
   1827          	//Add default cfg values to list
   1828          	bdbReportAttrDefaultCfgData_t *record = (bdbReportAttrDefaultCfgData_t *)osal_mem_alloc(sizeof(bdbReportAttrDefaultCfgData_t));
   \   000079                ; Setup parameters for call to function osal_mem_alloc
   \   000079   7A0D         MOV       R2,#0xd
   \   00007B   7B00         MOV       R3,#0x0
   \   00007D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000080   8A..         MOV       ?V6,R2
   \   000082   8B..         MOV       ?V7,R3
   \   000084   AE..         MOV       R6,?V6
   \   000086   AF..         MOV       R7,?V7
   1829          	if (record == NULL)
   \   000088   EA           MOV       A,R2
   \   000089   4F           ORL       A,R7
   \   00008A   700A         JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_7
   1830          		return ZFailure; //Out of memory
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_0:
   \   00008C   7901         MOV       R1,#0x1
   \   00008E   02....       LJMP      ??CrossCallReturnLabel_99 & 0xFFFF
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_3:
   \   000091   7902         MOV       R1,#0x2
   \   000093   02....       LJMP      ??CrossCallReturnLabel_99 & 0xFFFF
   1831          	bdb_repAttrDefaultCfgRecordInitValues(record);
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_7:
   \   000096   E4           CLR       A
   \   000097   8A82         MOV       DPL,R2
   \   000099   8B83         MOV       DPH,R3
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   7804         MOV       R0,#0x4
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_8:
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   D8FC         DJNZ      R0,??bdb_RepAddAttrCfgRecordDefaultToList_8
   \   0000AA   EA           MOV       A,R2
   \   0000AB   2403         ADD       A,#0x3
   \   0000AD   F8           MOV       R0,A
   \   0000AE   E4           CLR       A
   \   0000AF   3F           ADDC      A,R7
   \   0000B0   F9           MOV       R1,A
   \   0000B1   8882         MOV       DPL,R0
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   E4           CLR       A
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0000BA   74FF         MOV       A,#-0x1
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   AA82         MOV       R2,DPL
   \   0000C0   AB83         MOV       R3,DPH
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   A3           INC       DPTR
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   EE           MOV       A,R6
   \   0000C6   2407         ADD       A,#0x7
   \   0000C8   FC           MOV       R4,A
   \   0000C9   E4           CLR       A
   \   0000CA   3F           ADDC      A,R7
   \   0000CB   FD           MOV       R5,A
   \   0000CC   8C82         MOV       DPL,R4
   \   0000CE   F583         MOV       DPH,A
   \   0000D0   E4           CLR       A
   \   0000D1   F0           MOVX      @DPTR,A
   \   0000D2   A3           INC       DPTR
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   EE           MOV       A,R6
   \   0000D5   2405         ADD       A,#0x5
   \   0000D7   F5..         MOV       ?V6,A
   \   0000D9   E4           CLR       A
   \   0000DA   3F           ADDC      A,R7
   \   0000DB   F5..         MOV       ?V7,A
   \   0000DD   85..82       MOV       DPL,?V6
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   E4           CLR       A
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   F0           MOVX      @DPTR,A
   1832          
   1833          	record->endpoint = endpoint;
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   E5..         MOV       A,?V4
   \   0000EC   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   1834          	record->cluster = cluster;
   \                     ??CrossCallReturnLabel_268:
   \   0000EF   E5..         MOV       A,?V2
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   E5..         MOV       A,?V3
   \   0000F5   12....       LCALL     ??Subroutine92_0 & 0xFFFF
   1835          	record->attrID = attrID;
   \                     ??CrossCallReturnLabel_161:
   \   0000F8   E5..         MOV       A,?V0
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   E5..         MOV       A,?V1
   \   0000FE   F0           MOVX      @DPTR,A
   1836          	record->minReportInt = minReportInt;
   \   0000FF   7410         MOV       A,#0x10
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000107   85..82       MOV       DPL,?V6
   \   00010A   85..83       MOV       DPH,?V7
   \   00010D   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   1837          	record->maxReportInt = maxReportInt;
   \                     ??CrossCallReturnLabel_215:
   \   000110   7412         MOV       A,#0x12
   \   000112   12....       LCALL     ?XSTACK_DISP0_8
   \   000115   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000118   8C82         MOV       DPL,R4
   \   00011A   8D83         MOV       DPH,R5
   \   00011C   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   1838          	osal_memcpy(record->reportableChange, reportableChange, BDBREPORTING_MAX_ANALOG_ATTR_SIZE);
   \                     ??CrossCallReturnLabel_216:
   \   00011F                ; Setup parameters for call to function osal_memcpy
   \   00011F   7414         MOV       A,#0x14
   \   000121   12....       LCALL     ?XSTACK_DISP0_8
   \   000124   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000127   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012A   7C04         MOV       R4,#0x4
   \   00012C   7D00         MOV       R5,#0x0
   \   00012E   EE           MOV       A,R6
   \   00012F   2409         ADD       A,#0x9
   \   000131   FA           MOV       R2,A
   \   000132   E4           CLR       A
   \   000133   3F           ADDC      A,R7
   \   000134   FB           MOV       R3,A
   \   000135   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000138   12....       LCALL     ?DEALLOC_XSTACK8
   1839          
   1840          	status = bdb_repAttrDefaultCfgRecordsLinkedListAdd(&attrDefaultCfgRecordLinkedList, record);
   \   00013B                ; Setup parameters for call to function osal_mem_alloc
   \   00013B   7A04         MOV       R2,#0x4
   \   00013D   7B00         MOV       R3,#0x0
   \   00013F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000142   8A..         MOV       ?V0,R2
   \   000144   8B..         MOV       ?V1,R3
   \   000146   A8..         MOV       R0,?V0
   \   000148   A9..         MOV       R1,?V1
   \   00014A   EA           MOV       A,R2
   \   00014B   49           ORL       A,R1
   \   00014C   700A         JNZ       ??bdb_RepAddAttrCfgRecordDefaultToList_9
   1841          	if (status != BDBREPORTING_SUCCESS) {
   1842          		osal_mem_free(record);
   \   00014E                ; Setup parameters for call to function osal_mem_free
   \   00014E   EE           MOV       A,R6
   \   00014F   FA           MOV       R2,A
   \   000150   EF           MOV       A,R7
   \   000151   FB           MOV       R3,A
   \   000152   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000155   02....       LJMP      ??bdb_RepAddAttrCfgRecordDefaultToList_0 & 0xFFFF
   1843          		return ZFailure; //Out of memory
   1844          	}
   \                     ??bdb_RepAddAttrCfgRecordDefaultToList_9:
   \   000158   8A82         MOV       DPL,R2
   \   00015A   8B83         MOV       DPH,R3
   \   00015C   EE           MOV       A,R6
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E   A3           INC       DPTR
   \   00015F   EF           MOV       A,R7
   \   000160   F0           MOVX      @DPTR,A
   \   000161   90....       MOV       DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   000164   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000167   12....       LCALL     ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00016A   90....       MOV       DPTR,#attrDefaultCfgRecordLinkedList + 1
   \   00016D   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000170   90....       MOV       DPTR,#attrDefaultCfgRecordLinkedList
   \   000173   12....       LCALL     ?Subroutine56 & 0xFFFF
   1845          
   1846          	return ZSuccess;
   \                     ??CrossCallReturnLabel_99:
   \   000176   02....       LJMP      ?Subroutine4 & 0xFFFF
   1847          }
   1848          
   1849          
   1850          
   1851          /*********************************************************************
   1852           * @fn          bdb_RepChangedAttrValue
   1853           *
   1854           * @brief       Notify BDB reporting attribute module about the change of an
   1855           *              attribute value to validate the triggering of a reporting attribute message.
   1856           *
   1857           * @param       endpoint
   1858           * @param       cluster
   1859           * @param       attrID - Reporable attribute ID
   1860           *
   1861           * @return      ZInvalidParameter - No endpoint, cluster, attribute ID found in simple desc
   1862           *              ZSuccess
   1863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1864          ZStatus_t bdb_RepChangedAttrValue(uint8 endpoint, uint16 cluster, uint16 attrID)
   \                     bdb_RepChangedAttrValue:
   1865          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
   1866          	uint8 indexClusterEndpoint = bdb_clusterEndpointArraySearch(endpoint, cluster);
   \   000014                ; Setup parameters for call to function bdb_clusterEndpointArraySearch
   \   000014   12....       LCALL     `??bdb_clusterEndpointArraySearch::?relay`; Banked call to: bdb_clusterEndpointArraySearch
   \   000017   E9           MOV       A,R1
   \   000018   F5..         MOV       ?V2,A
   1867          
   1868          	if (indexClusterEndpoint == BDBREPORTING_INVALIDINDEX)
   \   00001A   74FF         MOV       A,#-0x1
   \   00001C   69           XRL       A,R1
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??bdb_RepChangedAttrValue_0 & 0xFFFF
   1869          		//cluter-endpoint not found
   1870          		return ZInvalidParameter;
   1871          	if (FLAGS_CHECKFLAG(bdb_reportingClusterEndpointArray[indexClusterEndpoint].flags, BDBREPORTING_HASBINDING_FLAG_MASK) == BDBREPORTING_FALSE)
   \   000022   E9           MOV       A,R1
   \   000023   75F00D       MOV       B,#0xd
   \   000026   A4           MUL       AB
   \   000027   F8           MOV       R0,A
   \   000028   A9F0         MOV       R1,B
   \   00002A   74..         MOV       A,#bdb_reportingClusterEndpointArray & 0xff
   \   00002C   28           ADD       A,R0
   \   00002D   FE           MOV       R6,A
   \   00002E   74..         MOV       A,#(bdb_reportingClusterEndpointArray >> 8) & 0xff
   \   000030   39           ADDC      A,R1
   \   000031   FF           MOV       R7,A
   \   000032   8E82         MOV       DPL,R6
   \   000034   F583         MOV       DPH,A
   \   000036   E0           MOVX      A,@DPTR
   \   000037   A2E0         MOV       C,0xE0 /* A   */.0
   \   000039   4003         JC        $+5
   \   00003B   02....       LJMP      ??bdb_RepChangedAttrValue_1 & 0xFFFF
   1872          		//record has no binding
   1873          		return ZSuccess;
   1874          	if (bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMaxReportInt == BDBREPORTING_REPORTOFF)
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F4           CPL       A
   \   000046   7003         JNZ       ??bdb_RepChangedAttrValue_2
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F4           CPL       A
   \                     ??bdb_RepChangedAttrValue_2:
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??bdb_RepChangedAttrValue_1 & 0xFFFF
   1875          		//reporting if off for this cluster
   1876          		return ZSuccess;
   1877          
   1878          	bdbReportAttrLive_t searchdata;
   1879          	searchdata.attrID = attrID;
   \   000050   7406         MOV       A,#0x6
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   E5..         MOV       A,?V4
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   E5..         MOV       A,?V5
   \   00005B   F0           MOVX      @DPTR,A
   1880          	bdbLinkedListAttrItem_t *attrNodeFound = bdb_linkedListAttrSearch(&(bdb_reportingClusterEndpointArray[indexClusterEndpoint].attrLinkedList), &searchdata);
   \   00005C   EE           MOV       A,R6
   \   00005D   240B         ADD       A,#0xb
   \   00005F   F582         MOV       DPL,A
   \   000061   E4           CLR       A
   \   000062   3F           ADDC      A,R7
   \   000063   F583         MOV       DPH,A
   \   000065   8002         SJMP      ??bdb_RepChangedAttrValue_3
   \                     ??bdb_RepChangedAttrValue_4:
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \                     ??bdb_RepChangedAttrValue_3:
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F5..         MOV       ?V8,A
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F5..         MOV       ?V9,A
   \   000070   E5..         MOV       A,?V8
   \   000072   45..         ORL       A,?V9
   \   000074   6049         JZ        ??bdb_RepChangedAttrValue_0
   \   000076   85..82       MOV       DPL,?V8
   \   000079   85..83       MOV       DPH,?V9
   \   00007C   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00007F   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000082   7406         MOV       A,#0x6
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   E0           MOVX      A,@DPTR
   \   000088   68           XRL       A,R0
   \   000089   7003         JNZ       ??bdb_RepChangedAttrValue_5
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   69           XRL       A,R1
   \                     ??bdb_RepChangedAttrValue_5:
   \   00008E   85..82       MOV       DPL,?V8
   \   000091   85..83       MOV       DPH,?V9
   \   000094   70D1         JNZ       ??bdb_RepChangedAttrValue_4
   \   000096   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000099   6024         JZ        ??bdb_RepChangedAttrValue_0
   1881          	if (attrNodeFound == NULL || attrNodeFound->data == NULL)
   1882          		return ZInvalidParameter; //Attr not found in cluster-endpoint array
   1883          
   1884          	zclAttribute_t attrRec;
   1885          	uint8 attrRes = bdb_RepFindAttrEntry(endpoint, cluster, attrID, &attrRec);
   1886          	if (attrRes != BDBREPORTING_TRUE)
   \   00009B                ; Setup parameters for call to function bdb_RepFindAttrEntry
   \   00009B   A8..         MOV       R0,?XSP + 0
   \   00009D   A9..         MOV       R1,?XSP + 1
   \   00009F   88..         MOV       ?V6,R0
   \   0000A1   89..         MOV       ?V7,R1
   \   0000A3   78..         MOV       R0,#?V6
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   AC..         MOV       R4,?V4
   \   0000AA   AD..         MOV       R5,?V5
   \   0000AC   AA..         MOV       R2,?V0
   \   0000AE   AB..         MOV       R3,?V1
   \   0000B0   A9..         MOV       R1,?V3
   \   0000B2   12....       LCALL     `??bdb_RepFindAttrEntry::?relay`; Banked call to: bdb_RepFindAttrEntry
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV       A,R1
   \   0000BB   6401         XRL       A,#0x1
   \   0000BD   600C         JZ        ??bdb_RepChangedAttrValue_6
   1887          		return ZInvalidParameter; //Attr not found in attributes app data
   \                     ??bdb_RepChangedAttrValue_0:
   \   0000BF   7902         MOV       R1,#0x2
   \                     ??bdb_RepChangedAttrValue_7:
   \   0000C1   7410         MOV       A,#0x10
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   7F0A         MOV       R7,#0xa
   \   0000C8   02....       LJMP      ?BANKED_LEAVE_XDATA
   1888          
   1889          	//Get time of timer if active
   1890          	uint32 remainingTimeOfEvent = osal_get_timeoutEx(bdb_TaskID, BDB_REPORT_TIMEOUT);
   \                     ??bdb_RepChangedAttrValue_6:
   \   0000CB                ; Setup parameters for call to function osal_get_timeoutEx
   \   0000CB   7A80         MOV       R2,#-0x80
   \   0000CD   7B00         MOV       R3,#0x0
   \   0000CF   90....       MOV       DPTR,#bdb_TaskID
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   F9           MOV       R1,A
   \   0000D4   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   1891          	uint16 elapsedTime = 0;
   \   0000D7   75..00       MOV       ?V0,#0x0
   \   0000DA   75..00       MOV       ?V1,#0x0
   1892          	uint8 isTimeRemaining = BDBREPORTING_FALSE;
   \   0000DD   C2..         CLR       ?VB.0
   1893          	if (remainingTimeOfEvent > 0) {
   \   0000DF   EA           MOV       A,R2
   \   0000E0   4B           ORL       A,R3
   \   0000E1   4C           ORL       A,R4
   \   0000E2   4D           ORL       A,R5
   \   0000E3   6014         JZ        ??bdb_RepChangedAttrValue_8
   1894          		elapsedTime = bdb_RepCalculateEventElapsedTime(remainingTimeOfEvent, bdb_reportingNextEventTimeout);
   \   0000E5                ; Setup parameters for call to function bdb_RepCalculateEventElapsedTime
   \   0000E5   90....       MOV       DPTR,#bdb_reportingNextEventTimeout
   \   0000E8   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000EB   12....       LCALL     `??bdb_RepCalculateEventElapsedTime::?relay`; Banked call to: bdb_RepCalculateEventElapsedTime
   \   0000EE   7402         MOV       A,#0x2
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F3   8A..         MOV       ?V0,R2
   \   0000F5   8B..         MOV       ?V1,R3
   1895          		isTimeRemaining = BDBREPORTING_TRUE;
   \   0000F7   D2..         SETB      ?VB.0
   \                     ??bdb_RepChangedAttrValue_8:
   \   0000F9   8E82         MOV       DPL,R6
   \   0000FB   8F83         MOV       DPH,R7
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   1896          	}
   \   000101   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000104   601C         JZ        ??bdb_RepChangedAttrValue_9
   \   000106   8E82         MOV       DPL,R6
   \   000108   8F83         MOV       DPH,R7
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   A3           INC       DPTR
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   25..         ADD       A,?V0
   \   000115   FA           MOV       R2,A
   \   000116   A3           INC       DPTR
   \   000117   E0           MOVX      A,@DPTR
   \   000118   35..         ADDC      A,?V1
   \   00011A   FB           MOV       R3,A
   \   00011B   C3           CLR       C
   \   00011C   E8           MOV       A,R0
   \   00011D   9A           SUBB      A,R2
   \   00011E   E9           MOV       A,R1
   \   00011F   9B           SUBB      A,R3
   \   000120   5042         JNC       ??bdb_RepChangedAttrValue_1
   1897          
   1898          	if (bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMinReportInt != BDBREPORTING_NOLIMIT &&
   1899          	    (bdb_reportingClusterEndpointArray[indexClusterEndpoint].timeSinceLastReport + elapsedTime) <= bdb_reportingClusterEndpointArray[indexClusterEndpoint].consolidatedMinReportInt)
   1900          		//Attr value has changed before minInterval, ommit reporting
   1901          		return ZSuccess;
   1902          
   1903          
   1904          	if (zclAnalogDataType(attrRec.dataType)) {
   \                     ??bdb_RepChangedAttrValue_9:
   \   000122                ; Setup parameters for call to function zclAnalogDataType
   \   000122   7402         MOV       A,#0x2
   \   000124   12....       LCALL     ?XSTACK_DISP0_8
   \   000127   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00012A   603D         JZ        ??bdb_RepChangedAttrValue_10
   1905          		//Checking if   | lastvaluereported - currentvalue | >=  | changevalue |
   1906          		if (bdb_isAttrValueChangedSurpassDelta(attrRec.dataType, attrNodeFound->data->reportableChange, attrRec.dataPtr, attrNodeFound->data->lastValueReported) == BDBREPORTING_FALSE)
   \   00012C   85..82       MOV       DPL,?V8
   \   00012F   85..83       MOV       DPH,?V9
   \   000132   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000135                ; Setup parameters for call to function bdb_isAttrValueChangedSurpassDelta
   \   000135   EA           MOV       A,R2
   \   000136   2402         ADD       A,#0x2
   \   000138   F5..         MOV       ?V4,A
   \   00013A   E4           CLR       A
   \   00013B   3B           ADDC      A,R3
   \   00013C   F5..         MOV       ?V5,A
   \   00013E   78..         MOV       R0,#?V4
   \   000140   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000143   7406         MOV       A,#0x6
   \   000145   12....       LCALL     ?XSTACK_DISP0_8
   \   000148   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00014B   EA           MOV       A,R2
   \   00014C   2406         ADD       A,#0x6
   \   00014E   FA           MOV       R2,A
   \   00014F   5001         JNC       ??bdb_RepChangedAttrValue_11
   \   000151   0B           INC       R3
   \                     ??bdb_RepChangedAttrValue_11:
   \   000152   7404         MOV       A,#0x4
   \   000154   12....       LCALL     ?XSTACK_DISP0_8
   \   000157   E0           MOVX      A,@DPTR
   \   000158   F9           MOV       R1,A
   \   000159   12....       LCALL     `??bdb_isAttrValueChangedSurpassDelta::?relay`; Banked call to: bdb_isAttrValueChangedSurpassDelta
   \   00015C   7402         MOV       A,#0x2
   \   00015E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000161   E9           MOV       A,R1
   \   000162   7005         JNZ       ??bdb_RepChangedAttrValue_10
   1907          			//current value does not excced the delta, dont report
   1908          			return ZSuccess;
   \                     ??bdb_RepChangedAttrValue_1:
   \   000164   7900         MOV       R1,#0x0
   \   000166   02....       LJMP      ??bdb_RepChangedAttrValue_7 & 0xFFFF
   1909          	} else {
   1910          		//Attr is discrete, just report without checking the changeValue
   1911          	}
   1912          
   1913          	//Stop reporting
   1914          	bdb_RepStopEventTimer( );
   \                     ??bdb_RepChangedAttrValue_10:
   \   000169                ; Setup parameters for call to function bdb_RepStopEventTimer
   \   000169   12....       LCALL     `??bdb_RepStopEventTimer::?relay`; Banked call to: bdb_RepStopEventTimer
   1915          	bdb_RepReport(indexClusterEndpoint);
   \   00016C                ; Setup parameters for call to function bdb_RepReport
   \   00016C   A9..         MOV       R1,?V2
   \   00016E   12....       LCALL     `??bdb_RepReport::?relay`; Banked call to: bdb_RepReport
   1916          	if (isTimeRemaining == BDBREPORTING_TRUE)
   \   000171   A2..         MOV       C,?VB.0
   \   000173   5009         JNC       ??bdb_RepChangedAttrValue_12
   1917          		bdb_clusterEndpointArrayIncrementAll(elapsedTime, BDBREPORTING_FALSE);
   \   000175                ; Setup parameters for call to function bdb_clusterEndpointArrayIncrementAll
   \   000175   7900         MOV       R1,#0x0
   \   000177   AA..         MOV       R2,?V0
   \   000179   AB..         MOV       R3,?V1
   \   00017B   12....       LCALL     `??bdb_clusterEndpointArrayIncrementAll::?relay`; Banked call to: bdb_clusterEndpointArrayIncrementAll
   1918          	bdb_clusterEndpointArrayUpdateAt(indexClusterEndpoint, 0, BDBREPORTING_IGNORE, BDBREPORTING_IGNORE); //return time since last report to zero
   \                     ??bdb_RepChangedAttrValue_12:
   \   00017E                ; Setup parameters for call to function bdb_clusterEndpointArrayUpdateAt
   \   00017E   7DFF         MOV       R5,#-0x1
   \   000180   7CFF         MOV       R4,#-0x1
   \   000182   7A00         MOV       R2,#0x0
   \   000184   7B00         MOV       R3,#0x0
   \   000186   A9..         MOV       R1,?V2
   \   000188   12....       LCALL     `??bdb_clusterEndpointArrayUpdateAt::?relay`; Banked call to: bdb_clusterEndpointArrayUpdateAt
   1919          	//Restart reporting
   1920          	bdb_RepStartReporting( );
   \   00018B                ; Setup parameters for call to function bdb_RepStartReporting
   \   00018B   12....       LCALL     `??bdb_RepStartReporting::?relay`; Banked call to: bdb_RepStartReporting
   \   00018E   80D4         SJMP      ??bdb_RepChangedAttrValue_1
   1921          
   1922          	return ZSuccess;
   1923          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8983         MOV       DPH,R1
   \   000002   A3           INC       DPTR
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000008   F0           MOVX      @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine114_0
   \   000001                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   1924          
   1925          #endif //BDB_REPORTING
   1926          
   1927          /*
   1928           * End: Reporting attr app API methods
   1929           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     34   bdb_FindEpDesc
      2     30   bdb_InitReportAttrLiveValues
      1     39   bdb_ProcessInConfigReportCmd
        0     34   -> bdb_FindEpDesc
        0     34   -> bdb_RepLoadCfgRecords
        0     34   -> bdb_RepSetupReporting
        0     34   -> bdb_RepStartReporting
        0     34   -> bdb_RepStopEventTimer
        0     34   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     34   -> bdb_repAttrCfgRecordsArraySearch
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     34   -> osal_memset
        0     36   -> osal_nv_item_init
        0     38   -> osal_nv_write
        0     34   -> zclAnalogDataType
        0     36   -> zclFindAttrRec
        0     34   -> zclGetDataTypeLength
        0     39   -> zcl_SendConfigReportRspCmd
      1     39   bdb_ProcessInReadReportCfgCmd
        0     34   -> bdb_FindEpDesc
        0     34   -> bdb_RepLoadCfgRecords
        0     34   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     34   -> bdb_repAttrCfgRecordsArraySearch
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> zclAnalogDataType
        0     36   -> zclFindAttrRec
        0     34   -> zclGetDataTypeLength
        0     39   -> zcl_SendReadReportCfgRspCmd
      1     25   bdb_RepAddAttrCfgRecordDefaultToList
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     19   -> osal_memcpy
        0     16   -> zclFindAttrRecsList
      0     60   bdb_RepCalculateEventElapsedTime
      0     36   bdb_RepChangedAttrValue
        0     36   -> bdb_RepCalculateEventElapsedTime
        0     36   -> bdb_RepFindAttrEntry
        0     34   -> bdb_RepReport
        0     34   -> bdb_RepStartReporting
        0     34   -> bdb_RepStopEventTimer
        0     34   -> bdb_clusterEndpointArrayIncrementAll
        0     34   -> bdb_clusterEndpointArraySearch
        0     34   -> bdb_clusterEndpointArrayUpdateAt
        0     36   -> bdb_isAttrValueChangedSurpassDelta
        0     34   -> osal_get_timeoutEx
        0     34   -> zclAnalogDataType
      1     62   bdb_RepConstructAttrCfgArray
        0     51   -> bdb_repAttrCfgRecordsArrayAdd
        0     39   -> bdb_repAttrCfgRecordsArrayCreate
        0     39   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     52   -> bdb_repAttrDefaultCfgRecordsLinkedListSearch
        0     39   -> zclFindAttrRecsList
      2      0   bdb_RepConstructReportingData
        2      0   -> bdb_RepInitAttrCfgRecords
        2      0   -> bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        2      0   -> bdb_repAttrCfgRecordsArrayFreeAll
      1     69   bdb_RepFindAttrEntry
        0     21   -> osal_memset
        0     21   -> zclFindAttrRecsList
        0     21   -> zclGetDataTypeLength
        0     25   -> zcl_ReadAttrData
      2      0   bdb_RepInit
      0     14   bdb_RepInitAttrCfgRecords
        0     10   -> bdb_RepConstructAttrCfgArray
        0     10   -> bdb_repAttrCfgRecordsArrayCreate
        0     10   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     10   -> osal_mem_free
        0     12   -> osal_nv_item_init
        0     10   -> osal_nv_item_len
        0     14   -> osal_nv_read
      0     48   bdb_RepLoadCfgRecords
        0     10   -> bdb_repAttrCfgRecordsArrayCreate
        0     10   -> bdb_repAttrCfgRecordsArrayFreeAll
        0     12   -> osal_nv_item_init
        0     10   -> osal_nv_item_len
        0     14   -> osal_nv_read
      0     25   bdb_RepMarkHasBindingInEndpointClusterArray
        0      9   -> bdb_clusterEndpointArraySearch
        0      9   -> bdb_clusterEndpointArrayUpdateAt
      2      9   bdb_RepProcessEvent
        0      9   -> bdb_RepReport
        0      9   -> bdb_RepRestartNextEventTimer
        0      9   -> bdb_clusterEndpointArrayIncrementAll
        0      9   -> bdb_clusterEndpointArrayUpdateAt
      1     81   bdb_RepReport
        0     44   -> bdb_RepFindAttrEntry
        0     42   -> bdb_getZCLFrameCounter
        0     42   -> osal_mem_alloc
        0     42   -> osal_mem_free
        0     45   -> osal_memcpy
        0     42   -> osal_memset
        0     42   -> zclAnalogDataType
        0     42   -> zclGetDataTypeLength
        0     47   -> zcl_SendReportCmd
      0     29   bdb_RepRestartNextEventTimer
        0     20   -> osal_start_timerEx
      1     47   bdb_RepSetupReporting
        0     13   -> bdb_clusterEndpointArrayMoveTo
        0     13   -> bdb_clusterEndpointArraySearch
        0     13   -> bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        0     13   -> osal_mem_alloc
        0     13   -> osal_mem_free
        0     13   -> osal_stop_timerEx
      0     14   bdb_RepStartOrContinueReporting
        0     14   -> bdb_RepCalculateEventElapsedTime
        0     12   -> bdb_RepStartReporting
        0     12   -> bdb_RepStopEventTimer
        0     12   -> bdb_clusterEndpointArrayIncrementAll
        0     12   -> osal_get_timeoutEx
      2     34   bdb_RepStartReporting
        2      0   -> bdb_RepRestartNextEventTimer
        2      0   -> osal_get_timeoutEx
        2      0   -> osal_stop_timerEx
      2     34   bdb_RepStopEventTimer
        2      0   -> osal_stop_timerEx
      0     16   bdb_RepUpdateMarkBindings
        0     16   -> bdb_RepMarkHasBindingInEndpointClusterArray
        0     16   -> bdb_RepStartReporting
        0     16   -> bindFind
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_stop_timerEx
      1     43   bdb_clusterEndpointArrayAdd
      0     48   bdb_clusterEndpointArrayIncrementAll
      1     23   bdb_clusterEndpointArrayMoveTo
      0     43   bdb_clusterEndpointArraySearch
      0     43   bdb_clusterEndpointArrayUpdateAt
      0     56   bdb_isAttrValueChangedSurpassDelta
      0     42   bdb_linkedListAttrAdd
        0     12   -> osal_mem_alloc
      0     47   bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
        0     30   -> bdb_InitReportAttrLiveValues
        0     32   -> bdb_RepFindAttrEntry
        0     34   -> bdb_clusterEndpointArrayAdd
        0     30   -> bdb_clusterEndpointArraySearch
        0     30   -> bdb_linkedListAttrAdd
        0     32   -> bdb_repAttrCfgRecordsArrayConsolidateValues
        0     30   -> osal_mem_alloc
        0     33   -> osal_memcpy
      1     65   bdb_repAttrCfgRecordsArrayAdd
        0     14   -> osal_memcpy
      0     48   bdb_repAttrCfgRecordsArrayConsolidateValues
      0     48   bdb_repAttrCfgRecordsArrayCreate
        0      9   -> osal_mem_alloc
      2     39   bdb_repAttrCfgRecordsArrayFreeAll
        2      0   -> osal_mem_free
      0     43   bdb_repAttrCfgRecordsArraySearch
      2     52   bdb_repAttrDefaultCfgRecordsLinkedListSearch


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant {0, 0, 0, 0}>
       1  ??Subroutine100_0
       6  ??Subroutine101_0
       7  ??Subroutine102_0
       6  ??Subroutine103_0
      11  ??Subroutine104_0
       6  ??Subroutine105_0
       2  ??Subroutine106_0
       2  ??Subroutine107_0
       1  ??Subroutine108_0
       2  ??Subroutine109_0
       6  ??Subroutine110_0
       3  ??Subroutine111_0
       5  ??Subroutine112_0
       6  ??Subroutine113_0
       6  ??Subroutine114_0
       3  ??Subroutine115_0
       4  ??Subroutine116_0
       4  ??Subroutine117_0
       5  ??Subroutine118_0
       6  ??Subroutine119_0
       1  ??Subroutine120_0
       1  ??Subroutine121_0
       4  ??Subroutine122_0
      12  ??Subroutine90_0
       9  ??Subroutine91_0
       6  ??Subroutine92_0
       1  ??Subroutine93_0
       4  ??Subroutine94_0
       2  ??Subroutine95_0
       6  ??Subroutine96_0
       4  ??Subroutine97_0
      16  ??Subroutine98_0
       6  ??Subroutine99_0
       1  ?Subroutine0
       5  ?Subroutine1
      12  ?Subroutine10
      11  ?Subroutine11
       4  ?Subroutine12
       3  ?Subroutine13
       3  ?Subroutine14
      10  ?Subroutine15
       1  ?Subroutine16
       4  ?Subroutine17
      23  ?Subroutine18
       8  ?Subroutine19
       5  ?Subroutine2
       3  ?Subroutine20
      21  ?Subroutine21
      19  ?Subroutine22
      13  ?Subroutine23
       5  ?Subroutine24
       9  ?Subroutine25
       8  ?Subroutine26
      19  ?Subroutine27
       8  ?Subroutine28
      21  ?Subroutine29
       2  ?Subroutine3
      17  ?Subroutine30
      19  ?Subroutine31
       8  ?Subroutine32
       7  ?Subroutine33
       6  ?Subroutine34
      12  ?Subroutine35
       7  ?Subroutine36
       9  ?Subroutine37
      13  ?Subroutine38
       8  ?Subroutine39
       5  ?Subroutine4
      10  ?Subroutine40
       6  ?Subroutine41
       2  ?Subroutine42
       6  ?Subroutine43
      22  ?Subroutine44
       6  ?Subroutine45
       4  ?Subroutine46
       7  ?Subroutine47
      18  ?Subroutine48
      13  ?Subroutine49
       5  ?Subroutine5
       8  ?Subroutine50
       4  ?Subroutine51
       5  ?Subroutine52
       6  ?Subroutine53
       7  ?Subroutine54
       6  ?Subroutine55
       6  ?Subroutine56
      14  ?Subroutine57
       7  ?Subroutine58
       1  ?Subroutine59
       5  ?Subroutine6
      23  ?Subroutine60
       1  ?Subroutine61
       9  ?Subroutine62
       2  ?Subroutine63
       8  ?Subroutine64
       4  ?Subroutine65
      11  ?Subroutine66
      14  ?Subroutine67
       6  ?Subroutine68
      10  ?Subroutine69
      43  ?Subroutine7
      16  ?Subroutine70
       8  ?Subroutine71
      10  ?Subroutine72
      10  ?Subroutine73
       1  ?Subroutine74
       7  ?Subroutine75
       8  ?Subroutine76
       8  ?Subroutine77
       3  ?Subroutine78
      14  ?Subroutine79
      11  ?Subroutine8
       6  ?Subroutine80
       4  ?Subroutine81
      10  ?Subroutine82
       6  ?Subroutine83
       9  ?Subroutine84
       9  ?Subroutine85
      12  ?Subroutine86
       1  ?Subroutine87
       6  ?Subroutine88
       9  ?Subroutine89
       1  ?Subroutine9
       4  __Constant_3e8
       3  attrDefaultCfgRecordLinkedList
      62  bdb_FindEpDesc
      45  bdb_InitReportAttrLiveValues
     784  bdb_ProcessInConfigReportCmd
     566  bdb_ProcessInReadReportCfgCmd
     377  bdb_RepAddAttrCfgRecordDefaultToList
     147  bdb_RepCalculateEventElapsedTime
     400  bdb_RepChangedAttrValue
     583  bdb_RepConstructAttrCfgArray
      21  bdb_RepConstructReportingData
     369  bdb_RepFindAttrEntry
      43  bdb_RepInit
     141  bdb_RepInitAttrCfgRecords
     116  bdb_RepLoadCfgRecords
      51  bdb_RepMarkHasBindingInEndpointClusterArray
     191  bdb_RepProcessEvent
     548  bdb_RepReport
      48  bdb_RepRestartNextEventTimer
     328  bdb_RepSetupReporting
      43  bdb_RepStartOrContinueReporting
      31  bdb_RepStartReporting
      10  bdb_RepStopEventTimer
     147  bdb_RepUpdateMarkBindings
     100  bdb_clusterEndpointArrayAdd
     141  bdb_clusterEndpointArrayIncrementAll
     104  bdb_clusterEndpointArrayMoveTo
      68  bdb_clusterEndpointArraySearch
      77  bdb_clusterEndpointArrayUpdateAt
     522  bdb_isAttrValueChangedSurpassDelta
      81  bdb_linkedListAttrAdd
     390  bdb_repAttrBuildClusterEndPointArrayBasedOnConfRecordsArray
     207  bdb_repAttrCfgRecordsArrayAdd
     208  bdb_repAttrCfgRecordsArrayConsolidateValues
      51  bdb_repAttrCfgRecordsArrayCreate
      32  bdb_repAttrCfgRecordsArrayFreeAll
      69  bdb_repAttrCfgRecordsArraySearch
      89  bdb_repAttrDefaultCfgRecordsLinkedListSearch
       1  bdb_reportingAcceptDefaultConfs
       2  bdb_reportingAttrCfgRecordsArray
       1  bdb_reportingAttrCfgRecordsArrayCount
       1  bdb_reportingAttrCfgRecordsArrayMaxSize
      65  bdb_reportingClusterEndpointArray
       1  bdb_reportingClusterEndpointArrayCount
       1  bdb_reportingNextClusterEndpointIndex
       2  bdb_reportingNextEventTimeout
       4  gAttrDataValue
     216  -- Other

 
 8 151 bytes in segment BANKED_CODE
   216 bytes in segment BANK_RELAYS
     8 bytes in segment XDATA_ROM_C
    81 bytes in segment XDATA_Z
 
   216 bytes of CODE     memory
     4 bytes of CONST    memory (+ 4 bytes shared)
 8 151 bytes of HUGECODE memory
    81 bytes of XDATA    memory

Errors: none
Warnings: none
