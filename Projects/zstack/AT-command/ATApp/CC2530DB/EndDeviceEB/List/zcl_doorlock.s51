///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              24/Feb/2022  16:36:18
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\ZCL\zcl_doorlock.c
//    Command line       =  
//        -f C:\Users\Administrator\AppData\Local\Temp\EW3E34.tmp
//        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\ZCL\zcl_doorlock.c
//        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
//        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
//        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
//        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
//        ISR_KEYINTERRUPT -lC
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        -lA
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=300 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\zcl_doorlock.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_doorlock

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclDoorLock_BasicResetCB::?relay`,0203H
        FUNCTION `??zclDoorLock_DoorLockCB::?relay`,0203H
        FUNCTION `??zclDoorLock_DoorLockSetTemporaryPinCB::?relay`,0203H
        PUBLIC `??zclDoorLock_Enable::?relay`
        FUNCTION `??zclDoorLock_Enable::?relay`,0203H
        PUBLIC `??zclDoorLock_Init::?relay`
        FUNCTION `??zclDoorLock_Init::?relay`,0203H
        FUNCTION `??zclDoorLock_Report::?relay`,0203H
        PUBLIC `??zclDoorLock_event_loop::?relay`
        FUNCTION `??zclDoorLock_event_loop::?relay`,0203H
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1388
        FUNCTION zclDoorLock_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclDoorLock_DoorLockCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        FUNCTION zclDoorLock_DoorLockSetTemporaryPinCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclDoorLock_Enable
        FUNCTION zclDoorLock_Enable,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclDoorLock_Init
        FUNCTION zclDoorLock_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclDoorLock_Report,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC zclDoorLock_TaskID
        PUBLIC zclDoorLock_event_loop
        FUNCTION zclDoorLock_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AT_DoorLock_Handle_Rsp SYMBOL "AT_DoorLock_Handle_Rsp"
`??AT_DoorLock_Handle_Rsp::?relay` SYMBOL "?relay", AT_DoorLock_Handle_Rsp
AT_DoorLock_Init    SYMBOL "AT_DoorLock_Init"
`??AT_DoorLock_Init::?relay` SYMBOL "?relay", AT_DoorLock_Init
AT_DoorLock_Lock    SYMBOL "AT_DoorLock_Lock"
`??AT_DoorLock_Lock::?relay` SYMBOL "?relay", AT_DoorLock_Lock
AT_DoorLock_SetTemporaryPin_Req SYMBOL "AT_DoorLock_SetTemporaryPin_Req"
`??AT_DoorLock_SetTemporaryPin_Req::?relay` SYMBOL "?relay", AT_DoorLock_SetTemporaryPin_Req
AT_DoorLock_Unlock  SYMBOL "AT_DoorLock_Unlock"
`??AT_DoorLock_Unlock::?relay` SYMBOL "?relay", AT_DoorLock_Unlock
AT_pwr_single_bus_input SYMBOL "AT_pwr_single_bus_input"
`??AT_pwr_single_bus_input::?relay` SYMBOL "?relay", AT_pwr_single_bus_input
AT_pwr_single_bus_output SYMBOL "AT_pwr_single_bus_output"
`??AT_pwr_single_bus_output::?relay` SYMBOL "?relay", AT_pwr_single_bus_output
AT_pwr_single_bus_send_byte SYMBOL "AT_pwr_single_bus_send_byte"
`??AT_pwr_single_bus_send_byte::?relay` SYMBOL "?relay", AT_pwr_single_bus_send_byte
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
zclClosures_RegisterDoorLockCmdCallbacks SYMBOL "zclClosures_RegisterDoorLockCmdCallbacks"
`??zclClosures_RegisterDoorLockCmdCallbacks::?re` SYMBOL "?relay", zclClosures_RegisterDoorLockCmdCallbacks
zclDoorLock_ResetAttributesToDefaultValues SYMBOL "zclDoorLock_ResetAttributesToDefaultValues"
`??zclDoorLock_ResetAttributesToDefaultValues::?` SYMBOL "?relay", zclDoorLock_ResetAttributesToDefaultValues
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
`??zcl_SendReportCmd::?relay` SYMBOL "?relay", zcl_SendReportCmd
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerCmdList SYMBOL "zcl_registerCmdList"
`??zcl_registerCmdList::?relay` SYMBOL "?relay", zcl_registerCmdList
zclDoorLock_Enable  SYMBOL "zclDoorLock_Enable"
`??zclDoorLock_Enable::?relay` SYMBOL "?relay", zclDoorLock_Enable
zclDoorLock_Init    SYMBOL "zclDoorLock_Init"
`??zclDoorLock_Init::?relay` SYMBOL "?relay", zclDoorLock_Init
zclDoorLock_event_loop SYMBOL "zclDoorLock_event_loop"
`??zclDoorLock_event_loop::?relay` SYMBOL "?relay", zclDoorLock_event_loop

        EXTERN `??AT_DoorLock_Handle_Rsp::?relay`
        FUNCTION `??AT_DoorLock_Handle_Rsp::?relay`,00H
        EXTERN `??AT_DoorLock_Init::?relay`
        FUNCTION `??AT_DoorLock_Init::?relay`,00H
        EXTERN `??AT_DoorLock_Lock::?relay`
        FUNCTION `??AT_DoorLock_Lock::?relay`,00H
        EXTERN `??AT_DoorLock_SetTemporaryPin_Req::?relay`
        FUNCTION `??AT_DoorLock_SetTemporaryPin_Req::?relay`,00H
        EXTERN `??AT_DoorLock_Unlock::?relay`
        FUNCTION `??AT_DoorLock_Unlock::?relay`,00H
        EXTERN `??AT_pwr_single_bus_input::?relay`
        FUNCTION `??AT_pwr_single_bus_input::?relay`,00H
        EXTERN `??AT_pwr_single_bus_output::?relay`
        FUNCTION `??AT_pwr_single_bus_output::?relay`,00H
        EXTERN `??AT_pwr_single_bus_send_byte::?relay`
        FUNCTION `??AT_pwr_single_bus_send_byte::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,00H
        EXTERN `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN `??zclClosures_RegisterDoorLockCmdCallbacks::?re`
        FUNCTION `??zclClosures_RegisterDoorLockCmdCallbacks::?re`,00H
        EXTERN `??zclDoorLock_ResetAttributesToDefaultValues::?`
        FUNCTION `??zclDoorLock_ResetAttributesToDefaultValues::?`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zcl_SendReportCmd::?relay`
        FUNCTION `??zcl_SendReportCmd::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerCmdList::?relay`
        FUNCTION `??zcl_registerCmdList::?relay`,00H
        EXTERN AT_DoorLock_Handle_Rsp
        FUNCTION AT_DoorLock_Handle_Rsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_DoorLock_Init
        FUNCTION AT_DoorLock_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_DoorLock_Lock
        FUNCTION AT_DoorLock_Lock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_DoorLock_SetTemporaryPin_Req
        FUNCTION AT_DoorLock_SetTemporaryPin_Req,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_DoorLock_Unlock
        FUNCTION AT_DoorLock_Unlock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_pwr_single_bus_input
        FUNCTION AT_pwr_single_bus_input,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_pwr_single_bus_output
        FUNCTION AT_pwr_single_bus_output,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_pwr_single_bus_send_byte
        FUNCTION AT_pwr_single_bus_send_byte,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DoorLock_SimpleDesc
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN single_bus_rcv_buf
        EXTERN single_bus_rcv_len
        EXTERN zclClosures_RegisterDoorLockCmdCallbacks
        FUNCTION zclClosures_RegisterDoorLockCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclCmdsArraySize
        EXTERN zclDoorLock_Attrs
        EXTERN zclDoorLock_Cmds
        EXTERN zclDoorLock_IdentifyTime
        EXTERN zclDoorLock_LockState
        EXTERN zclDoorLock_NumAttributes
        EXTERN zclDoorLock_ResetAttributesToDefaultValues
        FUNCTION zclDoorLock_ResetAttributesToDefaultValues,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerCmdList
        FUNCTION zcl_registerCmdList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\ZCL\zcl_doorlock.c
//    1 /*****************************************************************************
//    2   Filename:       zcl_doorlock.c
//    3   Author:         Yang Wang
//    4 
//    5   Description:    Zigbee Cluster Library - sample device application.
//    6 ******************************************************************************/
//    7 /*********************************************************************
//    8  * INCLUDES
//    9  */
//   10 #include "ZComDef.h"
//   11 #include "OSAL.h"
//   12 #include "AF.h"
//   13 #include "ZDApp.h"
//   14 #include "bdb.h"
//   15 #include "bdb_interface.h"
//   16 
//   17 #include "zcl.h"
//   18 #include "zcl_general.h"
//   19 #include "zcl_closures.h"
//   20 #include "zcl_ha.h"
//   21 
//   22 #include "AT_controller.h"
//   23 #include "AT_printf.h"
//   24 #include "zcl_doorlock.h"
//   25 
//   26 #include "onboard.h"
//   27 
//   28 /* HAL */
//   29 #include "hal_led.h"
//   30 
//   31 /* Device */
//   32 #include "AT_doorlock.h"
//   33 #include "AT_single_bus.h"
//   34 #include "AT_pwr_single_bus.h"
//   35 /*********************************************************************
//   36  * MACROS
//   37  */
//   38 
//   39 /*********************************************************************
//   40  * CONSTANTS
//   41  */
//   42 
//   43 /*********************************************************************
//   44  * TYPEDEFS
//   45  */
//   46 
//   47 /*********************************************************************
//   48  * GLOBAL VARIABLES
//   49  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   50 byte zclDoorLock_TaskID;
zclDoorLock_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   51 
//   52 /*********************************************************************
//   53  * GLOBAL FUNCTIONS
//   54  */
//   55 
//   56 /*********************************************************************
//   57  * LOCAL VARIABLES
//   58  */
//   59 
//   60 /*********************************************************************
//   61  * LOCAL FUNCTIONS
//   62  */
//   63 static ZStatus_t zclDoorLock_Report(uint8 endpoint, uint16 clusterId, uint16 attrId, uint8 dataType, void *dataPtr);
//   64 static void zclDoorLock_BasicResetCB( void );
//   65 
//   66 // Functions to process ZCL Foundation incoming Command/Response messages
//   67 static ZStatus_t zclDoorLock_DoorLockCB ( zclIncoming_t *pInMsg, zclDoorLock_t *pInCmd );
//   68 static ZStatus_t zclDoorLock_DoorLockSetTemporaryPinCB ( zclIncoming_t *pInMsg, zclDoorLockSetTemporaryPin_t *pCmd );
//   69 
//   70 /*********************************************************************
//   71  * ZCL General Profile Callback table
//   72  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//   73 static zclGeneral_AppCallbacks_t zclDoorLock_CmdCallbacks =
zclDoorLock_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclDoorLock_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//   74 {
//   75   zclDoorLock_BasicResetCB,               // Basic Cluster Reset command
//   76   NULL,                                   // Identify Trigger Effect command
//   77   NULL,                                   // On/Off cluster commands
//   78   NULL,                                   // On/Off cluster enhanced command Off with Effect
//   79   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//   80   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//   81 #ifdef ZCL_LEVEL_CTRL
//   82   NULL,                                   // Level Control Move to Level command
//   83   NULL,                                   // Level Control Move command
//   84   NULL,                                   // Level Control Step command
//   85   NULL,                                   // Level Control Stop command
//   86 #endif
//   87 #ifdef ZCL_GROUPS
//   88   NULL,                                   // Group Response commands
//   89 #endif
//   90 #ifdef ZCL_SCENES
//   91   NULL,                                  // Scene Store Request command
//   92   NULL,                                  // Scene Recall Request command
//   93   NULL,                                  // Scene Response command
//   94 #endif
//   95 #ifdef ZCL_ALARMS
//   96   NULL,                                  // Alarm (Response) commands
//   97 #endif
//   98 #ifdef SE_UK_EXT
//   99   NULL,                                  // Get Event Log command
//  100   NULL,                                  // Publish Event Log command
//  101 #endif
//  102   NULL,                                  // RSSI Location command
//  103   NULL                                   // RSSI Location Response command
//  104 };
//  105 
//  106 /*********************************************************************
//  107  * ZCL Closure cluster Callback table
//  108  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  109 static zclClosures_DoorLockAppCallbacks_t zclDoorLock_DoorLockCmdCallbacks =
zclDoorLock_DoorLockCmdCallbacks:
        DATA8
        DS 104
        REQUIRE `?<Initializer for zclDoorLock_DoorLockCmdCallb`
        REQUIRE __INIT_XDATA_I
//  110 {
//  111   zclDoorLock_DoorLockCB,                 // Lock/Unlock/Toggle command
//  112   NULL,
//  113   NULL,                                   // Unlock With Timeout command
//  114   NULL,                                   // Get Log Record command
//  115   NULL,
//  116   NULL,
//  117   NULL,
//  118   NULL,
//  119   NULL,
//  120   NULL,
//  121   NULL,
//  122   NULL,
//  123   NULL,
//  124   NULL,
//  125   NULL,
//  126   NULL,
//  127   NULL,
//  128   NULL,
//  129   NULL,
//  130   NULL,
//  131   NULL,
//  132   NULL,
//  133   NULL,
//  134   NULL,
//  135   NULL,
//  136   zclDoorLock_DoorLockSetTemporaryPinCB,
//  137   NULL,
//  138   NULL,
//  139   NULL,
//  140   NULL,
//  141   NULL,
//  142   NULL,
//  143   NULL,
//  144   NULL,
//  145   NULL,
//  146   NULL,
//  147   NULL,
//  148   NULL,
//  149   NULL,
//  150   NULL,
//  151   NULL,
//  152   NULL,
//  153   NULL,
//  154   NULL,
//  155   NULL,
//  156   NULL,
//  157   NULL,
//  158   NULL,
//  159   NULL,
//  160   NULL,
//  161   NULL,
//  162   NULL
//  163 };
//  164 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  165 static ZStatus_t zclDoorLock_Report(uint8 endpoint, uint16 clusterId, uint16 attrId, uint8 dataType, void *dataPtr)
zclDoorLock_Report:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclDoorLock_Report
        CODE
//  166 {
        FUNCALL zclDoorLock_Report, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Report, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Report, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Report, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V2,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  167   ZStatus_t result = ZFailure;
//  168 
//  169   afAddrType_t dstAddr;
//  170   dstAddr.addr.shortAddr = NWK_PAN_COORD_ADDR;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  171   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  172   dstAddr.endPoint = 0x64;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x64
        MOVX      @DPTR,A
//  173 
//  174   zclReportCmd_t *pReportCmd;
//  175   pReportCmd = osal_mem_alloc(sizeof(zclReportCmd_t) + (1 * sizeof(zclReport_t)));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
//  176   if(pReportCmd != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclDoorLock_Report_0
//  177   {
//  178     pReportCmd->numAttr = 1;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#0x1
        MOVX      @DPTR,A
//  179 
//  180     pReportCmd->attrList[0].attrID = attrId;
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  181     pReportCmd->attrList[0].dataType = dataType;
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  182     pReportCmd->attrList[0].attrData = dataPtr;
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  183 
//  184     result = zcl_SendReportCmd( endpoint,
//  185                                 &dstAddr,
//  186                                 clusterId,
//  187                                 pReportCmd,
//  188                                 ZCL_FRAME_SERVER_CLIENT_DIR,
//  189                                 BDB_REPORTING_DISABLE_DEFAULT_RSP,
//  190                                 bdb_getZCLFrameCounter());
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV       A,R1
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,?V2
        LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        MOV       R6,A
//  191 
//  192     osal_mem_free(pReportCmd);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclDoorLock_Report_1
//  193   }
//  194   else
//  195   {
//  196     result = ZMemError;
??zclDoorLock_Report_0:
        MOV       R6,#0x10
//  197   }
//  198 
//  199   return result;
??zclDoorLock_Report_1:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//  200 }
          CFI EndBlock cfiBlock0
//  201 /*********************************************************************
//  202  * @fn          zclDoorLock_Init
//  203  *
//  204  * @brief       Initialization function for the zclGeneral layer.
//  205  *
//  206  * @param       none
//  207  *
//  208  * @return      none
//  209  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  210 void zclDoorLock_Init( byte task_id )
zclDoorLock_Init:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclDoorLock_Init
        CODE
//  211 {
        FUNCALL zclDoorLock_Init, bdb_RegisterSimpleDescriptor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Init, zclDoorLock_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Init, zclClosures_RegisterDoorLockCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Init, zcl_registerCmdList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_Init, AT_DoorLock_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  212   zclDoorLock_TaskID = task_id;
        MOV       DPTR,#zclDoorLock_TaskID
        MOVX      @DPTR,A
//  213 
//  214   // This app is part of the Home Automation Profile
//  215   bdb_RegisterSimpleDescriptor( &DoorLock_SimpleDesc );
        ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
        MOV       R2,#DoorLock_SimpleDesc & 0xff
        MOV       R3,#(DoorLock_SimpleDesc >> 8) & 0xff
        LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
//  216 
//  217 //  // Register the ZCL endpoint control function
//  218 //  AT_Endpoint_Register(DOORLOCK_ENDPOINT, &zclDoorLock_OnOff, zclDoorLock_Enable);
//  219 
//  220   // Register the ZCL General Cluster Library callback functions
//  221   zclGeneral_RegisterCmdCallbacks( DOORLOCK_ENDPOINT, &zclDoorLock_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclDoorLock_CmdCallbacks & 0xff
        MOV       R3,#(zclDoorLock_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0xa
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  222 
//  223   // Register the application's attribute list
//  224   zclDoorLock_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclDoorLock_ResetAttributesToDefaultValues
        LCALL     `??zclDoorLock_ResetAttributesToDefaultValues::?`; Banked call to: zclDoorLock_ResetAttributesToDefaultValues
//  225   zcl_registerAttrList( DOORLOCK_ENDPOINT, zclDoorLock_NumAttributes, zclDoorLock_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclDoorLock_Attrs & 0xff
        MOV       R5,#(zclDoorLock_Attrs >> 8) & 0xff
        MOV       DPTR,#zclDoorLock_NumAttributes
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0xa
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  226 
//  227   //Register the ZCL DoorLock Cluster Library callback function
//  228   zclClosures_RegisterDoorLockCmdCallbacks( DOORLOCK_ENDPOINT, &zclDoorLock_DoorLockCmdCallbacks );
        ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
        MOV       R2,#zclDoorLock_DoorLockCmdCallbacks & 0xff
        MOV       R3,#(zclDoorLock_DoorLockCmdCallbacks >> 8) & 0xff
        MOV       R1,#0xa
        LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
//  229 
//  230   #ifdef ZCL_DISCOVER
//  231     // Register the application's command list
//  232     zcl_registerCmdList( DOORLOCK_ENDPOINT, zclCmdsArraySize, zclDoorLock_Cmds );
        ; Setup parameters for call to function zcl_registerCmdList
        MOV       R4,#zclDoorLock_Cmds & 0xff
        MOV       R5,#(zclDoorLock_Cmds >> 8) & 0xff
        MOV       DPTR,#zclCmdsArraySize
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       R1,#0xa
        LCALL     `??zcl_registerCmdList::?relay`; Banked call to: zcl_registerCmdList
//  233   #endif
//  234 
//  235   #ifdef ZCL_DIAGNOSTIC
//  236     // Register the application's callback function to read/write attribute data.
//  237     // This is only required when the attribute data format is unknown to ZCL.
//  238     zcl_registerReadWriteCB( DOORLOCK_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
//  239 
//  240     if ( zclDiagnostic_InitStats() == ZSuccess )
//  241     {
//  242       // Here the user could start the timer to save Diagnostics to NV
//  243     }
//  244   #endif
//  245 
//  246   AT_DoorLock_Init();
        ; Setup parameters for call to function AT_DoorLock_Init
        LCALL     `??AT_DoorLock_Init::?relay`; Banked call to: AT_DoorLock_Init
//  247 }
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  248 
//  249 /*********************************************************************
//  250  * @fn          zclDoorLock_event_loop
//  251  *
//  252  * @brief       Event Loop Processor for zclGeneral.
//  253  *
//  254  * @param       none
//  255  *
//  256  * @return      none
//  257  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  258 uint16 zclDoorLock_event_loop( uint8 task_id, uint16 events )
zclDoorLock_event_loop:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zclDoorLock_event_loop
        CODE
//  259 {
        FUNCALL zclDoorLock_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, zclDoorLock_Report
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, zclDoorLock_Report
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, zclDoorLock_Report
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_event_loop, AT_DoorLock_Handle_Rsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  260   afIncomingMSGPacket_t *MSGpkt;
//  261 
//  262   (void)task_id;  // Intentionally unreferenced parameter
//  263 
//  264   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclDoorLock_event_loop_0
//  265   {
//  266     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclDoorLock_TaskID )) )
//  267     {
//  268       switch ( MSGpkt->hdr.event )
//  269       {
//  270         default:
//  271           break;
//  272       }
//  273 
//  274       // Release the memory
//  275       osal_msg_deallocate( (uint8 *)MSGpkt );
//  276     }
//  277 
//  278     // return unprocessed events
//  279     return (events ^ SYS_EVENT_MSG);
//  280   }
//  281 
//  282   if ( events & DOORLOCK_IDENTIFY_TIMEOUT_EVT )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclDoorLock_event_loop_1
//  283   {
//  284     if ( zclDoorLock_IdentifyTime > 0 )
        MOV       DPTR,#zclDoorLock_IdentifyTime
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclDoorLock_event_loop_2
//  285       zclDoorLock_IdentifyTime--;
        MOV       DPTR,#zclDoorLock_IdentifyTime
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOVX      @DPTR,A
//  286     // zclDoorLock_ProcessIdentifyTimeChange(DOORLOCK_ENDPOINT);
//  287 
//  288     return ( events ^ DOORLOCK_IDENTIFY_TIMEOUT_EVT );
??zclDoorLock_event_loop_2:
        MOV       A,R2
        XRL       A,#0x1
        MOV       R2,A
        LJMP      ??zclDoorLock_event_loop_3 & 0xFFFF
//  289   }
??zclDoorLock_event_loop_4:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclDoorLock_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       A,R2
        ORL       A,R3
        JNZ       ??zclDoorLock_event_loop_4
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        LJMP      ??zclDoorLock_event_loop_5 & 0xFFFF
//  290 
//  291   if ( events & DOORLOCK_REPORT_LOCK_EVT )
??zclDoorLock_event_loop_1:
        ANL       A,#0x2
        JZ        ??zclDoorLock_event_loop_6
//  292   {
//  293     zclDoorLock_LockState = CLOSURES_LOCK_STATE_LOCKED;
        MOV       DPTR,#zclDoorLock_LockState
        MOV       A,#0x1
        LCALL     ?Subroutine4 & 0xFFFF
//  294 
//  295   #ifdef BDB_REPORTING
//  296     ZStatus_t result = zclDoorLock_Report( DOORLOCK_ENDPOINT,
//  297                                            ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
//  298                                            ATTRID_CLOSURES_LOCK_STATE,
//  299                                            ZCL_DATATYPE_ENUM8,
//  300                                            (void *)&zclDoorLock_LockState);
??CrossCallReturnLabel_6:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x30
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x1
        MOV       R1,#0xa
        LCALL     `??zclDoorLock_Report::?relay`; Banked call to: zclDoorLock_Report
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
//  301 
//  302     printf("AF, DOORLOCK_REPORT_LOCK_EVT: 0x%02X\r\n", result);
        ; Setup parameters for call to function printf
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R2,#`?<Constant "AF, DOORLOCK_REPORT_L...">` & 0xff
        MOV       R3,#(`?<Constant "AF, DOORLOCK_REPORT_L...">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  303   #endif
//  304 
//  305     return ( events ^ DOORLOCK_REPORT_LOCK_EVT );
        MOV       A,R6
        XRL       A,#0x2
        LJMP      ??zclDoorLock_event_loop_7 & 0xFFFF
//  306   }
//  307 
//  308   if ( events & DOORLOCK_REPORT_UNLOCK_EVT )
??zclDoorLock_event_loop_6:
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??zclDoorLock_event_loop_8
//  309   {
//  310     zclDoorLock_LockState = CLOSURES_LOCK_STATE_UNLOCKED;
        MOV       DPTR,#zclDoorLock_LockState
        MOV       A,#0x2
        LCALL     ?Subroutine4 & 0xFFFF
//  311 
//  312   #ifdef BDB_REPORTING
//  313     ZStatus_t result = zclDoorLock_Report( DOORLOCK_ENDPOINT,
//  314                                            ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
//  315                                            ATTRID_CLOSURES_LOCK_STATE,
//  316                                            ZCL_DATATYPE_ENUM8,
//  317                                            (void *)&zclDoorLock_LockState);
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x30
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x1
        MOV       R1,#0xa
        LCALL     `??zclDoorLock_Report::?relay`; Banked call to: zclDoorLock_Report
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
//  318 
//  319     printf("AF, DOORLOCK_REPORT_UNLOCK_EVT: 0x%02X\r\n", result);
        ; Setup parameters for call to function printf
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R2,#`?<Constant "AF, DOORLOCK_REPORT_U...">` & 0xff
        MOV       R3,#(`?<Constant "AF, DOORLOCK_REPORT_U...">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  320   #endif
//  321 
//  322     // report the doorlock is relocked after DOORLOCK_RELOCK_TIMEOUT (s)
//  323     osal_start_timerEx(zclDoorLock_TaskID, DOORLOCK_REPORT_LOCK_EVT, DOORLOCK_RELOCK_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#zclDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  324 
//  325     return ( events ^ DOORLOCK_REPORT_UNLOCK_EVT );
        MOV       A,R6
        XRL       A,#0x4
        SJMP      ??zclDoorLock_event_loop_7
//  326   }
//  327 
//  328   if ( events & DOORLOCK_SET_DORMANT_EVT )
??zclDoorLock_event_loop_8:
        MOV       A,R2
        ANL       A,#0x8
        JZ        ??zclDoorLock_event_loop_9
//  329   {
//  330     NLME_SetPollRate(DOORLOCK_POLL_RATE_DORMANT);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
//  331 
//  332     return ( events ^ DOORLOCK_SET_DORMANT_EVT );
        MOV       A,R6
        XRL       A,#0x8
        SJMP      ??zclDoorLock_event_loop_7
//  333   }
//  334 
//  335   if ( events & DOORLOCK_KEEP_ALIVE_EVT )
??zclDoorLock_event_loop_9:
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??zclDoorLock_event_loop_10
//  336   {
//  337   #ifdef BDB_REPORTING
//  338     ZStatus_t result = zclDoorLock_Report( DOORLOCK_ENDPOINT,
//  339                                            ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
//  340                                            ATTRID_CLOSURES_LOCK_STATE,
//  341                                            ZCL_DATATYPE_ENUM8,
//  342                                            (void *)&zclDoorLock_LockState);
        ; Setup parameters for call to function zclDoorLock_Report
        MOV       ?V0,#zclDoorLock_LockState & 0xff
        MOV       ?V1,#(zclDoorLock_LockState >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x30
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x1
        MOV       R1,#0xa
        LCALL     `??zclDoorLock_Report::?relay`; Banked call to: zclDoorLock_Report
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
//  343 
//  344     printf("AF, DOORLOCK_KEEP_ALIVE_EVT: 0x%02X\r\n", result);
        ; Setup parameters for call to function printf
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R2,#`?<Constant "AF, DOORLOCK_KEEP_ALI...">` & 0xff
        MOV       R3,#(`?<Constant "AF, DOORLOCK_KEEP_ALI...">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  345   #endif
//  346 
//  347     return ( events ^ DOORLOCK_KEEP_ALIVE_EVT );
        MOV       A,R6
        XRL       A,#0x10
        SJMP      ??zclDoorLock_event_loop_7
//  348   }
//  349 
//  350   if ( events & DOORLOCK_HANDLE_RSP_EVT )
??zclDoorLock_event_loop_10:
        MOV       A,R2
        ANL       A,#0x20
        JZ        ??zclDoorLock_event_loop_11
//  351   {
//  352     AT_DoorLock_Handle_Rsp(single_bus_rcv_buf, single_bus_rcv_len);
        ; Setup parameters for call to function AT_DoorLock_Handle_Rsp
        MOV       DPTR,#single_bus_rcv_len
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#single_bus_rcv_buf & 0xff
        MOV       R3,#(single_bus_rcv_buf >> 8) & 0xff
        LCALL     `??AT_DoorLock_Handle_Rsp::?relay`; Banked call to: AT_DoorLock_Handle_Rsp
//  353 
//  354     return ( events ^ DOORLOCK_HANDLE_RSP_EVT );
        MOV       A,R6
        XRL       A,#0x20
??zclDoorLock_event_loop_7:
        MOV       R2,A
        MOV       A,R7
??zclDoorLock_event_loop_5:
        MOV       R3,A
        SJMP      ??zclDoorLock_event_loop_3
//  355   }
//  356 
//  357   // Discard unknown events
//  358   return 0;
??zclDoorLock_event_loop_11:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclDoorLock_event_loop_3:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
//  359 }
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function zclDoorLock_event_loop
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function zclDoorLock_event_loop
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclDoorLock_Report
        ; Setup parameters for call to function zclDoorLock_Report
        MOV       ?V0,#zclDoorLock_LockState & 0xff
        MOV       ?V1,#(zclDoorLock_LockState >> 8) & 0xff
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
//  360 
//  361 /*********************************************************************
//  362  * @fn      zclDoorLock_BasicResetCB
//  363  *
//  364  * @brief   Callback from the ZCL General Cluster Library
//  365  *          to set all the Basic Cluster attributes to default values.
//  366  *
//  367  * @param   none
//  368  *
//  369  * @return  none
//  370  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  371 static void zclDoorLock_BasicResetCB( void )
zclDoorLock_BasicResetCB:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclDoorLock_BasicResetCB
        CODE
//  372 {
        FUNCALL zclDoorLock_BasicResetCB, zclDoorLock_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  373   /* DoorLock_TODO: remember to update this function with any
//  374      application-specific cluster attribute variables */
//  375 
//  376   zclDoorLock_ResetAttributesToDefaultValues();
        ; Setup parameters for call to function zclDoorLock_ResetAttributesToDefaultValues
        LCALL     `??zclDoorLock_ResetAttributesToDefaultValues::?`; Banked call to: zclDoorLock_ResetAttributesToDefaultValues
//  377 }
          CFI EndBlock cfiBlock7
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock8
//  378 
//  379 /*********************************************************************
//  380  * @fn      zclDoorLock_Enable
//  381  *
//  382  * @brief   Enable/disale the endpoint
//  383  *
//  384  * @param   none
//  385  *
//  386  * @return  none
//  387  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  388 void zclDoorLock_Enable( bool isEnable)
zclDoorLock_Enable:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zclDoorLock_Enable
        CODE
//  389 {
        FUNCALL zclDoorLock_Enable, zclDoorLock_ResetAttributesToDefaultValues
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  390   if (isEnable) {
        JNZ       ??zclDoorLock_Enable_0
//  391 //    zclDoorLock_OnOffCB(COMMAND_ON);
//  392   } else {
//  393     zclDoorLock_BasicResetCB();
        ; Setup parameters for call to function zclDoorLock_ResetAttributesToDefaultValues
        LCALL     `??zclDoorLock_ResetAttributesToDefaultValues::?`; Banked call to: zclDoorLock_ResetAttributesToDefaultValues
//  394   }
//  395 }
??zclDoorLock_Enable_0:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock9
//  396 
//  397 /*********************************************************************
//  398  * @fn      zclDoorLock_DoorLockCB
//  399  *
//  400  * @brief   Callback from the ZCL General Cluster Library when
//  401  *          it received an Door Lock cluster Command for this application.
//  402  *
//  403  * @param   pInMsg - process incoming message
//  404  * @param   pInCmd - PIN/RFID code of command
//  405  *
//  406  * @return  ZStatus_t
//  407  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  408 static ZStatus_t zclDoorLock_DoorLockCB ( zclIncoming_t *pInMsg, zclDoorLock_t *pInCmd )
zclDoorLock_DoorLockCB:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zclDoorLock_DoorLockCB
        CODE
//  409 {
        FUNCALL zclDoorLock_DoorLockCB, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_input
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_input
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_pwr_single_bus_input
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_DoorLock_Lock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclDoorLock_DoorLockCB, AT_DoorLock_Unlock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  410   uint8 newDoorLockState;
//  411   uint8 cmd_start = CMD_START;
//  412   uint8 cmd_end = CMD_END;
//  413   uint8 cmd_locate_shutdown = CMD_LOCATE_SHUTDOWN;
//  414   
//  415   //start upload data
//  416   if (pInCmd->pPinRfidCode[5]==0x36)
        MOV       DPL,R4
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x36
        JNZ       ??CrossCallReturnLabel_3
//  417   {
//  418     printf("start upload data");
        ; Setup parameters for call to function printf
        MOV       R2,#`?<Constant "start upload data">` & 0xff
        MOV       R3,#(`?<Constant "start upload data">` >> 8) & 0xff
        LCALL     ?Subroutine2 & 0xFFFF
//  419     AT_pwr_single_bus_output();
//  420     AT_pwr_single_bus_send_byte(cmd_start);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function AT_pwr_single_bus_send_byte
        MOV       R1,#-0x4d
        LCALL     ?Subroutine3 & 0xFFFF
//  421     AT_pwr_single_bus_input();
//  422   }
//  423   //stop locate module power
//  424     if ((pInCmd->pPinRfidCode[0]==0x37)||(pInCmd->pPinRfidCode[5]==0x37))
??CrossCallReturnLabel_3:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        XRL       A,#0x37
        JZ        ??zclDoorLock_DoorLockCB_0
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x37
        JNZ       ??CrossCallReturnLabel_4
//  425   {
//  426     printf("stop locate module power");
??zclDoorLock_DoorLockCB_0:
        ; Setup parameters for call to function printf
        MOV       R2,#`?<Constant "stop locate module power">` & 0xff
        MOV       R3,#(`?<Constant "stop locate module power">` >> 8) & 0xff
        LCALL     ?Subroutine2 & 0xFFFF
//  427     AT_pwr_single_bus_output();
//  428     AT_pwr_single_bus_send_byte(cmd_locate_shutdown);
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function AT_pwr_single_bus_send_byte
        MOV       R1,#-0x4c
        LCALL     ?Subroutine3 & 0xFFFF
//  429     AT_pwr_single_bus_input();
//  430   }
//  431   //stop upload data
//  432     if ((pInCmd->pPinRfidCode[0]==0x38)||(pInCmd->pPinRfidCode[5]==0x38))
??CrossCallReturnLabel_4:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        XRL       A,#0x38
        JZ        ??zclDoorLock_DoorLockCB_1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x38
        JNZ       ??CrossCallReturnLabel_5
//  433   {
//  434     printf("stop upload data");
??zclDoorLock_DoorLockCB_1:
        ; Setup parameters for call to function printf
        MOV       R2,#`?<Constant "stop upload data">` & 0xff
        MOV       R3,#(`?<Constant "stop upload data">` >> 8) & 0xff
        LCALL     ?Subroutine2 & 0xFFFF
//  435     AT_pwr_single_bus_output();
//  436     AT_pwr_single_bus_send_byte(cmd_end);
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function AT_pwr_single_bus_send_byte
        MOV       R1,#-0x4a
        LCALL     ?Subroutine3 & 0xFFFF
//  437     AT_pwr_single_bus_input();
//  438   }
//  439   // judge what kind of action should be taken
//  440   if ( pInMsg->hdr.commandID == COMMAND_CLOSURES_LOCK_DOOR ) // Lock the door
??CrossCallReturnLabel_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        JZ        ??zclDoorLock_DoorLockCB_2
//  441   {
//  442     newDoorLockState = CLOSURES_LOCK_STATE_LOCKED;
//  443   }
//  444   else if ( pInMsg->hdr.commandID == COMMAND_CLOSURES_UNLOCK_DOOR ) // Unock the door
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??zclDoorLock_DoorLockCB_3
//  445   {
//  446     newDoorLockState = CLOSURES_LOCK_STATE_UNLOCKED;
//  447   }
//  448   else // Toggle the door
//  449   {
//  450     if (zclDoorLock_LockState == CLOSURES_LOCK_STATE_LOCKED)
        MOV       DPTR,#zclDoorLock_LockState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclDoorLock_DoorLockCB_4
//  451       newDoorLockState = CLOSURES_LOCK_STATE_UNLOCKED;
??zclDoorLock_DoorLockCB_3:
        MOV       ?V2,#0x2
        SJMP      ??zclDoorLock_DoorLockCB_5
//  452     else if (zclDoorLock_LockState == CLOSURES_LOCK_STATE_UNLOCKED)
??zclDoorLock_DoorLockCB_4:
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclDoorLock_DoorLockCB_5
//  453       newDoorLockState = CLOSURES_LOCK_STATE_LOCKED;
??zclDoorLock_DoorLockCB_2:
        MOV       ?V2,#0x1
//  454   }
//  455 
//  456   if( newDoorLockState != zclDoorLock_LockState )
??zclDoorLock_DoorLockCB_5:
        MOV       DPTR,#zclDoorLock_LockState
        MOVX      A,@DPTR
        XRL       A,?V2
        JZ        ??zclDoorLock_DoorLockCB_6
//  457   {
//  458     // take action
//  459     if( newDoorLockState == CLOSURES_LOCK_STATE_LOCKED )
        MOV       A,#0x1
        XRL       A,?V2
        JNZ       ??zclDoorLock_DoorLockCB_7
//  460       AT_DoorLock_Lock( pInCmd ); // Lock the door
        ; Setup parameters for call to function AT_DoorLock_Lock
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AT_DoorLock_Lock::?relay`; Banked call to: AT_DoorLock_Lock
        SJMP      ??zclDoorLock_DoorLockCB_6
//  461     else if( newDoorLockState == CLOSURES_LOCK_STATE_UNLOCKED )
??zclDoorLock_DoorLockCB_7:
        MOV       A,#0x2
        XRL       A,?V2
        JNZ       ??zclDoorLock_DoorLockCB_6
//  462       AT_DoorLock_Unlock( pInCmd ); // Unlock the door
        ; Setup parameters for call to function AT_DoorLock_Unlock
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AT_DoorLock_Unlock::?relay`; Banked call to: AT_DoorLock_Unlock
//  463   }
//  464 
//  465   return ( ZCL_STATUS_CMD_HAS_RSP );
??zclDoorLock_DoorLockCB_6:
        MOV       R1,#-0x1
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
//  466 }
          CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zclDoorLock_DoorLockCB
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclDoorLock_DoorLockCB
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function zclDoorLock_DoorLockCB
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zclDoorLock_DoorLockCB
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclDoorLock_DoorLockCB
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        LCALL     `??AT_pwr_single_bus_send_byte::?relay`; Banked call to: AT_pwr_single_bus_send_byte
        ; Setup parameters for call to function AT_pwr_single_bus_input
        ; Setup parameters for call to function AT_pwr_single_bus_input
        ; Setup parameters for call to function AT_pwr_single_bus_input
        LCALL     `??AT_pwr_single_bus_input::?relay`; Banked call to: AT_pwr_single_bus_input
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function zclDoorLock_DoorLockCB
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zclDoorLock_DoorLockCB
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zclDoorLock_DoorLockCB
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        LCALL     `??printf::?relay`; Banked call to: printf
        ; Setup parameters for call to function AT_pwr_single_bus_output
        ; Setup parameters for call to function AT_pwr_single_bus_output
        ; Setup parameters for call to function AT_pwr_single_bus_output
        LCALL     `??AT_pwr_single_bus_output::?relay`; Banked call to: AT_pwr_single_bus_output
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
//  467 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  468 static ZStatus_t zclDoorLock_DoorLockSetTemporaryPinCB ( zclIncoming_t *pInMsg, zclDoorLockSetTemporaryPin_t *pCmd )
zclDoorLock_DoorLockSetTemporaryPinCB:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function zclDoorLock_DoorLockSetTemporaryPinCB
        CODE
//  469 {
        FUNCALL zclDoorLock_DoorLockSetTemporaryPinCB, AT_DoorLock_SetTemporaryPin_Req
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  470   AT_DoorLock_SetTemporaryPin_Req ( pCmd );
        ; Setup parameters for call to function AT_DoorLock_SetTemporaryPin_Req
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        LCALL     `??AT_DoorLock_SetTemporaryPin_Req::?relay`; Banked call to: AT_DoorLock_SetTemporaryPin_Req
//  471 
//  472   return ( ZCL_STATUS_CMD_HAS_RSP );
        MOV       R1,#-0x1
        LJMP      ?Subroutine1 & 0xFFFF
//  473 }
          CFI EndBlock cfiBlock22

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclDoorLock_CmdCallbacks>`:
        DATA16
        DW `??zclDoorLock_BasicResetCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclDoorLock_DoorLockCmdCallb`:
        DATA16
        DW `??zclDoorLock_DoorLockCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW `??zclDoorLock_DoorLockSetTemporaryPinCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclDoorLock_Report::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclDoorLock_Report

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclDoorLock_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclDoorLock_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclDoorLock_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclDoorLock_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclDoorLock_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclDoorLock_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclDoorLock_Enable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclDoorLock_Enable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclDoorLock_DoorLockCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclDoorLock_DoorLockCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclDoorLock_DoorLockSetTemporaryPinCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclDoorLock_DoorLockSetTemporaryPinCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AF, DOORLOCK_REPORT_L...">`:
        DB "AF, DOORLOCK_REPORT_LOCK_EVT: 0x%02X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AF, DOORLOCK_REPORT_U...">`:
        DB "AF, DOORLOCK_REPORT_UNLOCK_EVT: 0x%02X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AF, DOORLOCK_KEEP_ALI...">`:
        DB "AF, DOORLOCK_KEEP_ALIVE_EVT: 0x%02X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "start upload data">`:
        DB "start upload data"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "stop locate module power">`:
        DB "stop locate module power"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "stop upload data">`:
        DB "stop upload data"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        END
// 
// 893 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
// 128 bytes in segment XDATA_I
// 128 bytes in segment XDATA_ID
// 186 bytes in segment XDATA_ROM_C
//   1 byte  in segment XDATA_Z
// 
// 170 bytes of CODE     memory
// 178 bytes of CONST    memory (+ 8 bytes shared)
// 893 bytes of HUGECODE memory
// 129 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
