///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              23/Feb/2022  09:34:58
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\hal\target\CC2530EB\hal_key.c
//    Command line       =  
//        -f C:\Users\Administrator\AppData\Local\Temp\EW3586.tmp
//        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\hal\target\CC2530EB\hal_key.c
//        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
//        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
//        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
//        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
//        ISR_KEYINTERRUPT -lC
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        -lA
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=300 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\hal_key.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME hal_key

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET

        PUBLIC `??HalKeyConfig::?relay`
        FUNCTION `??HalKeyConfig::?relay`,0203H
        PUBLIC `??HalKeyInit::?relay`
        FUNCTION `??HalKeyInit::?relay`,0203H
        PUBLIC `??HalKeyPoll::?relay`
        FUNCTION `??HalKeyPoll::?relay`,0203H
        PUBLIC `??HalKeyRead::?relay`
        FUNCTION `??HalKeyRead::?relay`,0203H
        PUBLIC HalKeyConfig
        FUNCTION HalKeyConfig,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyInit
        FUNCTION HalKeyInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyPoll
        FUNCTION HalKeyPoll,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyRead
        FUNCTION HalKeyRead,0203H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
HalKeyConfig        SYMBOL "HalKeyConfig"
`??HalKeyConfig::?relay` SYMBOL "?relay", HalKeyConfig
HalKeyInit          SYMBOL "HalKeyInit"
`??HalKeyInit::?relay` SYMBOL "?relay", HalKeyInit
HalKeyPoll          SYMBOL "HalKeyPoll"
`??HalKeyPoll::?relay` SYMBOL "?relay", HalKeyPoll
HalKeyRead          SYMBOL "HalKeyRead"
`??HalKeyRead::?relay` SYMBOL "?relay", HalKeyRead

// D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\hal\target\CC2530EB\hal_key.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_key.c
//    3   Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
//    4   Revision:       $Revision: 23815 $
//    5 
//    6   Description:    This file contains the interface to the HAL KEY Service.
//    7 
//    8 
//    9   Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 /*********************************************************************
//   40  NOTE: If polling is used, the hal_driver task schedules the KeyRead()
//   41        to occur every 100ms.  This should be long enough to naturally
//   42        debounce the keys.  The KeyRead() function remembers the key
//   43        state of the previous poll and will only return a non-zero
//   44        value if the key state changes.
//   45 
//   46  NOTE: If interrupts are used, the KeyRead() function is scheduled
//   47        25ms after the interrupt occurs by the ISR.  This delay is used
//   48        for key debouncing.  The ISR disables any further Key interrupt
//   49        until KeyRead() is executed.  KeyRead() will re-enable Key
//   50        interrupts after executing.  Unlike polling, when interrupts
//   51        are enabled, the previous key state is not remembered.  This
//   52        means that KeyRead() will return the current state of the keys
//   53        (not a change in state of the keys).
//   54 
//   55  NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
//   56        the ISR.  Therefore, the joystick movements will only be detected
//   57        during a pushbutton interrupt caused by S1 or the center joystick
//   58        pushbutton.
//   59 
//   60  NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
//   61        high state to a low state.  This transition is typically clean.  The
//   62        duration of the low state is around 200ms.  When the signal returns
//   63        to the high state, there is a high likelihood of signal bounce, which
//   64        causes a unwanted interrupts.  Normally, we would set the interrupt
//   65        edge to falling edge to generate an interrupt when S1 is pushed, but
//   66        because of the signal bounce, it is better to set the edge to rising
//   67        edge to generate an interrupt when S1 is released.  The debounce logic
//   68        can then filter out the signal bounce.  The result is that we typically
//   69        get only 1 interrupt per button push.  This mechanism is not totally
//   70        foolproof because occasionally, signal bound occurs during the falling
//   71        edge as well.  A similar mechanism is used to handle the joystick
//   72        pushbutton on the DB.  For the EB, we do not have independent control
//   73        of the interrupt edge for the S1 and center joystick pushbutton.  As
//   74        a result, only one or the other pushbuttons work reasonably well with
//   75        interrupts.  The default is the make the S1 switch on the EB work more
//   76        reliably.
//   77 
//   78 *********************************************************************/
//   79 
//   80 /**************************************************************************************************
//   81  *                                            INCLUDES
//   82  **************************************************************************************************/
//   83 #include "hal_mcu.h"
//   84 #include "hal_defs.h"
//   85 #include "hal_types.h"
//   86 #include "hal_board.h"
//   87 #include "hal_drivers.h"
//   88 #include "hal_adc.h"
//   89 #include "hal_key.h"
//   90 #include "osal.h"
//   91 #include "hal_sleep.h"
//   92 
//   93 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//   94 
//   95 /**************************************************************************************************
//   96  *                                              MACROS
//   97  **************************************************************************************************/
//   98 
//   99 /**************************************************************************************************
//  100  *                                            CONSTANTS
//  101  **************************************************************************************************/
//  102 #define HAL_KEY_RISING_EDGE   0
//  103 #define HAL_KEY_FALLING_EDGE  1
//  104 
//  105 #define HAL_KEY_DEBOUNCE_VALUE  25
//  106 
//  107 /* CPU port interrupt */
//  108 #define HAL_KEY_CPU_PORT_0_IF P0IF
//  109 #define HAL_KEY_CPU_PORT_2_IF P2IF
//  110 #define HAL_KEY_UP_DOWN_PULL  P2INP
//  111 
//  112 /* SW_6 is at P0.1 */
//  113 #define HAL_KEY_SW_6_PORT   P0
//  114 #define HAL_KEY_SW_6_BIT    BV(1)
//  115 #define HAL_KEY_SW_6_SEL    P0SEL
//  116 #define HAL_KEY_SW_6_DIR    P0DIR
//  117 #define HAL_KEY_SW_6_INP    P0INP
//  118 #define HAL_KEY_SW_6_INPBIT BV(5)
//  119 
//  120 /* edge interrupt */
//  121 #define HAL_KEY_SW_6_EDGEBIT  BV(0)
//  122 #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
//  123 
//  124 
//  125 /* SW_6 interrupts */
//  126 #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
//  127 #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
//  128 #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
//  129 #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
//  130 #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
//  131 
//  132 /* Joy stick move at P2.0 */
//  133 #define HAL_KEY_JOY_MOVE_PORT   P2
//  134 #define HAL_KEY_JOY_MOVE_BIT    BV(0)
//  135 #define HAL_KEY_JOY_MOVE_SEL    P2SEL
//  136 #define HAL_KEY_JOY_MOVE_DIR    P2DIR
//  137 #define HAL_KEY_JOY_MOVE_INP    P2INP
//  138 #define HAL_KEY_JOY_MOVE_INPBIT BV(7)
//  139 
//  140 /* edge interrupt */
//  141 #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
//  142 #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
//  143 
//  144 /* Joy move interrupts */
//  145 #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
//  146 #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
//  147 #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
//  148 #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
//  149 #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
//  150 
//  151 #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
//  152 
//  153 
//  154 /**************************************************************************************************
//  155  *                                            TYPEDEFS
//  156  **************************************************************************************************/
//  157 
//  158 
//  159 /**************************************************************************************************
//  160  *                                        GLOBAL VARIABLES
//  161  **************************************************************************************************/
//  162 static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
//  163 static halKeyCBack_t pHalKeyProcessFunction;
//  164 static uint8 HalKeyConfigured;
//  165 bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
//  166 
//  167 /**************************************************************************************************
//  168  *                                        FUNCTIONS - Local
//  169  **************************************************************************************************/
//  170 void halProcessKeyInterrupt(void);
//  171 uint8 halGetJoyKeyInput(void);
//  172 
//  173 
//  174 
//  175 /**************************************************************************************************
//  176  *                                        FUNCTIONS - API
//  177  **************************************************************************************************/
//  178 
//  179 
//  180 /**************************************************************************************************
//  181  * @fn      HalKeyInit
//  182  *
//  183  * @brief   Initilize Key Service
//  184  *
//  185  * @param   none
//  186  *
//  187  * @return  None
//  188  **************************************************************************************************/
//  189 void HalKeyInit( void )
//  190 {
//  191   /* Initialize previous key to 0 */
//  192   halKeySavedKeys = 0;
//  193 
//  194   HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
//  195 
//  196 #if ! defined ENABLE_LED4_DISABLE_S1
//  197   HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
//  198 #endif
//  199   HAL_KEY_SW_6_INP &= ~(HAL_KEY_SW_6_BIT);
//  200   HAL_KEY_UP_DOWN_PULL &= ~(HAL_KEY_SW_6_INPBIT); // UP PULL
//  201 
//  202   HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
//  203   HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
//  204   HAL_KEY_JOY_MOVE_INP &= ~(HAL_KEY_JOY_MOVE_BIT);
//  205   // HAL_KEY_UP_DOWN_PULL |= HAL_KEY_JOY_MOVE_INPBIT; // DOWN PULL
//  206 
//  207   /* Initialize callback function */
//  208   pHalKeyProcessFunction  = NULL;
//  209 
//  210   /* Start with key is not configured */
//  211   HalKeyConfigured = FALSE;
//  212 }
//  213 
//  214 
//  215 /**************************************************************************************************
//  216  * @fn      HalKeyConfig
//  217  *
//  218  * @brief   Configure the Key serivce
//  219  *
//  220  * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
//  221  *          cback - pointer to the CallBack function
//  222  *
//  223  * @return  None
//  224  **************************************************************************************************/
//  225 void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
//  226 {
//  227   /* Enable/Disable Interrupt or */
//  228   Hal_KeyIntEnable = interruptEnable;
//  229 
//  230   /* Register the callback fucntion */
//  231   pHalKeyProcessFunction = cback;
//  232 
//  233   /* Determine if interrupt is enable or not */
//  234   if (Hal_KeyIntEnable)
//  235   {
//  236     /* Rising/Falling edge configuratinn */
//  237 
//  238     PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
//  239     /* For falling edge, the bit must be set. */
//  240   #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
//  241     PICTL |= HAL_KEY_SW_6_EDGEBIT;
//  242   #endif
//  243 
//  244 
//  245     /* Interrupt configuration:
//  246      * - Enable interrupt generation at the port
//  247      * - Enable CPU interrupt
//  248      * - Clear any pending interrupt
//  249      */
//  250     HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
//  251     HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
//  252     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
//  253 
//  254 
//  255 
//  256     /* Rising/Falling edge configuratinn */
//  257 
//  258     HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
//  259     /* For falling edge, the bit must be set. */
//  260   #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
//  261     HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
//  262   #endif
//  263 
//  264 
//  265     /* Interrupt configuration:
//  266      * - Enable interrupt generation at the port
//  267      * - Enable CPU interrupt
//  268      * - Clear any pending interrupt
//  269      */
//  270     HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
//  271     HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
//  272     HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
//  273 
//  274 
//  275     /* Do this only after the hal_key is configured - to work with sleep stuff */
//  276     if (HalKeyConfigured == TRUE)
//  277     {
//  278       osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
//  279     }
//  280   }
//  281   else    /* Interrupts NOT enabled */
//  282   {
//  283     HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
//  284     HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
//  285 
//  286     osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
//  287   }
//  288 
//  289   /* Key now is configured */
//  290   HalKeyConfigured = TRUE;
//  291 }
//  292 
//  293 
//  294 /**************************************************************************************************
//  295  * @fn      HalKeyRead
//  296  *
//  297  * @brief   Read the current value of a key
//  298  *
//  299  * @param   None
//  300  *
//  301  * @return  keys - current keys status
//  302  **************************************************************************************************/
//  303 uint8 HalKeyRead ( void )
//  304 {
//  305   uint8 keys = 0;
//  306 
//  307   if (HAL_PUSH_BUTTON1())
//  308   {
//  309     keys |= HAL_KEY_SW_6;
//  310   }
//  311 
//  312   if (HAL_PUSH_BUTTON2())
//  313   {
//  314     keys |= HAL_KEY_SW_7;
//  315   }
//  316 
//  317   // if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
//  318   // {
//  319   //   keys |= halGetJoyKeyInput();
//  320   // }
//  321 
//  322   return keys;
//  323 }
//  324 
//  325 
//  326 /**************************************************************************************************
//  327  * @fn      HalKeyPoll
//  328  *
//  329  * @brief   Called by hal_driver to poll the keys
//  330  *
//  331  * @param   None
//  332  *
//  333  * @return  None
//  334  **************************************************************************************************/
//  335 void HalKeyPoll (void)
//  336 {
//  337   uint8 keys = 0;
//  338 
//  339   if (HAL_PUSH_BUTTON1())
//  340   {
//  341     keys |= HAL_KEY_SW_6;
//  342   }
//  343 
//  344   if (HAL_PUSH_BUTTON2())
//  345   {
//  346     keys |= HAL_KEY_SW_7;
//  347   }
//  348 
//  349   // if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
//  350   // {
//  351   //   keys = halGetJoyKeyInput();
//  352   // }
//  353 
//  354   /* If interrupts are not enabled, previous key status and current key status
//  355    * are compared to find out if a key has changed status.
//  356    */
//  357   if (!Hal_KeyIntEnable)
//  358   {
//  359     if (keys == halKeySavedKeys)
//  360     {
//  361       /* Exit - since no keys have changed */
//  362       return;
//  363     }
//  364     /* Store the current keys for comparation next time */
//  365     halKeySavedKeys = keys;
//  366   }
//  367   else
//  368   {
//  369     /* Key interrupt handled here */
//  370   }
//  371 
//  372   /* Invoke Callback if new keys were depressed */
//  373   if (pHalKeyProcessFunction
//  374 #ifdef HAL_LEGACY_KEYS
//  375     && keys //in legacy modes, only report key presses and do not report when a key is released
//  376 #endif
//  377     )
//  378   {
//  379     (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
//  380   }
//  381 }
//  382 
//  383 /**************************************************************************************************
//  384  * @fn      halGetJoyKeyInput
//  385  *
//  386  * @brief   Map the ADC value to its corresponding key.
//  387  *
//  388  * @param   None
//  389  *
//  390  * @return  keys - current joy key status
//  391  **************************************************************************************************/
//  392 uint8 halGetJoyKeyInput(void)
//  393 {
//  394   /* The joystick control is encoded as an analog voltage.
//  395    * Read the JOY_LEVEL analog value and map it to joy movement.
//  396    */
//  397   uint8 adc;
//  398   uint8 ksave0 = 0;
//  399   uint8 ksave1;
//  400 
//  401   /* Keep on reading the ADC until two consecutive key decisions are the same. */
//  402   do
//  403   {
//  404     ksave1 = ksave0;    /* save previouse key reading */
//  405 
//  406     adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
//  407 
//  408     if ((adc >= 2) && (adc <= 38))
//  409     {
//  410        ksave0 |= HAL_KEY_UP;
//  411     }
//  412     else if ((adc >= 74) && (adc <= 88))
//  413     {
//  414       ksave0 |= HAL_KEY_RIGHT;
//  415     }
//  416     else if ((adc >= 60) && (adc <= 73))
//  417     {
//  418       ksave0 |= HAL_KEY_LEFT;
//  419     }
//  420     else if ((adc >= 39) && (adc <= 59))
//  421     {
//  422       ksave0 |= HAL_KEY_DOWN;
//  423     }
//  424     else if ((adc >= 89) && (adc <= 100))
//  425     {
//  426       ksave0 |= HAL_KEY_CENTER;
//  427     }
//  428   } while (ksave0 != ksave1);
//  429 
//  430   return ksave0;
//  431 }
//  432 
//  433 
//  434 
//  435 
//  436 
//  437 /**************************************************************************************************
//  438  * @fn      halProcessKeyInterrupt
//  439  *
//  440  * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
//  441  *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
//  442  *
//  443  * @param
//  444  *
//  445  * @return
//  446  **************************************************************************************************/
//  447 void halProcessKeyInterrupt (void)
//  448 {
//  449   bool valid=FALSE;
//  450 
//  451   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
//  452   {
//  453     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
//  454     valid = TRUE;
//  455   }
//  456 
//  457   if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
//  458   {
//  459     HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
//  460     valid = TRUE;
//  461   }
//  462 
//  463   if (valid)
//  464   {
//  465     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
//  466   }
//  467 }
//  468 
//  469 /**************************************************************************************************
//  470  * @fn      HalKeyEnterSleep
//  471  *
//  472  * @brief  - Get called to enter sleep mode
//  473  *
//  474  * @param
//  475  *
//  476  * @return
//  477  **************************************************************************************************/
//  478 void HalKeyEnterSleep ( void )
//  479 {
//  480 }
//  481 
//  482 /**************************************************************************************************
//  483  * @fn      HalKeyExitSleep
//  484  *
//  485  * @brief   - Get called when sleep is over
//  486  *
//  487  * @param
//  488  *
//  489  * @return  - return saved keys
//  490  **************************************************************************************************/
//  491 uint8 HalKeyExitSleep ( void )
//  492 {
//  493   /* Wake up and read keys */
//  494   return ( HalKeyRead () );
//  495 }
//  496 
//  497 /***************************************************************************************************
//  498  *                                    INTERRUPT SERVICE ROUTINE
//  499  ***************************************************************************************************/
//  500 
//  501 /**************************************************************************************************
//  502  * @fn      halKeyPort0Isr
//  503  *
//  504  * @brief   Port0 ISR
//  505  *
//  506  * @param
//  507  *
//  508  * @return
//  509  **************************************************************************************************/
//  510 HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
//  511 {
//  512   HAL_ENTER_ISR();
//  513 
//  514   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
//  515   {
//  516     halProcessKeyInterrupt();
//  517   }
//  518 
//  519   /*
//  520     Clear the CPU interrupt flag for Port_0
//  521     PxIFG has to be cleared before PxIF
//  522   */
//  523   HAL_KEY_SW_6_PXIFG = 0;
//  524   HAL_KEY_CPU_PORT_0_IF = 0;
//  525 
//  526   CLEAR_SLEEP_MODE();
//  527   HAL_EXIT_ISR();
//  528 }
//  529 
//  530 
//  531 /**************************************************************************************************
//  532  * @fn      halKeyPort2Isr
//  533  *
//  534  * @brief   Port2 ISR
//  535  *
//  536  * @param
//  537  *
//  538  * @return
//  539  **************************************************************************************************/
//  540 HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
//  541 {
//  542   HAL_ENTER_ISR();
//  543 
//  544   if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
//  545   {
//  546     halProcessKeyInterrupt();
//  547   }
//  548 
//  549   /*
//  550     Clear the CPU interrupt flag for Port_2
//  551     PxIFG has to be cleared before PxIF
//  552     Notes: P2_1 and P2_2 are debug lines.
//  553   */
//  554   HAL_KEY_JOY_MOVE_PXIFG = 0;
//  555   HAL_KEY_CPU_PORT_2_IF = 0;
//  556 
//  557   CLEAR_SLEEP_MODE();
//  558   HAL_EXIT_ISR();
//  559 }
//  560 
//  561 #else
//  562 
//  563 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  564 void HalKeyInit(void){}
HalKeyInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function HalKeyInit
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        LJMP      ?BRET
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  565 void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
HalKeyConfig:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function HalKeyConfig
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        LJMP      ?BRET
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  566 uint8 HalKeyRead(void){ return 0;}
HalKeyRead:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function HalKeyRead
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        MOV       R1,#0x0
        LJMP      ?BRET
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  567 void HalKeyPoll(void){}
HalKeyPoll:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function HalKeyPoll
        CODE
        ; Saved register size: 0
        ; Auto size: 0
        LJMP      ?BRET
          CFI EndBlock cfiBlock3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyConfig::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyPoll::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyPoll

        END
//  568 
//  569 #endif /* HAL_KEY */
//  570 
//  571 
//  572 
//  573 
//  574 
//  575 /**************************************************************************************************
//  576 **************************************************************************************************/
// 
// 14 bytes in segment BANKED_CODE
// 24 bytes in segment BANK_RELAYS
// 
// 24 bytes of CODE     memory
// 14 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
