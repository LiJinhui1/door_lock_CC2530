###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Feb/2022  09:35:04
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f C:\Users\Administrator\AppData\Local\Temp\EW4469.tmp
#        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDProfile.c
#        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
#        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
#        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
#        ISR_KEYINTERRUPT -lC
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\ZDProfile.lst
#    Object file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj\ZDProfile.r51
#
###############################################################################

D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
      4            Revision:       $Revision: 44530 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          #include "AT_cmd.h"
     67          #include "AT_uart.h"
     68          
     69          /*********************************************************************
     70           * MACROS
     71           */
     72          
     73          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     74            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     75            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     76            osal_memcpy((AFADDR).addr.extAddr, (pZADDR)->addr.extAddr, Z_EXTADDR_LEN); \
     77          }
     78          
     79          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     80            afStatus_t stat;                                    \
     81            ZDP_TmpBuf = (BUF)+1;                               \
     82            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     83            osal_mem_free( (BUF) );                             \
     84            ZDP_TmpBuf = ZDP_Buf+1;                             \
     85            return stat;                                        \
     86          }
     87          
     88          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     89            afStatus_t stat;                                    \
     90            ZDP_TxOptions = (TxO);                              \
     91            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     92            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     93            return stat;                                        \
     94          }
     95          
     96          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     97            afStatus_t stat;                                    \
     98            ZDP_TmpBuf = (BUF)+1;                               \
     99            ZDP_TxOptions = (TxO);                              \
    100            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
    101            osal_mem_free( (BUF) );                             \
    102            ZDP_TmpBuf = ZDP_Buf+1;                             \
    103            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    104            return stat;                                        \
    105          }
    106          
    107          /*********************************************************************
    108           * CONSTANTS
    109           */
    110          
    111          #define ZDP_BUF_SZ          80
    112          

   \                                 In  segment CODE_C, align 1
    113          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    114          
    115          // Routing table options
    116          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    117          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    118          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    119          
    120          
    121          /*********************************************************************
    122           * TYPEDEFS
    123           */
    124          typedef struct
    125          {
    126            void *next;
    127            uint8 taskID;
    128            uint16 clusterID;
    129          } ZDO_MsgCB_t;
    130          
    131          
    132          /*********************************************************************
    133           * GLOBAL VARIABLES
    134           */
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 childIndex = 0;
   \                     childIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          
    139          /*********************************************************************
    140           * EXTERNAL VARIABLES
    141           */
    142          
    143          extern endPointDesc_t ZDApp_epDesc;
    144          
    145          /*********************************************************************
    146           * EXTERNAL FUNCTIONS
    147           */
    148          extern void ZDApp_SetParentAnnceTimer( void );
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          
    154          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    155          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    156          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    157          
    158          /*********************************************************************
    159           * LOCAL VARIABLES
    160           */
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    164          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    167          
    168          /*********************************************************************
    169           * ZDO Message Processing table
    170           */
    171          
    172          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    173          
    174          typedef struct
    175          {
    176            uint16                clusterID;
    177            pfnZDPMsgProcessor    pFn;
    178          } zdpMsgProcItem_t;
    179          

   \                                 In  segment CODE_C, align 1
    180          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   0100         DW 1
   \   000006   ....         DW `??zdpProcessAddrReq::?relay`
   \   000008   0200         DW 2
   \   00000A   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   00000C   0280         DW 32770
   \   00000E   ....         DW `??ZDO_ProcessNodeDescRsp::?relay`
   \   000010   0300         DW 3
   \   000012   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000014   0400         DW 4
   \   000016   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000018   0480         DW 32772
   \   00001A   ....         DW `??ZDO_ProcessSimpleDescRsp::?relay`
   \   00001C   0500         DW 5
   \   00001E   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   000020   0600         DW 6
   \   000022   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000024   3000         DW 48
   \   000026   ....         DW `??ZDO_ProcessMgmtNwkDiscReq::?relay`
   \   000028   3080         DW 32816
   \   00002A   ....         DW `??AT_ZDO_ProcessMgmtNwkDiscRsp::?relay`
   \   00002C   3100         DW 49
   \   00002E   ....         DW `??ZDO_ProcessMgmtLqiReq::?relay`
   \   000030   3300         DW 51
   \   000032   ....         DW `??ZDO_ProcessMgmtBindReq::?relay`
   \   000034   3400         DW 52
   \   000036   ....         DW `??ZDO_ProcessMgmtLeaveReq::?relay`
   \   000038   FFFF         DW 65535
   \   00003A   0000         DW 0H
    181          {
    182          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    183            // These aren't processed by sleeping end devices.
    184            { Device_annce,           ZDO_ProcessDeviceAnnce },
    185          #endif
    186          #if ( ZG_BUILD_RTR_TYPE )
    187            // These aren't processed by end devices.
    188            { Parent_annce,           ZDO_ProcessParentAnnce },
    189            { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
    190          #endif
    191            { NWK_addr_req,           zdpProcessAddrReq },
    192            { IEEE_addr_req,          zdpProcessAddrReq },
    193            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    194            { Node_Desc_rsp,          ZDO_ProcessNodeDescRsp },
    195            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    196            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    197            { Simple_Desc_rsp,        ZDO_ProcessSimpleDescRsp },
    198            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    199            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    200          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    201            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    202            { Mgmt_NWK_Disc_rsp,      AT_ZDO_ProcessMgmtNwkDiscRsp},
    203          #endif
    204          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE || ZG_BUILD_ENDDEVICE_TYPE )
    205            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    206          #endif
    207          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    208            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    209          #endif
    210          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    211            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    212          #endif
    213          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    214            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    215          #endif
    216          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    217            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    218          #endif
    219          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    220            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    221          #endif
    222          #if defined ( ZDO_USERDESC_RESPONSE )
    223            { User_Desc_req,          ZDO_ProcessUserDescReq },
    224          #endif
    225          #if defined ( ZDO_USERDESCSET_RESPONSE )
    226            { User_Desc_set,          ZDO_ProcessUserDescSet },
    227          #endif
    228          #if defined ( ZDO_SERVERDISC_RESPONSE )
    229            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    230          #endif
    231            {0xFFFF, NULL} // Last
    232          };
    233          
    234          /*********************************************************************
    235           * @fn          fillAndSend
    236           *
    237           * @brief       Combined to reduce space
    238           *
    239           * @param
    240           * @param
    241           *
    242           * @return      afStatus_t
    243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    245          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V3,R1
    246            afAddrType_t afAddr;
    247          
    248            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV       R4,#0xc
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    249            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV       A,#0x9
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E4           CLR       A
   \   000027   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   C0E0         PUSH      A
   \   000032   7408         MOV       A,#0x8
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   D0E0         POP       A
   \   000039   F0           MOVX      @DPTR,A
   \   00003A                ; Setup parameters for call to function osal_memcpy
   \   00003A   8E..         MOV       ?V0,R6
   \   00003C   8F..         MOV       ?V1,R7
   \   00003E   75..00       MOV       ?V2,#0x0
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000046   7C08         MOV       R4,#0x8
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   7403         MOV       A,#0x3
   \   00004C   12....       LCALL     ?XSTACK_DISP101_8
   \   00004F   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
    250          
    251            *(ZDP_TmpBuf-1) = *transSeq;
   \   000055   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000058   E0           MOVX      A,@DPTR
   \   000059   24FF         ADD       A,#-0x1
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   34FF         ADDC      A,#-0x1
   \   000061   F5..         MOV       ?V1,A
   \   000063   85..82       MOV       DPL,?V4
   \   000066   85..83       MOV       DPH,?V5
   \   000069   12....       LCALL     ??Subroutine117_0 & 0xFFFF
    252          
    253            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    254                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    255                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_203:
   \   00006C                ; Setup parameters for call to function AF_DataRequest
   \   00006C   75..1E       MOV       ?V2,#0x1e
   \   00006F   78..         MOV       R0,#?V2
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000074   78..         MOV       R0,#?V4
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   E5..         MOV       A,?V3
   \   000080   2401         ADD       A,#0x1
   \   000082   F5..         MOV       ?V0,A
   \   000084   E4           CLR       A
   \   000085   3400         ADDC      A,#0x0
   \   000087   F5..         MOV       ?V1,A
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   7421         MOV       A,#0x21
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000096   90....       MOV       DPTR,#ZDP_TxOptions
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F9           MOV       R1,A
   \   00009B   7C..         MOV       R4,#ZDApp_epDesc & 0xff
   \   00009D   7D..         MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00009F   7409         MOV       A,#0x9
   \   0000A1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A4   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000A7   7409         MOV       A,#0x9
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AC   740C         MOV       A,#0xc
   \   0000AE   02....       LJMP      ?Subroutine0 & 0xFFFF
    256          
    257          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    258          
    259          /*********************************************************************
    260           * @fn          ZDP_SendData
    261           *
    262           * @brief       This builds and send a request message that has
    263           *              NWKAddrOfInterest as its only parameter.
    264           *
    265           * @param       dstAddr - destination address
    266           * @param       cmd - clusterID
    267           * @param       dataLen - number of bytes of data
    268           * @param       data - pointer to the data
    269           * @param       SecurityEnable - Security Options
    270           *
    271           * @return      afStatus_t
    272           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    273          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    274                                  byte len, uint8 *buf, byte SecurityEnable )
    275          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    276            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V3,A
    277            byte cnt = len;
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
   \   000013   740E         MOV       A,#0xe
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   00001B   801F         SJMP      ??ZDP_SendData_0
    278          
    279            while ( cnt-- )
    280            {
    281              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   E0           MOVX      A,@DPTR
   \   000022   85..82       MOV       DPL,?V2
   \   000025   85..83       MOV       DPH,?V3
   \   000028   12....       LCALL     ??Subroutine127_0 & 0xFFFF
    282            }
   \                     ??CrossCallReturnLabel_257:
   \   00002B   A882         MOV       R0,DPL
   \   00002D   A983         MOV       R1,DPH
   \   00002F   85..82       MOV       DPL,?V2
   \   000032   85..83       MOV       DPH,?V3
   \   000035   A3           INC       DPTR
   \   000036   8582..       MOV       ?V2,DPL
   \   000039   8583..       MOV       ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   00003C   74FF         MOV       A,#-0x1
   \   00003E   2E           ADD       A,R6
   \   00003F   FE           MOV       R6,A
   \   000040   04           INC       A
   \   000041   70DA         JNZ       ??ZDP_SendData_1
    283          
    284            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   000043   7410         MOV       A,#0x10
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E0           MOVX      A,@DPTR
   \   000049   90....       MOV       DPTR,#ZDP_TxOptions
   \   00004C   6004         JZ        ??ZDP_SendData_2
   \   00004E   7440         MOV       A,#0x40
   \   000050   8001         SJMP      ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000052   E4           CLR       A
   \                     ??ZDP_SendData_3:
   \   000053   F0           MOVX      @DPTR,A
   \   000054                ; Setup parameters for call to function fillAndSend
   \   000054   740C         MOV       A,#0xc
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00005C   EF           MOV       A,R7
   \   00005D   F9           MOV       R1,A
   \   00005E   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   E9           MOV       A,R1
   \   000065   F9           MOV       R1,A
   \   000066   90....       MOV       DPTR,#ZDP_TxOptions
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   02....       LJMP      ??Subroutine104_0 & 0xFFFF
    285          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    286          
    287          /*********************************************************************
    288           * @fn          ZDP_NWKAddrOfInterestReq
    289           *
    290           * @brief       This builds and send a request message that has
    291           *              NWKAddrOfInterest as its only parameter.
    292           *
    293           * @param       dstAddr - destination address
    294           * @param       nwkAddr - 16 bit address
    295           * @param       SecurityEnable - Security Options
    296           *
    297           * @return      afStatus_t
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    300                                               byte cmd, byte SecurityEnable )
    301          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    302            (void)SecurityEnable;  // Intentionally unreferenced parameter
    303          
    304            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine16 & 0xFFFF
    305            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_14:
   \   000008   F0           MOVX      @DPTR,A
    306          
    307            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   000009                ; Setup parameters for call to function fillAndSend
   \   000009   E9           MOV       A,R1
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   75..00       MOV       ?V1,#0x0
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7902         MOV       R1,#0x2
   \   000016   02....       LJMP      ?Subroutine8 & 0xFFFF
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000006   EC           MOV       A,R4
   \   000007   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00000A   ED           MOV       A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine112_0
   \   000008                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   02....       LJMP      ??Subroutine107_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    309          
    310          /*********************************************************************
    311           * Address Requests
    312           */
    313          
    314          /*********************************************************************
    315           * @fn          ZDP_NwkAddrReq
    316           *
    317           * @brief       This builds and send a NWK_addr_req message.  This
    318           *              function sends a broadcast message looking for a 16
    319           *              bit address with a 64 bit address as bait.
    320           *
    321           * @param       IEEEAddress - looking for this device
    322           * @param       SecurityEnable - Security Options
    323           *
    324           * @return      afStatus_t
    325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    326          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    327                                     byte StartIndex, byte SecurityEnable )
    328          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V2,R1
   \   000010   8C..         MOV       ?V3,R4
    329            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000015   12....       LCALL     ?Subroutine64 & 0xFFFF
    330            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    331            zAddrType_t dstAddr;
    332          
    333            (void)SecurityEnable;  // Intentionally unreferenced parameter
    334          
    335            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_106:
   \   000018   FC           MOV       R4,A
   \   000019   EB           MOV       A,R3
   \   00001A   FD           MOV       R5,A
   \   00001B   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00001D   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   00001F   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000022   E9           MOV       A,R1
   \   000023   700A         JNZ       ??ZDP_NwkAddrReq_0
    336            {
    337              dstAddr.addrMode = AddrBroadcast;
   \   000025   7408         MOV       A,#0x8
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ?Subroutine88 & 0xFFFF
    338              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    339            }
   \                     ??CrossCallReturnLabel_144:
   \   00002D   8018         SJMP      ??ZDP_NwkAddrReq_1
    340            else
    341            {
    342              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002F   7408         MOV       A,#0x8
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   7402         MOV       A,#0x2
   \   000036   F0           MOVX      @DPTR,A
    343              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000037   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00003A   12....       LCALL     ??Subroutine129_0 & 0xFFFF
    344            }
   \                     ??CrossCallReturnLabel_273:
   \   00003D   85..82       MOV       DPL,?XSP + 0
   \   000040   85..83       MOV       DPH,?XSP + 1
   \   000043   E8           MOV       A,R0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E9           MOV       A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   000047   F0           MOVX      @DPTR,A
    345          
    346            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000048                ; Setup parameters for call to function sAddrExtCpy
   \   000048   EE           MOV       A,R6
   \   000049   FC           MOV       R4,A
   \   00004A   EF           MOV       A,R7
   \   00004B   FD           MOV       R5,A
   \   00004C   12....       LCALL     ?Subroutine73 & 0xFFFF
    347          
    348            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_165:
   \   00004F   E5..         MOV       A,?V2
   \   000051   F0           MOVX      @DPTR,A
    349            *pBuf++ = StartIndex;
   \   000052   A3           INC       DPTR
   \   000053   E5..         MOV       A,?V3
   \   000055   F0           MOVX      @DPTR,A
    350          
    351            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   E4           CLR       A
   \   000057   F5..         MOV       ?V0,A
   \   000059   F5..         MOV       ?V1,A
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   790A         MOV       R1,#0xa
   \   000062   7402         MOV       A,#0x2
   \   000064   12....       LCALL     ?XSTACK_DISP102_8
   \   000067                REQUIRE ?Subroutine9
   \   000067                ; // Fall through to label ?Subroutine9
    352          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   12....       LCALL     ?DEALLOC_XSTACK8
   \   000006   7409         MOV       A,#0x9
   \   000008   80..         SJMP      ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004                REQUIRE ??Subroutine101_0
   \   000004                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   74FD         MOV       A,#-0x3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   74FF         MOV       A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine125_0
   \   000004                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007                ; Setup parameters for call to function sAddrExtCmp
   \   000007   EA           MOV       A,R2
   \   000008   22           RET
    353          
    354          /*********************************************************************
    355           * @fn          ZDP_IEEEAddrReq
    356           *
    357           * @brief       This builds and send a IEEE_addr_req message.  This
    358           *              function sends a unicast message looking for a 64
    359           *              bit IEEE address with a 16 bit address as bait.
    360           *
    361           * @param       nodeId - interest of short address
    362           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    363           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    364           * @param       SecurityEnable - Security Options
    365           *
    366           * @return      afStatus_t
    367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, uint16 nodeId, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    369                                      byte StartIndex, byte SecurityEnable )
    370          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine56 & 0xFFFF
    371            uint8 *pBuf = ZDP_TmpBuf;
    372            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    373            zAddrType_t dstAddr;
    374          
    375            (void)SecurityEnable;  // Intentionally unreferenced parameter
    376          
    377            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_268:
   \   00000D   7408         MOV       A,#0x8
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   7402         MOV       A,#0x2
   \   000014   F0           MOVX      @DPTR,A
    378            dstAddr.addr.shortAddr = shortAddr;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   EA           MOV       A,R2
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EB           MOV       A,R3
   \   00001F   F0           MOVX      @DPTR,A
    379          
    380            *pBuf++ = LO_UINT16( nodeId );
   \   000020   EC           MOV       A,R4
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   F0           MOVX      @DPTR,A
    381            *pBuf++ = HI_UINT16( nodeId );
   \   000026   ED           MOV       A,R5
   \   000027   12....       LCALL     ?Subroutine33 & 0xFFFF
    382          
    383            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_47:
   \   00002A   F0           MOVX      @DPTR,A
    384            *pBuf++ = StartIndex;
   \   00002B   7413         MOV       A,#0x13
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine57 & 0xFFFF
    385          
    386            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \                     ??CrossCallReturnLabel_96:
   \   000033                ; Setup parameters for call to function fillAndSend
   \   000033   75..01       MOV       ?V0,#0x1
   \   000036   75..00       MOV       ?V1,#0x0
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7904         MOV       R1,#0x4
   \   000040   02....       LJMP      ?Subroutine2 & 0xFFFF
    387          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   EE           MOV       A,R6
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?XSTACK_DISP102_8
   \   000005   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000008   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000B                REQUIRE ??Subroutine106_0
   \   00000B                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   7409         MOV       A,#0x9
   \   000002                REQUIRE ??Subroutine107_0
   \   000002                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000005                REQUIRE ??Subroutine129_0
   \   000005                ; // Fall through to label ??Subroutine129_0
    388          
    389          /*********************************************************************
    390           * @fn          ZDP_MatchDescReq
    391           *
    392           * @brief       This builds and send a Match_Desc_req message.  This
    393           *              function sends a broadcast or unicast message
    394           *              requesting the list of endpoint/interfaces that
    395           *              match profile ID and cluster IDs.
    396           *
    397           * @param       dstAddr - destination address
    398           * @param       nwkAddr - network address of interest
    399           * @param       ProfileID - Profile ID
    400           * @param       NumInClusters - number of input clusters
    401           * @param       InClusterList - input cluster ID list
    402           * @param       NumOutClusters - number of output clusters
    403           * @param       OutClusterList - output cluster ID list
    404           * @param       SecurityEnable - Security Options
    405           *
    406           * @return      afStatus_t
    407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    408          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    409                                          uint16 ProfileID,
    410                                          byte NumInClusters, cId_t *InClusterList,
    411                                          byte NumOutClusters, cId_t *OutClusterList,
    412                                          byte SecurityEnable )
    413          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine56 & 0xFFFF
    414            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_269:
   \   000008   7412         MOV       A,#0x12
   \   00000A   12....       LCALL     ?XSTACK_DISP0_8
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V0,A
    415            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    416            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    417          
    418            (void)SecurityEnable;  // Intentionally unreferenced parameter
    419          
    420            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV       A,R6
   \   000011   25..         ADD       A,?V0
   \   000013   C3           CLR       C
   \   000014   33           RLC       A
   \   000015   2406         ADD       A,#0x6
   \   000017   FF           MOV       R7,A
    421          
    422            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR       C
   \   000019   944F         SUBB      A,#0x4f
   \   00001B   4005         JC        ??ZDP_MatchDescReq_0
    423            {
    424              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV       R1,#0x10
   \   00001F   02....       LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
    425            }
    426          
    427            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    428            // this command to 0xFFFF.  So, here we will filter this and replace
    429            // with 0xFFFD to only send to devices with RX ON.  This includes the
    430            // network address of interest.
    431            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    432                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V1,A
   \   000031   740F         MOV       A,#0xf
   \   000033   65..         XRL       A,?V1
   \   000035   6006         JZ        ??ZDP_MatchDescReq_2
   \   000037   7402         MOV       A,#0x2
   \   000039   65..         XRL       A,?V1
   \   00003B   7018         JNZ       ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003D   8A82         MOV       DPL,R2
   \   00003F   8B83         MOV       DPH,R3
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F4           CPL       A
   \   000043   7003         JNZ       ??ZDP_MatchDescReq_4
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F4           CPL       A
   \                     ??ZDP_MatchDescReq_4:
   \   000048   700B         JNZ       ??ZDP_MatchDescReq_3
    433            {
    434              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   74FD         MOV       A,#-0x3
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   74FF         MOV       A,#-0x1
   \   000054   F0           MOVX      @DPTR,A
    435            }
    436            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000055   74FF         MOV       A,#-0x1
   \   000057   6C           XRL       A,R4
   \   000058   7003         JNZ       ??ZDP_MatchDescReq_5
   \   00005A   74FF         MOV       A,#-0x1
   \   00005C   6D           XRL       A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   00005D   7004         JNZ       ??ZDP_MatchDescReq_6
    437            {
    438              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00005F   7CFD         MOV       R4,#-0x3
   \   000061   7DFF         MOV       R5,#-0x1
    439            }
    440          
    441            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000063   EC           MOV       A,R4
   \   000064   8882         MOV       DPL,R0
   \   000066   8983         MOV       DPH,R1
   \   000068   F0           MOVX      @DPTR,A
    442            *pBuf++ = HI_UINT16( nwkAddr );
   \   000069   ED           MOV       A,R5
   \   00006A   A3           INC       DPTR
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   740E         MOV       A,#0xe
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine48 & 0xFFFF
    443          
    444            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_81:
   \   000074   EC           MOV       A,R4
   \   000075   8882         MOV       DPL,R0
   \   000077   8983         MOV       DPH,R1
   \   000079   A3           INC       DPTR
   \   00007A   12....       LCALL     ?Subroutine34 & 0xFFFF
    445            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_49:
   \   00007D   12....       LCALL     ?Subroutine33 & 0xFFFF
    446          
    447            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_48:
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   F0           MOVX      @DPTR,A
   \   000083   E8           MOV       A,R0
   \   000084   2405         ADD       A,#0x5
   \   000086   F8           MOV       R0,A
   \   000087   5001         JNC       ??ZDP_MatchDescReq_7
   \   000089   09           INC       R1
    448            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   00008A   EE           MOV       A,R6
   \   00008B   6019         JZ        ??ZDP_MatchDescReq_8
    449            {
    450              for (i=0; i<NumInClusters; ++i)  {
   \   00008D   75..00       MOV       ?V1,#0x0
   \   000090   7410         MOV       A,#0x10
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine48 & 0xFFFF
    451                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_82:
   \   000098   12....       LCALL     ?Subroutine10 & 0xFFFF
    452                *pBuf++ = HI_UINT16( InClusterList[i] );
    453              }
   \                     ??CrossCallReturnLabel_0:
   \   00009B   5001         JNC       ??ZDP_MatchDescReq_9
   \   00009D   09           INC       R1
   \                     ??ZDP_MatchDescReq_9:
   \   00009E   05..         INC       ?V1
   \   0000A0   E5..         MOV       A,?V1
   \   0000A2   C3           CLR       C
   \   0000A3   9E           SUBB      A,R6
   \   0000A4   40F2         JC        ??CrossCallReturnLabel_82
    454            }
    455          
    456            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   8983         MOV       DPH,R1
   \   0000AA   E5..         MOV       A,?V0
   \   0000AC   12....       LCALL     ?Subroutine28 & 0xFFFF
    457            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_35:
   \   0000AF   601A         JZ        ??ZDP_MatchDescReq_10
    458            {
    459              for (i=0; i<NumOutClusters; ++i)  {
   \   0000B1   75..00       MOV       ?V1,#0x0
   \   0000B4   7413         MOV       A,#0x13
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine48 & 0xFFFF
    460                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_83:
   \   0000BC   12....       LCALL     ?Subroutine10 & 0xFFFF
    461                *pBuf++ = HI_UINT16( OutClusterList[i] );
    462              }
   \                     ??CrossCallReturnLabel_1:
   \   0000BF   5001         JNC       ??ZDP_MatchDescReq_11
   \   0000C1   09           INC       R1
   \                     ??ZDP_MatchDescReq_11:
   \   0000C2   05..         INC       ?V1
   \   0000C4   E5..         MOV       A,?V1
   \   0000C6   C3           CLR       C
   \   0000C7   95..         SUBB      A,?V0
   \   0000C9   40F1         JC        ??CrossCallReturnLabel_83
    463            }
    464          
    465            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   0000CB                ; Setup parameters for call to function fillAndSend
   \   0000CB   75..06       MOV       ?V0,#0x6
   \   0000CE   75..00       MOV       ?V1,#0x0
   \   0000D1   78..         MOV       R0,#?V0
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D6   EF           MOV       A,R7
   \   0000D7   F9           MOV       R1,A
   \   0000D8   EA           MOV       A,R2
   \   0000D9   FC           MOV       R4,A
   \   0000DA   EB           MOV       A,R3
   \   0000DB   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000E1   80..         SJMP      ??Subroutine105_0
    466          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E5..         MOV       A,?V1
   \   000002   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000005   EC           MOV       A,R4
   \   000006   25..         ADD       A,?V2
   \   000008   F5..         MOV       ?V2,A
   \   00000A   ED           MOV       A,R5
   \   00000B   35..         ADDC      A,?V3
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   85..82       MOV       DPL,?V2
   \   000012   F583         MOV       DPH,A
   \   000014   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000017   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00001A   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   ED           MOV       A,R5
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F5..         MOV       ?V2,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F5..         MOV       ?V3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8882         MOV       DPL,R0
   \   000004   8983         MOV       DPH,R1
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   E8           MOV       A,R0
   \   000009   2402         ADD       A,#0x2
   \   00000B   F8           MOV       R0,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   A882         MOV       R0,DPL
   \   000004   A983         MOV       R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   FD           MOV       R5,A
   \   000001                REQUIRE ??Subroutine124_0
   \   000001                ; // Fall through to label ??Subroutine124_0
    467          
    468          /*********************************************************************
    469           * @fn          ZDP_SimpleDescReq
    470           *
    471           * @brief       This builds and send a NWK_Simple_Desc_req
    472           *              message.  This function sends unicast message to the
    473           *              destination device.
    474           *
    475           * @param       dstAddr - destination address
    476           * @param       nwkAddr - 16 bit address
    477           * @param       epIntf - endpoint/interface
    478           * @param       SecurityEnable - Security Options
    479           *
    480           * @return      afStatus_t
    481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    483                                              byte endPoint, byte SecurityEnable )
    484          
    485          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    486            (void)SecurityEnable;  // Intentionally unreferenced parameter
    487          
    488            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine16 & 0xFFFF
    489            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_15:
   \   000008   12....       LCALL     ?Subroutine12 & 0xFFFF
    490            ZDP_TmpBuf[2] = endPoint;
    491          
    492            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_4:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV       ?V0,#0x4
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV       R1,#0x3
   \   000018   02....       LJMP      ?Subroutine8 & 0xFFFF
    493          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   A3           INC       DPTR
   \   000004   E9           MOV       A,R1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET
    494          
    495          /*********************************************************************
    496           * @fn          ZDP_UserDescSet
    497           *
    498           * @brief       This builds and send a User_Desc_set message to set
    499           *              the user descriptor.  This function sends unicast
    500           *              message to the destination device.
    501           *
    502           * @param       dstAddr - destination address
    503           * @param       nwkAddr - 16 bit address
    504           * @param       UserDescriptor - user descriptor
    505           * @param       SecurityEnable - Security Options
    506           *
    507           * @return      afStatus_t
    508           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    509          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    510                                    UserDescriptorFormat_t *UserDescriptor,
    511                                    byte SecurityEnable )
    512          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine84 & 0xFFFF
    513            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_282:
   \   000008   88..         MOV       ?V2,R0
   \   00000A   F5..         MOV       ?V3,A
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine38 & 0xFFFF
    514            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    515                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_57:
   \   000014   FA           MOV       R2,A
   \   000015   C3           CLR       C
   \   000016   9410         SUBB      A,#0x10
   \   000018   5004         JNC       ??ZDP_UserDescSet_0
   \   00001A   8A..         MOV       ?V0,R2
   \   00001C   8003         SJMP      ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001E   75..10       MOV       ?V0,#0x10
    516            byte addrLen = 2;
    517          
    518            (void)SecurityEnable;  // Intentionally unreferenced parameter
    519          
    520            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000021   EC           MOV       A,R4
   \   000022   85..82       MOV       DPL,?V2
   \   000025   85..83       MOV       DPH,?V3
   \   000028   F0           MOVX      @DPTR,A
    521            *pBuf++ = HI_UINT16( nwkAddr );
   \   000029   ED           MOV       A,R5
   \   00002A   12....       LCALL     ?Subroutine92 & 0xFFFF
    522          
    523            *pBuf++ = len;
   \                     ??CrossCallReturnLabel_150:
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V0
   \   000030   12....       LCALL     ??Subroutine127_0 & 0xFFFF
    524            addrLen = 3;
    525          
    526            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_256:
   \   000033   A982         MOV       R1,DPL
   \   000035   AA83         MOV       R2,DPH
   \   000037   89..         MOV       ?V4,R1
   \   000039   8A..         MOV       ?V5,R2
   \   00003B   75..00       MOV       ?V6,#0x0
   \   00003E   78..         MOV       R0,#?V4
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000043   AC..         MOV       R4,?V0
   \   000045   7D00         MOV       R5,#0x0
   \   000047   E5..         MOV       A,?V2
   \   000049   2403         ADD       A,#0x3
   \   00004B   FA           MOV       R2,A
   \   00004C   E4           CLR       A
   \   00004D   35..         ADDC      A,?V3
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
    527            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   A8..         MOV       R0,?V0
   \   000058   7410         MOV       A,#0x10
   \   00005A   C3           CLR       C
   \   00005B   98           SUBB      A,R0
   \   00005C   FC           MOV       R4,A
   \   00005D   95E0         SUBB      A,0xE0 /* A   */
   \   00005F   FD           MOV       R5,A
   \   000060   7920         MOV       R1,#0x20
   \   000062   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    528          
    529            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000065                ; Setup parameters for call to function fillAndSend
   \   000065   75..14       MOV       ?V2,#0x14
   \   000068   75..00       MOV       ?V3,#0x0
   \   00006B   78..         MOV       R0,#?V2
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7913         MOV       R1,#0x13
   \   000072   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000075                REQUIRE ?Subroutine3
   \   000075                ; // Fall through to label ?Subroutine3
    530          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002   EF           MOV       A,R7
   \   000003                REQUIRE ??Subroutine123_0
   \   000003                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                REQUIRE ??Subroutine130_0
   \   000004                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine131_0
   \   000003                ; // Fall through to label ??Subroutine131_0
    531          
    532          /*********************************************************************
    533           * @fn          ZDP_ServerDiscReq
    534           *
    535           * @brief       Build and send a Server_Discovery_req request message.
    536           *
    537           * @param       serverMask - 16-bit bit-mask of server services being sought.
    538           * @param       SecurityEnable - Security Options
    539           *
    540           * @return      afStatus_t
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    543          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine56 & 0xFFFF
    544            uint8 *pBuf = ZDP_TmpBuf;
    545            zAddrType_t dstAddr;
    546          
    547            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_270:
   \   00000D   7408         MOV       A,#0x8
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine17 & 0xFFFF
    548            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    549          
    550            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_16:
   \   000015   EA           MOV       A,R2
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   F0           MOVX      @DPTR,A
    551            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV       A,R3
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    552          
    553            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    554                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV       A,R6
   \   00001F   90....       MOV       DPTR,#ZDP_TxOptions
   \   000022   6004         JZ        ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV       A,#0x40
   \   000026   8001         SJMP      ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR       A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX      @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV       ?V0,#0x15
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV       R1,#0x2
   \   000037   E9           MOV       A,R1
   \   000038   12....       LCALL     ?XSTACK_DISP102_8
   \   00003B   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   F9           MOV       R1,A
   \   000043   90....       MOV       DPTR,#ZDP_TxOptions
   \   000046   E4           CLR       A
   \   000047   F0           MOVX      @DPTR,A
   \   000048   02....       LJMP      ??Subroutine106_0 & 0xFFFF
    555          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    556          
    557          /*********************************************************************
    558           * @fn          ZDP_DeviceAnnce
    559           *
    560           * @brief       This builds and send a Device_Annce message.  This
    561           *              function sends a broadcast message.
    562           *
    563           * @param       nwkAddr - 16 bit address of the device
    564           * @param       IEEEAddr - 64 bit address of the device
    565           * @param       capabilities - device capabilities.  This field is only
    566           *                 sent for v1.1 networks.
    567           * @param       SecurityEnable - Security Options
    568           *
    569           * @return      afStatus_t
    570           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    571          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    572                                        byte capabilities, byte SecurityEnable )
    573          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    574            zAddrType_t dstAddr;
    575            uint8 len;
    576          
    577            (void)SecurityEnable;  // Intentionally unreferenced parameter
    578          
    579            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV       A,#0x8
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine17 & 0xFFFF
    580            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    581          
    582            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_17:
   \   000014   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000017   EA           MOV       A,R2
   \   000018   12....       LCALL     ?Subroutine18 & 0xFFFF
    583            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   00001B   EB           MOV       A,R3
   \   00001C   F0           MOVX      @DPTR,A
    584            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX      A,@DPTR
   \   000021   2402         ADD       A,#0x2
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   3400         ADDC      A,#0x0
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    585            len = 2 + Z_EXTADDR_LEN;
    586          
    587            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   00002F   C8           XCH       A,R0
   \   000030   240A         ADD       A,#0xa
   \   000032   F582         MOV       DPL,A
   \   000034   E4           CLR       A
   \   000035   38           ADDC      A,R0
   \   000036   F583         MOV       DPH,A
   \   000038   EE           MOV       A,R6
   \   000039   F0           MOVX      @DPTR,A
    588            len++;
    589          
    590            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV       ?V0,#0x13
   \   00003D   75..00       MOV       ?V1,#0x0
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV       R1,#0xb
   \   000047   02....       LJMP      ?Subroutine2 & 0xFFFF
    591          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine116_0
   \   000003                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET
    592          
    593          /*********************************************************************
    594           * @fn          ZDP_ParentAnnce
    595           *
    596           * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
    597           *              messages, it will depend on the clusterID parameter.
    598           *
    599           * @param       TransSeq - ZDP Transaction Sequence Number
    600           * @param       dstAddr - destination address
    601           * @param       numberOfChildren - 8 bit number of children
    602           * @param       childInfo - list of children information (ExtAddr and Age)
    603           * @param       clusterID - Parent_annce or Parent_annce_rsp
    604           * @param       SecurityEnable - Security Options
    605           *
    606           * @return      afStatus_t
    607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
   \                     ZDP_ParentAnnce:
    609                                      zAddrType_t *dstAddr,
    610                                      uint8 numberOfChildren,
    611                                      uint8 *childInfo,
    612                                      cId_t clusterID,
    613                                      uint8 SecurityEnable )
    614          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   89..         MOV       ?V8,R1
    615            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ?Subroutine53 & 0xFFFF
    616            ZDO_ChildInfo_t *pChildInfo;
    617            uint8 i, len;
    618            uint8 *numOfChild;
    619          
    620            (void)SecurityEnable;  // Intentionally unreferenced parameter
    621          
    622            pChildInfo = (ZDO_ChildInfo_t *)childInfo;
    623          
    624            if ( dstAddr->addrMode == AddrBroadcast )
   \                     ??CrossCallReturnLabel_293:
   \   000012   8C82         MOV       DPL,R4
   \   000014   8D83         MOV       DPH,R5
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   640F         XRL       A,#0xf
   \   000021   700B         JNZ       ??ZDP_ParentAnnce_0
    625            {
    626              // Make sure is sent to 0xFFFC
    627              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000023   8C82         MOV       DPL,R4
   \   000025   8D83         MOV       DPH,R5
   \   000027   74FC         MOV       A,#-0x4
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    628            }
    629            len = 1;
   \                     ??ZDP_ParentAnnce_0:
   \   00002E   75..01       MOV       ?V6,#0x1
   \   000031   7418         MOV       A,#0x18
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V2,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V3,A
    630            if ( clusterID == Parent_annce_rsp )
   \   00003D   741F         MOV       A,#0x1f
   \   00003F   65..         XRL       A,?V2
   \   000041   7004         JNZ       ??ZDP_ParentAnnce_1
   \   000043   7480         MOV       A,#-0x80
   \   000045   65..         XRL       A,?V3
   \                     ??ZDP_ParentAnnce_1:
   \   000047   700B         JNZ       ??CrossCallReturnLabel_22
    631            {
    632              // + Status Byte
    633              len += 1;
   \   000049   75..02       MOV       ?V6,#0x2
    634              // Set the status bit to success
    635              *pBuf++ = 0;
   \   00004C   8A82         MOV       DPL,R2
   \   00004E   8B83         MOV       DPH,R3
   \   000050   E4           CLR       A
   \   000051   12....       LCALL     ?Subroutine20 & 0xFFFF
    636            }
    637          
    638            numOfChild = pBuf;
   \                     ??CrossCallReturnLabel_22:
   \   000054   8A..         MOV       ?V0,R2
   \   000056   8B..         MOV       ?V1,R3
    639            *pBuf++ = numberOfChildren;
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   E9           MOV       A,R1
   \   00005D   12....       LCALL     ?Subroutine20 & 0xFFFF
    640          
    641            for ( i = 0; i < MAX_PARENT_ANNCE_CHILD; i++ )
   \                     ??CrossCallReturnLabel_23:
   \   000060   75..00       MOV       ?V7,#0x0
   \   000063   7416         MOV       A,#0x16
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F5..         MOV       ?V12,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F5..         MOV       ?V13,A
    642            {
    643              pBuf = osal_cpyExtAddr( pBuf, pChildInfo[childIndex].extAddr );
   \                     ??ZDP_ParentAnnce_2:
   \   00006F                ; Setup parameters for call to function sAddrExtCpy
   \   00006F   90....       MOV       DPTR,#childIndex
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F5..         MOV       ?V10,A
   \   000075   75..00       MOV       ?V11,#0x0
   \   000078   7403         MOV       A,#0x3
   \   00007A   78..         MOV       R0,#?V10
   \   00007C   12....       LCALL     ?S_SHL
   \   00007F   E5..         MOV       A,?V12
   \   000081   25..         ADD       A,?V10
   \   000083   FC           MOV       R4,A
   \   000084   E5..         MOV       A,?V13
   \   000086   35..         ADDC      A,?V11
   \   000088   FD           MOV       R5,A
   \   000089   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    644              childIndex++;
   \   00008C   90....       MOV       DPTR,#childIndex
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   04           INC       A
   \   000091   F0           MOVX      @DPTR,A
    645          
    646              len += Z_EXTADDR_LEN;
   \   000092   7408         MOV       A,#0x8
   \   000094   25..         ADD       A,?V6
   \   000096   F5..         MOV       ?V6,A
    647          
    648              if ( childIndex == numberOfChildren )
   \   000098   E0           MOVX      A,@DPTR
   \   000099   65..         XRL       A,?V8
   \   00009B   7012         JNZ       ??ZDP_ParentAnnce_3
    649              {
    650                pBuf = numOfChild;
    651                *pBuf = i + 1;
   \   00009D   7401         MOV       A,#0x1
   \   00009F   25..         ADD       A,?V7
   \   0000A1   85..82       MOV       DPL,?V0
   \   0000A4   85..83       MOV       DPH,?V1
   \   0000A7   F0           MOVX      @DPTR,A
    652                // All childs are taken, restart index and go out
    653                childIndex = 0;
   \   0000A8   90....       MOV       DPTR,#childIndex
   \   0000AB   E4           CLR       A
   \   0000AC   F0           MOVX      @DPTR,A
    654                return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \   0000AD                ; Setup parameters for call to function fillAndSend
   \   0000AD   804B         SJMP      ??ZDP_ParentAnnce_4
    655              }
    656            }
   \                     ??ZDP_ParentAnnce_3:
   \   0000AF   05..         INC       ?V7
   \   0000B1   E5..         MOV       A,?V7
   \   0000B3   C3           CLR       C
   \   0000B4   940A         SUBB      A,#0xa
   \   0000B6   40B7         JC        ??ZDP_ParentAnnce_2
    657          
    658            pBuf = numOfChild;
    659            *pBuf = MAX_PARENT_ANNCE_CHILD;
   \   0000B8   85..82       MOV       DPL,?V0
   \   0000BB   85..83       MOV       DPH,?V1
   \   0000BE   740A         MOV       A,#0xa
   \   0000C0   F0           MOVX      @DPTR,A
    660            if ( childIndex < numberOfChildren )
   \   0000C1   90....       MOV       DPTR,#childIndex
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   C3           CLR       C
   \   0000C6   95..         SUBB      A,?V8
   \   0000C8   5030         JNC       ??ZDP_ParentAnnce_4
    661            {
    662              if ( clusterID == Parent_annce )
   \   0000CA   741F         MOV       A,#0x1f
   \   0000CC   65..         XRL       A,?V2
   \   0000CE   45..         ORL       A,?V3
   \   0000D0   7005         JNZ       ??ZDP_ParentAnnce_5
    663              {
    664                ZDApp_SetParentAnnceTimer();
   \   0000D2                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   0000D2   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   0000D5   8023         SJMP      ??ZDP_ParentAnnce_4
    665              }
    666              if ( clusterID == Parent_annce_rsp )
   \                     ??ZDP_ParentAnnce_5:
   \   0000D7   741F         MOV       A,#0x1f
   \   0000D9   65..         XRL       A,?V2
   \   0000DB   7004         JNZ       ??ZDP_ParentAnnce_6
   \   0000DD   7480         MOV       A,#-0x80
   \   0000DF   65..         XRL       A,?V3
   \                     ??ZDP_ParentAnnce_6:
   \   0000E1   7017         JNZ       ??ZDP_ParentAnnce_4
    667              {
    668                osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, 10 );
   \   0000E3                ; Setup parameters for call to function osal_start_timerEx
   \   0000E3   90....       MOV       DPTR,#__Constant_a
   \   0000E6   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000E9   7A00         MOV       R2,#0x0
   \   0000EB   7B40         MOV       R3,#0x40
   \   0000ED   90....       MOV       DPTR,#ZDAppTaskID
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F9           MOV       R1,A
   \   0000F2   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000F5   7404         MOV       A,#0x4
   \   0000F7   12....       LCALL     ?DEALLOC_XSTACK8
    669              }
    670            }
    671          
    672            return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \                     ??ZDP_ParentAnnce_4:
   \   0000FA                ; Setup parameters for call to function fillAndSend
   \   0000FA   78..         MOV       R0,#?V2
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FF   A9..         MOV       R1,?V6
   \   000101   EE           MOV       A,R6
   \   000102   FC           MOV       R4,A
   \   000103   EF           MOV       A,R7
   \   000104   FD           MOV       R5,A
   \   000105   AA..         MOV       R2,?V4
   \   000107   AB..         MOV       R3,?V5
   \   000109   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00010C   02....       LJMP      ??Subroutine119_0 & 0xFFFF
    673          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV       R7,#0xe
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   AA82         MOV       R2,DPL
   \   000004   AB83         MOV       R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine132_0
   \   000003                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    674          
    675          /*********************************************************************
    676           * Address Responses
    677           */
    678          
    679          /*********************************************************************
    680           * @fn      zdpProcessAddrReq
    681           *
    682           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    683           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    684           *
    685           * @param   inMsg - incoming message
    686           *
    687           * @return  none
    688           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    689          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    690          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    691            associated_devices_t *pAssoc;
    692            uint8 reqType;
    693            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   7EFE         MOV       R6,#-0x2
   \   000010   7FFF         MOV       R7,#-0x1
    694            uint8 *ieee = NULL;
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   75..00       MOV       ?V3,#0x0
    695          
    696            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000018   EA           MOV       A,R2
   \   000019   240C         ADD       A,#0xc
   \   00001B   F5..         MOV       ?V8,A
   \   00001D   E4           CLR       A
   \   00001E   35..         ADDC      A,?V5
   \   000020   F5..         MOV       ?V9,A
   \   000022   85..82       MOV       DPL,?V8
   \   000025   F583         MOV       DPH,A
   \   000027   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00002A   EA           MOV       A,R2
   \   00002B   4B           ORL       A,R3
   \   00002C   7004         JNZ       ??zdpProcessAddrReq_0
   \   00002E   7C08         MOV       R4,#0x8
   \   000030   8002         SJMP      ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000032   7C02         MOV       R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000034   E5..         MOV       A,?V4
   \   000036   2413         ADD       A,#0x13
   \   000038   F582         MOV       DPL,A
   \   00003A   E4           CLR       A
   \   00003B   35..         ADDC      A,?V5
   \   00003D   F583         MOV       DPH,A
   \   00003F   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000042   2C           ADD       A,R4
   \   000043   F582         MOV       DPL,A
   \   000045   E4           CLR       A
   \   000046   39           ADDC      A,R1
   \   000047   F583         MOV       DPH,A
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F5..         MOV       ?V6,A
    697          
    698            if ( inMsg->clusterID == NWK_addr_req )
   \   00004C   E5..         MOV       A,?V4
   \   00004E   240B         ADD       A,#0xb
   \   000050   F5..         MOV       ?V10,A
   \   000052   E4           CLR       A
   \   000053   35..         ADDC      A,?V5
   \   000055   F5..         MOV       ?V11,A
   \   000057   EA           MOV       A,R2
   \   000058   4B           ORL       A,R3
   \   000059   701A         JNZ       ??zdpProcessAddrReq_2
    699          
    700            {
    701              ieee = inMsg->asdu;
   \   00005B   88..         MOV       ?V2,R0
   \   00005D   89..         MOV       ?V3,R1
    702          
    703              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00005F                ; Setup parameters for call to function sAddrExtCmp
   \   00005F   AC..         MOV       R4,?V2
   \   000061   AD..         MOV       R5,?V3
   \   000063   7A..         MOV       R2,#saveExtAddr & 0xff
   \   000065   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000067   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00006A   E9           MOV       A,R1
   \   00006B   603C         JZ        ??zdpProcessAddrReq_3
    704              {
    705                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00006D   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000070   12....       LCALL     ?Subroutine43 & 0xFFFF
    706              }
    707              // Handle response for sleeping end devices
    708              else if ( (ZSTACK_ROUTER_BUILD)
    709                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    710                       && ((pAssoc->nodeRelation == CHILD_RFD) || (pAssoc->nodeRelation == CHILD_RFD_RX_IDLE)) ) )
    711              {
    712                aoi = pAssoc->shortAddr;
    713                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    714                  reqType = 0xFF; // Force Invalid
    715              }
    716            }
   \                     ??CrossCallReturnLabel_67:
   \   000073   8024         SJMP      ??zdpProcessAddrReq_4
    717            else  // if ( inMsg->clusterID == IEEE_addr_req )
    718            {
    719              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   000075   8882         MOV       DPL,R0
   \   000077   8983         MOV       DPH,R1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   FA           MOV       R2,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F8           MOV       R0,A
   \   00007E   E4           CLR       A
   \   00007F   C8           XCH       A,R0
   \   000080   F9           MOV       R1,A
   \   000081   EA           MOV       A,R2
   \   000082   28           ADD       A,R0
   \   000083   FE           MOV       R6,A
   \   000084   E4           CLR       A
   \   000085   39           ADDC      A,R1
   \   000086   FF           MOV       R7,A
    720          
    721              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000087   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   6E           XRL       A,R6
   \   00008C   7003         JNZ       ??zdpProcessAddrReq_5
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_5:
   \   000091   7016         JNZ       ??zdpProcessAddrReq_3
    722              {
    723                ieee = saveExtAddr;
   \   000093   75....       MOV       ?V2,#saveExtAddr & 0xff
   \   000096   75....       MOV       ?V3,#(saveExtAddr >> 8) & 0xff
    724              }
    725              else if ( (ZSTACK_ROUTER_BUILD)
    726                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    727                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    728              {
    729                AddrMgrEntry_t addrEntry;
    730                addrEntry.user = ADDRMGR_USER_DEFAULT;
    731                addrEntry.index = pAssoc->addrIdx;
    732                if ( AddrMgrEntryGet( &addrEntry ) )
    733                {
    734                  ieee = addrEntry.extAddr;
    735                }
    736          
    737                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    738                  reqType = 0xFF; // Force Invalid
    739              }
    740            }
    741          
    742            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000099   74FE         MOV       A,#-0x2
   \   00009B   6E           XRL       A,R6
   \   00009C   7003         JNZ       ??zdpProcessAddrReq_6
   \   00009E   74FF         MOV       A,#-0x1
   \   0000A0   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_6:
   \   0000A1   6006         JZ        ??zdpProcessAddrReq_3
   \   0000A3   E5..         MOV       A,?V2
   \   0000A5   45..         ORL       A,?V3
   \   0000A7   700C         JNZ       ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_3:
   \   0000A9   85..82       MOV       DPL,?V10
   \   0000AC   85..83       MOV       DPH,?V11
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   6003         JZ        $+5
   \   0000B2   02....       LJMP      ??zdpProcessAddrReq_8 & 0xFFFF
    743            {
    744              uint8 stat;
    745              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   0000B5   12....       LCALL     ?Subroutine65 & 0xFFFF
    746              // Status + IEEE-Addr + Nwk-Addr.
    747              uint8 len = 1 + Z_EXTADDR_LEN + 2;
    748          
    749              // If aoi and iee are both setup, we found results
    750              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??CrossCallReturnLabel_266:
   \   0000B8   74FE         MOV       A,#-0x2
   \   0000BA   6E           XRL       A,R6
   \   0000BB   7003         JNZ       ??zdpProcessAddrReq_9
   \   0000BD   74FF         MOV       A,#-0x1
   \   0000BF   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_9:
   \   0000C0   6025         JZ        ??zdpProcessAddrReq_10
   \   0000C2   E5..         MOV       A,?V2
   \   0000C4   45..         ORL       A,?V3
   \   0000C6   601F         JZ        ??zdpProcessAddrReq_10
    751              {
    752                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    753                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000C8   E5..         MOV       A,?V6
   \   0000CA   6006         JZ        ??zdpProcessAddrReq_11
   \   0000CC   7401         MOV       A,#0x1
   \   0000CE   65..         XRL       A,?V6
   \   0000D0   7005         JNZ       ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000D2   75..00       MOV       ?V6,#0x0
   \   0000D5   803A         SJMP      ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   0000D7   75..80       MOV       ?V6,#-0x80
    754          
    755                if(stat == ZDP_INVALID_REQTYPE)
    756                {
    757                  //R21 Errata update CCB 2111
    758                  if(inMsg->wasBroadcast == TRUE)
   \   0000DA   85..82       MOV       DPL,?V10
   \   0000DD   85..83       MOV       DPH,?V11
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   6401         XRL       A,#0x1
   \   0000E3   702C         JNZ       ??zdpProcessAddrReq_13
    759                  {
    760                    return;
   \   0000E5   807A         SJMP      ??zdpProcessAddrReq_8
    761                  }
    762          
    763                  stat = ZDP_INVALID_REQTYPE;
    764                }
    765              }
    766              else
    767              {
    768                // not found and the req was unicast to this device
    769                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   0000E7   75..81       MOV       ?V6,#-0x7f
    770          
    771                // Fill in the missing field with this device's address
    772                if ( inMsg->clusterID == NWK_addr_req )
   \   0000EA   85..82       MOV       DPL,?V8
   \   0000ED   85..83       MOV       DPH,?V9
   \   0000F0   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0000F3   49           ORL       A,R1
   \   0000F4   7006         JNZ       ??zdpProcessAddrReq_14
    773                {
    774                  //CCB 2112 Zigbee Core spec
    775                  aoi = 0xFFFF;
   \   0000F6   7EFF         MOV       R6,#-0x1
   \   0000F8   7FFF         MOV       R7,#-0x1
   \   0000FA   8015         SJMP      ??zdpProcessAddrReq_13
    776                }
    777                else
    778                {
    779                  //CCB 2113 Zigbee Core spec
    780                  uint8 invalidIEEEAddr[Z_EXTADDR_LEN];
    781                  osal_memset(invalidIEEEAddr,0xFF,Z_EXTADDR_LEN);
   \                     ??zdpProcessAddrReq_14:
   \   0000FC                ; Setup parameters for call to function osal_memset
   \   0000FC   7C08         MOV       R4,#0x8
   \   0000FE   7D00         MOV       R5,#0x0
   \   000100   79FF         MOV       R1,#-0x1
   \   000102   AA..         MOV       R2,?XSP + 0
   \   000104   AB..         MOV       R3,?XSP + 1
   \   000106   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    782                  ieee = invalidIEEEAddr;
   \   000109   A8..         MOV       R0,?XSP + 0
   \   00010B   A9..         MOV       R1,?XSP + 1
   \   00010D   88..         MOV       ?V2,R0
   \   00010F   89..         MOV       ?V3,R1
    783                }
    784              }
    785          
    786              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_13:
   \   000111   85..82       MOV       DPL,?V0
   \   000114   85..83       MOV       DPH,?V1
   \   000117   E5..         MOV       A,?V6
   \   000119   F0           MOVX      @DPTR,A
   \   00011A   A3           INC       DPTR
   \   00011B   8582..       MOV       ?V0,DPL
   \   00011E   8583..       MOV       ?V1,DPH
    787          
    788              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   000121                ; Setup parameters for call to function sAddrExtCpy
   \   000121   AC..         MOV       R4,?V2
   \   000123   AD..         MOV       R5,?V3
   \   000125   12....       LCALL     ?Subroutine73 & 0xFFFF
    789          
    790              *pBuf++ = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_166:
   \   000128   EE           MOV       A,R6
   \   000129   F0           MOVX      @DPTR,A
    791              *pBuf++ = HI_UINT16( aoi );
   \   00012A   EF           MOV       A,R7
   \   00012B   A3           INC       DPTR
   \   00012C   F0           MOVX      @DPTR,A
    792          
    793              if ( ZSTACK_ROUTER_BUILD )
    794              {
    795                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    796                     && (stat == ZDP_SUCCESS) )
    797                {
    798                  uint8  cnt = 0;
    799          
    800                  //Updated to only search for ZED devices as per R21 spec (2.4.3.1.1.2)
    801                  uint16 *list = AssocMakeList( &cnt );
    802          
    803                  if ( list != NULL )
    804                  {
    805                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    806                    uint16 *pList = list + idx;
    807          
    808                    // NumAssocDev field is only present on success.
    809                    if ( cnt > idx )
    810                    {
    811                      cnt -= idx;
    812                      len += (cnt * sizeof( uint16 ));
    813                    }
    814                    else
    815                    {
    816                      cnt = 0;
    817                    }
    818                    *pBuf++ = cnt;
    819                    len++;
    820          
    821                    // StartIndex field is only present if NumAssocDev field is non-zero.
    822                    *pBuf++ = idx;
    823                    len++;
    824          
    825                    while ( cnt != 0 )
    826                    {
    827                      *pBuf++ = LO_UINT16( *pList );
    828                      *pBuf++ = HI_UINT16( *pList );
    829                      pList++;
    830                      cnt--;
    831                    }
    832          
    833                    osal_mem_free( (uint8 *)list );
    834                  }
    835                  else
    836                  {
    837                    // NumAssocDev field is only present on success.
    838                    *pBuf++ = 0;
    839                    len++;
    840                  }
    841                }
    842              }
    843          
    844              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   00012D   90....       MOV       DPTR,#ZDP_TxOptions
   \   000130   7410         MOV       A,#0x10
   \   000132   12....       LCALL     ?Subroutine36 & 0xFFFF
    845              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \                     ??CrossCallReturnLabel_53:
   \   000135   F5..         MOV       ?V0,A
   \   000137   A3           INC       DPTR
   \   000138   E0           MOVX      A,@DPTR
   \   000139   4480         ORL       A,#0x80
   \   00013B   F5..         MOV       ?V1,A
   \   00013D   78..         MOV       R0,#?V0
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000142   790B         MOV       R1,#0xb
   \   000144   E5..         MOV       A,?V4
   \   000146   2402         ADD       A,#0x2
   \   000148   FC           MOV       R4,A
   \   000149   E4           CLR       A
   \   00014A   35..         ADDC      A,?V5
   \   00014C   FD           MOV       R5,A
   \   00014D   E5..         MOV       A,?V4
   \   00014F   240F         ADD       A,#0xf
   \   000151   FA           MOV       R2,A
   \   000152   E4           CLR       A
   \   000153   35..         ADDC      A,?V5
   \   000155   FB           MOV       R3,A
   \   000156   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000159   12....       LCALL     ?DEALLOC_XSTACK8
    846              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00015C   90....       MOV       DPTR,#ZDP_TxOptions
   \   00015F   E4           CLR       A
   \   000160   F0           MOVX      @DPTR,A
    847            }
    848          }
   \                     ??zdpProcessAddrReq_8:
   \   000161   7408         MOV       A,#0x8
   \   000163                REQUIRE ?Subroutine5
   \   000163                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine108_0
   \   000003                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   85..82       MOV       DPL,?V8
   \   000004   85..83       MOV       DPH,?V9
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine128_0
   \   000003                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET
    849          
    850          /*********************************************************************
    851           * @fn          ZDP_NodeDescMsg
    852           *
    853           * @brief       Builds and sends a Node Descriptor message, unicast to the
    854           *              specified device.
    855           *
    856           * @param       inMsg - incoming message
    857           * @param       nwkAddr - 16 bit network address for device
    858           * @param       pNodeDesc - pointer to the node descriptor
    859           *
    860           * @return      afStatus_t
    861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    862          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    863                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    864          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    865            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000008   12....       LCALL     ?Subroutine43 & 0xFFFF
    866            byte len;
    867          
    868            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    869          
    870            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_68:
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    871          
    872            *pBuf++ = LO_UINT16( nwkAddr );
   \   000011   EC           MOV       A,R4
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    873            *pBuf++ = HI_UINT16( nwkAddr );
   \   000014   ED           MOV       A,R5
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   740A         MOV       A,#0xa
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ?Subroutine38 & 0xFFFF
    874          
    875            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    876                               (pNodeDesc->UserDescAvail << 4) |
    877                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_58:
   \   000024   541F         ANL       A,#0x1f
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   12....       LCALL     ?Subroutine25 & 0xFFFF
    878          
    879            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_253:
   \   00002D   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000030   12....       LCALL     ?Subroutine25 & 0xFFFF
    880            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_254:
   \   000033   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000036   12....       LCALL     ?Subroutine24 & 0xFFFF
    881            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_172:
   \   000039   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00003C   12....       LCALL     ?Subroutine24 & 0xFFFF
    882            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_173:
   \   00003F   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000042   12....       LCALL     ?Subroutine23 & 0xFFFF
    883            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_28:
   \   000045   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000048   12....       LCALL     ?Subroutine23 & 0xFFFF
    884            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_29:
   \   00004B   A3           INC       DPTR
   \   00004C   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00004F   12....       LCALL     ?Subroutine19 & 0xFFFF
    885            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_20:
   \   000052   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000055   A3           INC       DPTR
   \   000056   F0           MOVX      @DPTR,A
    886          
    887            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000057   E8           MOV       A,R0
   \   000058   2408         ADD       A,#0x8
   \   00005A   FC           MOV       R4,A
   \   00005B   E4           CLR       A
   \   00005C   39           ADDC      A,R1
   \   00005D   FD           MOV       R5,A
   \   00005E   8C82         MOV       DPL,R4
   \   000060   F583         MOV       DPH,A
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V0,A
   \   000065   EE           MOV       A,R6
   \   000066   240B         ADD       A,#0xb
   \   000068   F582         MOV       DPL,A
   \   00006A   E4           CLR       A
   \   00006B   3F           ADDC      A,R7
   \   00006C   F583         MOV       DPH,A
   \   00006E   E5..         MOV       A,?V0
   \   000070   12....       LCALL     ??Subroutine114_0 & 0xFFFF
    888            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_185:
   \   000073   E0           MOVX      A,@DPTR
   \   000074   C0E0         PUSH      A
   \   000076   EE           MOV       A,R6
   \   000077   240C         ADD       A,#0xc
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   3F           ADDC      A,R7
   \   00007D   F583         MOV       DPH,A
   \   00007F   D0E0         POP       A
   \   000081   12....       LCALL     ?Subroutine19 & 0xFFFF
    889            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_21:
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   C0E0         PUSH      A
   \   00008A   EE           MOV       A,R6
   \   00008B   240D         ADD       A,#0xd
   \   00008D   F582         MOV       DPL,A
   \   00008F   E4           CLR       A
   \   000090   3F           ADDC      A,R7
   \   000091   F583         MOV       DPH,A
   \   000093   D0E0         POP       A
   \   000095   F0           MOVX      @DPTR,A
    890            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   000096   E8           MOV       A,R0
   \   000097   240B         ADD       A,#0xb
   \   000099   F582         MOV       DPL,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   F583         MOV       DPH,A
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   C0E0         PUSH      A
   \   0000A2   EE           MOV       A,R6
   \   0000A3   240E         ADD       A,#0xe
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   E4           CLR       A
   \   0000A8   3F           ADDC      A,R7
   \   0000A9   F583         MOV       DPH,A
   \   0000AB   D0E0         POP       A
   \   0000AD   F0           MOVX      @DPTR,A
    891            *pBuf = pNodeDesc->DescriptorCapability;
   \   0000AE   E8           MOV       A,R0
   \   0000AF   240C         ADD       A,#0xc
   \   0000B1   F582         MOV       DPL,A
   \   0000B3   E4           CLR       A
   \   0000B4   39           ADDC      A,R1
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   C0E0         PUSH      A
   \   0000BA   EE           MOV       A,R6
   \   0000BB   240F         ADD       A,#0xf
   \   0000BD   F582         MOV       DPL,A
   \   0000BF   E4           CLR       A
   \   0000C0   3F           ADDC      A,R7
   \   0000C1   F583         MOV       DPH,A
   \   0000C3   D0E0         POP       A
   \   0000C5   F0           MOVX      @DPTR,A
    892          
    893            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000C6                ; Setup parameters for call to function fillAndSend
   \   0000C6   75..02       MOV       ?V0,#0x2
   \   0000C9   75..80       MOV       ?V1,#-0x80
   \   0000CC   78..         MOV       R0,#?V0
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D1   7910         MOV       R1,#0x10
   \   0000D3   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000D6   5001         JNC       ??ZDP_NodeDescMsg_0
   \   0000D8   0B           INC       R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000D9   80..         SJMP      ??Subroutine112_0
    894          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine109_0
   \   000001                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine110_0
   \   000003                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine111_0
   \   000002                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   FD           MOV       R5,A
   \   000007   EA           MOV       A,R2
   \   000008   240F         ADD       A,#0xf
   \   00000A   FA           MOV       R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine126_0
   \   000002                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine127_0
   \   000001                ; // Fall through to label ??Subroutine127_0
    895          
    896          /*********************************************************************
    897           * @fn          ZDP_PowerDescMsg
    898           *
    899           * @brief       Builds and sends a Power Descriptor message, unicast to the
    900           *              specified device.
    901           *
    902           * @param       inMsg - incoming message (request)
    903           * @param       nwkAddr - 16 bit network address for device
    904           * @param       pPowerDesc - pointer to the node descriptor
    905           *
    906           * @return      afStatus_t
    907           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    908          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    909                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    910          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    911            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
    912            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    913          
    914            *pBuf++ = ZDP_SUCCESS;
   \   00000B   8882         MOV       DPL,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    915          
    916            *pBuf++ = LO_UINT16( nwkAddr );
   \   000011   EC           MOV       A,R4
   \   000012   12....       LCALL     ?Subroutine34 & 0xFFFF
    917            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_50:
   \   000015   F0           MOVX      @DPTR,A
   \   000016   740A         MOV       A,#0xa
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine38 & 0xFFFF
    918          
    919            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    920                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_59:
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   12....       LCALL     ?Subroutine90 & 0xFFFF
    921            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    922                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_259:
   \   000026   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000029   540F         ANL       A,#0xf
   \   00002B   F9           MOV       R1,A
   \   00002C   740C         MOV       A,#0xc
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?US_SHR
   \   000033   E5..         MOV       A,?V0
   \   000035   C4           SWAP      A
   \   000036   49           ORL       A,R1
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
    923          
    924            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000040                ; Setup parameters for call to function fillAndSend
   \   000040   75..03       MOV       ?V0,#0x3
   \   000043   75..80       MOV       ?V1,#-0x80
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   7905         MOV       R1,#0x5
   \   00004D   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000050   5001         JNC       ??ZDP_PowerDescMsg_0
   \   000052   0B           INC       R3
   \                     ??ZDP_PowerDescMsg_0:
   \   000053   80..         SJMP      ??Subroutine112_0
    925          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0
    926          
    927          /*********************************************************************
    928           * @fn          ZDP_SimpleDescMsg
    929           *
    930           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    931           *              specified device.
    932           *
    933           * @param       inMsg - incoming message (request)
    934           * @param       Status - message status (ZDP_SUCCESS or other)
    935           * @param       pSimpleDesc - pointer to the node descriptor
    936           *
    937           * @return      afStatus_t
    938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    939          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    940                                        SimpleDescriptionFormat_t *pSimpleDesc )
    941          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   12....       LCALL     ?Subroutine56 & 0xFFFF
    942            uint8 *pBuf = ZDP_TmpBuf;
    943            uint8 i, len;
    944          
    945            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_271:
   \   00000C   EC           MOV       A,R4
   \   00000D   2409         ADD       A,#0x9
   \   00000F   F5..         MOV       ?V4,A
   \   000011   E4           CLR       A
   \   000012   3D           ADDC      A,R5
   \   000013   F5..         MOV       ?V5,A
   \   000015   EC           MOV       A,R4
   \   000016   2406         ADD       A,#0x6
   \   000018   F5..         MOV       ?V6,A
   \   00001A   E4           CLR       A
   \   00001B   3D           ADDC      A,R5
   \   00001C   F5..         MOV       ?V7,A
   \   00001E   EE           MOV       A,R6
   \   00001F   7023         JNZ       ??ZDP_SimpleDescMsg_0
   \   000021   EC           MOV       A,R4
   \   000022   4D           ORL       A,R5
   \   000023   601F         JZ        ??ZDP_SimpleDescMsg_0
    946            {
    947              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    948              len = 1 + 2 + 1 + 8;
    949              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000025   85..82       MOV       DPL,?V4
   \   000028   85..83       MOV       DPH,?V5
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FA           MOV       R2,A
   \   00002D   85..82       MOV       DPL,?V6
   \   000030   85..83       MOV       DPH,?V7
   \   000033   E0           MOVX      A,@DPTR
   \   000034   2A           ADD       A,R2
   \   000035   C3           CLR       C
   \   000036   33           RLC       A
   \   000037   240C         ADD       A,#0xc
   \   000039   FA           MOV       R2,A
    950            }
    951            else
    952            {
    953              len = 1 + 2 + 1; // Status + desc length
    954            }
    955            if ( len >= ZDP_BUF_SZ-1 )
   \   00003A   C3           CLR       C
   \   00003B   944F         SUBB      A,#0x4f
   \   00003D   4007         JC        ??ZDP_SimpleDescMsg_1
    956            {
    957              return afStatus_MEM_FAIL;
   \   00003F   7910         MOV       R1,#0x10
   \   000041   02....       LJMP      ??ZDP_SimpleDescMsg_2 & 0xFFFF
    958            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000044   7A04         MOV       R2,#0x4
    959          
    960            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   000046   EE           MOV       A,R6
   \   000047   8882         MOV       DPL,R0
   \   000049   8983         MOV       DPH,R1
   \   00004B   F0           MOVX      @DPTR,A
    961          
    962            //From spec 2.4.3.1.5 The NWKAddrOfInterest field shall match
    963            //that specified in the original Simple_Desc_req command
    964            *pBuf++ = inMsg->asdu[0];
   \   00004C   E5..         MOV       A,?V0
   \   00004E   2413         ADD       A,#0x13
   \   000050   F5..         MOV       ?V2,A
   \   000052   E4           CLR       A
   \   000053   35..         ADDC      A,?V1
   \   000055   F5..         MOV       ?V3,A
   \   000057   85..82       MOV       DPL,?V2
   \   00005A   F583         MOV       DPH,A
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FB           MOV       R3,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F583         MOV       DPH,A
   \   000062   8B82         MOV       DPL,R3
   \   000064   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000067   A3           INC       DPTR
   \   000068   12....       LCALL     ?Subroutine35 & 0xFFFF
    965            *pBuf++ = inMsg->asdu[1];
   \                     ??CrossCallReturnLabel_51:
   \   00006B   FB           MOV       R3,A
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F583         MOV       DPH,A
   \   000070   8B82         MOV       DPL,R3
   \   000072   A3           INC       DPTR
   \   000073   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000076   F0           MOVX      @DPTR,A
    966          
    967            if ( len > 4 )
   \   000077   E8           MOV       A,R0
   \   000078   2403         ADD       A,#0x3
   \   00007A   F582         MOV       DPL,A
   \   00007C   E4           CLR       A
   \   00007D   39           ADDC      A,R1
   \   00007E   F583         MOV       DPH,A
   \   000080   EA           MOV       A,R2
   \   000081   C3           CLR       C
   \   000082   9405         SUBB      A,#0x5
   \   000084   5003         JNC       $+5
   \   000086   02....       LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
    968            {
    969              *pBuf++ = len - 4;   // Simple descriptor length
   \   000089   74FC         MOV       A,#-0x4
   \   00008B   2A           ADD       A,R2
   \   00008C   F0           MOVX      @DPTR,A
    970          
    971              *pBuf++ = pSimpleDesc->EndPoint;
   \   00008D   8C82         MOV       DPL,R4
   \   00008F   8D83         MOV       DPH,R5
   \   000091   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000094   12....       LCALL     ?Subroutine29 & 0xFFFF
    972              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_183:
   \   000097   8582..       MOV       ?V2,DPL
   \   00009A   8583..       MOV       ?V3,DPH
   \   00009D   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0000A0   12....       LCALL     ?Subroutine11 & 0xFFFF
    973              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_2:
   \   0000A3   F0           MOVX      @DPTR,A
    974              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   0000A4   EC           MOV       A,R4
   \   0000A5   2403         ADD       A,#0x3
   \   0000A7   F5..         MOV       ?V2,A
   \   0000A9   E4           CLR       A
   \   0000AA   3D           ADDC      A,R5
   \   0000AB   F5..         MOV       ?V3,A
   \   0000AD   85..82       MOV       DPL,?V2
   \   0000B0   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0000B3   12....       LCALL     ?Subroutine11 & 0xFFFF
    975              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_3:
   \   0000B6   12....       LCALL     ?Subroutine29 & 0xFFFF
    976          
    977              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_184:
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   540F         ANL       A,#0xf
   \   0000C0   8882         MOV       DPL,R0
   \   0000C2   8983         MOV       DPH,R1
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   F0           MOVX      @DPTR,A
    978          
    979              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000CE   85..82       MOV       DPL,?V6
   \   0000D1   85..83       MOV       DPH,?V7
   \   0000D4   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   E8           MOV       A,R0
   \   0000DE   240B         ADD       A,#0xb
   \   0000E0   F8           MOV       R0,A
   \   0000E1   5001         JNC       ??ZDP_SimpleDescMsg_4
   \   0000E3   09           INC       R1
    980              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000E4   85..82       MOV       DPL,?V6
   \   0000E7   85..83       MOV       DPH,?V7
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   6043         JZ        ??ZDP_SimpleDescMsg_5
    981              {
    982                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000ED   7B00         MOV       R3,#0x0
   \   0000EF   EC           MOV       A,R4
   \   0000F0   2407         ADD       A,#0x7
   \   0000F2   F5..         MOV       ?V2,A
   \   0000F4   E4           CLR       A
   \   0000F5   3D           ADDC      A,R5
   \   0000F6   85....       MOV       ?V8,?V2
   \   0000F9   F5..         MOV       ?V9,A
   \   0000FB   8026         SJMP      ??ZDP_SimpleDescMsg_6
    983                {
    984                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000FD   EB           MOV       A,R3
   \   0000FE   12....       LCALL     ?Subroutine96 & 0xFFFF
    985                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
    986                }
   \                     ??CrossCallReturnLabel_158:
   \   000101   85..82       MOV       DPL,?V8
   \   000104   85..83       MOV       DPH,?V9
   \   000107   E0           MOVX      A,@DPTR
   \   000108   25..         ADD       A,?V2
   \   00010A   FF           MOV       R7,A
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   35..         ADDC      A,?V3
   \   00010F   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000112   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000115   25..         ADD       A,?V2
   \   000117   FF           MOV       R7,A
   \   000118   A3           INC       DPTR
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   35..         ADDC      A,?V3
   \   00011C   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00011F   5001         JNC       ??ZDP_SimpleDescMsg_8
   \   000121   09           INC       R1
   \                     ??ZDP_SimpleDescMsg_8:
   \   000122   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_6:
   \   000123   85..82       MOV       DPL,?V6
   \   000126   85..83       MOV       DPH,?V7
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   FF           MOV       R7,A
   \   00012B   EB           MOV       A,R3
   \   00012C   C3           CLR       C
   \   00012D   9F           SUBB      A,R7
   \   00012E   40CD         JC        ??ZDP_SimpleDescMsg_7
    987              }
    988          
    989              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000130   85..82       MOV       DPL,?V4
   \   000133   85..83       MOV       DPH,?V5
   \   000136   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000139   12....       LCALL     ?Subroutine28 & 0xFFFF
    990              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_36:
   \   00013C   85..82       MOV       DPL,?V4
   \   00013F   85..83       MOV       DPH,?V5
   \   000142   E0           MOVX      A,@DPTR
   \   000143   6042         JZ        ??ZDP_SimpleDescMsg_9
    991              {
    992                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   000145   7B00         MOV       R3,#0x0
   \   000147   EC           MOV       A,R4
   \   000148   240A         ADD       A,#0xa
   \   00014A   5001         JNC       ??ZDP_SimpleDescMsg_10
   \   00014C   0D           INC       R5
   \                     ??ZDP_SimpleDescMsg_10:
   \   00014D   F5..         MOV       ?V2,A
   \   00014F   8D..         MOV       ?V3,R5
   \                     ??ZDP_SimpleDescMsg_11:
   \   000151   85..82       MOV       DPL,?V4
   \   000154   85..83       MOV       DPH,?V5
   \   000157   E0           MOVX      A,@DPTR
   \   000158   FC           MOV       R4,A
   \   000159   EB           MOV       A,R3
   \   00015A   C3           CLR       C
   \   00015B   9C           SUBB      A,R4
   \   00015C   5029         JNC       ??ZDP_SimpleDescMsg_9
    993                {
    994                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00015E   EB           MOV       A,R3
   \   00015F   25E0         ADD       A,0xE0 /* A   */
   \   000161   FC           MOV       R4,A
   \   000162   E4           CLR       A
   \   000163   33           RLC       A
   \   000164   FD           MOV       R5,A
   \   000165   85..82       MOV       DPL,?V2
   \   000168   85..83       MOV       DPH,?V3
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   2C           ADD       A,R4
   \   00016D   FF           MOV       R7,A
   \   00016E   A3           INC       DPTR
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   3D           ADDC      A,R5
   \   000171   12....       LCALL     ?Subroutine61 & 0xFFFF
    995                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
    996                }
   \                     ??CrossCallReturnLabel_213:
   \   000174   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000177   2C           ADD       A,R4
   \   000178   FF           MOV       R7,A
   \   000179   A3           INC       DPTR
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   3D           ADDC      A,R5
   \   00017C   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00017F   5001         JNC       ??ZDP_SimpleDescMsg_12
   \   000181   09           INC       R1
   \                     ??ZDP_SimpleDescMsg_12:
   \   000182   0B           INC       R3
   \   000183   80CC         SJMP      ??ZDP_SimpleDescMsg_11
    997              }
    998            }
    999          
   1000            else
   1001            {
   1002              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000185   E4           CLR       A
   \   000186   F0           MOVX      @DPTR,A
   1003            }
   1004          
   1005            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   000187                ; Setup parameters for call to function fillAndSend
   \   000187   75..04       MOV       ?V2,#0x4
   \   00018A   75..80       MOV       ?V3,#-0x80
   \   00018D   78..         MOV       R0,#?V2
   \   00018F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000192   EA           MOV       A,R2
   \   000193   F9           MOV       R1,A
   \   000194   E5..         MOV       A,?V0
   \   000196   2402         ADD       A,#0x2
   \   000198   FC           MOV       R4,A
   \   000199   E4           CLR       A
   \   00019A   35..         ADDC      A,?V1
   \   00019C   FD           MOV       R5,A
   \   00019D   E5..         MOV       A,?V0
   \   00019F   240F         ADD       A,#0xf
   \   0001A1   FA           MOV       R2,A
   \   0001A2   E4           CLR       A
   \   0001A3   35..         ADDC      A,?V1
   \   0001A5   FB           MOV       R3,A
   \   0001A6   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   0001A9   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   0001AC   02....       LJMP      ??Subroutine108_0 & 0xFFFF
   1006          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   8F82         MOV       DPL,R7
   \   000002   F583         MOV       DPH,A
   \   000004   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine114_0
   \   000002                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000007   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   8F82         MOV       DPL,R7
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine120_0
   \   000004                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine121_0
   \   000002                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
   1007          
   1008          /*********************************************************************
   1009           * @fn          ZDP_EPRsp
   1010           *
   1011           * @brief       This builds and send an endpoint list. Used in
   1012           *              Active_EP_rsp and Match_Desc_Rsp
   1013           *              message.  This function sends unicast message to the
   1014           *              requesting device.
   1015           *
   1016           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
   1017           * @param       dstAddr - destination address
   1018           * @param       Status - message status (ZDP_SUCCESS or other)
   1019           * @param       nwkAddr - Device's short address that this response describes
   1020           * @param       Count - number of endpoint/interfaces in list
   1021           * @param       pEPIntfList - Array of Endpoint/Interfaces
   1022           * @param       SecurityEnable - Security Options
   1023           *
   1024           * @return      afStatus_t
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
   1027                                  byte Status, uint16 nwkAddr, byte Count,
   1028                                  uint8 *pEPList,
   1029                                  byte SecurityEnable )
   1030          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   EC           MOV       A,R4
   \   000017   FE           MOV       R6,A
   \   000018   ED           MOV       A,R5
   \   000019   FF           MOV       R7,A
   1031            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001D   12....       LCALL     ?Subroutine54 & 0xFFFF
   1032            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_94:
   \   000020   75..04       MOV       ?V0,#0x4
   1033            byte txOptions;
   1034          
   1035            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1036          
   1037            if ( MsgType == Match_Desc_rsp )
   \   000023   7406         MOV       A,#0x6
   \   000025   65..         XRL       A,?V2
   \   000027   7004         JNZ       ??ZDP_EPRsp_0
   \   000029   7480         MOV       A,#-0x80
   \   00002B   65..         XRL       A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002D   7005         JNZ       ??ZDP_EPRsp_1
   1038              txOptions = AF_MSG_ACK_REQUEST;
   \   00002F   75..10       MOV       ?V1,#0x10
   \   000032   8003         SJMP      ??ZDP_EPRsp_2
   1039            else
   1040              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000034   75..00       MOV       ?V1,#0x0
   1041          
   1042              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000037   7410         MOV       A,#0x10
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00003F   7411         MOV       A,#0x11
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine14 & 0xFFFF
   1043            *pBuf++ = LO_UINT16( nwkAddr );
   1044            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_8:
   \   000047   7413         MOV       A,#0x13
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   1045          
   1046            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
   1047          
   1048            if ( Count )
   \   000056   6021         JZ        ??ZDP_EPRsp_3
   1049            {
   1050              len += Count;
   \   000058   7404         MOV       A,#0x4
   \   00005A   29           ADD       A,R1
   \   00005B   F5..         MOV       ?V0,A
   1051              osal_memcpy( pBuf, pEPList, Count );
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   7414         MOV       A,#0x14
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine46 & 0xFFFF
   1052            }
   \                     ??CrossCallReturnLabel_77:
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000068   E9           MOV       A,R1
   \   000069   FC           MOV       R4,A
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   EA           MOV       A,R2
   \   00006D   2404         ADD       A,#0x4
   \   00006F   FA           MOV       R2,A
   \   000070   5001         JNC       ??ZDP_EPRsp_4
   \   000072   0B           INC       R3
   \                     ??ZDP_EPRsp_4:
   \   000073   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   1053          
   1054            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000079   E5..         MOV       A,?V1
   \   00007B   90....       MOV       DPTR,#ZDP_TxOptions
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F                ; Setup parameters for call to function fillAndSend
   \   00007F   78..         MOV       R0,#?V2
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   A9..         MOV       R1,?V0
   \   000086   EE           MOV       A,R6
   \   000087   FC           MOV       R4,A
   \   000088   EF           MOV       A,R7
   \   000089   FD           MOV       R5,A
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP101_8
   \   00008F   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   E9           MOV       A,R1
   \   000096   F9           MOV       R1,A
   \   000097   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009A   E4           CLR       A
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   04           INC       A
   \   00009D   02....       LJMP      ?Subroutine3 & 0xFFFF
   1055          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   FA           MOV       R2,A
   \   000004   E9           MOV       A,R1
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   75..00       MOV       ?V6,#0x0
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E9           MOV       A,R1
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1056          
   1057          /*********************************************************************
   1058           * @fn          ZDP_UserDescRsp
   1059           *
   1060           * @brief       Build and send the User Decriptor Response.
   1061           *
   1062           *
   1063           * @param       dstAddr - destination address
   1064           * @param       nwkAddrOfInterest -
   1065           * @param       userDesc -
   1066           * @param       SecurityEnable - Security Options
   1067           *
   1068           * @return      ZStatus_t
   1069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1070          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
   1071                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
   1072                          byte SecurityEnable )
   1073          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   12....       LCALL     ?Subroutine84 & 0xFFFF
   1074            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_283:
   \   000015   88..         MOV       ?V0,R0
   \   000017   F5..         MOV       ?V1,A
   \   000019   7413         MOV       A,#0x13
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000021   88..         MOV       ?V8,R0
   \   000023   F5..         MOV       ?V9,A
   1075            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   1076          
   1077            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1078          
   1079            len += userDesc->len;
   \   000025   8882         MOV       DPL,R0
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2404         ADD       A,#0x4
   \   00002C   F5..         MOV       ?V2,A
   1080          
   1081            *pBuf++ = ZSUCCESS;
   \   00002E   85..82       MOV       DPL,?V0
   \   000031   85..83       MOV       DPH,?V1
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   1082          
   1083            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000036   EC           MOV       A,R4
   \   000037   A3           INC       DPTR
   \   000038   F0           MOVX      @DPTR,A
   1084            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000039   ED           MOV       A,R5
   \   00003A   85..82       MOV       DPL,?V0
   \   00003D   85..83       MOV       DPH,?V1
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   F0           MOVX      @DPTR,A
   1085          
   1086            *pBuf++ = userDesc->len;
   \   000043   8882         MOV       DPL,R0
   \   000045   85..83       MOV       DPH,?V9
   \   000048   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   1087            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   8882         MOV       DPL,R0
   \   00004F   85..83       MOV       DPH,?V9
   \   000052   A3           INC       DPTR
   \   000053   A982         MOV       R1,DPL
   \   000055   AA83         MOV       R2,DPH
   \   000057   89..         MOV       ?V4,R1
   \   000059   8A..         MOV       ?V5,R2
   \   00005B   75..00       MOV       ?V6,#0x0
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   85..82       MOV       DPL,?V8
   \   000066   85..83       MOV       DPH,?V9
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FC           MOV       R4,A
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   E5..         MOV       A,?V0
   \   00006F   2404         ADD       A,#0x4
   \   000071   FA           MOV       R2,A
   \   000072   E4           CLR       A
   \   000073   35..         ADDC      A,?V1
   \   000075   FB           MOV       R3,A
   \   000076   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   1088          
   1089            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00007C                ; Setup parameters for call to function fillAndSend
   \   00007C   75..11       MOV       ?V0,#0x11
   \   00007F   75..80       MOV       ?V1,#-0x80
   \   000082   78..         MOV       R0,#?V0
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   A9..         MOV       R1,?V2
   \   000089   EE           MOV       A,R6
   \   00008A   FC           MOV       R4,A
   \   00008B   EF           MOV       A,R7
   \   00008C   FD           MOV       R5,A
   \   00008D   7402         MOV       A,#0x2
   \   00008F   12....       LCALL     ?XSTACK_DISP101_8
   \   000092   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   02....       LJMP      ?Subroutine6 & 0xFFFF
   1090          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine118_0
   \   000005                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1091          
   1092          /*********************************************************************
   1093           * @fn          ZDP_ServerDiscRsp
   1094           *
   1095           * @brief       Build and send the Server_Discovery_rsp response.
   1096           *
   1097           * @param       transID - Transaction sequence number of request.
   1098           * @param       dstAddr - Network Destination Address.
   1099           * @param       status - Status of response to request.
   1100           * @param       aoi - Network Address of Interest of request.
   1101           * @param       serverMask - Bit map of service(s) being sought.
   1102           * @param       SecurityEnable - Security Options
   1103           *
   1104           * @return      ZStatus_t
   1105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1106          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1107                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1108          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   \   000013   FE           MOV       R6,A
   1109            const byte len = 1  + 2;  // status + aoi + mask.
   1110            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000017   FC           MOV       R4,A
   \   000018   E9           MOV       A,R1
   \   000019   FD           MOV       R5,A
   1111            ZStatus_t stat;
   1112          
   1113            // Intentionally unreferenced parameters
   1114            (void)aoi;
   1115            (void)SecurityEnable;
   1116          
   1117            *pBuf++ = status;
   \   00001A   EE           MOV       A,R6
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   740D         MOV       A,#0xd
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine49 & 0xFFFF
   1118          
   1119            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_86:
   \   000028   A3           INC       DPTR
   \   000029   F0           MOVX      @DPTR,A
   1120            *pBuf++ = HI_UINT16( serverMask );
   \   00002A   E9           MOV       A,R1
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   F0           MOVX      @DPTR,A
   1121          
   1122            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000032   90....       MOV       DPTR,#ZDP_TxOptions
   \   000035   7410         MOV       A,#0x10
   \   000037   F0           MOVX      @DPTR,A
   1123            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..15       MOV       ?V0,#0x15
   \   00003B   75..80       MOV       ?V1,#-0x80
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7903         MOV       R1,#0x3
   \   000045   EA           MOV       A,R2
   \   000046   FC           MOV       R4,A
   \   000047   EB           MOV       A,R3
   \   000048   FD           MOV       R5,A
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   E9           MOV       A,R1
   \   000055   F9           MOV       R1,A
   1124            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000056   90....       MOV       DPTR,#ZDP_TxOptions
   \   000059   E4           CLR       A
   \   00005A   F0           MOVX      @DPTR,A
   1125          
   1126            return ( stat );
   \   00005B   04           INC       A
   \   00005C   02....       LJMP      ??Subroutine107_0 & 0xFFFF
   1127          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET
   1128          
   1129          /*********************************************************************
   1130           * @fn          ZDP_GenericRsp
   1131           *
   1132           * @brief       Sends a response message with only the parameter status
   1133           *              byte and the addr of interest for data.
   1134           *              This function sends unicast message to the
   1135           *              requesting device.
   1136           *
   1137           * @param       dstAddr - destination address
   1138           * @param       status  - generic status for response
   1139           * @param       aoi     - address of interest
   1140           * @param       dstAddr - destination address
   1141           * @param       rspId   - response cluster ID
   1142           * @param       SecurityEnable - Security Options
   1143           *
   1144           * @return      afStatus_t
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1147                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1148          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   1149            uint8 len;
   1150          
   1151            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1152          
   1153            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   740A         MOV       A,#0xa
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   1154            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_274:
   \   00001F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FC           MOV       R4,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F583         MOV       DPH,A
   \   000028   8C82         MOV       DPL,R4
   \   00002A   A3           INC       DPTR
   \   00002B   E8           MOV       A,R0
   \   00002C   12....       LCALL     ?Subroutine12 & 0xFFFF
   1155            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1156          
   1157            // Length byte
   1158            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_5:
   \   00002F   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   1159            len = 4;
   1160          
   1161            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV       A,#0xc
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV       R1,#0x4
   \   000041   EA           MOV       A,R2
   \   000042   FC           MOV       R4,A
   \   000043   EB           MOV       A,R3
   \   000044   FD           MOV       R5,A
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   7401         MOV       A,#0x1
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055                REQUIRE ?Subroutine7
   \   000055                ; // Fall through to label ?Subroutine7
   1162          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1163          
   1164          /*********************************************************************
   1165           * Binding
   1166           */
   1167          /*********************************************************************
   1168           * @fn          ZDP_EndDeviceBindReq
   1169           *
   1170           * @brief       This builds and sends a End_Device_Bind_req message.
   1171           *              This function sends a unicast message.
   1172           *
   1173           * @param       dstAddr - destination address
   1174           * @param       LocalCoordinator - short address of local coordinator
   1175           * @param       epIntf - Endpoint/Interface of Simple Desc
   1176           * @param       ProfileID - Profile ID
   1177           *
   1178           *   The Input cluster list is the opposite of what you would think.
   1179           *   This is the output cluster list of this device
   1180           * @param       NumInClusters - number of input clusters
   1181           * @param       InClusterList - input cluster ID list
   1182           *
   1183           *   The Output cluster list is the opposite of what you would think.
   1184           *   This is the input cluster list of this device
   1185           * @param       NumOutClusters - number of output clusters
   1186           * @param       OutClusterList - output cluster ID list
   1187           *
   1188           * @param       SecurityEnable - Security Options
   1189           *
   1190           * @return      afStatus_t
   1191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1192          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1193                                           uint16 LocalCoordinator,
   1194                                           byte endPoint,
   1195                                           uint16 ProfileID,
   1196                                           byte NumInClusters, cId_t *InClusterList,
   1197                                           byte NumOutClusters, cId_t *OutClusterList,
   1198                                           byte SecurityEnable )
   1199          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1200            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000012   7414         MOV       A,#0x14
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V2,A
   \   00001A   7417         MOV       A,#0x17
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FF           MOV       R7,A
   1201            uint8 i, len;
   1202            uint8 *ieeeAddr;
   1203          
   1204            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1205          
   1206            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1207            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1208            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000021   E5..         MOV       A,?V2
   \   000023   2F           ADD       A,R7
   \   000024   C3           CLR       C
   \   000025   33           RLC       A
   \   000026   240F         ADD       A,#0xf
   \   000028   FE           MOV       R6,A
   1209          
   1210            if ( len >= ZDP_BUF_SZ-1 )
   \   000029   C3           CLR       C
   \   00002A   944F         SUBB      A,#0x4f
   \   00002C   4005         JC        ??ZDP_EndDeviceBindReq_0
   1211            {
   1212              return afStatus_MEM_FAIL;
   \   00002E   7910         MOV       R1,#0x10
   \   000030   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1213            }
   1214          
   1215            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000033                ; Setup parameters for call to function NLME_GetShortAddr
   \   000033   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000036   EA           MOV       A,R2
   \   000037   65..         XRL       A,?V4
   \   000039   7003         JNZ       ??ZDP_EndDeviceBindReq_2
   \   00003B   EB           MOV       A,R3
   \   00003C   65..         XRL       A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00003E   6005         JZ        ??ZDP_EndDeviceBindReq_3
   1216            {
   1217              return afStatus_INVALID_PARAMETER;
   \   000040   7902         MOV       R1,#0x2
   \   000042   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1218            }
   1219          
   1220            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000045   85..82       MOV       DPL,?V0
   \   000048   85..83       MOV       DPH,?V1
   \   00004B   E5..         MOV       A,?V4
   \   00004D   F0           MOVX      @DPTR,A
   1221            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   00004E   E5..         MOV       A,?V5
   \   000050   A3           INC       DPTR
   \   000051   F0           MOVX      @DPTR,A
   1222          
   1223            ieeeAddr = NLME_GetExtAddr();
   \   000052                ; Setup parameters for call to function NLME_GetExtAddr
   \   000052   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000055   8A..         MOV       ?V4,R2
   \   000057   8B..         MOV       ?V5,R3
   \   000059   AC..         MOV       R4,?V4
   \   00005B   AD..         MOV       R5,?V5
   1224            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   00005D                ; Setup parameters for call to function sAddrExtCpy
   \   00005D   E5..         MOV       A,?V0
   \   00005F   2402         ADD       A,#0x2
   \   000061   FA           MOV       R2,A
   \   000062   E4           CLR       A
   \   000063   35..         ADDC      A,?V1
   \   000065   FB           MOV       R3,A
   \   000066   12....       LCALL     ?Subroutine72 & 0xFFFF
   1225          
   1226            *pBuf++ = endPoint;
   \                     ??CrossCallReturnLabel_117:
   \   000069   7412         MOV       A,#0x12
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine14 & 0xFFFF
   1227          
   1228            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1229            *pBuf++ = HI_UINT16( ProfileID );
   1230          
   1231            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_9:
   \   000071   8A82         MOV       DPL,R2
   \   000073   8B83         MOV       DPH,R3
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E5..         MOV       A,?V2
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   EA           MOV       A,R2
   \   00007C   2404         ADD       A,#0x4
   \   00007E   F5..         MOV       ?V0,A
   \   000080   E4           CLR       A
   \   000081   3B           ADDC      A,R3
   \   000082   F5..         MOV       ?V1,A
   1232            for ( i = 0; i < NumInClusters; ++i )
   \   000084   7C00         MOV       R4,#0x0
   \   000086   7415         MOV       A,#0x15
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00008E   802E         SJMP      ??ZDP_EndDeviceBindReq_4
   1233            {
   1234              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   000090   EC           MOV       A,R4
   \   000091   25E0         ADD       A,0xE0 /* A   */
   \   000093   F5..         MOV       ?V4,A
   \   000095   E4           CLR       A
   \   000096   33           RLC       A
   \   000097   F5..         MOV       ?V5,A
   \   000099   EA           MOV       A,R2
   \   00009A   25..         ADD       A,?V4
   \   00009C   F5..         MOV       ?V4,A
   \   00009E   EB           MOV       A,R3
   \   00009F   35..         ADDC      A,?V5
   \   0000A1   F5..         MOV       ?V5,A
   \   0000A3   85..82       MOV       DPL,?V4
   \   0000A6   12....       LCALL     ?Subroutine41 & 0xFFFF
   1235              *pBuf++ = HI_UINT16(InClusterList[i]);
   \                     ??CrossCallReturnLabel_204:
   \   0000A9   85..82       MOV       DPL,?V4
   \   0000AC   85..83       MOV       DPH,?V5
   \   0000AF   A3           INC       DPTR
   \   0000B0   12....       LCALL     ?Subroutine60 & 0xFFFF
   1236            }
   \                     ??CrossCallReturnLabel_99:
   \   0000B3   E5..         MOV       A,?V0
   \   0000B5   2402         ADD       A,#0x2
   \   0000B7   F5..         MOV       ?V0,A
   \   0000B9   5002         JNC       ??ZDP_EndDeviceBindReq_6
   \   0000BB   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000BD   0C           INC       R4
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000BE   85..82       MOV       DPL,?V0
   \   0000C1   85..83       MOV       DPH,?V1
   \   0000C4   A3           INC       DPTR
   \   0000C5   A882         MOV       R0,DPL
   \   0000C7   A983         MOV       R1,DPH
   \   0000C9   EC           MOV       A,R4
   \   0000CA   C3           CLR       C
   \   0000CB   95..         SUBB      A,?V2
   \   0000CD   40C1         JC        ??ZDP_EndDeviceBindReq_5
   1237          
   1238            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000CF   EF           MOV       A,R7
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   F0           MOVX      @DPTR,A
   \   0000D7   88..         MOV       ?V0,R0
   \   0000D9   89..         MOV       ?V1,R1
   1239            for ( i = 0; i < NumOutClusters; ++i )
   \   0000DB   7C00         MOV       R4,#0x0
   \   0000DD   7418         MOV       A,#0x18
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   0000E5   8026         SJMP      ??ZDP_EndDeviceBindReq_7
   1240            {
   1241              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000E7   EC           MOV       A,R4
   \   0000E8   25E0         ADD       A,0xE0 /* A   */
   \   0000EA   FA           MOV       R2,A
   \   0000EB   E4           CLR       A
   \   0000EC   33           RLC       A
   \   0000ED   FB           MOV       R3,A
   \   0000EE   E8           MOV       A,R0
   \   0000EF   2A           ADD       A,R2
   \   0000F0   FA           MOV       R2,A
   \   0000F1   E9           MOV       A,R1
   \   0000F2   3B           ADDC      A,R3
   \   0000F3   FB           MOV       R3,A
   \   0000F4   8A82         MOV       DPL,R2
   \   0000F6   12....       LCALL     ?Subroutine41 & 0xFFFF
   1242              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \                     ??CrossCallReturnLabel_205:
   \   0000F9   8A82         MOV       DPL,R2
   \   0000FB   8B83         MOV       DPH,R3
   \   0000FD   A3           INC       DPTR
   \   0000FE   12....       LCALL     ?Subroutine85 & 0xFFFF
   1243            }
   \                     ??CrossCallReturnLabel_134:
   \   000101   F0           MOVX      @DPTR,A
   \   000102   E5..         MOV       A,?V0
   \   000104   2402         ADD       A,#0x2
   \   000106   F5..         MOV       ?V0,A
   \   000108   5002         JNC       ??ZDP_EndDeviceBindReq_9
   \   00010A   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_9:
   \   00010C   0C           INC       R4
   \                     ??ZDP_EndDeviceBindReq_7:
   \   00010D   EC           MOV       A,R4
   \   00010E   C3           CLR       C
   \   00010F   9F           SUBB      A,R7
   \   000110   40D5         JC        ??ZDP_EndDeviceBindReq_8
   1244          
   1245            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000112                ; Setup parameters for call to function fillAndSend
   \   000112   75..20       MOV       ?V0,#0x20
   \   000115   75..00       MOV       ?V1,#0x0
   \   000118   78..         MOV       R0,#?V0
   \   00011A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011D   EE           MOV       A,R6
   \   00011E   F9           MOV       R1,A
   \   00011F   AC..         MOV       R4,?V6
   \   000121   AD..         MOV       R5,?V7
   \   000123   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000126   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000129   80..         SJMP      ??Subroutine118_0
   1246          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine117_0
   \   000002                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E5..         MOV       A,?V3
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET
   1247          
   1248          /*********************************************************************
   1249           * @fn          ZDP_BindUnbindReq
   1250           *
   1251           * @brief       This builds and send a Bind_req or Unbind_req message
   1252           *              Depending on the ClusterID. This function
   1253           *              sends a unicast message to the local coordinator.
   1254           *
   1255           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1256           * @param       dstAddr - destination address of the message
   1257           * @param       SourceAddr - source 64 bit address of the binding
   1258           * @param       SrcEPIntf - Source endpoint/interface
   1259           * @param       ClusterID - Binding cluster ID
   1260           * @param       DestinationAddr - destination 64 bit addr of binding
   1261           * @param       DstEPIntf - destination endpoint/interface
   1262           * @param       SecurityEnable - Security Options
   1263           *
   1264           * @return      afStatus_t
   1265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1266          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1267                                        uint8 *SourceAddr, byte SrcEndPoint,
   1268                                        cId_t ClusterID,
   1269                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1270                                        byte SecurityEnable )
   1271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1272            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ?Subroutine53 & 0xFFFF
   1273            byte len;
   1274          
   1275            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1276          
   1277            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1278            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_294:
   \   000012   75..0C       MOV       ?V2,#0xc
   \   000015   7416         MOV       A,#0x16
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine43 & 0xFFFF
   1279            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_69:
   \   00001D   EE           MOV       A,R6
   \   00001E   2408         ADD       A,#0x8
   \   000020   F5..         MOV       ?V0,A
   \   000022   E4           CLR       A
   \   000023   3F           ADDC      A,R7
   \   000024   F5..         MOV       ?V1,A
   \   000026   85..82       MOV       DPL,?V0
   \   000029   F583         MOV       DPH,A
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   7403         MOV       A,#0x3
   \   00002F   68           XRL       A,R0
   \   000030   7005         JNZ       ??ZDP_BindUnbindReq_0
   1280              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000032   75..15       MOV       ?V2,#0x15
   \   000035   8008         SJMP      ??ZDP_BindUnbindReq_1
   1281            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000037   7401         MOV       A,#0x1
   \   000039   68           XRL       A,R0
   \   00003A   7003         JNZ       ??ZDP_BindUnbindReq_1
   1282              len += sizeof ( uint16 );
   \   00003C   75..0E       MOV       ?V2,#0xe
   1283          
   1284            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00003F                ; Setup parameters for call to function sAddrExtCpy
   \   00003F   7412         MOV       A,#0x12
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000047   12....       LCALL     ?Subroutine72 & 0xFFFF
   1285            *pBuf++ = SrcEndPoint;
   \                     ??CrossCallReturnLabel_118:
   \   00004A   7414         MOV       A,#0x14
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine14 & 0xFFFF
   1286          
   1287            *pBuf++ = LO_UINT16( ClusterID );
   1288          
   1289            *pBuf++ = HI_UINT16( ClusterID );
   1290            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_10:
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00005B   5001         JNC       ??ZDP_BindUnbindReq_2
   \   00005D   0B           INC       R3
   1291            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   7403         MOV       A,#0x3
   \   000068   68           XRL       A,R0
   \   000069   7013         JNZ       ??ZDP_BindUnbindReq_3
   1292            {
   1293              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1294              *pBuf = DstEndPoint;
   \   00006B   7418         MOV       A,#0x18
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   E0           MOVX      A,@DPTR
   \   000071   C0E0         PUSH      A
   \   000073                ; Setup parameters for call to function sAddrExtCpy
   \   000073   EE           MOV       A,R6
   \   000074   FC           MOV       R4,A
   \   000075   EF           MOV       A,R7
   \   000076   FD           MOV       R5,A
   \   000077   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   1295            }
   \                     ??CrossCallReturnLabel_167:
   \   00007A   D0E0         POP       A
   \   00007C   8014         SJMP      ??CrossCallReturnLabel_110
   1296            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   00007E   7401         MOV       A,#0x1
   \   000080   68           XRL       A,R0
   \   000081   7010         JNZ       ??ZDP_BindUnbindReq_4
   1297            {
   1298              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000083   8E82         MOV       DPL,R6
   \   000085   8F83         MOV       DPH,R7
   \   000087   12....       LCALL     ?Subroutine63 & 0xFFFF
   1299              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_103:
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   A3           INC       DPTR
   \   00008F   12....       LCALL     ?Subroutine67 & 0xFFFF
   1300            }
   \                     ??CrossCallReturnLabel_110:
   \   000092   F0           MOVX      @DPTR,A
   1301          
   1302            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   000093   90....       MOV       DPTR,#ZDP_TxOptions
   \   000096   7410         MOV       A,#0x10
   \   000098   F0           MOVX      @DPTR,A
   \   000099                ; Setup parameters for call to function fillAndSend
   \   000099   78..         MOV       R0,#?V6
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   A9..         MOV       R1,?V2
   \   0000A0   AC..         MOV       R4,?V4
   \   0000A2   AD..         MOV       R5,?V5
   \   0000A4   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000A7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AA   E9           MOV       A,R1
   \   0000AB   F9           MOV       R1,A
   \   0000AC   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000AF   E4           CLR       A
   \   0000B0   F0           MOVX      @DPTR,A
   \   0000B1   02....       LJMP      ??Subroutine118_0 & 0xFFFF
   1303          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   EA           MOV       A,R2
   \   000005   2404         ADD       A,#0x4
   \   000007   FA           MOV       R2,A
   \   000008   22           RET
   1304          
   1305          /*********************************************************************
   1306           * Network Management
   1307           */
   1308          
   1309          /*********************************************************************
   1310           * @fn          ZDP_MgmtNwkDiscReq
   1311           *
   1312           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1313           *              function sends a unicast message.
   1314           *
   1315           * @param       dstAddr - destination address of the message
   1316           * @param       ScanChannels - 32 bit address bit map
   1317           * @param       StartIndex - Starting index within the reporting network
   1318           *                           list
   1319           * @param       SecurityEnable - Security Options
   1320           *
   1321           * @return      afStatus_t
   1322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003                REQUIRE ??Subroutine103_0
   \   000003                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1323          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1324                                         uint32 ScanChannels,
   1325                                         byte ScanDuration,
   1326                                         byte StartIndex,
   1327                                         byte SecurityEnable )
   1328          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   \   00000B   8C..         MOV       ?V1,R4
   1329            uint8 *pBuf = ZDP_TmpBuf;
   1330            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1331          
   1332            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1333          
   1334            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000018   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   1335          
   1336            *pBuf++ = ScanDuration;
   \   00001F   E5..         MOV       A,?V0
   \   000021   F0           MOVX      @DPTR,A
   1337            *pBuf = StartIndex;
   \   000022   A3           INC       DPTR
   \   000023   E5..         MOV       A,?V1
   \   000025   F0           MOVX      @DPTR,A
   1338          
   1339            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000026                ; Setup parameters for call to function fillAndSend
   \   000026   75..30       MOV       ?V2,#0x30
   \   000029   75..00       MOV       ?V3,#0x0
   \   00002C   78..         MOV       R0,#?V2
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7906         MOV       R1,#0x6
   \   000033   02....       LJMP      ??Subroutine102_0 & 0xFFFF
   1340          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00000B   7404         MOV       A,#0x4
   \   00000D   22           RET
   1341          
   1342          /*********************************************************************
   1343           * @fn          ZDP_MgmtDirectJoinReq
   1344           *
   1345           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1346           *              function sends a unicast message.
   1347           *
   1348           * @param       dstAddr - destination address of the message
   1349           * @param       deviceAddr - 64 bit IEEE Address
   1350           * @param       SecurityEnable - Security Options
   1351           *
   1352           * @return      afStatus_t
   1353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV       ?V3,#0x0
   \   000003   78..         MOV       R0,#?V2
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV       R1,#0x9
   \   00000A                REQUIRE ??Subroutine102_0
   \   00000A                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1354          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1355                                         uint8 *deviceAddr,
   1356                                         byte capInfo,
   1357                                         byte SecurityEnable )
   1358          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine45 & 0xFFFF
   1359            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1360          
   1361            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   1362            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \                     ??CrossCallReturnLabel_75:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   C8           XCH       A,R0
   \   00000C   2408         ADD       A,#0x8
   \   00000E   F582         MOV       DPL,A
   \   000010   E4           CLR       A
   \   000011   38           ADDC      A,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E5..         MOV       A,?V0
   \   000016   F0           MOVX      @DPTR,A
   1363          
   1364            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000017                ; Setup parameters for call to function fillAndSend
   \   000017   75..35       MOV       ?V2,#0x35
   \   00001A   02....       LJMP      ?Subroutine1 & 0xFFFF
   1365          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   89..         MOV       ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FA           MOV       R2,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FB           MOV       R3,A
   \   00000E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000011   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000014   E0           MOVX      A,@DPTR
   \   000015   22           RET
   1366          
   1367          /*********************************************************************
   1368           * @fn          ZDP_MgmtPermitJoinReq
   1369           *
   1370           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1371           *
   1372           * @param       dstAddr - destination address of the message
   1373           * @param       duration - Permit duration
   1374           * @param       TcSignificance - Trust Center Significance
   1375           *
   1376           * @return      afStatus_t
   1377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1378          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1379                                            byte TcSignificance, byte SecurityEnable )
   1380          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1381            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1382          
   1383            // Build buffer
   1384            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000E   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000011   E9           MOV       A,R1
   \   000012   12....       LCALL     ?Subroutine18 & 0xFFFF
   1385            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_19:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   1386          
   1387            // Check of this is a broadcast message
   1388            if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
   1389                && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
   1390                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   1391                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
   \   000017   EA           MOV       A,R2
   \   000018   4F           ORL       A,R7
   \   000019   606A         JZ        ??ZDP_MgmtPermitJoinReq_0
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   7402         MOV       A,#0x2
   \   00002B   68           XRL       A,R0
   \   00002C   6005         JZ        ??ZDP_MgmtPermitJoinReq_1
   \   00002E   740F         MOV       A,#0xf
   \   000030   68           XRL       A,R0
   \   000031   7052         JNZ       ??ZDP_MgmtPermitJoinReq_0
   \                     ??ZDP_MgmtPermitJoinReq_1:
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00003A   74FF         MOV       A,#-0x1
   \   00003C   68           XRL       A,R0
   \   00003D   7003         JNZ       ??ZDP_MgmtPermitJoinReq_2
   \   00003F   74FF         MOV       A,#-0x1
   \   000041   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_2:
   \   000042   6014         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   000044   74FC         MOV       A,#-0x4
   \   000046   68           XRL       A,R0
   \   000047   7003         JNZ       ??ZDP_MgmtPermitJoinReq_4
   \   000049   74FF         MOV       A,#-0x1
   \   00004B   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_4:
   \   00004C   600A         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   00004E   74FD         MOV       A,#-0x3
   \   000050   68           XRL       A,R0
   \   000051   7003         JNZ       ??ZDP_MgmtPermitJoinReq_5
   \   000053   74FF         MOV       A,#-0x1
   \   000055   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_5:
   \   000056   702D         JNZ       ??ZDP_MgmtPermitJoinReq_0
   1392            {
   1393              // Send this to our self as well as broadcast to network
   1394              zAddrType_t tmpAddr;
   1395          
   1396              tmpAddr.addrMode = Addr16Bit;
   \                     ??ZDP_MgmtPermitJoinReq_3:
   \   000058   7408         MOV       A,#0x8
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   7402         MOV       A,#0x2
   \   00005F   F0           MOVX      @DPTR,A
   1397              tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000060                ; Setup parameters for call to function NLME_GetShortAddr
   \   000060   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000063   85..82       MOV       DPL,?XSP + 0
   \   000066   85..83       MOV       DPH,?XSP + 1
   \   000069   EA           MOV       A,R2
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   EB           MOV       A,R3
   \   00006D   F0           MOVX      @DPTR,A
   1398          
   1399              fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
   1400                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00006E                ; Setup parameters for call to function fillAndSend
   \   00006E   75..36       MOV       ?V2,#0x36
   \   000071   75..00       MOV       ?V3,#0x0
   \   000074   78..         MOV       R0,#?V2
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   7902         MOV       R1,#0x2
   \   00007B   E9           MOV       A,R1
   \   00007C   12....       LCALL     ?XSTACK_DISP102_8
   \   00007F   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   1401            }
   \                     ??CrossCallReturnLabel_236:
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   1402          
   1403            // Send the message
   1404            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1405                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??ZDP_MgmtPermitJoinReq_0:
   \   000085                ; Setup parameters for call to function fillAndSend
   \   000085   75..36       MOV       ?V2,#0x36
   \   000088   75..00       MOV       ?V3,#0x0
   \   00008B   78..         MOV       R0,#?V2
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   7902         MOV       R1,#0x2
   \   000092   EE           MOV       A,R6
   \   000093   FC           MOV       R4,A
   \   000094   EF           MOV       A,R7
   \   000095   FD           MOV       R5,A
   \   000096   02....       LJMP      ?Subroutine9 & 0xFFFF
   1406          }
   1407          
   1408          /*********************************************************************
   1409           * @fn          ZDP_MgmtLeaveReq
   1410           *
   1411           * @brief       This builds and send a Mgmt_Leave_req message.
   1412           *
   1413           * @param       dstAddr - destination address of the message
   1414           *              IEEEAddr - IEEE adddress of device that is removed
   1415           *              RemoveChildren - set to 1 to remove the children of the
   1416           *                                device as well. 0 otherwise.
   1417           *              Rejoin - set to 1 if the removed device should rejoin
   1418                                   afterwards. 0 otherwise.
   1419           *
   1420           * @return      afStatus_t
   1421           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1422          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1423                           uint8 Rejoin, uint8 SecurityEnable )
   1424          
   1425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine45 & 0xFFFF
   1426            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1427          
   1428            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   1429            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \                     ??CrossCallReturnLabel_76:
   \   000008   2408         ADD       A,#0x8
   \   00000A   F8           MOV       R0,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   3400         ADDC      A,#0x0
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   1430          
   1431            if ( RemoveChildren == TRUE )
   \   000016   04           INC       A
   \   000017   65..         XRL       A,?V0
   \   000019   7003         JNZ       ??ZDP_MgmtLeaveReq_0
   1432            {
   1433              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00001B   7440         MOV       A,#0x40
   \   00001D   F0           MOVX      @DPTR,A
   1434            }
   1435            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6401         XRL       A,#0x1
   \   000026   7008         JNZ       ??ZDP_MgmtLeaveReq_1
   1436            {
   1437              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   D2E7         SETB      0xE0 /* A   */.7
   \   00002F   F0           MOVX      @DPTR,A
   1438            }
   1439          
   1440            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000030                ; Setup parameters for call to function fillAndSend
   \   000030   75..34       MOV       ?V2,#0x34
   \   000033   02....       LJMP      ?Subroutine1 & 0xFFFF
   1441          }
   1442          
   1443          /*********************************************************************
   1444           * @fn          ZDP_MgmtNwkUpdateReq
   1445           *
   1446           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1447           *              function sends a unicast or broadcast message.
   1448           *
   1449           * @param       dstAddr - destination address of the message
   1450           * @param       ChannelMask - 32 bit address bit map
   1451           * @param       ScanDuration - length of time to spend scanning each channel
   1452           * @param       ScanCount - number of energy scans to be conducted
   1453           * @param       NwkUpdateId - NWk Update Id value
   1454           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1455           *                               bit set in its Node Descriptor
   1456           *
   1457           * @return      afStatus_t
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1460                                           uint32 ChannelMask,
   1461                                           uint8 ScanDuration,
   1462                                           uint8 ScanCount,
   1463                                           uint8 NwkUpdateId,
   1464                                           uint16 NwkManagerAddr )
   1465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   1466            uint8 *pBuf = ZDP_TmpBuf;
   1467            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   7E05         MOV       R6,#0x5
   1468          
   1469            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000011                ; Setup parameters for call to function osal_buffer_uint32
   \   000011   740E         MOV       A,#0xe
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000019   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   1470          
   1471            *pBuf++ = ScanDuration;
   \   00001F   EF           MOV       A,R7
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   F0           MOVX      @DPTR,A
   1472          
   1473            if ( ScanDuration <= 0x05 )
   \   000025   EA           MOV       A,R2
   \   000026   2402         ADD       A,#0x2
   \   000028   FC           MOV       R4,A
   \   000029   E4           CLR       A
   \   00002A   3B           ADDC      A,R3
   \   00002B   FD           MOV       R5,A
   \   00002C   A3           INC       DPTR
   \   00002D   EF           MOV       A,R7
   \   00002E   C3           CLR       C
   \   00002F   9406         SUBB      A,#0x6
   \   000031   5007         JNC       ??ZDP_MgmtNwkUpdateReq_0
   1474            {
   1475              // Request is to scan over channelMask
   1476              len += sizeof( uint8 );
   \   000033   7E06         MOV       R6,#0x6
   1477          
   1478              *pBuf++ = ScanCount;
   \   000035   E5..         MOV       A,?V2
   \   000037   F0           MOVX      @DPTR,A
   \   000038   8025         SJMP      ??ZDP_MgmtNwkUpdateReq_1
   1479            }
   1480            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003A   74FE         MOV       A,#-0x2
   \   00003C   6F           XRL       A,R7
   \   00003D   6005         JZ        ??ZDP_MgmtNwkUpdateReq_2
   \   00003F   74FF         MOV       A,#-0x1
   \   000041   6F           XRL       A,R7
   \   000042   701B         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1481            {
   1482              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1483              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000044   7E06         MOV       R6,#0x6
   1484          
   1485              *pBuf++ = NwkUpdateId;
   \   000046   E5..         MOV       A,?V3
   \   000048   F0           MOVX      @DPTR,A
   1486          
   1487              if ( ScanDuration == 0xFF )
   \   000049   74FF         MOV       A,#-0x1
   \   00004B   6F           XRL       A,R7
   \   00004C   7011         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1488              {
   1489                len += sizeof( uint16 );
   \   00004E   7E08         MOV       R6,#0x8
   \   000050   7412         MOV       A,#0x12
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine49 & 0xFFFF
   1490          
   1491                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1492                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1493              }
   1494            }
   \                     ??CrossCallReturnLabel_87:
   \   000058   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   EA           MOV       A,R2
   \   00005D   2404         ADD       A,#0x4
   1495          
   1496            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00005F                ; Setup parameters for call to function fillAndSend
   \   00005F   75..38       MOV       ?V4,#0x38
   \   000062   75..00       MOV       ?V5,#0x0
   \   000065   78..         MOV       R0,#?V4
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   EE           MOV       A,R6
   \   00006B   F9           MOV       R1,A
   \   00006C   AC..         MOV       R4,?V0
   \   00006E   AD..         MOV       R5,?V1
   \   000070   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000073   02....       LJMP      ?Subroutine0 & 0xFFFF
   1497          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1498          
   1499          
   1500          /*********************************************************************
   1501           * Network Management Responses
   1502           */
   1503          
   1504          /*********************************************************************
   1505           * @fn          ZDP_MgmtNwkDiscRsp
   1506           *
   1507           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1508           *              function sends a unicast message.
   1509           *
   1510           * @param       dstAddr - destination address of the message
   1511           * @param       Status - message status (ZDP_SUCCESS or other)
   1512           * @param       NetworkCount - Total number of networks found
   1513           * @param       StartIndex - Starting index within the reporting network
   1514           *                           list
   1515           * @param       NetworkListCount - number of network lists included
   1516           *                                 in this message
   1517           * @param       NetworkList - List of network descriptors
   1518           * @param       SecurityEnable - Security Options
   1519           *
   1520           * @return      afStatus_t
   1521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1522          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1523                                      byte Status,
   1524                                      byte NetworkCount,
   1525                                      byte StartIndex,
   1526                                      byte NetworkListCount,
   1527                                      networkDesc_t *NetworkList,
   1528                                      byte SecurityEnable )
   1529          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V2,A
   1530            uint8 *buf;
   1531            uint8 *pBuf;
   1532            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1533            byte idx;
   1534          
   1535            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1536          
   1537            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE ));
   \   000013   75F00E       MOV       B,#0xe
   \   000016   A4           MUL       AB
   \   000017   2404         ADD       A,#0x4
   \   000019   F5..         MOV       ?V3,A
   1538            if ( notdoSCANCmd ) { // AT+SCAN:1 Cmd's rsp need PANID
   \   00001B   90....       MOV       DPTR,#notdoSCANCmd
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   600B         JZ        ??ZDP_MgmtNwkDiscRsp_0
   1539              len -= NetworkListCount * 2;
   \   000021   E5..         MOV       A,?V2
   \   000023   C3           CLR       C
   \   000024   33           RLC       A
   \   000025   C5..         XCH       A,?V3
   \   000027   C3           CLR       C
   \   000028   95..         SUBB      A,?V3
   \   00002A   F5..         MOV       ?V3,A
   1540            }
   1541          
   1542            buf = osal_mem_alloc( len+1 );
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   E5..         MOV       A,?V3
   \   00002E   12....       LCALL     ?Subroutine71 & 0xFFFF
   1543            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_115:
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   7005         JNZ       ??ZDP_MgmtNwkDiscRsp_1
   1544            {
   1545              return afStatus_MEM_FAIL;
   \   000035   7910         MOV       R1,#0x10
   \   000037   02....       LJMP      ??CrossCallReturnLabel_225 & 0xFFFF
   1546            }
   1547          
   1548            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   A3           INC       DPTR
   \   00003F   8582..       MOV       ?V8,DPL
   \   000042   8583..       MOV       ?V9,DPH
   \   000045   AE..         MOV       R6,?V8
   \   000047   AF..         MOV       R7,?V9
   1549          
   1550            *pBuf++ = Status;
   \   000049   E5..         MOV       A,?V10
   \   00004B   F0           MOVX      @DPTR,A
   1551            *pBuf++ = NetworkCount;
   \   00004C   A3           INC       DPTR
   \   00004D   E5..         MOV       A,?V5
   \   00004F   F0           MOVX      @DPTR,A
   1552            *pBuf++ = StartIndex;
   \   000050   7417         MOV       A,#0x17
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000058   A3           INC       DPTR
   \   000059   12....       LCALL     ?Subroutine31 & 0xFFFF
   1553            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_40:
   \   00005C   E5..         MOV       A,?V2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   EE           MOV       A,R6
   \   000060   2404         ADD       A,#0x4
   \   000062   FE           MOV       R6,A
   \   000063   5001         JNC       ??ZDP_MgmtNwkDiscRsp_2
   \   000065   0F           INC       R7
   1554          
   1555            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000066   75..00       MOV       ?V4,#0x0
   \   000069   7419         MOV       A,#0x19
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000071   8016         SJMP      ??ZDP_MgmtNwkDiscRsp_3
   1556            {
   1557              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1558              pBuf += Z_EXTADDR_LEN;
   1559              if ( !notdoSCANCmd ) { // AT+SCAN:1 Cmd's rsp need PANID
   1560                *pBuf++ = LO_UINT16(NetworkList->panId);
   1561                *pBuf++ = HI_UINT16(NetworkList->panId);
   1562              }
   1563          
   1564              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1565              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1566              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1567              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1568              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1569          
   1570              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1571              {
   1572                *pBuf++ = TRUE;                         // Permit Joining
   1573              }
   1574              else
   1575              {
   1576                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000073   E4           CLR       A
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000074   F0           MOVX      @DPTR,A
   \   000075   E8           MOV       A,R0
   \   000076   FE           MOV       R6,A
   \   000077   E9           MOV       A,R1
   \   000078   FF           MOV       R7,A
   1577              }
   1578          
   1579              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000079   E5..         MOV       A,?V0
   \   00007B   2414         ADD       A,#0x14
   \   00007D   F582         MOV       DPL,A
   \   00007F   E4           CLR       A
   \   000080   35..         ADDC      A,?V1
   \   000082   F583         MOV       DPH,A
   \   000084   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000087   05..         INC       ?V4
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000089   E5..         MOV       A,?V4
   \   00008B   C3           CLR       C
   \   00008C   95..         SUBB      A,?V2
   \   00008E   4003         JC        $+5
   \   000090   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_6 & 0xFFFF
   \   000093                ; Setup parameters for call to function sAddrExtCpy
   \   000093   E5..         MOV       A,?V0
   \   000095   240B         ADD       A,#0xb
   \   000097   FC           MOV       R4,A
   \   000098   E4           CLR       A
   \   000099   35..         ADDC      A,?V1
   \   00009B   FD           MOV       R5,A
   \   00009C   EE           MOV       A,R6
   \   00009D   FA           MOV       R2,A
   \   00009E   EF           MOV       A,R7
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A3   EE           MOV       A,R6
   \   0000A4   2408         ADD       A,#0x8
   \   0000A6   FE           MOV       R6,A
   \   0000A7   5001         JNC       ??ZDP_MgmtNwkDiscRsp_7
   \   0000A9   0F           INC       R7
   \                     ??ZDP_MgmtNwkDiscRsp_7:
   \   0000AA   90....       MOV       DPTR,#notdoSCANCmd
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   7017         JNZ       ??ZDP_MgmtNwkDiscRsp_8
   \   0000B0   85..82       MOV       DPL,?V0
   \   0000B3   85..83       MOV       DPH,?V1
   \   0000B6   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000B9   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   0000BC   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   EE           MOV       A,R6
   \   0000C1   2402         ADD       A,#0x2
   \   0000C3   FE           MOV       R6,A
   \   0000C4   5001         JNC       ??ZDP_MgmtNwkDiscRsp_8
   \   0000C6   0F           INC       R7
   \                     ??ZDP_MgmtNwkDiscRsp_8:
   \   0000C7   85..82       MOV       DPL,?V0
   \   0000CA   85..83       MOV       DPH,?V1
   \   0000CD   A3           INC       DPTR
   \   0000CE   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0000D1   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000D4   85..82       MOV       DPL,?V0
   \   0000D7   85..83       MOV       DPH,?V1
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0000E3   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   C4           SWAP      A
   \   0000EA   54F0         ANL       A,#0xf0
   \   0000EC   FA           MOV       R2,A
   \   0000ED   8882         MOV       DPL,R0
   \   0000EF   8983         MOV       DPH,R1
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   4A           ORL       A,R2
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   8E82         MOV       DPL,R6
   \   0000F6   8F83         MOV       DPH,R7
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   74FF         MOV       A,#-0x1
   \   0000FC   F0           MOVX      @DPTR,A
   \   0000FD   EE           MOV       A,R6
   \   0000FE   2404         ADD       A,#0x4
   \   000100   F8           MOV       R0,A
   \   000101   E4           CLR       A
   \   000102   3F           ADDC      A,R7
   \   000103   F9           MOV       R1,A
   \   000104   EE           MOV       A,R6
   \   000105   2403         ADD       A,#0x3
   \   000107   FA           MOV       R2,A
   \   000108   E4           CLR       A
   \   000109   3F           ADDC      A,R7
   \   00010A   FB           MOV       R3,A
   \   00010B   85..82       MOV       DPL,?V0
   \   00010E   85..83       MOV       DPH,?V1
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   E0           MOVX      A,@DPTR
   \   000119   64FE         XRL       A,#0xfe
   \   00011B   7003         JNZ       ??ZDP_MgmtNwkDiscRsp_9
   \   00011D   A3           INC       DPTR
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F4           CPL       A
   \                     ??ZDP_MgmtNwkDiscRsp_9:
   \   000120   8A82         MOV       DPL,R2
   \   000122   8B83         MOV       DPH,R3
   \   000124   7003         JNZ       $+5
   \   000126   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   \   000129   7401         MOV       A,#0x1
   \   00012B   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_5 & 0xFFFF
   1580            }
   1581          
   1582            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   00012E   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000131   E5..         MOV       A,?V8
   \   000133   F0           MOVX      @DPTR,A
   \   000134   A3           INC       DPTR
   \   000135   E5..         MOV       A,?V9
   \   000137   F0           MOVX      @DPTR,A
   \   000138                ; Setup parameters for call to function fillAndSend
   \   000138   75..30       MOV       ?V0,#0x30
   \   00013B   75..80       MOV       ?V1,#-0x80
   \   00013E   78..         MOV       R0,#?V0
   \   000140   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000143   A9..         MOV       R1,?V3
   \   000145   AC..         MOV       R4,?V12
   \   000147   AD..         MOV       R5,?V13
   \   000149   7402         MOV       A,#0x2
   \   00014B   12....       LCALL     ?XSTACK_DISP101_8
   \   00014E   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000151   12....       LCALL     ?DEALLOC_XSTACK8
   \   000154   E9           MOV       A,R1
   \   000155   FE           MOV       R6,A
   \   000156                ; Setup parameters for call to function osal_mem_free
   \   000156   AA..         MOV       R2,?V6
   \   000158   AB..         MOV       R3,?V7
   \   00015A   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00015D                REQUIRE ?Subroutine4
   \   00015D                ; // Fall through to label ?Subroutine4
   1583          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine119_0
   \   000002                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   EE           MOV       A,R6
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   8A..         MOV       ?V6,R2
   \   000005   8B..         MOV       ?V7,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8A..         MOV       ?V12,R2
   \   00000A   8B..         MOV       ?V13,R3
   \   00000C   8C..         MOV       ?V10,R4
   \   00000E   8D..         MOV       ?V5,R5
   \   000010   7418         MOV       A,#0x18
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   2401         ADD       A,#0x1
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3400         ADDC      A,#0x0
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000003   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000006   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   22           RET
   1584          
   1585          /*********************************************************************
   1586           * @fn          ZDP_MgmtLqiRsp
   1587           *
   1588           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1589           *              function sends a unicast message.
   1590           *
   1591           * @param       dstAddr - destination address of the message
   1592           * @param       Status - message status (ZDP_SUCCESS or other)
   1593           * @param       NeighborLqiEntries - Total number of entries found
   1594           * @param       StartIndex - Starting index within the reporting list
   1595           * @param       NeighborLqiCount - number of lists included
   1596           *                                 in this message
   1597           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1598           *                is the list to be sent, not the entire list
   1599           * @param       SecurityEnable - true if secure
   1600           *
   1601           * @return      ZStatus_t
   1602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1603          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1604                                    byte Status,
   1605                                    byte NeighborLqiEntries,
   1606                                    byte StartIndex,
   1607                                    byte NeighborLqiCount,
   1608                                    ZDP_MgmtLqiItem_t* NeighborList,
   1609                                    byte SecurityEnable )
   1610          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V10,R2
   \   000014   8B..         MOV       ?V11,R3
   \   000016   8D..         MOV       ?V12,R5
   1611            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   7418         MOV       A,#0x18
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine43 & 0xFFFF
   1612            uint8 *buf, *pBuf;
   1613            byte len, x;
   1614          
   1615            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1616          
   1617            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_70:
   \   000020   EC           MOV       A,R4
   \   000021   601E         JZ        ??ZDP_MgmtLqiRsp_0
   1618            {
   1619              ZDP_TmpBuf[0] = Status;
   \   000023   12....       LCALL     ?Subroutine42 & 0xFFFF
   1620              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1621            }
   \                     ??CrossCallReturnLabel_198:
   \   000026   EC           MOV       A,R4
   \   000027   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7901         MOV       R1,#0x1
   \   00002F   AC..         MOV       R4,?V10
   \   000031   AD..         MOV       R5,?V11
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003E   02....       LJMP      ??CrossCallReturnLabel_223 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000041   7417         MOV       A,#0x17
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V5,A
   1622          
   1623            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1624            //  neighbor LQI data.
   1625            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   000049   75F016       MOV       B,#0x16
   \   00004C   A4           MUL       AB
   \   00004D   2404         ADD       A,#0x4
   \   00004F   F5..         MOV       ?V6,A
   1626          
   1627            buf = osal_mem_alloc( len+1 );
   \   000051                ; Setup parameters for call to function osal_mem_alloc
   \   000051   12....       LCALL     ?Subroutine69 & 0xFFFF
   1628            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_113:
   \   000054   7005         JNZ       ??ZDP_MgmtLqiRsp_1
   1629            {
   1630              return afStatus_MEM_FAIL;
   \   000056   7910         MOV       R1,#0x10
   \   000058   02....       LJMP      ??CrossCallReturnLabel_223 & 0xFFFF
   1631            }
   1632          
   1633            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   A3           INC       DPTR
   \   000060   8582..       MOV       ?V8,DPL
   \   000063   8583..       MOV       ?V9,DPH
   \   000066   85....       MOV       ?V0,?V8
   \   000069   85....       MOV       ?V1,?V9
   1634          
   1635            *pBuf++ = Status;
   \   00006C   E4           CLR       A
   \   00006D   F0           MOVX      @DPTR,A
   1636            *pBuf++ = NeighborLqiEntries;
   \   00006E   A3           INC       DPTR
   \   00006F   E5..         MOV       A,?V12
   \   000071   F0           MOVX      @DPTR,A
   1637            *pBuf++ = StartIndex;
   \   000072   7416         MOV       A,#0x16
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00007A   12....       LCALL     ?Subroutine26 & 0xFFFF
   1638            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_31:
   \   00007D   E5..         MOV       A,?V5
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   E5..         MOV       A,?V0
   \   000082   2404         ADD       A,#0x4
   \   000084   F5..         MOV       ?V0,A
   \   000086   5002         JNC       ??ZDP_MgmtLqiRsp_2
   \   000088   05..         INC       ?V1
   1639          
   1640            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00008A   75..00       MOV       ?V4,#0x0
   \   00008D   02....       LJMP      ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1641            {
   1642              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000090                ; Setup parameters for call to function sAddrExtCpy
   \   000090   EE           MOV       A,R6
   \   000091   2402         ADD       A,#0x2
   \   000093   FC           MOV       R4,A
   \   000094   E4           CLR       A
   \   000095   3F           ADDC      A,R7
   \   000096   FD           MOV       R5,A
   \   000097   AA..         MOV       R2,?V0
   \   000099   AB..         MOV       R3,?V1
   \   00009B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1643              pBuf += Z_EXTADDR_LEN;
   1644          
   1645              // EXTADDR
   1646              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   00009E                ; Setup parameters for call to function sAddrExtCpy
   \   00009E   EE           MOV       A,R6
   \   00009F   240A         ADD       A,#0xa
   \   0000A1   FC           MOV       R4,A
   \   0000A2   E4           CLR       A
   \   0000A3   3F           ADDC      A,R7
   \   0000A4   FD           MOV       R5,A
   \   0000A5   E5..         MOV       A,?V0
   \   0000A7   2408         ADD       A,#0x8
   \   0000A9   FA           MOV       R2,A
   \   0000AA   E4           CLR       A
   \   0000AB   35..         ADDC      A,?V1
   \   0000AD   FB           MOV       R3,A
   \   0000AE   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000B1   8A..         MOV       ?V0,R2
   \   0000B3   8B..         MOV       ?V1,R3
   \   0000B5   A8..         MOV       R0,?V0
   \   0000B7   A9..         MOV       R1,?V1
   1647          
   1648              // NWKADDR
   1649              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000B9   EE           MOV       A,R6
   \   0000BA   2412         ADD       A,#0x12
   \   0000BC   FA           MOV       R2,A
   \   0000BD   E4           CLR       A
   \   0000BE   3F           ADDC      A,R7
   \   0000BF   FB           MOV       R3,A
   \   0000C0   8A82         MOV       DPL,R2
   \   0000C2   F583         MOV       DPH,A
   \   0000C4   12....       LCALL     ?Subroutine60 & 0xFFFF
   1650              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_100:
   \   0000C7   8A82         MOV       DPL,R2
   \   0000C9   8B83         MOV       DPH,R3
   \   0000CB   A3           INC       DPTR
   \   0000CC   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0000CF   A3           INC       DPTR
   \   0000D0   F0           MOVX      @DPTR,A
   1651          
   1652              // DEVICETYPE
   1653              *pBuf = list->devType;
   \   0000D1   E8           MOV       A,R0
   \   0000D2   2402         ADD       A,#0x2
   \   0000D4   FA           MOV       R2,A
   \   0000D5   E4           CLR       A
   \   0000D6   39           ADDC      A,R1
   \   0000D7   FB           MOV       R3,A
   \   0000D8   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000DB   12....       LCALL     ?Subroutine63 & 0xFFFF
   1654          
   1655              // RXONIDLE
   1656              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_104:
   \   0000DE   EE           MOV       A,R6
   \   0000DF   2415         ADD       A,#0x15
   \   0000E1   F582         MOV       DPL,A
   \   0000E3   E4           CLR       A
   \   0000E4   3F           ADDC      A,R7
   \   0000E5   F583         MOV       DPH,A
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   33           RLC       A
   \   0000E9   33           RLC       A
   \   0000EA   54FC         ANL       A,#0xfc
   \   0000EC   FC           MOV       R4,A
   \   0000ED   8A82         MOV       DPL,R2
   \   0000EF   8B83         MOV       DPH,R3
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   4C           ORL       A,R4
   \   0000F3   F0           MOVX      @DPTR,A
   1657          
   1658              // RELATIONSHIP
   1659              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000F4   EE           MOV       A,R6
   \   0000F5   2416         ADD       A,#0x16
   \   0000F7   F582         MOV       DPL,A
   \   0000F9   E4           CLR       A
   \   0000FA   3F           ADDC      A,R7
   \   0000FB   F583         MOV       DPH,A
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   C4           SWAP      A
   \   0000FF   54F0         ANL       A,#0xf0
   \   000101   FC           MOV       R4,A
   \   000102   8A82         MOV       DPL,R2
   \   000104   8B83         MOV       DPH,R3
   \   000106   E0           MOVX      A,@DPTR
   \   000107   4C           ORL       A,R4
   \   000108   F0           MOVX      @DPTR,A
   1660          
   1661              // PERMITJOINING
   1662              *pBuf++ = (uint8)(list->permit);
   \   000109   EE           MOV       A,R6
   \   00010A   2417         ADD       A,#0x17
   \   00010C   F582         MOV       DPL,A
   \   00010E   E4           CLR       A
   \   00010F   3F           ADDC      A,R7
   \   000110   F583         MOV       DPH,A
   \   000112   12....       LCALL     ?Subroutine57 & 0xFFFF
   1663          
   1664              // DEPTH
   1665              *pBuf++ = list->depth;
   \                     ??CrossCallReturnLabel_97:
   \   000115   EE           MOV       A,R6
   \   000116   2418         ADD       A,#0x18
   \   000118   F582         MOV       DPL,A
   \   00011A   E4           CLR       A
   \   00011B   3F           ADDC      A,R7
   \   00011C   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   F0           MOVX      @DPTR,A
   1666          
   1667              // LQI
   1668              *pBuf++ = list->lqi;
   \   000122   EE           MOV       A,R6
   \   000123   2419         ADD       A,#0x19
   \   000125   F582         MOV       DPL,A
   \   000127   E4           CLR       A
   \   000128   3F           ADDC      A,R7
   \   000129   F583         MOV       DPH,A
   \   00012B   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00012E   F0           MOVX      @DPTR,A
   \   00012F   E8           MOV       A,R0
   \   000130   2406         ADD       A,#0x6
   \   000132   F5..         MOV       ?V0,A
   \   000134   E4           CLR       A
   \   000135   39           ADDC      A,R1
   \   000136   F5..         MOV       ?V1,A
   1669          
   1670              list++; // next list entry
   \   000138   EE           MOV       A,R6
   \   000139   241A         ADD       A,#0x1a
   \   00013B   FE           MOV       R6,A
   \   00013C   5001         JNC       ??ZDP_MgmtLqiRsp_5
   \   00013E   0F           INC       R7
   1671            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   00013F   05..         INC       ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000141   E5..         MOV       A,?V4
   \   000143   C3           CLR       C
   \   000144   95..         SUBB      A,?V5
   \   000146   5003         JNC       $+5
   \   000148   02....       LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1672          
   1673            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   00014B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00014E   E5..         MOV       A,?V8
   \   000150   F0           MOVX      @DPTR,A
   \   000151   A3           INC       DPTR
   \   000152   E5..         MOV       A,?V9
   \   000154   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000157   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015A   A9..         MOV       R1,?V6
   \   00015C   AC..         MOV       R4,?V10
   \   00015E   AD..         MOV       R5,?V11
   \   000160   7402         MOV       A,#0x2
   \   000162   12....       LCALL     ?XSTACK_DISP101_8
   \   000165   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00016E   7401         MOV       A,#0x1
   \   000170   12....       LCALL     ?DEALLOC_XSTACK8
   \   000173   7F0D         MOV       R7,#0xd
   \   000175   02....       LJMP      ?BANKED_LEAVE_XDATA
   1674          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV       ?V0,#0x31
   \   000004   75..80       MOV       ?V1,#-0x80
   \   000007   78..         MOV       R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV       R2,?V2
   \   000004   AB..         MOV       R3,?V3
   \   000006                REQUIRE ??Subroutine122_0
   \   000006                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   22           RET
   1675          
   1676          /*********************************************************************
   1677           * @fn          ZDP_MgmtRtgRsp
   1678           *
   1679           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1680           *              function sends a unicast message.
   1681           *
   1682           * @param       dstAddr - destination address of the message
   1683           * @param       Status - message status (ZDP_SUCCESS or other)
   1684           * @param       RoutingTableEntries - Total number of entries
   1685           * @param       StartIndex - Starting index within the reporting list
   1686           * @param       RoutingTableListCount - number of entries included
   1687           *                                      in this message
   1688           * @param       RoutingTableList - List of Routing Table entries
   1689           * @param       SecurityEnable - true to enable security for this message
   1690           *
   1691           * @return      ZStatus_t
   1692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1693          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1694                                      byte Status,
   1695                                      byte RoutingTableEntries,
   1696                                      byte StartIndex,
   1697                                      byte RoutingListCount,
   1698                                      rtgItem_t *RoutingTableList,
   1699                                      byte SecurityEnable )
   1700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   8C..         MOV       ?V1,R4
   \   000018   8D..         MOV       ?V0,R5
   \   00001A   7416         MOV       A,#0x16
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V5,A
   1701            uint8 *buf;
   1702            uint8 *pBuf;
   1703            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1704            byte len = 1 + 1 + 1 + 1;
   1705            byte x;
   1706          
   1707            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1708          
   1709            // Add an array for Routing List data
   1710            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV       B,#0x5
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V4,A
   1711          
   1712            buf = osal_mem_alloc( (short)(len+1) );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00002D   AE..         MOV       R6,?V6
   \   00002F   AF..         MOV       R7,?V7
   1713            if ( buf == NULL )
   \   000031   EA           MOV       A,R2
   \   000032   4F           ORL       A,R7
   \   000033   7005         JNZ       ??ZDP_MgmtRtgRsp_0
   1714            {
   1715              return afStatus_MEM_FAIL;
   \   000035   7910         MOV       R1,#0x10
   \   000037   02....       LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1716            }
   1717          
   1718            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   A3           INC       DPTR
   \   00003F   A882         MOV       R0,DPL
   \   000041   A983         MOV       R1,DPH
   \   000043   E9           MOV       A,R1
   \   000044   FB           MOV       R3,A
   1719          
   1720            *pBuf++ = Status;
   \   000045   E5..         MOV       A,?V1
   \   000047   F0           MOVX      @DPTR,A
   1721            *pBuf++ = RoutingTableEntries;
   \   000048   A3           INC       DPTR
   \   000049   E5..         MOV       A,?V0
   \   00004B   F0           MOVX      @DPTR,A
   1722            *pBuf++ = StartIndex;
   \   00004C   7415         MOV       A,#0x15
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000054   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   1723            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_174:
   \   000057   E5..         MOV       A,?V5
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   E8           MOV       A,R0
   \   00005B   2404         ADD       A,#0x4
   \   00005D   FA           MOV       R2,A
   \   00005E   5001         JNC       ??ZDP_MgmtRtgRsp_2
   \   000060   0B           INC       R3
   1724          
   1725            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000061   75..00       MOV       ?V6,#0x0
   \   000064   7417         MOV       A,#0x17
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00006C   02....       LJMP      ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1726            {
   1727              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   00006F   12....       LCALL     ?Subroutine13 & 0xFFFF
   1728              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1729          
   1730              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_6:
   \   000072   F5..         MOV       ?V8,A
   \   000074   E4           CLR       A
   \   000075   3B           ADDC      A,R3
   \   000076   F5..         MOV       ?V9,A
   \   000078   8C82         MOV       DPL,R4
   \   00007A   8D83         MOV       DPH,R5
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   5407         ANL       A,#0x7
   \   000084   85..82       MOV       DPL,?V8
   \   000087   85..83       MOV       DPH,?V9
   \   00008A   F0           MOVX      @DPTR,A
   1731              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   00008B   EC           MOV       A,R4
   \   00008C   2406         ADD       A,#0x6
   \   00008E   F582         MOV       DPL,A
   \   000090   E4           CLR       A
   \   000091   3D           ADDC      A,R5
   \   000092   F583         MOV       DPH,A
   \   000094   E0           MOVX      A,@DPTR
   \   000095   5418         ANL       A,#0x18
   \   000097   6029         JZ        ??ZDP_MgmtRtgRsp_5
   1732              {
   1733                uint8 options = 0;
   1734                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   000099   75..02       MOV       ?V7,#0x2
   1735          
   1736                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   A2E2         MOV       C,0xE0 /* A   */.2
   \   00009F   5003         JNC       ??ZDP_MgmtRtgRsp_6
   1737                {
   1738                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   0000A1   75..06       MOV       ?V7,#0x6
   1739                }
   1740          
   1741                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000A4   A2E4         MOV       C,0xE0 /* A   */.4
   \   0000A6   5007         JNC       ??ZDP_MgmtRtgRsp_7
   1742                {
   1743                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000A8   D3           SETB      C
   \   0000A9   E5..         MOV       A,?V7
   \   0000AB   D2E0         SETB      0xE0 /* A   */.0
   \   0000AD   F5..         MOV       ?V7,A
   1744                }
   1745          
   1746                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000AF   E5..         MOV       A,?V7
   \   0000B1   33           RLC       A
   \   0000B2   33           RLC       A
   \   0000B3   33           RLC       A
   \   0000B4   54F8         ANL       A,#0xf8
   \   0000B6   F5..         MOV       ?V7,A
   \   0000B8   85..82       MOV       DPL,?V8
   \   0000BB   85..83       MOV       DPH,?V9
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   45..         ORL       A,?V7
   \   0000C1   F0           MOVX      @DPTR,A
   1747              }
   1748              pBuf++;
   1749          
   1750              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000C2   EC           MOV       A,R4
   \   0000C3   2402         ADD       A,#0x2
   \   0000C5   F5..         MOV       ?V8,A
   \   0000C7   E4           CLR       A
   \   0000C8   3D           ADDC      A,R5
   \   0000C9   F5..         MOV       ?V9,A
   \   0000CB   85..82       MOV       DPL,?V8
   \   0000CE   F583         MOV       DPH,A
   \   0000D0   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000D3   F0           MOVX      @DPTR,A
   1751              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0000D4   85..82       MOV       DPL,?V8
   \   0000D7   85..83       MOV       DPH,?V9
   \   0000DA   A3           INC       DPTR
   \   0000DB   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000DE   A3           INC       DPTR
   \   0000DF   F0           MOVX      @DPTR,A
   \   0000E0   EA           MOV       A,R2
   \   0000E1   2405         ADD       A,#0x5
   \   0000E3   FA           MOV       R2,A
   \   0000E4   5001         JNC       ??ZDP_MgmtRtgRsp_8
   \   0000E6   0B           INC       R3
   1752              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_8:
   \   0000E7   EC           MOV       A,R4
   \   0000E8   2407         ADD       A,#0x7
   \   0000EA   FC           MOV       R4,A
   \   0000EB   5001         JNC       ??ZDP_MgmtRtgRsp_9
   \   0000ED   0D           INC       R5
   1753            }
   \                     ??ZDP_MgmtRtgRsp_9:
   \   0000EE   05..         INC       ?V6
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000F0   E5..         MOV       A,?V6
   \   0000F2   C3           CLR       C
   \   0000F3   95..         SUBB      A,?V5
   \   0000F5   5003         JNC       $+5
   \   0000F7   02....       LJMP      ??ZDP_MgmtRtgRsp_4 & 0xFFFF
   1754          
   1755            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000FA   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000FD   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000100                ; Setup parameters for call to function fillAndSend
   \   000100   75..32       MOV       ?V6,#0x32
   \   000103   75..80       MOV       ?V7,#-0x80
   \   000106   78..         MOV       R0,#?V6
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010B   A9..         MOV       R1,?V4
   \   00010D   AC..         MOV       R4,?V2
   \   00010F   AD..         MOV       R5,?V3
   \   000111   7402         MOV       A,#0x2
   \   000113   12....       LCALL     ?XSTACK_DISP101_8
   \   000116   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000119   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011C   E9           MOV       A,R1
   \   00011D   F5..         MOV       ?V2,A
   \   00011F                ; Setup parameters for call to function osal_mem_free
   \   00011F   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000122   A9..         MOV       R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000124   7401         MOV       A,#0x1
   \   000126   02....       LJMP      ?Subroutine5 & 0xFFFF
   1756          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8C82         MOV       DPL,R4
   \   00000A   8D83         MOV       DPH,R5
   \   00000C   A3           INC       DPTR
   \   00000D   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000010   A3           INC       DPTR
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EA           MOV       A,R2
   \   000013   2402         ADD       A,#0x2
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1757          
   1758          /*********************************************************************
   1759           * @fn          ZDP_MgmtBindRsp
   1760           *
   1761           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1762           *              function sends a unicast message.
   1763           *
   1764           * @param       dstAddr - destination address of the message
   1765           * @param       Status - message status (ZDP_SUCCESS or other)
   1766           * @param       BindingTableEntries - Total number of entries
   1767           * @param       StartIndex - Starting index within the reporting list
   1768           * @param       BindingTableListCount - number of entries included
   1769           *                                 in this message
   1770           * @param       BindingTableList - List of Binding Table entries
   1771           * @param       SecurityEnable - Security Options
   1772           *
   1773           * @return      ZStatus_t
   1774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1775          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1776                                      byte Status,
   1777                                      byte BindingTableEntries,
   1778                                      byte StartIndex,
   1779                                      byte BindingTableListCount,
   1780                                      apsBindingItem_t *BindingTableList,
   1781                                      byte SecurityEnable )
   1782          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V4,A
   1783            uint8 *buf;
   1784            uint8 *pBuf;
   1785            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1786            uint8 len;    // Actual length varies due to different addrMode
   1787            uint8 x;
   1788            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1789            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1790          
   1791            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1792          
   1793            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1794            maxLen = 1 + 1 + 1 + 1;
   1795            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1796            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   75F015       MOV       B,#0x15
   \   000016   A4           MUL       AB
   \   000017   2404         ADD       A,#0x4
   \   000019   12....       LCALL     ?Subroutine69 & 0xFFFF
   1797          
   1798            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_114:
   \   00001C   7005         JNZ       ??ZDP_MgmtBindRsp_0
   1799            {
   1800              return afStatus_MEM_FAIL;
   \   00001E   7910         MOV       R1,#0x10
   \   000020   02....       LJMP      ??CrossCallReturnLabel_224 & 0xFFFF
   1801            }
   1802          
   1803            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   8582..       MOV       ?V6,DPL
   \   00002B   8583..       MOV       ?V7,DPH
   \   00002E   AA..         MOV       R2,?V6
   \   000030   AB..         MOV       R3,?V7
   1804          
   1805            *pBuf++ = Status;
   \   000032   E5..         MOV       A,?V10
   \   000034   F0           MOVX      @DPTR,A
   1806            *pBuf++ = BindingTableEntries;
   \   000035   A3           INC       DPTR
   \   000036   E5..         MOV       A,?V5
   \   000038   F0           MOVX      @DPTR,A
   1807            *pBuf++ = StartIndex;
   \   000039   7417         MOV       A,#0x17
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000041   A3           INC       DPTR
   \   000042   12....       LCALL     ?Subroutine37 & 0xFFFF
   1808            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_55:
   \   000045   E5..         MOV       A,?V4
   \   000047   F0           MOVX      @DPTR,A
   \   000048   EA           MOV       A,R2
   \   000049   2404         ADD       A,#0x4
   \   00004B   FA           MOV       R2,A
   \   00004C   5001         JNC       ??ZDP_MgmtBindRsp_1
   \   00004E   0B           INC       R3
   1809          
   1810            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1811            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1812            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1813            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1814          
   1815            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   00004F   75..04       MOV       ?V0,#0x4
   1816            for ( x = 0; x < BindingTableListCount; x++ )
   \   000052   75..00       MOV       ?V1,#0x0
   \   000055   7419         MOV       A,#0x19
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00005D   8016         SJMP      ??ZDP_MgmtBindRsp_2
   1817            {
   1818              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1819              *pBuf++ = BindingTableList->srcEP;
   1820          
   1821              // Cluster ID
   1822              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1823              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1824          
   1825              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1826              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1827              {
   1828                len += extZdpBindEntrySize;
   1829                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1830                *pBuf++ = BindingTableList->dstEP;
   1831              }
   1832              else
   1833              {
   1834                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   00005F   740E         MOV       A,#0xe
   \   000061   25..         ADD       A,?V0
   \   000063   F5..         MOV       ?V0,A
   1835                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000065   12....       LCALL     ?Subroutine13 & 0xFFFF
   1836                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1837              }
   \                     ??CrossCallReturnLabel_7:
   \   000068   FA           MOV       R2,A
   \   000069   5001         JNC       ??ZDP_MgmtBindRsp_4
   \   00006B   0B           INC       R3
   1838              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   00006C   EE           MOV       A,R6
   \   00006D   2415         ADD       A,#0x15
   \   00006F   FE           MOV       R6,A
   \   000070   5001         JNC       ??ZDP_MgmtBindRsp_5
   \   000072   0F           INC       R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   000073   05..         INC       ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   000075   E5..         MOV       A,?V1
   \   000077   C3           CLR       C
   \   000078   95..         SUBB      A,?V4
   \   00007A   5061         JNC       ??ZDP_MgmtBindRsp_6
   \   00007C                ; Setup parameters for call to function sAddrExtCpy
   \   00007C   EE           MOV       A,R6
   \   00007D   FC           MOV       R4,A
   \   00007E   EF           MOV       A,R7
   \   00007F   FD           MOV       R5,A
   \   000080   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000083   8E82         MOV       DPL,R6
   \   000085   8F83         MOV       DPH,R7
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000092   EE           MOV       A,R6
   \   000093   2409         ADD       A,#0x9
   \   000095   F8           MOV       R0,A
   \   000096   E4           CLR       A
   \   000097   3F           ADDC      A,R7
   \   000098   F9           MOV       R1,A
   \   000099   8882         MOV       DPL,R0
   \   00009B   F583         MOV       DPH,A
   \   00009D   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0000A0   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   0000A3   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000A6   A3           INC       DPTR
   \   0000A7   F0           MOVX      @DPTR,A
   \   0000A8   EE           MOV       A,R6
   \   0000A9   2413         ADD       A,#0x13
   \   0000AB   F8           MOV       R0,A
   \   0000AC   E4           CLR       A
   \   0000AD   3F           ADDC      A,R7
   \   0000AE   F9           MOV       R1,A
   \   0000AF   8882         MOV       DPL,R0
   \   0000B1   F583         MOV       DPH,A
   \   0000B3   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000B6   5001         JNC       ??ZDP_MgmtBindRsp_7
   \   0000B8   0B           INC       R3
   \                     ??ZDP_MgmtBindRsp_7:
   \   0000B9   EE           MOV       A,R6
   \   0000BA   240B         ADD       A,#0xb
   \   0000BC   FC           MOV       R4,A
   \   0000BD   E4           CLR       A
   \   0000BE   3F           ADDC      A,R7
   \   0000BF   FD           MOV       R5,A
   \   0000C0   8882         MOV       DPL,R0
   \   0000C2   8983         MOV       DPH,R1
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   6403         XRL       A,#0x3
   \   0000C7   7096         JNZ       ??ZDP_MgmtBindRsp_3
   \   0000C9   7415         MOV       A,#0x15
   \   0000CB   25..         ADD       A,?V0
   \   0000CD   F5..         MOV       ?V0,A
   \   0000CF                ; Setup parameters for call to function sAddrExtCpy
   \   0000CF   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000D2   12....       LCALL     ?Subroutine76 & 0xFFFF
   1839            }
   \                     ??CrossCallReturnLabel_124:
   \   0000D5   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000D8   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000DB   808F         SJMP      ??ZDP_MgmtBindRsp_4
   1840          
   1841            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000DD   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000E0   E5..         MOV       A,?V6
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   E5..         MOV       A,?V7
   \   0000E6   F0           MOVX      @DPTR,A
   \   0000E7                ; Setup parameters for call to function fillAndSend
   \   0000E7   75..33       MOV       ?V6,#0x33
   \   0000EA   75..80       MOV       ?V7,#-0x80
   \   0000ED   78..         MOV       R0,#?V6
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F2   A9..         MOV       R1,?V0
   \   0000F4   AC..         MOV       R4,?V12
   \   0000F6   AD..         MOV       R5,?V13
   \   0000F8   7402         MOV       A,#0x2
   \   0000FA   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FD   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
   \   000103   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000106   02....       LJMP      ?Subroutine4 & 0xFFFF
   1842          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1843          
   1844          /*********************************************************************
   1845           * @fn          ZDP_MgmtNwkUpdateNotify
   1846           *
   1847           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1848           *              function sends a unicast message.
   1849           *
   1850           * @param       dstAddr - destination address of the message
   1851           * @param       status - message status (ZDP_SUCCESS or other)
   1852           * @param       scannedChannels - List of channels scanned by the request
   1853           * @param       totalTransmissions - Total transmissions
   1854           * @param       transmissionFailures - Sum of transmission failures
   1855           * @param       listCount - Number of records contained in the energyValues list
   1856           * @param       energyValues - List of descriptors, one for each of ListCount,
   1857           *                             of the enegry detect descriptors
   1858           * @param       txOptions - Transmit options
   1859           * @param       securityEnable - Security options
   1860           *
   1861           * @return      afStatus_t
   1862           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1863          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1864                                              uint8 status, uint32 scannedChannels,
   1865                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1866                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1867                                              uint8 securityEnable )
   1868          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V8,R2
   \   000014   8B..         MOV       ?V9,R3
   \   000016   8C..         MOV       ?V7,R4
   \   000018   8D..         MOV       ?V0,R5
   1869            uint8 *buf;
   1870            uint8 *pBuf;
   1871            uint8 len;
   1872          
   1873            (void)securityEnable;  // Intentionally unreferenced parameter
   1874          
   1875            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1876            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV       A,#0xa
   \   00001C   2D           ADD       A,R5
   \   00001D   F5..         MOV       ?V1,A
   1877          
   1878            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000022   AE..         MOV       R6,?V2
   \   000024   AF..         MOV       R7,?V3
   1879            if ( buf == NULL )
   \   000026   EA           MOV       A,R2
   \   000027   4F           ORL       A,R7
   \   000028   7005         JNZ       ??ZDP_MgmtNwkUpdateNotify_0
   1880            {
   1881              return afStatus_MEM_FAIL;
   \   00002A   7910         MOV       R1,#0x10
   \   00002C   02....       LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1882            }
   1883          
   1884            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   A3           INC       DPTR
   \   000034   8582..       MOV       ?V2,DPL
   \   000037   8583..       MOV       ?V3,DPH
   1885          
   1886            *pBuf++ = status;
   \   00003A   E5..         MOV       A,?V7
   \   00003C   12....       LCALL     ?Subroutine20 & 0xFFFF
   1887          
   1888            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_25:
   \   00003F                ; Setup parameters for call to function osal_buffer_uint32
   \   00003F   7413         MOV       A,#0x13
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000047   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004F   7417         MOV       A,#0x17
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ?Subroutine50 & 0xFFFF
   1889          
   1890            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_88:
   \   000057   F0           MOVX      @DPTR,A
   1891            *pBuf++ = HI_UINT16( totalTransmissions );
   \   000058   E9           MOV       A,R1
   \   000059   A3           INC       DPTR
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   7419         MOV       A,#0x19
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?Subroutine50 & 0xFFFF
   1892          
   1893            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_89:
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   12....       LCALL     ?Subroutine27 & 0xFFFF
   1894            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_33:
   \   000068   12....       LCALL     ?Subroutine15 & 0xFFFF
   1895          
   1896            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_11:
   \   00006B   E5..         MOV       A,?V0
   \   00006D   F0           MOVX      @DPTR,A
   1897          
   1898            if ( listCount > 0 )
   \   00006E   601C         JZ        ??ZDP_MgmtNwkUpdateNotify_2
   1899              osal_memcpy( pBuf, energyValues, listCount );
   \   000070                ; Setup parameters for call to function osal_memcpy
   \   000070   741B         MOV       A,#0x1b
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007B   AC..         MOV       R4,?V0
   \   00007D   7D00         MOV       R5,#0x0
   \   00007F   EA           MOV       A,R2
   \   000080   2405         ADD       A,#0x5
   \   000082   FA           MOV       R2,A
   \   000083   5001         JNC       ??ZDP_MgmtNwkUpdateNotify_3
   \   000085   0B           INC       R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   000086   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000089   12....       LCALL     ?DEALLOC_XSTACK8
   1900          
   1901            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   00008C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00008F   E5..         MOV       A,?V2
   \   000091   F0           MOVX      @DPTR,A
   \   000092   A3           INC       DPTR
   \   000093   E5..         MOV       A,?V3
   \   000095   F0           MOVX      @DPTR,A
   \   000096   741D         MOV       A,#0x1d
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0                ; Setup parameters for call to function fillAndSend
   \   0000A0   75..38       MOV       ?V2,#0x38
   \   0000A3   75..80       MOV       ?V3,#-0x80
   \   0000A6   78..         MOV       R0,#?V2
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   A9..         MOV       R1,?V1
   \   0000AD   AC..         MOV       R4,?V8
   \   0000AF   AD..         MOV       R5,?V9
   \   0000B1   7402         MOV       A,#0x2
   \   0000B3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B6   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   F5..         MOV       ?V1,A
   \   0000BF                ; Setup parameters for call to function osal_mem_free
   \   0000BF   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000C2   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000C5   E4           CLR       A
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   A9..         MOV       R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000C9   02....       LJMP      ?Subroutine6 & 0xFFFF
   1902          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1903          
   1904          /*********************************************************************
   1905           * Functions to register for ZDO Over-the-air messages
   1906           */
   1907          
   1908          /*********************************************************************
   1909           * @fn          ZDO_RegisterForZDOMsg
   1910           *
   1911           * @brief       Call this function to register of an incoming over
   1912           *              the air ZDO message - probably a response message
   1913           *              but requests can also be received.
   1914           *              Messages are delivered to the task with ZDO_CB_MSG
   1915           *              as the message ID.
   1916           *
   1917           * @param       taskID - Where you would like the message delivered
   1918           * @param       clusterID - What message?
   1919           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1920           *                          and device announce
   1921           *
   1922           * @return      ZSuccess - successful, ZMemError if not
   1923           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1924          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1925          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   1926            ZDO_MsgCB_t *pList;
   1927            ZDO_MsgCB_t *pLast;
   1928            ZDO_MsgCB_t *pNew;
   1929          
   1930            // Look for duplicate
   1931            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000011   EE           MOV       A,R6
   \   000012   F8           MOV       R0,A
   \   000013   EF           MOV       A,R7
   \   000014   8026         SJMP      ??CrossCallReturnLabel_285
   1932            while ( pList )
   1933            {
   1934              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   65..         XRL       A,?V2
   \   00001F   7010         JNZ       ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6A           XRL       A,R2
   \   00002A   7003         JNZ       ??ZDO_RegisterForZDOMsg_2
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6B           XRL       A,R3
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   00002F   6053         JZ        ??CrossCallReturnLabel_42
   1935                return ( ZSuccess );
   1936              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000031   E8           MOV       A,R0
   \   000032   FE           MOV       R6,A
   \   000033   E9           MOV       A,R1
   \   000034   FF           MOV       R7,A
   1937              pList = (ZDO_MsgCB_t *)pList->next;
   \   000035   8882         MOV       DPL,R0
   \   000037   8983         MOV       DPH,R1
   \   000039   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   1938            }
   \                     ??CrossCallReturnLabel_285:
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   70D5         JNZ       ??ZDO_RegisterForZDOMsg_0
   1939          
   1940            // Add to the list
   1941            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000041                ; Setup parameters for call to function osal_mem_alloc
   \   000041   7A05         MOV       R2,#0x5
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV       ?V4,R2
   \   00004A   8B..         MOV       ?V5,R3
   \   00004C   A8..         MOV       R0,?V4
   \   00004E   A9..         MOV       R1,?V5
   1942            if ( pNew )
   \   000050   EA           MOV       A,R2
   \   000051   49           ORL       A,R1
   \   000052   6034         JZ        ??ZDO_RegisterForZDOMsg_3
   1943            {
   1944              pNew->taskID = taskID;
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E5..         MOV       A,?V2
   \   00005C   12....       LCALL     ?Subroutine37 & 0xFFFF
   1945              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_56:
   \   00005F   E5..         MOV       A,?V0
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   E5..         MOV       A,?V1
   \   000065   F0           MOVX      @DPTR,A
   1946              pNew->next = NULL;
   \   000066   8A82         MOV       DPL,R2
   \   000068   8B83         MOV       DPH,R3
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   F0           MOVX      @DPTR,A
   1947              if ( zdoMsgCBs )
   \   00006E   90....       MOV       DPTR,#zdoMsgCBs
   \   000071   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000074   EA           MOV       A,R2
   \   000075   4B           ORL       A,R3
   \   000076   6006         JZ        ??ZDO_RegisterForZDOMsg_4
   1948              {
   1949                pLast->next = pNew;
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   8003         SJMP      ??ZDO_RegisterForZDOMsg_5
   1950              }
   1951              else
   1952                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007E   90....       MOV       DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000081   12....       LCALL     ?Subroutine32 & 0xFFFF
   1953              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_42:
   \   000084   7900         MOV       R1,#0x0
   \   000086   8002         SJMP      ??ZDO_RegisterForZDOMsg_6
   1954            }
   1955            else
   1956              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000088   7910         MOV       R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008A   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   1957          }
   1958          
   1959          /*********************************************************************
   1960           * @fn          ZDO_RemoveRegisteredCB
   1961           *
   1962           * @brief       Call this function if you don't want to receive the
   1963           *              incoming message.
   1964           *
   1965           * @param       taskID - Where the messages are being delivered.
   1966           * @param       clusterID - What message?
   1967           *
   1968           * @return      ZSuccess - successful, ZFailure if not found
   1969           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1970          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1971          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1972            ZDO_MsgCB_t *pList;
   1973            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV       R4,#0x0
   \   000009   7D00         MOV       R5,#0x0
   1974          
   1975            pList = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP      ??ZDO_RemoveRegisteredCB_0
   1976            while ( pList )
   1977            {
   1978              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1979              {
   1980                if ( pLast )
   1981                {
   1982                  // remove this one from the linked list
   1983                  pLast->next = pList->next;
   1984                }
   1985                else if ( pList->next )
   1986                {
   1987                  // remove the first one from the linked list
   1988                  zdoMsgCBs = pList->next;
   1989                }
   1990                else
   1991                {
   1992                  // remove the only item from the list
   1993                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1994                }
   1995                osal_mem_free( pList );
   1996                return ( ZSuccess );
   1997              }
   1998              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   E9           MOV       A,R1
   \   000013   FD           MOV       R5,A
   1999              pList = pList->next;
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00001B   49           ORL       A,R1
   \   00001C   6047         JZ        ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV       DPL,R0
   \   000020   8983         MOV       DPH,R1
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6E           XRL       A,R6
   \   000026   70E8         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6A           XRL       A,R2
   \   000031   7003         JNZ       ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6B           XRL       A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   00003F   EC           MOV       A,R4
   \   000040   4D           ORL       A,R5
   \   000041   6006         JZ        ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV       DPL,R4
   \   000045   8D83         MOV       DPH,R5
   \   000047   8007         SJMP      ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV       A,R2
   \   00004A   4B           ORL       A,R3
   \   00004B   90....       MOV       DPTR,#zdoMsgCBs
   \   00004E   6006         JZ        ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   8003         SJMP      ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR       A
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX      @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV       A,R0
   \   00005B   FA           MOV       R2,A
   \   00005C   E9           MOV       A,R1
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000061   7900         MOV       R1,#0x0
   \   000063   8002         SJMP      ??ZDO_RemoveRegisteredCB_8
   2000            }
   2001          
   2002            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV       R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   02....       LJMP      ?Subroutine7 & 0xFFFF
   2003          }
   2004          
   2005          /*********************************************************************
   2006           * @fn          ZDO_SendMsgCBs
   2007           *
   2008           * @brief       This function sends messages to registered tasks.
   2009           *              Local to ZDO and shouldn't be called outside of ZDO.
   2010           *
   2011           * @param       inMsg - incoming message
   2012           *
   2013           * @return      TRUE if sent to at least 1 task, FALSE if not
   2014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   7D00         MOV       R5,#0x0
   \   000002                REQUIRE ??Subroutine115_0
   \   000002                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2015          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   2016          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   2017            uint8 ret = FALSE;
   \   000009   75..00       MOV       ?V4,#0x0
   2018            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV       DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000012   2410         ADD       A,#0x10
   \   000014   F5..         MOV       ?V8,A
   \   000016   E4           CLR       A
   \   000017   35..         ADDC      A,?V3
   \   000019   F5..         MOV       ?V9,A
   \   00001B   02....       LJMP      ??CrossCallReturnLabel_265 & 0xFFFF
   2019            while ( pList )
   2020            {
   2021              if ( (pList->clusterID == inMsg->clusterID)
   2022                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   2023                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001E   E5..         MOV       A,?V2
   \   000020   240C         ADD       A,#0xc
   \   000022   F582         MOV       DPL,A
   \   000024   E4           CLR       A
   \   000025   35..         ADDC      A,?V3
   \   000027   F583         MOV       DPH,A
   \   000029   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   00002C   85..82       MOV       DPL,?V0
   \   00002F   85..83       MOV       DPH,?V1
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000038   E8           MOV       A,R0
   \   000039   6A           XRL       A,R2
   \   00003A   7002         JNZ       ??ZDO_SendMsgCBs_1
   \   00003C   E9           MOV       A,R1
   \   00003D   6B           XRL       A,R3
   \                     ??ZDO_SendMsgCBs_1:
   \   00003E   601B         JZ        ??ZDO_SendMsgCBs_2
   \   000040   74FF         MOV       A,#-0x1
   \   000042   6A           XRL       A,R2
   \   000043   7003         JNZ       ??ZDO_SendMsgCBs_3
   \   000045   74FF         MOV       A,#-0x1
   \   000047   6B           XRL       A,R3
   \                     ??ZDO_SendMsgCBs_3:
   \   000048   6003         JZ        $+5
   \   00004A   02....       LJMP      ??ZDO_SendMsgCBs_4 & 0xFFFF
   \   00004D   E9           MOV       A,R1
   \   00004E   5480         ANL       A,#0x80
   \   000050   7009         JNZ       ??ZDO_SendMsgCBs_2
   \   000052   7413         MOV       A,#0x13
   \   000054   68           XRL       A,R0
   \   000055   49           ORL       A,R1
   \   000056   6003         JZ        $+5
   \   000058   02....       LJMP      ??ZDO_SendMsgCBs_4 & 0xFFFF
   2024              {
   2025                zdoIncomingMsg_t *msgPtr;
   2026          
   2027                // Send the address to the task
   2028                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_2:
   \   00005B                ; Setup parameters for call to function osal_msg_allocate
   \   00005B   85..82       MOV       DPL,?V8
   \   00005E   85..83       MOV       DPH,?V9
   \   000061   E0           MOVX      A,@DPTR
   \   000062   2417         ADD       A,#0x17
   \   000064   FA           MOV       R2,A
   \   000065   E4           CLR       A
   \   000066   3400         ADDC      A,#0x0
   \   000068   FB           MOV       R3,A
   \   000069   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00006C   8A..         MOV       ?V6,R2
   \   00006E   8B..         MOV       ?V7,R3
   \   000070   AE..         MOV       R6,?V6
   \   000072   AF..         MOV       R7,?V7
   2029                if ( msgPtr )
   \   000074   EA           MOV       A,R2
   \   000075   4F           ORL       A,R7
   \   000076   6074         JZ        ??ZDO_SendMsgCBs_4
   2030                {
   2031                  // copy struct
   2032                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   85....       MOV       ?V4,?V2
   \   00007B   85....       MOV       ?V5,?V3
   \   00007E   75..00       MOV       ?V6,#0x0
   \   000081   78..         MOV       R0,#?V4
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000086   7C17         MOV       R4,#0x17
   \   000088   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   2033          
   2034                  if ( inMsg->asduLen )
   \   00008E   85..82       MOV       DPL,?V8
   \   000091   85..83       MOV       DPH,?V9
   \   000094   E0           MOVX      A,@DPTR
   \   000095   603A         JZ        ??ZDO_SendMsgCBs_5
   2035                  {
   2036                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000097   EE           MOV       A,R6
   \   000098   2417         ADD       A,#0x17
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   3F           ADDC      A,R7
   \   00009D   FB           MOV       R3,A
   \   00009E   EE           MOV       A,R6
   \   00009F   2413         ADD       A,#0x13
   \   0000A1   F582         MOV       DPL,A
   \   0000A3   E4           CLR       A
   \   0000A4   3F           ADDC      A,R7
   \   0000A5   F583         MOV       DPH,A
   \   0000A7   EA           MOV       A,R2
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   EB           MOV       A,R3
   \   0000AB   F0           MOVX      @DPTR,A
   2037                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000AC                ; Setup parameters for call to function osal_memcpy
   \   0000AC   E5..         MOV       A,?V2
   \   0000AE   2413         ADD       A,#0x13
   \   0000B0   F582         MOV       DPL,A
   \   0000B2   E4           CLR       A
   \   0000B3   35..         ADDC      A,?V3
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F5..         MOV       ?V4,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F5..         MOV       ?V5,A
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C3   85..82       MOV       DPL,?V8
   \   0000C6   85..83       MOV       DPH,?V9
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   FC           MOV       R4,A
   \   0000CB   12....       LCALL     ?Subroutine70 & 0xFFFF
   2038                  }
   \                     ??CrossCallReturnLabel_187:
   \   0000CE   12....       LCALL     ?DEALLOC_XSTACK8
   2039          
   2040                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   74D3         MOV       A,#-0x2d
   \   0000D7   F0           MOVX      @DPTR,A
   2041                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000D8                ; Setup parameters for call to function osal_msg_send
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   85..82       MOV       DPL,?V0
   \   0000DF   85..83       MOV       DPH,?V1
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   F9           MOV       R1,A
   \   0000E6   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2042                  ret = TRUE;
   \   0000E9   75..01       MOV       ?V4,#0x1
   2043                }
   2044              }
   2045              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000EC   85..82       MOV       DPL,?V0
   \   0000EF   85..83       MOV       DPH,?V1
   \   0000F2   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   2046            }
   \                     ??CrossCallReturnLabel_265:
   \   0000F5   E5..         MOV       A,?V0
   \   0000F7   45..         ORL       A,?V1
   \   0000F9   6003         JZ        $+5
   \   0000FB   02....       LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
   2047            return ( ret );
   \   0000FE   A9..         MOV       R1,?V4
   \   000100   02....       LJMP      ??Subroutine118_0 & 0xFFFF
   2048          }
   2049          
   2050          /*********************************************************************
   2051           * Incoming message processor
   2052           */
   2053          
   2054          /*********************************************************************
   2055           * @fn          ZDP_IncomingData
   2056           *
   2057           * @brief       This function indicates the transfer of a data PDU (ASDU)
   2058           *              from the APS sub-layer to the ZDO.
   2059           *
   2060           * @param       pData - Incoming Message
   2061           *
   2062           * @return      none
   2063           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2064          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   2065          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2066            uint8 x = 0;
   \   00000A   7E00         MOV       R6,#0x0
   2067            uint8 handled;
   2068            zdoIncomingMsg_t inMsg;
   2069          
   2070            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV       A,#0xa
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?Subroutine15 & 0xFFFF
   2071            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_12:
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine32 & 0xFFFF
   2072            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_43:
   \   000023   EA           MOV       A,R2
   \   000024   2415         ADD       A,#0x15
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3B           ADDC      A,R3
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C0E0         PUSH      A
   \   00002F   740B         MOV       A,#0xb
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine15 & 0xFFFF
   2073            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_13:
   \   000039   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00003C   740C         MOV       A,#0xc
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine32 & 0xFFFF
   2074            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_44:
   \   000044   EA           MOV       A,R2
   \   000045   2419         ADD       A,#0x19
   \   000047   F582         MOV       DPL,A
   \   000049   E4           CLR       A
   \   00004A   3B           ADDC      A,R3
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   C0E0         PUSH      A
   \   000050   740E         MOV       A,#0xe
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
   2075          
   2076            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV       A,R2
   \   000059   2420         ADD       A,#0x20
   \   00005B   F582         MOV       DPL,A
   \   00005D   E4           CLR       A
   \   00005E   3B           ADDC      A,R3
   \   00005F   F583         MOV       DPH,A
   \   000061   E0           MOVX      A,@DPTR
   \   000062   14           DEC       A
   \   000063   C0E0         PUSH      A
   \   000065   7410         MOV       A,#0x10
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
   2077            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV       A,R2
   \   00006E   2422         ADD       A,#0x22
   \   000070   F8           MOV       R0,A
   \   000071   E4           CLR       A
   \   000072   3B           ADDC      A,R3
   \   000073   F9           MOV       R1,A
   \   000074   8882         MOV       DPL,R0
   \   000076   F583         MOV       DPH,A
   \   000078   E0           MOVX      A,@DPTR
   \   000079   2401         ADD       A,#0x1
   \   00007B   FC           MOV       R4,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   3400         ADDC      A,#0x0
   \   000080   FD           MOV       R5,A
   \   000081   7413         MOV       A,#0x13
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   EC           MOV       A,R4
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   ED           MOV       A,R5
   \   00008A   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   2078            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_261:
   \   00008D   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C0E0         PUSH      A
   \   000093   740F         MOV       A,#0xf
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   D0E0         POP       A
   \   00009A   F0           MOVX      @DPTR,A
   2079            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV       A,R2
   \   00009C   2412         ADD       A,#0x12
   \   00009E   F582         MOV       DPL,A
   \   0000A0   E4           CLR       A
   \   0000A1   3B           ADDC      A,R3
   \   0000A2   F583         MOV       DPH,A
   \   0000A4   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   0000A7   7411         MOV       A,#0x11
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL     ?Subroutine32 & 0xFFFF
   2080            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_45:
   \   0000AF   EA           MOV       A,R2
   \   0000B0   2424         ADD       A,#0x24
   \   0000B2   F582         MOV       DPL,A
   \   0000B4   E4           CLR       A
   \   0000B5   3B           ADDC      A,R3
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   0000BB   7415         MOV       A,#0x15
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine32 & 0xFFFF
   2081          
   2082            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_46:
   \   0000C3                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C3   AA..         MOV       R2,?XSP + 0
   \   0000C5   AB..         MOV       R3,?XSP + 1
   \   0000C7   12....       LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000CA   E9           MOV       A,R1
   \   0000CB   FC           MOV       R4,A
   \   0000CC   8001         SJMP      ??ZDP_IncomingData_0
   2083          
   2084          #if (defined MT_ZDO_CB_FUNC)
   2085          #if !defined MT_TASK
   2086            if (zgZdoDirectCB)
   2087          #endif
   2088            {
   2089              MT_ZdoDirectCB( pData, &inMsg );
   2090            }
   2091          #endif
   2092          
   2093            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   2094            {
   2095              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   2096              {
   2097                zdpMsgProcs[x].pFn( &inMsg );
   2098                return;
   2099              }
   2100              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000CE   0E           INC       R6
   \                     ??ZDP_IncomingData_0:
   \   0000CF   EE           MOV       A,R6
   \   0000D0   F5..         MOV       ?V0,A
   \   0000D2   75..00       MOV       ?V1,#0x0
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   78..         MOV       R0,#?V0
   \   0000D9   12....       LCALL     ?S_SHL
   \   0000DC   74..         MOV       A,#zdpMsgProcs & 0xff
   \   0000DE   25..         ADD       A,?V0
   \   0000E0   F8           MOV       R0,A
   \   0000E1   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E3   35..         ADDC      A,?V1
   \   0000E5   F9           MOV       R1,A
   \   0000E6   8882         MOV       DPL,R0
   \   0000E8   F583         MOV       DPH,A
   \   0000EA   E4           CLR       A
   \   0000EB   93           MOVC      A,@A+DPTR
   \   0000EC   C0E0         PUSH      A
   \   0000EE   7401         MOV       A,#0x1
   \   0000F0   93           MOVC      A,@A+DPTR
   \   0000F1   F583         MOV       DPH,A
   \   0000F3   D082         POP       DPL
   \   0000F5   AA82         MOV       R2,DPL
   \   0000F7   AB83         MOV       R3,DPH
   \   0000F9   74FF         MOV       A,#-0x1
   \   0000FB   6A           XRL       A,R2
   \   0000FC   7003         JNZ       ??ZDP_IncomingData_2
   \   0000FE   74FF         MOV       A,#-0x1
   \   000100   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_2:
   \   000101   6028         JZ        ??ZDP_IncomingData_3
   \   000103   740C         MOV       A,#0xc
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   6A           XRL       A,R2
   \   00010A   7003         JNZ       ??ZDP_IncomingData_4
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_4:
   \   00010F   70BD         JNZ       ??ZDP_IncomingData_1
   \   000111                ; Setup parameters for indirect call
   \   000111   AA..         MOV       R2,?XSP + 0
   \   000113   AB..         MOV       R3,?XSP + 1
   \   000115   8882         MOV       DPL,R0
   \   000117   8983         MOV       DPH,R1
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   E4           CLR       A
   \   00011C   93           MOVC      A,@A+DPTR
   \   00011D   C0E0         PUSH      A
   \   00011F   7401         MOV       A,#0x1
   \   000121   93           MOVC      A,@A+DPTR
   \   000122   F583         MOV       DPH,A
   \   000124   D082         POP       DPL
   \   000126   12....       LCALL     ?CALL_IND
   \   000129   800A         SJMP      ??ZDP_IncomingData_5
   2101            }
   2102          
   2103            // Handle unhandled messages
   2104            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00012B   EC           MOV       A,R4
   \   00012C   7007         JNZ       ??ZDP_IncomingData_5
   2105              ZDApp_InMsgCB( &inMsg );
   \   00012E                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00012E   AA..         MOV       R2,?XSP + 0
   \   000130   AB..         MOV       R3,?XSP + 1
   \   000132   12....       LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2106          }
   \                     ??ZDP_IncomingData_5:
   \   000135   7417         MOV       A,#0x17
   \   000137   02....       LJMP      ??Subroutine107_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   2107          
   2108          /*********************************************************************
   2109          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     23   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtBindRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     29   ZDP_MgmtLqiRsp
        0     24   -> fillAndSend
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     30   ZDP_MgmtNwkDiscRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     23   ZDP_MgmtPermitJoinReq
        0     21   -> NLME_GetShortAddr
        0     23   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     31   ZDP_ParentAnnce
        0     22   -> ZDApp_SetParentAnnceTimer
        0     24   -> fillAndSend
        0     26   -> osal_start_timerEx
        0     22   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     22   ZDP_SimpleDescMsg
        0     22   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     65   fillAndSend
        0     35   -> AF_DataRequest
        0     29   -> osal_memcpy
        0     26   -> osal_memset
      1     30   zdpProcessAddrReq
        0     30   -> fillAndSend
        0     28   -> osal_memset
        0     28   -> sAddrExtCmp
        0     28   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       8  ??Subroutine101_0
       3  ??Subroutine102_0
       3  ??Subroutine103_0
       5  ??Subroutine104_0
       5  ??Subroutine105_0
       2  ??Subroutine106_0
       8  ??Subroutine107_0
       5  ??Subroutine108_0
       6  ??Subroutine109_0
       7  ??Subroutine110_0
       6  ??Subroutine111_0
       6  ??Subroutine112_0
       4  ??Subroutine113_0
       7  ??Subroutine114_0
       6  ??Subroutine115_0
       4  ??Subroutine116_0
       9  ??Subroutine117_0
       5  ??Subroutine118_0
       8  ??Subroutine119_0
       4  ??Subroutine120_0
       6  ??Subroutine121_0
       6  ??Subroutine122_0
       1  ??Subroutine123_0
       4  ??Subroutine124_0
       6  ??Subroutine125_0
       1  ??Subroutine126_0
       5  ??Subroutine127_0
       8  ??Subroutine128_0
       5  ??Subroutine129_0
       3  ??Subroutine130_0
       5  ??Subroutine131_0
       6  ??Subroutine132_0
       3  ?Subroutine0
      10  ?Subroutine1
      30  ?Subroutine10
      11  ?Subroutine100
      12  ?Subroutine11
       7  ?Subroutine12
      22  ?Subroutine13
       9  ?Subroutine14
       5  ?Subroutine15
      12  ?Subroutine16
       5  ?Subroutine17
       4  ?Subroutine18
       6  ?Subroutine19
      11  ?Subroutine2
       7  ?Subroutine20
       6  ?Subroutine21
      19  ?Subroutine22
      11  ?Subroutine23
       3  ?Subroutine24
       2  ?Subroutine25
       6  ?Subroutine26
       5  ?Subroutine27
       7  ?Subroutine28
       2  ?Subroutine29
       8  ?Subroutine3
      10  ?Subroutine30
       9  ?Subroutine31
       6  ?Subroutine32
      10  ?Subroutine33
      10  ?Subroutine34
       5  ?Subroutine35
       9  ?Subroutine36
       4  ?Subroutine37
      10  ?Subroutine38
      15  ?Subroutine39
       2  ?Subroutine4
       7  ?Subroutine40
       2  ?Subroutine41
       3  ?Subroutine42
       6  ?Subroutine43
       9  ?Subroutine44
      22  ?Subroutine45
      13  ?Subroutine46
       8  ?Subroutine47
       6  ?Subroutine48
       8  ?Subroutine49
       3  ?Subroutine5
       4  ?Subroutine50
       4  ?Subroutine51
      14  ?Subroutine52
       3  ?Subroutine53
       7  ?Subroutine54
       3  ?Subroutine55
       5  ?Subroutine56
       8  ?Subroutine57
       2  ?Subroutine58
       1  ?Subroutine59
       5  ?Subroutine6
       5  ?Subroutine60
       4  ?Subroutine61
       5  ?Subroutine62
       5  ?Subroutine63
       9  ?Subroutine64
       3  ?Subroutine65
       4  ?Subroutine66
       5  ?Subroutine67
       3  ?Subroutine68
       6  ?Subroutine69
       5  ?Subroutine7
       2  ?Subroutine70
       8  ?Subroutine71
      11  ?Subroutine72
       4  ?Subroutine73
      12  ?Subroutine74
       8  ?Subroutine75
      10  ?Subroutine76
       9  ?Subroutine77
      13  ?Subroutine78
      11  ?Subroutine79
       8  ?Subroutine8
       6  ?Subroutine80
      11  ?Subroutine81
       7  ?Subroutine82
       4  ?Subroutine83
       4  ?Subroutine84
       9  ?Subroutine85
       9  ?Subroutine86
       6  ?Subroutine87
      16  ?Subroutine88
      11  ?Subroutine89
      10  ?Subroutine9
       2  ?Subroutine90
       9  ?Subroutine91
       6  ?Subroutine92
       9  ?Subroutine93
       9  ?Subroutine94
       8  ?Subroutine95
       9  ?Subroutine96
      14  ?Subroutine97
       9  ?Subroutine98
       8  ?Subroutine99
     141  ZDO_RegisterForZDOMsg
     106  ZDO_RemoveRegisteredCB
     259  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     180  ZDP_BindUnbindReq
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
     160  ZDP_EPRsp
     299  ZDP_EndDeviceBindReq
      85  ZDP_GenericRsp
      67  ZDP_IEEEAddrReq
     314  ZDP_IncomingData
     227  ZDP_MatchDescReq
     265  ZDP_MgmtBindRsp
      29  ZDP_MgmtDirectJoinReq
      54  ZDP_MgmtLeaveReq
     376  ZDP_MgmtLqiRsp
      54  ZDP_MgmtNwkDiscReq
     349  ZDP_MgmtNwkDiscRsp
     204  ZDP_MgmtNwkUpdateNotify
     118  ZDP_MgmtNwkUpdateReq
     153  ZDP_MgmtPermitJoinReq
     297  ZDP_MgmtRtgRsp
      25  ZDP_NWKAddrOfInterestReq
     219  ZDP_NodeDescMsg
     103  ZDP_NwkAddrReq
     271  ZDP_ParentAnnce
      85  ZDP_PowerDescMsg
     110  ZDP_SendData
      75  ZDP_ServerDiscReq
      95  ZDP_ServerDiscRsp
     431  ZDP_SimpleDescMsg
      27  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     155  ZDP_UserDescRsp
     117  ZDP_UserDescSet
       4  __Constant_a
       1  childIndex
     177  fillAndSend
       2  zdoMsgCBs
      60  zdpMsgProcs
     355  zdpProcessAddrReq
     210  -- Other

 
 7 005 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    61 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
    85 bytes in segment XDATA_Z
 
   273 bytes of CODE     memory
     0 bytes of CONST    memory (+ 4 bytes shared)
 7 005 bytes of HUGECODE memory
    87 bytes of XDATA    memory

Errors: none
Warnings: none
