###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Feb/2022  09:35:04
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f C:\Users\Administrator\AppData\Local\Temp\EW4449.tmp
#        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDObject.c
#        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
#        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
#        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
#        ISR_KEYINTERRUPT -lC
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\ZDObject.lst
#    Object file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj\ZDObject.r51
#
###############################################################################

D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2015-10-01 15:01:50 -0700 (Thu, 01 Oct 2015) $
      4            Revision:       $Revision: 44513 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #include "bdb.h"
     67          
     68          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     69          #include "gp_common.h"
     70          #endif
     71           
     72          #if defined( LCD_SUPPORTED )
     73            #include "OnBoard.h"
     74          #endif
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          
     79          /* User Defined */
     80          #include "AT_printf.h"
     81          #include "AT_uart.h"
     82          
     83          /*********************************************************************
     84           * MACROS
     85           */
     86          
     87          /*********************************************************************
     88           * CONSTANTS
     89           */
     90          // NLME Stub Implementations
     91          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     92          
     93          /*********************************************************************
     94           * TYPEDEFS
     95           */
     96          #if defined ( REFLECTOR )
     97          typedef struct
     98          {
     99            byte SrcTransSeq;
    100            zAddrType_t SrcAddr;
    101            uint16 LocalCoordinator;
    102            byte epIntf;
    103            uint16 ProfileID;
    104            byte numInClusters;
    105            uint16 *inClusters;
    106            byte numOutClusters;
    107            uint16 *outClusters;
    108            byte SecurityUse;
    109            byte status;
    110          } ZDO_EDBind_t;
    111          #endif // defined ( REFLECTOR )
    112          
    113          enum
    114          {
    115            ZDMATCH_INIT,           // Initialized
    116            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    117            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    118          };
    119          
    120          enum
    121          {
    122            ZDMATCH_SENDING_NOT,
    123            ZDMATCH_SENDING_UNBIND,
    124            ZDMATCH_SENDING_BIND
    125          };
    126          
    127          /*********************************************************************
    128           * GLOBAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL VARIABLES
    133           */
    134          
    135          extern bool  requestNewTrustCenterLinkKey;   
    136             
    137          /*********************************************************************
    138           * EXTERNAL FUNCTIONS
    139           */
    140          
    141          /*********************************************************************
    142           * LOCAL VARIABLES
    143           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    145          
    146          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    148          #endif
    149          
    150          #if defined ( MANAGED_SCAN )
    151            uint32 managedScanNextChannel = 0;
    152            uint32 managedScanChannelMask = 0;
    153            uint8  managedScanTimesPerChannel = 0;
    154          #endif
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    161          
    162          /*********************************************************************
    163           * LOCAL FUNCTIONS
    164           */
    165          static void ZDODeviceSetup( void );
    166          #if defined ( MANAGED_SCAN )
    167            static void ZDOManagedScan_Next( void );
    168          #endif
    169          #if defined ( REFLECTOR )
    170            static void ZDO_RemoveEndDeviceBind( void );
    171            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    172          #endif
    173          #if ( ZG_BUILD_COORDINATOR_TYPE )
    174            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    175                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    176            static void ZDO_RemoveMatchMemory( void );
    177            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    178            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    179          #endif
    180          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    181          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    182          
    183          /*********************************************************************
    184           * @fn          ZDO_Init
    185           *
    186           * @brief       ZDObject and ZDProfile initialization.
    187           *
    188           * @param       none
    189           *
    190           * @return      none
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          void ZDO_Init( void )
   \                     ZDO_Init:
    193          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    194            // Initialize ZD items
    195            #if defined ( REFLECTOR )
    196            ZDO_EDBind = NULL;
   \   000004   90....       MOV       DPTR,#ZDO_EDBind
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    197            #endif
    198          
    199            // Initialize default ZDO_UseExtendedPANID to the APS one.
    200            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV       R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV       R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    201          
    202            // Setup the device - type of device to create.
    203            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function APS_ReflectorInit
   \   000016   12....       LCALL     `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
   \   000019                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000019   12....       LCALL     `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    204          }
   \   00001C                REQUIRE ?Subroutine0
   \   00001C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    205          
    206          #if defined ( MANAGED_SCAN )
    207          /*********************************************************************
    208           * @fn      ZDOManagedScan_Next()
    209           *
    210           * @brief   Setup a managed scan.
    211           *
    212           * @param   none
    213           *
    214           * @return  none
    215           */
    216          static void ZDOManagedScan_Next( void )
    217          {
    218            // Is it the first time
    219            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    220            {
    221              // Setup the defaults
    222              managedScanNextChannel  = 1;
    223          
    224              while( managedScanNextChannel && (runtimeChannel & managedScanNextChannel) == 0 )
    225                managedScanNextChannel <<= 1;
    226          
    227              managedScanChannelMask = managedScanNextChannel;
    228              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    229            }
    230            else
    231            {
    232              // Do we need to go to the next channel
    233              if ( managedScanTimesPerChannel == 0 )
    234              {
    235                // Find next active channel
    236                managedScanChannelMask  = managedScanNextChannel;
    237                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    238              }
    239              else
    240              {
    241                managedScanTimesPerChannel--;
    242          
    243                if ( managedScanTimesPerChannel == 0 )
    244                {
    245                  managedScanNextChannel  <<= 1;
    246                  while( managedScanNextChannel && (runtimeChannel & managedScanNextChannel) == 0 )
    247                    managedScanNextChannel <<= 1;
    248          
    249                  if ( managedScanNextChannel == 0 )
    250                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    251                }
    252              }
    253            }
    254          }
    255          #endif // MANAGED_SCAN
    256          
    257          /*********************************************************************
    258           * @fn      ZDODeviceSetup()
    259           *
    260           * @brief   Call set functions depending on the type of device compiled.
    261           *
    262           * @param   none
    263           *
    264           * @return  none
    265           */
    266          static void ZDODeviceSetup( void )
    267          {
    268            if ( ZG_BUILD_COORDINATOR_TYPE )
    269            {
    270              NLME_CoordinatorInit();
    271            }
    272          
    273          #if defined ( REFLECTOR )
    274            APS_ReflectorInit();
    275          #endif
    276          
    277            if ( ZG_BUILD_JOINING_TYPE )
    278            {
    279              NLME_DeviceJoiningInit();
    280            }
    281          }
    282          
    283          
    284          
    285          
    286          /*********************************************************************
    287           * @fn          ZDO_StartDevice
    288           *
    289           * @brief       This function starts a device in a network. Added distributed network for router devices
    290           *
    291           * @param       logicalType     - Device type to start
    292           *              startMode       - indicates mode of device startup
    293           *              beaconOrder     - indicates time betwen beacons
    294           *              superframeOrder - indicates length of active superframe
    295           *              distributed     - indicates if the network will be formed
    296           *
    297           * @return      none
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    300          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   8C..         MOV       ?V0,R4
    301            ZStatus_t ret;
    302          #if defined ( ZIGBEE_FREQ_AGILITY )
    303            static uint8 discRetries = 0;
    304          #endif
    305          #if defined ( ZIGBEE_COMMISSIONING )
    306            static uint8 scanCnt = 0;
    307          #endif
    308          
    309            ret = ZUnsupportedMode;
    310          
    311            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    312            {
    313              if ( startMode == MODE_HARD )
    314              {
    315                ZDApp_ChangeState( DEV_COORD_STARTING );
    316                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, runtimeChannel,
    317                                                    zgDefaultStartingScanDuration, beaconOrder,
    318                                                    superframeOrder, false, false, 0 );
    319              }
    320              else if ( startMode == MODE_RESUME )
    321              {
    322                // Just start the coordinator
    323                ZDApp_ChangeState( DEV_COORD_STARTING );
    324                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    325              }
    326              else
    327              {
    328          #if defined( LCD_SUPPORTED )
    329                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    330          #endif
    331              }
    332            }
    333          
    334            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   000012   7401         MOV       A,#0x1
   \   000014   6E           XRL       A,R6
   \   000015   6008         JZ        ??ZDO_StartDevice_0
   \   000017   7402         MOV       A,#0x2
   \   000019   6E           XRL       A,R6
   \   00001A   6003         JZ        $+5
   \   00001C   02....       LJMP      ??ZDO_StartDevice_1 & 0xFFFF
    335            {
    336              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001F   EA           MOV       A,R2
   \   000020   6008         JZ        ??ZDO_StartDevice_2
   \   000022   7403         MOV       A,#0x3
   \   000024   6F           XRL       A,R7
   \   000025   6003         JZ        $+5
   \   000027   02....       LJMP      ??ZDO_StartDevice_3 & 0xFFFF
    337              {
    338                if(APSME_IsDistributedSecurity() && (startMode != MODE_REJOIN))
   \                     ??ZDO_StartDevice_2:
   \   00002A                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00002A   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   00002D   E9           MOV       A,R1
   \   00002E   6053         JZ        ??ZDO_StartDevice_4
   \   000030   7403         MOV       A,#0x3
   \   000032   6F           XRL       A,R7
   \   000033   604E         JZ        ??ZDO_StartDevice_4
    339                {
    340                        ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, runtimeChannel,
    341                                                    zgDefaultStartingScanDuration, beaconOrder,
    342                                                    superframeOrder, false, true, osal_rand() );
   \   000035                ; Setup parameters for call to function osal_rand
   \   000035   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000038   8A..         MOV       ?V2,R2
   \   00003A   8B..         MOV       ?V3,R3
   \   00003C                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   00003C   78..         MOV       R0,#?V2
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..01       MOV       ?V2,#0x1
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV       ?V2,#0x0
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000051   E5..         MOV       A,?V0
   \   000053   F5..         MOV       ?V2,A
   \   000055   78..         MOV       R0,#?V2
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005A   E5..         MOV       A,?V1
   \   00005C   F5..         MOV       ?V2,A
   \   00005E   78..         MOV       R0,#?V2
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   90....       MOV       DPTR,#runtimeChannel
   \   000066   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000069   90....       MOV       DPTR,#bdbAttributes + 13
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   7C..         MOV       R4,#zgApsUseExtendedPANID & 0xff
   \   000070   7D..         MOV       R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   000072   90....       MOV       DPTR,#zgConfigPANID
   \   000075   12....       LCALL     ??Subroutine153_0 & 0xFFFF
    343                  
    344                }
   \                     ??CrossCallReturnLabel_270:
   \   000078   12....       LCALL     `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
   \   00007B   740A         MOV       A,#0xa
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   02....       LJMP      ??ZDO_StartDevice_5 & 0xFFFF
    345                else
    346                {
    347                  ZDApp_ChangeState( DEV_NWK_DISC );
   \                     ??ZDO_StartDevice_4:
   \   000083                ; Setup parameters for call to function ZDApp_ChangeState
   \   000083   7902         MOV       R1,#0x2
   \   000085   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    348          
    349                #if defined( MANAGED_SCAN )
    350                  ZDOManagedScan_Next();
    351                  ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    352                #else
    353                  ret = NLME_NetworkDiscoveryRequest( runtimeChannel, zgDefaultStartingScanDuration );
   \   000088                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000088   90....       MOV       DPTR,#bdbAttributes + 13
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F9           MOV       R1,A
   \   00008D   90....       MOV       DPTR,#runtimeChannel
   \   000090   12....       LCALL     ?XLOAD_R2345
   \   000093   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000096   E9           MOV       A,R1
   \   000097   F8           MOV       R0,A
    354                  #if defined ( ZIGBEE_FREQ_AGILITY )
    355                  if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    356                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   000098   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   A2E3         MOV       C,0xE0 /* A   */.3
   \   00009E   4010         JC        ??CrossCallReturnLabel_19
   \   0000A0   E9           MOV       A,R1
   \   0000A1   700D         JNZ       ??CrossCallReturnLabel_19
   \   0000A3   90....       MOV       DPTR,#??discRetries
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   04           INC       A
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   6404         XRL       A,#0x4
   \   0000AB   7003         JNZ       ??CrossCallReturnLabel_19
    357                  {
    358                    // For devices with RxOnWhenIdle equals to FALSE, any network channel
    359                    // change will not be recieved. On these devices or routers that have
    360                    // lost the network, an active scan shall be conducted on the Default
    361                    // Channel list using the extended PANID to find the network. If the
    362                    // extended PANID isn't found using the Default Channel list, an scan
    363                    // should be completed using all channels.
    364                    runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0000AD   12....       LCALL     ?Subroutine16 & 0xFFFF
    365                  }
    366                  #endif // ZIGBEE_FREQ_AGILITY
    367                  #if defined ( ZIGBEE_COMMISSIONING )
    368                  if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \                     ??CrossCallReturnLabel_19:
   \   0000B0   7403         MOV       A,#0x3
   \   0000B2   6F           XRL       A,R7
   \   0000B3   7079         JNZ       ??ZDO_StartDevice_6
   \   0000B5   90....       MOV       DPTR,#??scanCnt
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F9           MOV       R1,A
   \   0000BA   7401         MOV       A,#0x1
   \   0000BC   29           ADD       A,R1
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   E9           MOV       A,R1
   \   0000BF   C3           CLR       C
   \   0000C0   9405         SUBB      A,#0x5
   \   0000C2   406A         JC        ??ZDO_StartDevice_6
    369                  {
    370                    // When ApsUseExtendedPanID is commissioned to a non zero value via
    371                    // application specific means, the device shall conduct an active scan
    372                    // on the Default Channel list and join the PAN with the same
    373                    // ExtendedPanID. If the PAN is not found, an scan should be completed
    374                    // on all channels.
    375                    // When devices rejoin the network and the PAN is not found from
    376                    runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0000C4   12....       LCALL     ?Subroutine16 & 0xFFFF
    377                  }
    378                  #endif // ZIGBEE_COMMISSIONING
    379                #endif
    380                }
    381              }
   \                     ??CrossCallReturnLabel_20:
   \   0000C7   8065         SJMP      ??ZDO_StartDevice_6
    382              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   0000C9   7401         MOV       A,#0x1
   \   0000CB   6F           XRL       A,R7
   \   0000CC   7063         JNZ       ??ZDO_StartDevice_1
    383              {
    384                if ( logicalType == NODETYPE_ROUTER )
   \   0000CE   7401         MOV       A,#0x1
   \   0000D0   6E           XRL       A,R6
   \   0000D1   790A         MOV       R1,#0xa
   \   0000D3   702F         JNZ       ??ZDO_StartDevice_7
    385                {
    386                  uint16 panID;
    387                  
    388                  ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \   0000D5                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000D5   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    389                  
    390                  // Stop the rejoin timeout
    391                  osal_stop_timerEx( NWK_TaskID, NWK_REJOIN_TIMEOUT_EVT );
   \   0000D8                ; Setup parameters for call to function osal_stop_timerEx
   \   0000D8   7A00         MOV       R2,#0x0
   \   0000DA   7B04         MOV       R3,#0x4
   \   0000DC   90....       MOV       DPTR,#NWK_TaskID
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F9           MOV       R1,A
   \   0000E1   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    392                  ZMacGetReq( ZMacPanId, (uint8 *)&( panID ) );
   \   0000E4                ; Setup parameters for call to function ZMacGetReq
   \   0000E4   AA..         MOV       R2,?XSP + 0
   \   0000E6   AB..         MOV       R3,?XSP + 1
   \   0000E8   7950         MOV       R1,#0x50
   \   0000EA   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    393                  
    394                  _NIB.nwkPanId = panID;
   \   0000ED   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   0000F0   90....       MOV       DPTR,#_NIB + 33
   \   0000F3   E8           MOV       A,R0
   \   0000F4   12....       LCALL     ??Subroutine181_0 & 0xFFFF
    395                  NLME_JoinConfirm(  _NIB.nwkPanId, ZSuccess );
   \                     ??CrossCallReturnLabel_437:
   \   0000F7                ; Setup parameters for call to function NLME_JoinConfirm
   \   0000F7   7900         MOV       R1,#0x0
   \   0000F9   90....       MOV       DPTR,#_NIB + 33
   \   0000FC   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   0000FF   12....       LCALL     `??NLME_JoinConfirm::?relay`; Banked call to: NLME_JoinConfirm
    396          
    397                  ret = ZSuccess;
   \   000102   8044         SJMP      ??ZDO_StartDevice_8
    398                }
    399                else
    400                {
    401                  ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \                     ??ZDO_StartDevice_7:
   \   000104                ; Setup parameters for call to function ZDApp_ChangeState
   \   000104   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    402                  //set timer for scan and rejoin
    403                  osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   000107                ; Setup parameters for call to function osal_start_timerEx
   \   000107   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   00010A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00010D   7A00         MOV       R2,#0x0
   \   00010F   7B20         MOV       R3,#0x20
   \   000111   90....       MOV       DPTR,#ZDAppTaskID
   \   000114   E0           MOVX      A,@DPTR
   \   000115   F9           MOV       R1,A
   \   000116   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000119   7404         MOV       A,#0x4
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
    404                  ret = NLME_OrphanJoinRequest( runtimeChannel,
    405                                                zgDefaultStartingScanDuration );
   \   00011E                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   00011E   90....       MOV       DPTR,#bdbAttributes + 13
   \   000121   E0           MOVX      A,@DPTR
   \   000122   F9           MOV       R1,A
   \   000123   90....       MOV       DPTR,#runtimeChannel
   \   000126   12....       LCALL     ?XLOAD_R2345
   \   000129   12....       LCALL     `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \                     ??ZDO_StartDevice_5:
   \   00012C   E9           MOV       A,R1
   \   00012D   F8           MOV       R0,A
    406                }
    407              }
    408              else
    409              {
    410          #if defined( LCD_SUPPORTED )
    411                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    412          #endif
    413              }
    414            }
    415          
    416            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_6:
   \   00012E   E8           MOV       A,R0
   \   00012F   6017         JZ        ??ZDO_StartDevice_8
    417            {
    418              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   000131                ; Setup parameters for call to function osal_start_timerEx
   \   000131   90....       MOV       DPTR,#__Constant_3e8
   \   000134   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000137   7A01         MOV       R2,#0x1
   \   000139   7B00         MOV       R3,#0x0
   \   00013B   90....       MOV       DPTR,#ZDAppTaskID
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   F9           MOV       R1,A
   \   000140   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000143   7404         MOV       A,#0x4
   \   000145   12....       LCALL     ?DEALLOC_XSTACK8
    419            }
    420          }
   \                     ??ZDO_StartDevice_8:
   \   000148   7402         MOV       A,#0x2
   \   00014A   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV       DPTR,#runtimeChannel
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   74F8         MOV       A,#-0x8
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74FF         MOV       A,#-0x1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   7407         MOV       A,#0x7
   \   000010   F0           MOVX      @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000003   FB           MOV       R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine154_0
   \   000006                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine163_0
   \   000003                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    421          
    422          /**************************************************************************************************
    423           * @fn          zdoSendStateChangeMsg
    424           *
    425           * @brief       Helper function for ZDO_UpdateNwkStatus.
    426           *
    427           * input parameters
    428           *
    429           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    430           * @param       state - The current device state.
    431           *
    432           * output parameters
    433           *
    434           * None.
    435           *
    436           * @return      None.
    437           **************************************************************************************************
    438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    440          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
    441            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   000009                ; Setup parameters for call to function osal_msg_find
   \   000009   7AD1         MOV       R2,#-0x2f
   \   00000B   F9           MOV       R1,A
   \   00000C   12....       LCALL     `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
    442          
    443            if (NULL == pMsg)
   \   000013   E582         MOV       A,DPL
   \   000015   4583         ORL       A,DPH
   \   000017   702A         JNZ       ??zdoSendStateChangeMsg_0
    444            {
    445              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A02         MOV       R2,#0x2
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   700E         JNZ       ??zdoSendStateChangeMsg_1
    446              {
    447                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    448                // try again later when more Heap may be available.
    449                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV       R2,#0x10
   \   000026   7B00         MOV       R3,#0x0
   \   000028   90....       MOV       DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000030   8014         SJMP      ??zdoSendStateChangeMsg_2
    450              }
    451              else
    452              {
    453                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   74D1         MOV       A,#-0x2f
   \   000038   F0           MOVX      @DPTR,A
    454                pMsg->status = state;
   \   000039   EF           MOV       A,R7
   \   00003A   A3           INC       DPTR
   \   00003B   F0           MOVX      @DPTR,A
    455          
    456                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   EE           MOV       A,R6
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000041   8003         SJMP      ??zdoSendStateChangeMsg_2
    457              }
    458            }
    459            else
    460            {
    461              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    462              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000043   EF           MOV       A,R7
   \   000044   A3           INC       DPTR
   \   000045   F0           MOVX      @DPTR,A
    463            }
    464          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000046   02....       LJMP      ??Subroutine142_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    465          
    466          /**************************************************************************************************
    467           * @fn          ZDO_UpdateNwkStatus
    468           *
    469           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    470           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    471           *              than one registered EndPoint, it will only receive one notification per state
    472           *              change. Although the device may go through a sequence of state changes, the
    473           *              Application task may only receive notification of the final, steady-state state
    474           *              because it has the lowest priority and never even runs to receive the intermediate
    475           *              state change notifications.
    476           *
    477           * input parameters
    478           *
    479           * @param       state - The current device state.
    480           *
    481           * output parameters
    482           *
    483           * None.
    484           *
    485           * @return      None.
    486           **************************************************************************************************
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    489          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    490            epList_t *pItem = epList;
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00000D   801F         SJMP      ??ZDO_UpdateNwkStatus_0
    491          
    492          #if defined MT_ZDO_CB_FUNC
    493            if ( zdpExternalStateTaskID == -1 )
    494            {
    495              zdpExternalStateTaskID = MT_TaskID;
    496            }
    497          #endif
    498          
    499            while (pItem != NULL)
    500            {
    501              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00000F   8E82         MOV       DPL,R6
   \   000011   8F83         MOV       DPH,R7
   \   000013   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000016   E0           MOVX      A,@DPTR
   \   000017   600B         JZ        ??ZDO_UpdateNwkStatus_2
    502              {
    503                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000019                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   12....       LCALL     ??Subroutine155_0 & 0xFFFF
    504              }
   \                     ??CrossCallReturnLabel_291:
   \   00001E   FA           MOV       R2,A
   \   00001F   A9..         MOV       R1,?V0
   \   000021   12....       LCALL     `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    505          
    506              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   12....       LCALL     ??Subroutine154_0 & 0xFFFF
    507            }
   \                     ??CrossCallReturnLabel_281:
   \   00002B   E8           MOV       A,R0
   \   00002C   FE           MOV       R6,A
   \   00002D   E9           MOV       A,R1
   \                     ??ZDO_UpdateNwkStatus_0:
   \   00002E   FF           MOV       R7,A
   \   00002F   EE           MOV       A,R6
   \   000030   4F           ORL       A,R7
   \   000031   70DC         JNZ       ??ZDO_UpdateNwkStatus_1
    508          
    509            if ( zdpExternalStateTaskID != -1 )
   \   000033   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F4           CPL       A
   \   000038   7003         JNZ       ??ZDO_UpdateNwkStatus_3
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F4           CPL       A
   \                     ??ZDO_UpdateNwkStatus_3:
   \   00003D   600A         JZ        ??ZDO_UpdateNwkStatus_4
    510            {
    511              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   00003F                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   00003F   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FA           MOV       R2,A
   \   000044   A9..         MOV       R1,?V0
   \   000046   12....       LCALL     `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    512            }
    513          
    514            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000049                ; Setup parameters for call to function NLME_GetShortAddr
   \   000049   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00004C   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00004F   12....       LCALL     ??Subroutine147_0 & 0xFFFF
    515            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_246:
   \   000052                ; Setup parameters for call to function NLME_GetExtAddr
   \   000052   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    516          }
   \   000055                REQUIRE ?Subroutine3
   \   000055                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine148_0
   \   000001                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    517          
    518          #if defined ( REFLECTOR )
    519          /*********************************************************************
    520           * @fn          ZDO_RemoveEndDeviceBind
    521           *
    522           * @brief       Remove the end device bind
    523           *
    524           * @param  none
    525           *
    526           * @return      none
    527           */
    528          static void ZDO_RemoveEndDeviceBind( void )
    529          {
    530            if ( ZDO_EDBind != NULL )
    531            {
    532              // Free the RAM
    533              if ( ZDO_EDBind->inClusters != NULL )
    534              {
    535                osal_mem_free( ZDO_EDBind->inClusters );
    536              }
    537              if ( ZDO_EDBind->outClusters != NULL )
    538              {
    539                osal_mem_free( ZDO_EDBind->outClusters );
    540              }
    541              osal_mem_free( ZDO_EDBind );
    542              ZDO_EDBind = NULL;
    543            }
    544          }
    545          #endif // REFLECTOR
    546          
    547          #if defined ( REFLECTOR )
    548          /*********************************************************************
    549           * @fn          ZDO_SendEDBindRsp
    550           *
    551           * @brief       Send the end device bind response
    552           *
    553           * @param  none
    554           *
    555           * @return      none
    556           */
    557          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    558          {
    559            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    560          
    561          #if defined( LCD_SUPPORTED )
    562            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    563            if ( Status == ZDP_SUCCESS )
    564            {
    565              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    566            }
    567            else
    568            {
    569              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    570            }
    571          #endif
    572          
    573          }
    574          #endif // REFLECTOR
    575          
    576          #if ( ZG_BUILD_COORDINATOR_TYPE )
    577          /*********************************************************************
    578           * @fn          ZDO_CompareClusterLists
    579           *
    580           * @brief       Compare one list to another list
    581           *
    582           * @param       numList1 - number of items in list 1
    583           * @param       list1 - first list of cluster IDs
    584           * @param       numList2 - number of items in list 2
    585           * @param       list2 - second list of cluster IDs
    586           * @param       pMatches - buffer to put matches
    587           *
    588           * @return      number of matches
    589           */
    590          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    591                                    byte numList2, uint16 *list2, uint16 *pMatches )
    592          {
    593            byte x, y;
    594            uint16 z;
    595            byte numMatches = 0;
    596          
    597            // Check the first in against the seconds out
    598            for ( x = 0; x < numList1; x++ )
    599            {
    600              for ( y = 0; y < numList2; y++ )
    601              {
    602                z = list2[y];
    603                if ( list1[x] == z )
    604                {
    605                  pMatches[numMatches++] = z;
    606                }
    607              }
    608            }
    609          
    610            return ( numMatches );
    611          }
    612          #endif // ZG_BUILD_COORDINATOR_TYPE
    613          
    614          /*********************************************************************
    615           * Utility functions
    616           */
    617          
    618          /*********************************************************************
    619           * @fn          ZDO_CompareByteLists
    620           *
    621           * @brief       Compares two lists for matches.
    622           *
    623           * @param       ACnt  - number of entries in list A
    624           * @param       AList  - List A
    625           * @param       BCnt  - number of entries in list B
    626           * @param       BList  - List B
    627           *
    628           * @return      true if a match is found
    629           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    630          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    631          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
    632            byte x, y;
    633          
    634            for ( x = 0; x < ACnt; x++ )
   \   000007   7D00         MOV       R5,#0x0
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000011   8001         SJMP      ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000013   0D           INC       R5
   \                     ??ZDO_AnyClusterMatches_0:
   \   000014   ED           MOV       A,R5
   \   000015   C3           CLR       C
   \   000016   95..         SUBB      A,?V3
   \   000018   503B         JNC       ??ZDO_AnyClusterMatches_2
    635            {
    636              for ( y = 0; y < BCnt; y++ )
   \   00001A   75..00       MOV       ?V2,#0x0
   \   00001D   8002         SJMP      ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   00001F   05..         INC       ?V2
   \                     ??ZDO_AnyClusterMatches_3:
   \   000021   E5..         MOV       A,?V2
   \   000023   C3           CLR       C
   \   000024   9C           SUBB      A,R4
   \   000025   50EC         JNC       ??ZDO_AnyClusterMatches_1
    637              {
    638                if ( AList[x] == BList[y] )
   \   000027   ED           MOV       A,R5
   \   000028   25E0         ADD       A,0xE0 /* A   */
   \   00002A   FE           MOV       R6,A
   \   00002B   E4           CLR       A
   \   00002C   33           RLC       A
   \   00002D   FF           MOV       R7,A
   \   00002E   EA           MOV       A,R2
   \   00002F   2E           ADD       A,R6
   \   000030   F582         MOV       DPL,A
   \   000032   EB           MOV       A,R3
   \   000033   3F           ADDC      A,R7
   \   000034   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000037   AE..         MOV       R6,?V2
   \   000039   EE           MOV       A,R6
   \   00003A   2E           ADD       A,R6
   \   00003B   FE           MOV       R6,A
   \   00003C   E4           CLR       A
   \   00003D   33           RLC       A
   \   00003E   FF           MOV       R7,A
   \   00003F   E8           MOV       A,R0
   \   000040   2E           ADD       A,R6
   \   000041   F582         MOV       DPL,A
   \   000043   E9           MOV       A,R1
   \   000044   12....       LCALL     ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000047   65..         XRL       A,?V0
   \   000049   7004         JNZ       ??ZDO_AnyClusterMatches_5
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   65..         XRL       A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   00004F   70CE         JNZ       ??ZDO_AnyClusterMatches_4
    639                {
    640                  return true;
   \   000051   7901         MOV       R1,#0x1
   \   000053   8002         SJMP      ??ZDO_AnyClusterMatches_6
    641                }
    642              }
    643            }
    644          
    645            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000055   7900         MOV       R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000057   02....       LJMP      ?Subroutine4 & 0xFFFF
    646          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   3F           ADDC      A,R7
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
    647          
    648          /*********************************************************************
    649           * Callback functions from ZDProfile
    650           */
    651          
    652          
    653          /*********************************************************************
    654           * @fn          ZDO_ProcessNodeDescRsp
    655           *
    656           * @brief       This function processes the Node_Desc_rsp and request
    657           *              Update the TC Link key if the TC supports it.
    658           *
    659           * @param       inMsg - incoming message
    660           *
    661           * @return      none
    662           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    663          void ZDO_ProcessNodeDescRsp ( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescRsp:
    664          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    665            if (!notdoNODEDESEcmd) {
   \   00000A   90....       MOV       DPTR,#notdoNODEDESEcmd
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6003         JZ        $+5
   \   000010   02....       LJMP      ??ZDO_ProcessNodeDescRsp_0 & 0xFFFF
    666            	ZDO_NodeDescRsp_t Rsp;
    667            	ZDO_ParseNodeDescRsp( inMsg, &Rsp );
   \   000013                ; Setup parameters for call to function ZDO_ParseNodeDescRsp
   \   000013   AC..         MOV       R4,?XSP + 0
   \   000015   AD..         MOV       R5,?XSP + 1
   \   000017   12....       LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
    668          
    669            	printf("\r\nNodeDesc:%04X,%02X", Rsp.nwkAddr, Rsp.status);
   \   00001A                ; Setup parameters for call to function printf
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V0,A
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7403         MOV       A,#0x3
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000033   7A..         MOV       R2,#`?<Constant "\\r\\nNodeDesc:%04X,%02X">` & 0xff
   \   000035   7B..         MOV       R3,#(`?<Constant "\\r\\nNodeDesc:%04X,%02X">` >> 8) & 0xff
   \   000037   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
    670            	if (Rsp.status == ZDP_SUCCESS) {
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6003         JZ        $+5
   \   000048   02....       LJMP      ??ZDO_ProcessNodeDescRsp_1 & 0xFFFF
    671              	printf("\r\nType:%s", NODETYPE_COORDINATOR==Rsp.nodeDesc.LogicalType ? "COOR" :
    672                      	NODETYPE_ROUTER==Rsp.nodeDesc.LogicalType ? "ROUTER" : "ENDDEV");
   \   00004B   7403         MOV       A,#0x3
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   E0           MOVX      A,@DPTR
   \   000051   5407         ANL       A,#0x7
   \   000053   F8           MOV       R0,A
   \   000054   7008         JNZ       ??ZDO_ProcessNodeDescRsp_2
   \   000056   75....       MOV       ?V0,#`?<Constant "COOR">` & 0xff
   \   000059   75....       MOV       ?V1,#(`?<Constant "COOR">` >> 8) & 0xff
   \   00005C   8013         SJMP      ??ZDO_ProcessNodeDescRsp_3
   \                     ??ZDO_ProcessNodeDescRsp_2:
   \   00005E   7401         MOV       A,#0x1
   \   000060   68           XRL       A,R0
   \   000061   7008         JNZ       ??ZDO_ProcessNodeDescRsp_4
   \   000063   75....       MOV       ?V0,#`?<Constant "ROUTER">` & 0xff
   \   000066   75....       MOV       ?V1,#(`?<Constant "ROUTER">` >> 8) & 0xff
   \   000069   8006         SJMP      ??ZDO_ProcessNodeDescRsp_3
   \                     ??ZDO_ProcessNodeDescRsp_4:
   \   00006B   75....       MOV       ?V0,#`?<Constant "ENDDEV">` & 0xff
   \   00006E   75....       MOV       ?V1,#(`?<Constant "ENDDEV">` >> 8) & 0xff
   \                     ??ZDO_ProcessNodeDescRsp_3:
   \   000071                ; Setup parameters for call to function printf
   \   000071   78..         MOV       R0,#?V0
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000076   7A..         MOV       R2,#`?<Constant "\\r\\nType:%s">` & 0xff
   \   000078   7B..         MOV       R3,#(`?<Constant "\\r\\nType:%s">` >> 8) & 0xff
   \   00007A   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
    673              	printf("\r\nComplexDesc:%s", Rsp.nodeDesc.ComplexDescAvail ? "Yes" : "No");
   \   000080   7403         MOV       A,#0x3
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   A2E3         MOV       C,0xE0 /* A   */.3
   \   000088   5008         JNC       ??ZDO_ProcessNodeDescRsp_5
   \   00008A   75....       MOV       ?V0,#`?<Constant "Yes">` & 0xff
   \   00008D   75....       MOV       ?V1,#(`?<Constant "Yes">` >> 8) & 0xff
   \   000090   8006         SJMP      ??ZDO_ProcessNodeDescRsp_6
   \                     ??ZDO_ProcessNodeDescRsp_5:
   \   000092   75....       MOV       ?V0,#`?<Constant "No">` & 0xff
   \   000095   75....       MOV       ?V1,#(`?<Constant "No">` >> 8) & 0xff
   \                     ??ZDO_ProcessNodeDescRsp_6:
   \   000098                ; Setup parameters for call to function printf
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   7A..         MOV       R2,#`?<Constant "\\r\\nComplexDesc:%s">` & 0xff
   \   00009F   7B..         MOV       R3,#(`?<Constant "\\r\\nComplexDesc:%s">` >> 8) & 0xff
   \   0000A1   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
    674              	printf("\r\nUserDesc:%s", Rsp.nodeDesc.UserDescAvail ? "Yes" : "No");
   \   0000A7   7403         MOV       A,#0x3
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   A2E4         MOV       C,0xE0 /* A   */.4
   \   0000AF   5008         JNC       ??ZDO_ProcessNodeDescRsp_7
   \   0000B1   75....       MOV       ?V0,#`?<Constant "Yes">` & 0xff
   \   0000B4   75....       MOV       ?V1,#(`?<Constant "Yes">` >> 8) & 0xff
   \   0000B7   8006         SJMP      ??ZDO_ProcessNodeDescRsp_8
   \                     ??ZDO_ProcessNodeDescRsp_7:
   \   0000B9   75....       MOV       ?V0,#`?<Constant "No">` & 0xff
   \   0000BC   75....       MOV       ?V1,#(`?<Constant "No">` >> 8) & 0xff
   \                     ??ZDO_ProcessNodeDescRsp_8:
   \   0000BF                ; Setup parameters for call to function printf
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C4   7A..         MOV       R2,#`?<Constant "\\r\\nUserDesc:%s">` & 0xff
   \   0000C6   7B..         MOV       R3,#(`?<Constant "\\r\\nUserDesc:%s">` >> 8) & 0xff
   \   0000C8   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
    675              	printf("\r\nAPSFlags:%02X", Rsp.nodeDesc.APSFlags);
   \   0000CE                ; Setup parameters for call to function printf
   \   0000CE   7404         MOV       A,#0x4
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   5407         ANL       A,#0x7
   \   0000D6   F5..         MOV       ?V0,A
   \   0000D8   75..00       MOV       ?V1,#0x0
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   7A..         MOV       R2,#`?<Constant "\\r\\nAPSFlags:%02X">` & 0xff
   \   0000E2   7B..         MOV       R3,#(`?<Constant "\\r\\nAPSFlags:%02X">` >> 8) & 0xff
   \   0000E4   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000E7   12....       LCALL     ?DEALLOC_XSTACK8
    676             	 	printf("\r\nFreqBand:%02X", Rsp.nodeDesc.FrequencyBand);
   \   0000EA                ; Setup parameters for call to function printf
   \   0000EA   7404         MOV       A,#0x4
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   13           RRC       A
   \   0000F1   13           RRC       A
   \   0000F2   13           RRC       A
   \   0000F3   541F         ANL       A,#0x1f
   \   0000F5   F5..         MOV       ?V0,A
   \   0000F7   78..         MOV       R0,#?V0
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FC   7A..         MOV       R2,#`?<Constant "\\r\\nFreqBand:%02X">` & 0xff
   \   0000FE   7B..         MOV       R3,#(`?<Constant "\\r\\nFreqBand:%02X">` >> 8) & 0xff
   \   000100   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
    677              	printf("\r\nMacCap:%02x", Rsp.nodeDesc.CapabilityFlags);
   \   000106                ; Setup parameters for call to function printf
   \   000106   7405         MOV       A,#0x5
   \   000108   12....       LCALL     ?XSTACK_DISP0_8
   \   00010B   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000111   7A..         MOV       R2,#`?<Constant "\\r\\nMacCap:%02x">` & 0xff
   \   000113   7B..         MOV       R3,#(`?<Constant "\\r\\nMacCap:%02x">` >> 8) & 0xff
   \   000115   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
    678              	printf("\r\nManufCode:%04X", *(uint16*)Rsp.nodeDesc.ManufacturerCode);
   \   00011B                ; Setup parameters for call to function printf
   \   00011B   7406         MOV       A,#0x6
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000123   7A..         MOV       R2,#`?<Constant "\\r\\nManufCode:%04X">` & 0xff
   \   000125   7B..         MOV       R3,#(`?<Constant "\\r\\nManufCode:%04X">` >> 8) & 0xff
   \   000127   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
    679              	printf("\r\nMaxBufSize:%02X", Rsp.nodeDesc.MaxBufferSize);
   \   00012D                ; Setup parameters for call to function printf
   \   00012D   7408         MOV       A,#0x8
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000138   7A..         MOV       R2,#`?<Constant "\\r\\nMaxBufSize:%02X">` & 0xff
   \   00013A   7B..         MOV       R3,#(`?<Constant "\\r\\nMaxBufSize:%02X">` >> 8) & 0xff
   \   00013C   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00013F   12....       LCALL     ?DEALLOC_XSTACK8
    680              	printf("\r\nMaxInSize:%04X", *(uint16*)Rsp.nodeDesc.MaxInTransferSize);
   \   000142                ; Setup parameters for call to function printf
   \   000142   7409         MOV       A,#0x9
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00014A   7A..         MOV       R2,#`?<Constant "\\r\\nMaxInSize:%04X">` & 0xff
   \   00014C   7B..         MOV       R3,#(`?<Constant "\\r\\nMaxInSize:%04X">` >> 8) & 0xff
   \   00014E   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000151   12....       LCALL     ?DEALLOC_XSTACK8
    681              	printf("\r\nSrvMask:%02X", Rsp.nodeDesc.ServerMask);
   \   000154                ; Setup parameters for call to function printf
   \   000154   740B         MOV       A,#0xb
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00015C   7A..         MOV       R2,#`?<Constant "\\r\\nSrvMask:%02X">` & 0xff
   \   00015E   7B..         MOV       R3,#(`?<Constant "\\r\\nSrvMask:%02X">` >> 8) & 0xff
   \   000160   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000163   12....       LCALL     ?DEALLOC_XSTACK8
    682              	printf("\r\nMaxOutSize:%04X", *(uint16*)Rsp.nodeDesc.MaxOutTransferSize);
   \   000166                ; Setup parameters for call to function printf
   \   000166   740D         MOV       A,#0xd
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00016E   7A..         MOV       R2,#`?<Constant "\\r\\nMaxOutSize:%04X">` & 0xff
   \   000170   7B..         MOV       R3,#(`?<Constant "\\r\\nMaxOutSize:%04X">` >> 8) & 0xff
   \   000172   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000175   12....       LCALL     ?DEALLOC_XSTACK8
    683              	printf("\r\nDescCap:%02X", Rsp.nodeDesc.DescriptorCapability);
   \   000178                ; Setup parameters for call to function printf
   \   000178   740F         MOV       A,#0xf
   \   00017A   12....       LCALL     ?XSTACK_DISP0_8
   \   00017D   12....       LCALL     ?Subroutine73 & 0xFFFF
    684            	}
   \                     ??CrossCallReturnLabel_119:
   \   000180   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000183   7A..         MOV       R2,#`?<Constant "\\r\\nDescCap:%02X">` & 0xff
   \   000185   7B..         MOV       R3,#(`?<Constant "\\r\\nDescCap:%02X">` >> 8) & 0xff
   \   000187   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
    685            	printf("\r\n");
   \                     ??ZDO_ProcessNodeDescRsp_1:
   \   00018D                ; Setup parameters for call to function printf
   \   00018D   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00018F   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000191   12....       LCALL     `??printf::?relay`; Banked call to: printf
    686            	notdoNODEDESEcmd = TRUE;
   \   000194   90....       MOV       DPTR,#notdoNODEDESEcmd
   \   000197   7401         MOV       A,#0x1
   \   000199   F0           MOVX      @DPTR,A
    687            }
    688          }
   \                     ??ZDO_ProcessNodeDescRsp_0:
   \   00019A   7410         MOV       A,#0x10
   \   00019C   80..         SJMP      ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine142_0
   \   000003                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET
    689          
    690          
    691          
    692          /*********************************************************************
    693           * @fn          ZDO_ProcessNodeDescReq
    694           *
    695           * @brief       This function processes and responds to the
    696           *              Node_Desc_req message.
    697           *
    698           * @param       inMsg - incoming message
    699           *
    700           * @return      none
    701           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    702          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    703          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine46 & 0xFFFF
    704            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    705            NodeDescriptorFormat_t *desc = NULL;
    706          
    707            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_70:
   \   000008   7003         JNZ       ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessNodeDescReq_1
    708            {
    709              desc = &ZDO_Config_Node_Descriptor;
    710            }
    711          
    712            if ( desc != NULL )
    713            {
    714              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801A         SJMP      ??ZDO_ProcessNodeDescReq_2
    715            }
    716            else
    717            {
    718              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    719                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV       ?V0,#0x2
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV       ?V0,R2
   \   000033   89..         MOV       ?V1,R1
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine47 & 0xFFFF
    720            }
   \                     ??CrossCallReturnLabel_72:
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
    721          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000040   80..         SJMP      ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   EE           MOV       A,R6
   \   000001   240E         ADD       A,#0xe
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   7C80         MOV       R4,#-0x80
   \   00000D   EE           MOV       A,R6
   \   00000E   2402         ADD       A,#0x2
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   3F           ADDC      A,R7
   \   000013   FB           MOV       R3,A
   \   000014   EE           MOV       A,R6
   \   000015   240F         ADD       A,#0xf
   \   000017   F582         MOV       DPL,A
   \   000019   E4           CLR       A
   \   00001A   3F           ADDC      A,R7
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000022   7404         MOV       A,#0x4
   \   000024   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EA           MOV       A,R2
   \   000008   28           ADD       A,R0
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   39           ADDC      A,R1
   \   00000C   FD           MOV       R5,A
   \   00000D   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000010   E0           MOVX      A,@DPTR
   \   000011   6C           XRL       A,R4
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EA           MOV       A,R2
   \   000005   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000008   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   2413         ADD       A,#0x13
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
    722          
    723          /*********************************************************************
    724           * @fn          ZDO_ProcessPowerDescReq
    725           *
    726           * @brief       This function processes and responds to the
    727           *              Node_Power_req message.
    728           *
    729           * @param       inMsg  - incoming request
    730           *
    731           * @return      none
    732           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    733          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    734          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine46 & 0xFFFF
    735            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    736            NodePowerDescriptorFormat_t *desc = NULL;
    737          
    738            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_71:
   \   000008   7003         JNZ       ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessPowerDescReq_1
    739            {
    740              desc = &ZDO_Config_Power_Descriptor;
    741            }
    742          
    743            if ( desc != NULL )
    744            {
    745              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801A         SJMP      ??ZDO_ProcessPowerDescReq_2
    746            }
    747            else
    748            {
    749              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    750                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV       ?V0,#0x3
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV       ?V0,R2
   \   000033   89..         MOV       ?V1,R1
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine47 & 0xFFFF
    751            }
   \                     ??CrossCallReturnLabel_73:
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
    752          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000040   80..         SJMP      ??Subroutine142_0
    753          
    754          /*********************************************************************
    755           * @fn          ZDO_ProcessSimpleDescReq
    756           *
    757           * @brief       This function processes and responds to the
    758           *              Simple_Desc_req message.
    759           *
    760           * @param       inMsg - incoming message (request)
    761           *
    762           * @return      none
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine141_0
   \   000002                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    766            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    767            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL     ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00001B   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00001E   FB           MOV       R3,A
   \   00001F   EC           MOV       A,R4
   \   000020   FA           MOV       R2,A
    768            byte endPoint = inMsg->asdu[2];
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
    769            byte free = false;
   \   000029   75..00       MOV       ?V1,#0x0
    770            byte stat = ZDP_SUCCESS;
   \   00002C   75..00       MOV       ?V0,#0x0
    771          
    772            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002F   6005         JZ        ??ZDO_ProcessSimpleDescReq_0
   \   000031   74FF         MOV       A,#-0x1
   \   000033   69           XRL       A,R1
   \   000034   7005         JNZ       ??ZDO_ProcessSimpleDescReq_1
    773            {
    774              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000036   75..82       MOV       ?V0,#-0x7e
   \   000039   8024         SJMP      ??ZDO_ProcessSimpleDescReq_2
    775            }
    776            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6A           XRL       A,R2
   \   000040   7003         JNZ       ??ZDO_ProcessSimpleDescReq_3
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6B           XRL       A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000045   7015         JNZ       ??ZDO_ProcessSimpleDescReq_4
    777            {
    778              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000047                ; Setup parameters for call to function afFindSimpleDesc
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   12....       LCALL     `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00004E   E9           MOV       A,R1
   \   00004F   FA           MOV       R2,A
    779              if ( sDesc == NULL )
   \   000050   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000053   7003         JNZ       ??ZDO_ProcessSimpleDescReq_5
    780              {
    781                stat = ZDP_NOT_ACTIVE;
   \   000055   75..83       MOV       ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000058   8A..         MOV       ?V1,R2
   \   00005A   8003         SJMP      ??ZDO_ProcessSimpleDescReq_2
    782              }
    783            }
    784            else
    785            {
    786              if ( ZSTACK_ROUTER_BUILD )
    787              {
    788                //If child found, then no descriptor
    789                if(AssocIsChild(aoi))
    790                {
    791                  stat = ZDP_NO_DESCRIPTOR;
    792                }
    793                //Otherwise no device found
    794                else
    795                {
    796                  stat = ZDP_DEVICE_NOT_FOUND;
    797                }
    798              }
    799              else if ( ZSTACK_END_DEVICE_BUILD )
    800              {
    801                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00005C   75..80       MOV       ?V0,#-0x80
    802              }
    803            }
    804          
    805            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   00005F                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   00005F   85..82       MOV       DPL,?XSP + 0
   \   000062   85..83       MOV       DPH,?XSP + 1
   \   000065   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000068   A9..         MOV       R1,?V0
   \   00006A   EE           MOV       A,R6
   \   00006B   FA           MOV       R2,A
   \   00006C   EF           MOV       A,R7
   \   00006D   FB           MOV       R3,A
   \   00006E   12....       LCALL     `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    806          
    807            if ( free && sDesc )
   \   000071   E5..         MOV       A,?V1
   \   000073   600E         JZ        ??CrossCallReturnLabel_115
   \   000075   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000078   6009         JZ        ??CrossCallReturnLabel_115
    808            {
    809              osal_mem_free( sDesc );
   \   00007A                ; Setup parameters for call to function osal_mem_free
   \   00007A   85..82       MOV       DPL,?XSP + 0
   \   00007D   85..83       MOV       DPH,?XSP + 1
   \   000080   12....       LCALL     ?Subroutine69 & 0xFFFF
    810            }
    811          }
   \                     ??CrossCallReturnLabel_115:
   \   000083   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000003   3F           ADDC      A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine159_0
   \   000001                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   2413         ADD       A,#0x13
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine160_0
   \   000006                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000005   F9           MOV       R1,A
   \   000006   8882         MOV       DPL,R0
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET
    812          
    813          /*********************************************************************
    814           * @fn          ZDO_ProcessSimpleDescRsp
    815           *
    816           * @brief       This function processes and responds to the
    817           *              Simple_Desc_rsp message.
    818           *
    819           * @param       inMsg - incoming message (request)
    820           *
    821           * @return      none
    822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    823          void ZDO_ProcessSimpleDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescRsp:
    824          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    825          
    826          }
   \   000000   02....       LJMP      ?BRET
    827          
    828          /*********************************************************************
    829           * @fn          ZDO_ProcessActiveEPReq
    830           *
    831           * @brief       This function processes and responds to the
    832           *              Active_EP_req message.
    833           *
    834           * @param       inMsg  - incoming message (request)
    835           *
    836           * @return      none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    840            byte cnt = 0;
   \   000009   75..00       MOV       ?V0,#0x0
    841            uint16 aoi;
    842            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV       ?V1,#0x0
    843          
    844            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   EA           MOV       A,R2
   \   000010   2413         ADD       A,#0x13
   \   000012   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   8882         MOV       DPL,R0
   \   00001A   12....       LCALL     ?Subroutine44 & 0xFFFF
    845          
    846            if ( aoi == NLME_GetShortAddr() )
   \                     ??CrossCallReturnLabel_238:
   \   00001D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001D   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000020   EA           MOV       A,R2
   \   000021   65..         XRL       A,?V2
   \   000023   7003         JNZ       ??ZDO_ProcessActiveEPReq_0
   \   000025   EB           MOV       A,R3
   \   000026   65..         XRL       A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000028   7012         JNZ       ??ZDO_ProcessActiveEPReq_1
    847            {
    848              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   00002A                ; Setup parameters for call to function afNumEndPoints
   \   00002A   12....       LCALL     `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   00002D   E9           MOV       A,R1
   \   00002E   14           DEC       A
   \   00002F   F5..         MOV       ?V0,A
    849              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000031                ; Setup parameters for call to function afEndPoints
   \   000031   7901         MOV       R1,#0x1
   \   000033   7A..         MOV       R2,#ZDOBuildBuf & 0xff
   \   000035   7B..         MOV       R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000037   12....       LCALL     `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   00003A   8003         SJMP      ??ZDO_ProcessActiveEPReq_2
    850            }
    851            else
    852            {
    853              if(ZG_BUILD_ENDDEVICE_TYPE)
    854              {
    855                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   00003C   75..80       MOV       ?V1,#-0x80
    856              }
    857              else
    858              {
    859                stat = ZDP_DEVICE_NOT_FOUND;
    860              }
    861            }
    862          
    863            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    864                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003F                ; Setup parameters for call to function ZDP_EPRsp
   \   00003F   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000042   F5..         MOV       ?V4,A
   \   000044   78..         MOV       R0,#?V4
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   75....       MOV       ?V4,#ZDOBuildBuf & 0xff
   \   00004C   75....       MOV       ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004F   78..         MOV       R0,#?V4
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   E5..         MOV       A,?V1
   \   000060   F5..         MOV       ?V0,A
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00006A   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00006D   F9           MOV       R1,A
   \   00006E   7A05         MOV       R2,#0x5
   \   000070   7B80         MOV       R3,#-0x80
   \   000072   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000075   7407         MOV       A,#0x7
   \   000077   02....       LJMP      ?Subroutine1 & 0xFFFF
    865          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine143_0
   \   000002                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EA           MOV       A,R2
   \   000008   28           ADD       A,R0
   \   000009   F5..         MOV       ?V2,A
   \   00000B   E4           CLR       A
   \   00000C   39           ADDC      A,R1
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   EE           MOV       A,R6
   \   000001   240E         ADD       A,#0xe
   \   000003                REQUIRE ??Subroutine150_0
   \   000003                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine151_0
   \   000003                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FD           MOV       R5,A
   \   000007   EE           MOV       A,R6
   \   000008   240F         ADD       A,#0xf
   \   00000A   22           RET
    866          
    867          /*********************************************************************
    868           * @fn          ZDO_ConvertOTAClusters
    869           *
    870           * @brief       This function will convert the over-the-air cluster list
    871           *              format to an internal format.
    872           *
    873           * @param       inMsg  - incoming message (request)
    874           *
    875           * @return      pointer to incremented inBuf
    876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    877          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    878          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    879            uint8 x;
    880          
    881            for ( x = 0; x < cnt; x++ )
   \   000007   7E00         MOV       R6,#0x0
   \   000009   8030         SJMP      ??ZDO_ConvertOTAClusters_0
    882            {
    883              // convert ota format to internal
    884              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000012   F8           MOV       R0,A
   \   000013   E4           CLR       A
   \   000014   C8           XCH       A,R0
   \   000015   F9           MOV       R1,A
   \   000016   E5..         MOV       A,?V0
   \   000018   28           ADD       A,R0
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   F5..         MOV       ?V1,A
   \   00001D   EE           MOV       A,R6
   \   00001E   25E0         ADD       A,0xE0 /* A   */
   \   000020   F8           MOV       R0,A
   \   000021   E4           CLR       A
   \   000022   33           RLC       A
   \   000023   F9           MOV       R1,A
   \   000024   EC           MOV       A,R4
   \   000025   28           ADD       A,R0
   \   000026   F582         MOV       DPL,A
   \   000028   ED           MOV       A,R5
   \   000029   39           ADDC      A,R1
   \   00002A   F583         MOV       DPH,A
   \   00002C   E5..         MOV       A,?V0
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E5..         MOV       A,?V1
   \   000032   F0           MOVX      @DPTR,A
    885              inBuf += sizeof( uint16 );
   \   000033   EA           MOV       A,R2
   \   000034   2402         ADD       A,#0x2
   \   000036   FA           MOV       R2,A
   \   000037   5001         JNC       ??ZDO_ConvertOTAClusters_2
   \   000039   0B           INC       R3
    886            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   00003A   0E           INC       R6
   \                     ??ZDO_ConvertOTAClusters_0:
   \   00003B   EE           MOV       A,R6
   \   00003C   C3           CLR       C
   \   00003D   9F           SUBB      A,R7
   \   00003E   40CB         JC        ??ZDO_ConvertOTAClusters_1
    887            return ( inBuf );
   \   000040   02....       LJMP      ??Subroutine142_0 & 0xFFFF
    888          }
    889          
    890          /*********************************************************************
    891           * @fn          ZDO_ProcessMatchDescReq
    892           *
    893           * @brief       This function processes and responds to the
    894           *              Match_Desc_req message.
    895           *
    896           * @param       inMsg  - incoming message (request)
    897           *
    898           * @return      none
    899           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    900          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ??Subroutine147_0 & 0xFFFF
    902            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_247:
   \   000013   75..00       MOV       ?V7,#0x0
    903            uint8 numInClusters;
    904            uint16 *inClusters = NULL;
   \   000016   75..00       MOV       ?V14,#0x0
   \   000019   75..00       MOV       ?V15,#0x0
    905            uint8 numOutClusters;
    906            uint16 *outClusters = NULL;
   \   00001C   75..00       MOV       ?V12,#0x0
   \   00001F   75..00       MOV       ?V13,#0x0
    907            epList_t *epDesc;
    908            SimpleDescriptionFormat_t *sDesc = NULL;
    909            uint8 allocated;
    910            uint8 *msg;
    911            uint16 aoi;
    912            uint16 profileID;
    913          
    914            // Parse the incoming message
    915            msg = inMsg->asdu;
   \   000022   85..82       MOV       DPL,?XSP + 0
   \   000025   85..83       MOV       DPH,?XSP + 1
   \   000028   E0           MOVX      A,@DPTR
   \   000029   12....       LCALL     ?Subroutine80 & 0xFFFF
    916            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_242:
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   12....       LCALL     ?Subroutine44 & 0xFFFF
    917            profileID = BUILD_UINT16( msg[2], msg[3] );
   \                     ??CrossCallReturnLabel_239:
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   EA           MOV       A,R2
   \   000043   F5..         MOV       ?V0,A
   \   000045   E4           CLR       A
   \   000046   39           ADDC      A,R1
   \   000047   F5..         MOV       ?V1,A
    918            msg += 4;
    919          
    920            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   240F         ADD       A,#0xf
   \   000052   F8           MOV       R0,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   3400         ADDC      A,#0x0
   \   000057   F9           MOV       R1,A
   \   000058   7406         MOV       A,#0x6
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000060   240E         ADD       A,#0xe
   \   000062   F8           MOV       R0,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   3400         ADDC      A,#0x0
   \   000067   F9           MOV       R1,A
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000070   2402         ADD       A,#0x2
   \   000072   F8           MOV       R0,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   3400         ADDC      A,#0x0
   \   000077   F9           MOV       R1,A
   \   000078   7402         MOV       A,#0x2
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E8           MOV       A,R0
   \   00007E   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000081                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000081   AA..         MOV       R2,?V2
   \   000083   AB..         MOV       R3,?V3
   \   000085   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000088   E9           MOV       A,R1
   \   000089   6401         XRL       A,#0x1
   \   00008B   6018         JZ        ??ZDO_ProcessMatchDescReq_0
    921            {
    922              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    923                                    aoi, 0, NULL, inMsg->SecurityUse );
    924              return;
    925            }
    926            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   00008D                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00008D   AA..         MOV       R2,?V2
   \   00008F   AB..         MOV       R3,?V3
   \   000091   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000094   E9           MOV       A,R1
   \   000095   704B         JNZ       ??ZDO_ProcessMatchDescReq_1
   \   000097   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   65..         XRL       A,?V2
   \   00009D   7004         JNZ       ??ZDO_ProcessMatchDescReq_2
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   65..         XRL       A,?V3
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   0000A3   603D         JZ        ??ZDO_ProcessMatchDescReq_1
    927            {
    928          #if (ZG_BUILD_ENDDEVICE_TYPE)
    929              if(ZG_DEVICE_ENDDEVICE_TYPE)
    930              {    
    931              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    932                                       aoi, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   0000A5                ; Setup parameters for call to function ZDP_EPRsp
   \   0000A5   7404         MOV       A,#0x4
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL     ?Subroutine48 & 0xFFFF
    933              }
   \                     ??CrossCallReturnLabel_74:
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   E4           CLR       A
   \   0000B1   F5..         MOV       ?V0,A
   \   0000B3   F5..         MOV       ?V1,A
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BA   78..         MOV       R0,#?V0
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   78..         MOV       R0,#?V2
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C4   75..80       MOV       ?V0,#-0x80
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CC   7409         MOV       A,#0x9
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000D4   740D         MOV       A,#0xd
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000DC   12....       LCALL     ?DEALLOC_XSTACK8
    934          #else 
    935              if (ZG_DEVICE_RTR_TYPE)
    936              {
    937              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_DEVICE_NOT_FOUND,
    938                                       aoi, 0, NULL, inMsg->SecurityUse );
    939              }
    940          #endif
    941              return;
   \   0000DF   02....       LJMP      ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    942            }
    943          
    944            if ((numInClusters = *msg++) &&
    945                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000E2   8E82         MOV       DPL,R6
   \   0000E4   8F83         MOV       DPH,R7
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   F5..         MOV       ?V3,A
   \   0000ED   EE           MOV       A,R6
   \   0000EE   2405         ADD       A,#0x5
   \   0000F0   FE           MOV       R6,A
   \   0000F1   5001         JNC       ??ZDO_ProcessMatchDescReq_4
   \   0000F3   0F           INC       R7
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000F4   E5..         MOV       A,?V3
   \   0000F6   6022         JZ        ??ZDO_ProcessMatchDescReq_5
   \   0000F8                ; Setup parameters for call to function osal_mem_alloc
   \   0000F8   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000FB   8A..         MOV       ?V14,R2
   \   0000FD   8B..         MOV       ?V15,R3
   \   0000FF   EA           MOV       A,R2
   \   000100   4B           ORL       A,R3
   \   000101   6017         JZ        ??ZDO_ProcessMatchDescReq_5
    946            {
    947              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   000103                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000103   AC..         MOV       R4,?V14
   \   000105   AD..         MOV       R5,?V15
   \   000107   EE           MOV       A,R6
   \   000108   FA           MOV       R2,A
   \   000109   EF           MOV       A,R7
   \   00010A   FB           MOV       R3,A
   \   00010B   A9..         MOV       R1,?V3
   \   00010D   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000110   8A..         MOV       ?V4,R2
   \   000112   8B..         MOV       ?V5,R3
   \   000114   AE..         MOV       R6,?V4
   \   000116   AF..         MOV       R7,?V5
   \   000118   8003         SJMP      ??ZDO_ProcessMatchDescReq_6
    948            }
    949            else
    950            {
    951              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   00011A   75..00       MOV       ?V3,#0x0
    952            }
    953          
    954            if ((numOutClusters = *msg++) &&
    955                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   00011D   8E82         MOV       DPL,R6
   \   00011F   8F83         MOV       DPH,R7
   \   000121   E0           MOVX      A,@DPTR
   \   000122   F5..         MOV       ?V2,A
   \   000124   A3           INC       DPTR
   \   000125   AE82         MOV       R6,DPL
   \   000127   AF83         MOV       R7,DPH
   \   000129   601A         JZ        ??ZDO_ProcessMatchDescReq_7
   \   00012B                ; Setup parameters for call to function osal_mem_alloc
   \   00012B   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00012E   8A..         MOV       ?V12,R2
   \   000130   8B..         MOV       ?V13,R3
   \   000132   EA           MOV       A,R2
   \   000133   4B           ORL       A,R3
   \   000134   600F         JZ        ??ZDO_ProcessMatchDescReq_7
    956            {
    957              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000136                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000136   AC..         MOV       R4,?V12
   \   000138   AD..         MOV       R5,?V13
   \   00013A   EE           MOV       A,R6
   \   00013B   FA           MOV       R2,A
   \   00013C   EF           MOV       A,R7
   \   00013D   FB           MOV       R3,A
   \   00013E   A9..         MOV       R1,?V2
   \   000140   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000143   8003         SJMP      ??ZDO_ProcessMatchDescReq_8
    958            }
    959            else
    960            {
    961              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000145   75..00       MOV       ?V2,#0x0
    962            }
    963          
    964            // First count the number of endpoints that match.
    965            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000148   90....       MOV       DPTR,#epList
   \   00014B   8047         SJMP      ??ZDO_ProcessMatchDescReq_9
    966            while ( epDesc )
    967            {
    968              // Don't search endpoint 0 and check if response is allowed
    969              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    970              {
    971                if ( epDesc->pfnDescCB )
    972                {
    973                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    974                  allocated = TRUE;
    975                }
    976                else
    977                {
    978                  sDesc = epDesc->epDesc->simpleDesc;
    979                  allocated = FALSE;
    980                }
    981          
    982                // Allow specific ProfileId or Wildcard ProfileID
    983                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    984                {
    985                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    986          
    987                  // Are there matching input clusters?
    988                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    989                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    990                      // Are there matching output clusters?
    991                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    992                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    993                  {
    994                    // Notify the endpoint of the match.
    995                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    996                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    997          
    998                    if (pRspSent)
    999                    {
   1000                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
   1001                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
   1002                      pRspSent->numInClusters = numInClusters;
   1003                      pRspSent->numOutClusters = numOutClusters;
   1004          
   1005                      if (numInClusters)
   1006                      {
   1007                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
   1008                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
   1009                      }
   1010                      else
   1011                      {
   1012                        pRspSent->pInClusters = NULL;
   1013                      }
   1014          
   1015                      if (numOutClusters)
   1016                      {
   1017                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
   1018                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
   1019                      }
   1020                      else
   1021                      {
   1022                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00014D   E4           CLR       A
   \   00014E   F0           MOVX      @DPTR,A
   \   00014F   A3           INC       DPTR
   \   000150   F0           MOVX      @DPTR,A
   1023                      }
   1024          
   1025                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   000151                ; Setup parameters for call to function osal_msg_send
   \   000151   EE           MOV       A,R6
   \   000152   FA           MOV       R2,A
   \   000153   EF           MOV       A,R7
   \   000154   FB           MOV       R3,A
   \   000155   85..82       MOV       DPL,?V10
   \   000158   85..83       MOV       DPH,?V11
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000165   F9           MOV       R1,A
   \   000166   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1026                    }
   1027          
   1028                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000169   85..82       MOV       DPL,?V8
   \   00016C   85..83       MOV       DPH,?V9
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   C0E0         PUSH      A
   \   000172   A8..         MOV       R0,?V7
   \   000174   74..         MOV       A,#ZDOBuildBuf & 0xff
   \   000176   28           ADD       A,R0
   \   000177   F582         MOV       DPL,A
   \   000179   E4           CLR       A
   \   00017A   34..         ADDC      A,#(ZDOBuildBuf >> 8) & 0xff
   \   00017C   F583         MOV       DPH,A
   \   00017E   D0E0         POP       A
   \   000180   F0           MOVX      @DPTR,A
   \   000181   05..         INC       ?V7
   1029                  }
   1030                }
   1031          
   1032                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000183   A2..         MOV       C,?VB.0
   \   000185   5007         JNC       ??ZDO_ProcessMatchDescReq_14
   1033                {
   1034                  osal_mem_free( sDesc );
   \   000187                ; Setup parameters for call to function osal_mem_free
   \   000187   AA..         MOV       R2,?V8
   \   000189   AB..         MOV       R3,?V9
   \   00018B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1035                }
   1036              }
   1037              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   00018E   85..82       MOV       DPL,?V10
   \   000191   85..83       MOV       DPH,?V11
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000194   E0           MOVX      A,@DPTR
   \   000195   F5..         MOV       ?V10,A
   \   000197   A3           INC       DPTR
   \   000198   E0           MOVX      A,@DPTR
   \   000199   F5..         MOV       ?V11,A
   \   00019B   E5..         MOV       A,?V10
   \   00019D   45..         ORL       A,?V11
   \   00019F   7003         JNZ       $+5
   \   0001A1   02....       LJMP      ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0001A4   85..82       MOV       DPL,?V10
   \   0001A7   85..83       MOV       DPH,?V11
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   0001AF   E8           MOV       A,R0
   \   0001B0   FA           MOV       R2,A
   \   0001B1   E9           MOV       A,R1
   \   0001B2   8882         MOV       DPL,R0
   \   0001B4   F583         MOV       DPH,A
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   FC           MOV       R4,A
   \   0001B8   60D4         JZ        ??ZDO_ProcessMatchDescReq_14
   \   0001BA   85..82       MOV       DPL,?V10
   \   0001BD   85..83       MOV       DPH,?V11
   \   0001C0   A3           INC       DPTR
   \   0001C1   A3           INC       DPTR
   \   0001C2   A3           INC       DPTR
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   A3           INC       DPTR
   \   0001C6   A3           INC       DPTR
   \   0001C7   A3           INC       DPTR
   \   0001C8   E0           MOVX      A,@DPTR
   \   0001C9   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001CB   50C1         JNC       ??ZDO_ProcessMatchDescReq_14
   \   0001CD   85..82       MOV       DPL,?V10
   \   0001D0   85..83       MOV       DPH,?V11
   \   0001D3   A3           INC       DPTR
   \   0001D4   A3           INC       DPTR
   \   0001D5   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0001D8   E582         MOV       A,DPL
   \   0001DA   4583         ORL       A,DPH
   \   0001DC   600F         JZ        ??ZDO_ProcessMatchDescReq_16
   \   0001DE                ; Setup parameters for indirect call
   \   0001DE   EC           MOV       A,R4
   \   0001DF   FA           MOV       R2,A
   \   0001E0   7901         MOV       R1,#0x1
   \   0001E2   12....       LCALL     ?CALL_IND
   \   0001E5   8A..         MOV       ?V8,R2
   \   0001E7   8B..         MOV       ?V9,R3
   \   0001E9   D2..         SETB      ?VB.0
   \   0001EB   8011         SJMP      ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001ED   8A82         MOV       DPL,R2
   \   0001EF   8983         MOV       DPH,R1
   \   0001F1   A3           INC       DPTR
   \   0001F2   A3           INC       DPTR
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   E0           MOVX      A,@DPTR
   \   0001F6   F5..         MOV       ?V8,A
   \   0001F8   A3           INC       DPTR
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   F5..         MOV       ?V9,A
   \   0001FC   C2..         CLR       ?VB.0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001FE   E5..         MOV       A,?V8
   \   000200   45..         ORL       A,?V9
   \   000202   7003         JNZ       $+5
   \   000204   02....       LJMP      ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   000207   85..82       MOV       DPL,?V8
   \   00020A   85..83       MOV       DPH,?V9
   \   00020D   A3           INC       DPTR
   \   00020E   E0           MOVX      A,@DPTR
   \   00020F   65..         XRL       A,?V0
   \   000211   7004         JNZ       ??ZDO_ProcessMatchDescReq_18
   \   000213   A3           INC       DPTR
   \   000214   E0           MOVX      A,@DPTR
   \   000215   65..         XRL       A,?V1
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000217   600F         JZ        ??ZDO_ProcessMatchDescReq_19
   \   000219   74FF         MOV       A,#-0x1
   \   00021B   65..         XRL       A,?V0
   \   00021D   7004         JNZ       ??ZDO_ProcessMatchDescReq_20
   \   00021F   74FF         MOV       A,#-0x1
   \   000221   65..         XRL       A,?V1
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   000223   6003         JZ        $+5
   \   000225   02....       LJMP      ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000228                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000228   85..82       MOV       DPL,?V8
   \   00022B   85..83       MOV       DPH,?V9
   \   00022E   A3           INC       DPTR
   \   00022F   A3           INC       DPTR
   \   000230   A3           INC       DPTR
   \   000231   A3           INC       DPTR
   \   000232   A3           INC       DPTR
   \   000233   A3           INC       DPTR
   \   000234   A3           INC       DPTR
   \   000235   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000238   85..82       MOV       DPL,?V8
   \   00023B   85..83       MOV       DPH,?V9
   \   00023E   A3           INC       DPTR
   \   00023F   A3           INC       DPTR
   \   000240   A3           INC       DPTR
   \   000241   A3           INC       DPTR
   \   000242   A3           INC       DPTR
   \   000243   A3           INC       DPTR
   \   000244   E0           MOVX      A,@DPTR
   \   000245   FC           MOV       R4,A
   \   000246   AA..         MOV       R2,?V14
   \   000248   AB..         MOV       R3,?V15
   \   00024A   A9..         MOV       R1,?V3
   \   00024C   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00024F   7402         MOV       A,#0x2
   \   000251   12....       LCALL     ?DEALLOC_XSTACK8
   \   000254   E9           MOV       A,R1
   \   000255   7038         JNZ       ??ZDO_ProcessMatchDescReq_21
   \   000257                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000257   85..82       MOV       DPL,?V8
   \   00025A   85..83       MOV       DPH,?V9
   \   00025D   A3           INC       DPTR
   \   00025E   A3           INC       DPTR
   \   00025F   A3           INC       DPTR
   \   000260   A3           INC       DPTR
   \   000261   A3           INC       DPTR
   \   000262   A3           INC       DPTR
   \   000263   A3           INC       DPTR
   \   000264   A3           INC       DPTR
   \   000265   A3           INC       DPTR
   \   000266   A3           INC       DPTR
   \   000267   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00026A   85..82       MOV       DPL,?V8
   \   00026D   85..83       MOV       DPH,?V9
   \   000270   A3           INC       DPTR
   \   000271   A3           INC       DPTR
   \   000272   A3           INC       DPTR
   \   000273   A3           INC       DPTR
   \   000274   A3           INC       DPTR
   \   000275   A3           INC       DPTR
   \   000276   A3           INC       DPTR
   \   000277   A3           INC       DPTR
   \   000278   A3           INC       DPTR
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   FC           MOV       R4,A
   \   00027B   AA..         MOV       R2,?V12
   \   00027D   AB..         MOV       R3,?V13
   \   00027F   A9..         MOV       R1,?V2
   \   000281   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000284   7402         MOV       A,#0x2
   \   000286   12....       LCALL     ?DEALLOC_XSTACK8
   \   000289   E9           MOV       A,R1
   \   00028A   7003         JNZ       $+5
   \   00028C   02....       LJMP      ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   00028F                ; Setup parameters for call to function osal_msg_allocate
   \   00028F   E5..         MOV       A,?V2
   \   000291   25..         ADD       A,?V3
   \   000293   C3           CLR       C
   \   000294   33           RLC       A
   \   000295   240A         ADD       A,#0xa
   \   000297   FA           MOV       R2,A
   \   000298   7B00         MOV       R3,#0x0
   \   00029A   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00029D   8A..         MOV       ?V4,R2
   \   00029F   8B..         MOV       ?V5,R3
   \   0002A1   AE..         MOV       R6,?V4
   \   0002A3   AF..         MOV       R7,?V5
   \   0002A5   EA           MOV       A,R2
   \   0002A6   4F           ORL       A,R7
   \   0002A7   7003         JNZ       $+5
   \   0002A9   02....       LJMP      ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0002AC   8A82         MOV       DPL,R2
   \   0002AE   8B83         MOV       DPH,R3
   \   0002B0   74D2         MOV       A,#-0x2e
   \   0002B2   F0           MOVX      @DPTR,A
   \   0002B3   7402         MOV       A,#0x2
   \   0002B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B8   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   0002BB   F8           MOV       R0,A
   \   0002BC   A3           INC       DPTR
   \   0002BD   E0           MOVX      A,@DPTR
   \   0002BE   F9           MOV       R1,A
   \   0002BF   8A82         MOV       DPL,R2
   \   0002C1   8B83         MOV       DPH,R3
   \   0002C3   A3           INC       DPTR
   \   0002C4   A3           INC       DPTR
   \   0002C5   E8           MOV       A,R0
   \   0002C6   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0002C9   8A82         MOV       DPL,R2
   \   0002CB   8B83         MOV       DPH,R3
   \   0002CD   A3           INC       DPTR
   \   0002CE   A3           INC       DPTR
   \   0002CF   A3           INC       DPTR
   \   0002D0   A3           INC       DPTR
   \   0002D1   E5..         MOV       A,?V3
   \   0002D3   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0002D6   EA           MOV       A,R2
   \   0002D7   2405         ADD       A,#0x5
   \   0002D9   F582         MOV       DPL,A
   \   0002DB   E4           CLR       A
   \   0002DC   3F           ADDC      A,R7
   \   0002DD   F583         MOV       DPH,A
   \   0002DF   E5..         MOV       A,?V3
   \   0002E1   6021         JZ        ??ZDO_ProcessMatchDescReq_22
   \   0002E3   EA           MOV       A,R2
   \   0002E4   240A         ADD       A,#0xa
   \   0002E6   FA           MOV       R2,A
   \   0002E7   E4           CLR       A
   \   0002E8   3F           ADDC      A,R7
   \   0002E9   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   0002EC                ; Setup parameters for call to function osal_memcpy
   \   0002EC   85....       MOV       ?V4,?V14
   \   0002EF   85....       MOV       ?V5,?V15
   \   0002F2   75..00       MOV       ?V6,#0x0
   \   0002F5   78..         MOV       R0,#?V4
   \   0002F7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002FA   AC..         MOV       R4,?V3
   \   0002FC   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   0002FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000302   8004         SJMP      ??ZDO_ProcessMatchDescReq_23
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   000304   E4           CLR       A
   \   000305   F0           MOVX      @DPTR,A
   \   000306   A3           INC       DPTR
   \   000307   F0           MOVX      @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   000308   EE           MOV       A,R6
   \   000309   2408         ADD       A,#0x8
   \   00030B   F582         MOV       DPL,A
   \   00030D   E4           CLR       A
   \   00030E   3F           ADDC      A,R7
   \   00030F   F583         MOV       DPH,A
   \   000311   E5..         MOV       A,?V2
   \   000313   7003         JNZ       $+5
   \   000315   02....       LJMP      ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   000318   A8..         MOV       R0,?V3
   \   00031A   E8           MOV       A,R0
   \   00031B   28           ADD       A,R0
   \   00031C   F8           MOV       R0,A
   \   00031D   E4           CLR       A
   \   00031E   33           RLC       A
   \   00031F   F9           MOV       R1,A
   \   000320   EE           MOV       A,R6
   \   000321   28           ADD       A,R0
   \   000322   F8           MOV       R0,A
   \   000323   EF           MOV       A,R7
   \   000324   39           ADDC      A,R1
   \   000325   F9           MOV       R1,A
   \   000326   E8           MOV       A,R0
   \   000327   240A         ADD       A,#0xa
   \   000329   FA           MOV       R2,A
   \   00032A   E4           CLR       A
   \   00032B   39           ADDC      A,R1
   \   00032C   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00032F                ; Setup parameters for call to function osal_memcpy
   \   00032F   85....       MOV       ?V4,?V12
   \   000332   85....       MOV       ?V5,?V13
   \   000335   75..00       MOV       ?V6,#0x0
   \   000338   78..         MOV       R0,#?V4
   \   00033A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00033D   AC..         MOV       R4,?V2
   \   00033F   12....       LCALL     ?Subroutine105 & 0xFFFF
   1038            }
   \                     ??CrossCallReturnLabel_425:
   \   000342   12....       LCALL     ?DEALLOC_XSTACK8
   \   000345   02....       LJMP      ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   1039          
   1040            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000348   E5..         MOV       A,?V7
   \   00034A   602A         JZ        ??ZDO_ProcessMatchDescReq_24
   1041            {
   1042              // Send the message if at least one match found.
   1043              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
   1044                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00034C                ; Setup parameters for call to function ZDP_EPRsp
   \   00034C   7404         MOV       A,#0x4
   \   00034E   12....       LCALL     ?XSTACK_DISP0_8
   \   000351   12....       LCALL     ?Subroutine48 & 0xFFFF
   1045              {
   1046          #if defined( LCD_SUPPORTED )
   1047                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   1048          #endif
   1049              }
   1050            }
   \                     ??CrossCallReturnLabel_75:
   \   000354   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000357   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   00035A   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00035D   78..         MOV       R0,#?V0
   \   00035F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000362   E5..         MOV       A,?V7
   \   000364   F5..         MOV       ?V0,A
   \   000366   78..         MOV       R0,#?V0
   \   000368   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00036B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00036E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000371   75..00       MOV       ?V0,#0x0
   \   000374   802F         SJMP      ??ZDO_ProcessMatchDescReq_25
   1051            else
   1052            {
   1053              if (!inMsg->wasBroadcast)
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   000376   85..82       MOV       DPL,?XSP + 0
   \   000379   85..83       MOV       DPH,?XSP + 1
   \   00037C   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00037F   703C         JNZ       ??ZDO_ProcessMatchDescReq_26
   1054              {
   1055                // send response message with match length = 0
   1056                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
   1057                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   000381                ; Setup parameters for call to function ZDP_EPRsp
   \   000381   7404         MOV       A,#0x4
   \   000383   12....       LCALL     ?XSTACK_DISP0_8
   \   000386   12....       LCALL     ?Subroutine48 & 0xFFFF
   1058          #if defined( LCD_SUPPORTED )
   1059                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
   1060          #endif
   1061              }
   1062              else
   1063              {
   1064                // no response mesage for broadcast message
   1065          #if defined( LCD_SUPPORTED )
   1066                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   1067          #endif
   1068              }
   1069            }
   \                     ??CrossCallReturnLabel_76:
   \   000389   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00038C   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   00038F   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000392   78..         MOV       R0,#?V0
   \   000394   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000397   75..00       MOV       ?V0,#0x0
   \   00039A   78..         MOV       R0,#?V0
   \   00039C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00039F   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0003A2   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   0003A5   78..         MOV       R0,#?V0
   \   0003A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003AA   7409         MOV       A,#0x9
   \   0003AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AF   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0003B2   740D         MOV       A,#0xd
   \   0003B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B7   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0003BA   12....       LCALL     ?DEALLOC_XSTACK8
   1070          
   1071            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0003BD   E5..         MOV       A,?V14
   \   0003BF   45..         ORL       A,?V15
   \   0003C1   6007         JZ        ??ZDO_ProcessMatchDescReq_27
   1072            {
   1073              osal_mem_free( inClusters );
   \   0003C3                ; Setup parameters for call to function osal_mem_free
   \   0003C3   AA..         MOV       R2,?V14
   \   0003C5   AB..         MOV       R3,?V15
   \   0003C7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1074            }
   1075          
   1076            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0003CA   E5..         MOV       A,?V12
   \   0003CC   45..         ORL       A,?V13
   \   0003CE   6007         JZ        ??ZDO_ProcessMatchDescReq_3
   1077            {
   1078              osal_mem_free( outClusters );
   \   0003D0                ; Setup parameters for call to function osal_mem_free
   \   0003D0   AA..         MOV       R2,?V12
   \   0003D2   AB..         MOV       R3,?V13
   \   0003D4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1079            }
   1080          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0003D7   7408         MOV       A,#0x8
   \   0003D9                REQUIRE ?Subroutine5
   \   0003D9                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine144_0
   \   000003                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   7F10         MOV       R7,#0x10
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000003                REQUIRE ??Subroutine145_0
   \   000003                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine146_0
   \   000002                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000003   FF           MOV       R7,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   F9           MOV       R1,A
   \   000004   7A06         MOV       R2,#0x6
   \   000006   7B80         MOV       R3,#-0x80
   \   000008   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   00000B   7407         MOV       A,#0x7
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   F5..         MOV       ?V0,A
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine147_0
   \   000001                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine149_0
   \   000004                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000003   C8           XCH       A,R0
   \   000004   240B         ADD       A,#0xb
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   12....       LCALL     ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000003   3B           ADDC      A,R3
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   EC           MOV       A,R4
   \   000001   2C           ADD       A,R4
   \   000002   FC           MOV       R4,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FD           MOV       R5,A
   \   000006                REQUIRE ??Subroutine178_0
   \   000006                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E5..         MOV       A,?V2
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET
   1081          
   1082          #if defined ( REFLECTOR )
   1083          /*********************************************************************
   1084           * @fn      ZDO_ProcessBindUnbindReq()
   1085           *
   1086           * @brief   Called to process a Bind or Unbind Request message.
   1087           *
   1088           * @param   inMsg  - incoming message (request)
   1089           * @param   pReq - place to put parsed information
   1090           *
   1091           * @return  none
   1092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
   1094          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   1095            zAddrType_t SourceAddr;       // Binding Source addres
   1096            byte bindStat;
   1097          
   1098            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV       A,#0xb
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   7403         MOV       A,#0x3
   \   000019   F0           MOVX      @DPTR,A
   1099            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL     ?XSTACK_DISP101_8
   \   00001D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1100          
   1101            // If the local device is not the primary binding cache
   1102            // check the src address of the bind request.
   1103            // If it is not the local device's extended address
   1104            // discard the request.
   1105            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
   1106                  (pReq->dstAddress.addrMode != Addr64Bit &&
   1107                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000023   E5..         MOV       A,?V0
   \   000025   240C         ADD       A,#0xc
   \   000027   F5..         MOV       ?V4,A
   \   000029   E4           CLR       A
   \   00002A   35..         ADDC      A,?V1
   \   00002C   F5..         MOV       ?V5,A
   \   00002E                ; Setup parameters for call to function sAddrExtCmp
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?XSTACK_DISP101_8
   \   000033   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000036   E9           MOV       A,R1
   \   000037   601D         JZ        ??ZDO_ProcessBindUnbindReq_0
   \   000039   EE           MOV       A,R6
   \   00003A   2413         ADD       A,#0x13
   \   00003C   F5..         MOV       ?V2,A
   \   00003E   E4           CLR       A
   \   00003F   3F           ADDC      A,R7
   \   000040   F5..         MOV       ?V3,A
   \   000042   85..82       MOV       DPL,?V2
   \   000045   F583         MOV       DPH,A
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V8,A
   \   00004A   7403         MOV       A,#0x3
   \   00004C   65..         XRL       A,?V8
   \   00004E   6011         JZ        ??ZDO_ProcessBindUnbindReq_1
   \   000050   7401         MOV       A,#0x1
   \   000052   65..         XRL       A,?V8
   \   000054   600B         JZ        ??ZDO_ProcessBindUnbindReq_1
   1108            {
   1109              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000056   85..82       MOV       DPL,?XSP + 0
   \   000059   85..83       MOV       DPH,?XSP + 1
   \   00005C   7484         MOV       A,#-0x7c
   \   00005E   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1110            }
   1111            else
   1112            {
   1113              // Check source & destination endpoints
   1114              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1115                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1116                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000061   EE           MOV       A,R6
   \   000062   2408         ADD       A,#0x8
   \   000064   F8           MOV       R0,A
   \   000065   E4           CLR       A
   \   000066   3F           ADDC      A,R7
   \   000067   88..         MOV       ?V6,R0
   \   000069   F5..         MOV       ?V7,A
   \   00006B   8882         MOV       DPL,R0
   \   00006D   F583         MOV       DPH,A
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F9           MOV       R1,A
   \   000071   6023         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000073   74FF         MOV       A,#-0x1
   \   000075   69           XRL       A,R1
   \   000076   601E         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000078   EE           MOV       A,R6
   \   000079   2414         ADD       A,#0x14
   \   00007B   FA           MOV       R2,A
   \   00007C   E4           CLR       A
   \   00007D   3F           ADDC      A,R7
   \   00007E   FB           MOV       R3,A
   \   00007F   EA           MOV       A,R2
   \   000080   FC           MOV       R4,A
   \   000081   EB           MOV       A,R3
   \   000082   FD           MOV       R5,A
   \   000083   7403         MOV       A,#0x3
   \   000085   65..         XRL       A,?V8
   \   000087   7018         JNZ       ??ZDO_ProcessBindUnbindReq_4
   \   000089   8A82         MOV       DPL,R2
   \   00008B   8B83         MOV       DPH,R3
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F8           MOV       R0,A
   \   00008F   6005         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000091   74FF         MOV       A,#-0x1
   \   000093   68           XRL       A,R0
   \   000094   700B         JNZ       ??ZDO_ProcessBindUnbindReq_4
   1117              {
   1118                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   7482         MOV       A,#-0x7e
   \   00009E   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1119              }
   1120              else
   1121              {
   1122                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   0000A1   EE           MOV       A,R6
   \   0000A2   2409         ADD       A,#0x9
   \   0000A4   FA           MOV       R2,A
   \   0000A5   E4           CLR       A
   \   0000A6   3F           ADDC      A,R7
   \   0000A7   FB           MOV       R3,A
   \   0000A8   EE           MOV       A,R6
   \   0000A9   240B         ADD       A,#0xb
   \   0000AB   FE           MOV       R6,A
   \   0000AC   5001         JNC       ??ZDO_ProcessBindUnbindReq_5
   \   0000AE   0F           INC       R7
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000AF   85..82       MOV       DPL,?V4
   \   0000B2   85..83       MOV       DPH,?V5
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   6421         XRL       A,#0x21
   \   0000B8   7002         JNZ       ??ZDO_ProcessBindUnbindReq_6
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0000BC   7065         JNZ       ??ZDO_ProcessBindUnbindReq_7
   1123                {
   1124                  // Assume the table is full
   1125                  bindStat = ZDP_TABLE_FULL;
   \   0000BE   85..82       MOV       DPL,?XSP + 0
   \   0000C1   85..83       MOV       DPH,?XSP + 1
   \   0000C4   748C         MOV       A,#-0x74
   \   0000C6   12....       LCALL     ?Subroutine15 & 0xFFFF
   1126          
   1127          #if defined( APP_TP ) || defined( APP_TP2 )
   1128                  // For ZigBee Conformance Testing
   1129                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1130          #endif
   1131                  {
   1132          #if defined ( ZDP_BIND_VALIDATION )
   1133                    uint16 nwkAddr;
   1134          
   1135                    // Verifies that a valid NWK address exists for the device
   1136                    // before creating a Binding entry. If NWK address does not
   1137                    // exist the request is sent out and the BindReq is saved, to
   1138                    // create the Bind Entry once the NwkAddrRsp is received
   1139                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1140                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   1141                    {
   1142                      // find an empty bind slot in the pending Bind Req list
   1143                      ZDO_PendingBindReq_t *pPendingBind;
   1144          
   1145                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   1146                      {
   1147                        // copy the received request into the empty slot and all required info
   1148                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   1149          
   1150                        pPendingBind->srcAddr = inMsg->srcAddr;
   1151                        pPendingBind->securityUse = inMsg->SecurityUse;
   1152                        pPendingBind->transSeq = inMsg->TransSeq;
   1153                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   1154          
   1155                        // create an entry in Address Manager
   1156                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   1157          
   1158                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1159          
   1160                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1161                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   1162                        return;
   1163                      }
   1164                    }
   1165                    // Add Bind entry
   1166                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1167                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1168                    {
   1169                      // valid entry
   1170                      bindStat = ZDP_SUCCESS;
   1171          
   1172                      // Notify to save info into NV
   1173                      ZDApp_NVUpdate();
   1174                    }
   1175          #else // ZDP_BIND_VALIDATION  is not Defined
   1176                    // Create binding entry first independently of existance of  valid NWK addres
   1177                    // if NWK address does not exist a request is sent out
   1178                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1179                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??CrossCallReturnLabel_12:
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F5..         MOV       ?V8,A
   \   0000CC   78..         MOV       R0,#?V8
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D1   EE           MOV       A,R6
   \   0000D2   FC           MOV       R4,A
   \   0000D3   EF           MOV       A,R7
   \   0000D4   FD           MOV       R5,A
   \   0000D5   8A82         MOV       DPL,R2
   \   0000D7   8B83         MOV       DPH,R3
   \   0000D9   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0000DC   85..82       MOV       DPL,?V6
   \   0000DF   85..83       MOV       DPH,?V7
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F9           MOV       R1,A
   \   0000E4   12....       LCALL     `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000E7   7401         MOV       A,#0x1
   \   0000E9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EC   E9           MOV       A,R1
   \   0000ED   7066         JNZ       ??ZDO_ProcessBindUnbindReq_8
   1180                    {
   1181                      uint16 nwkAddr;
   1182          
   1183                      // valid entry
   1184                      bindStat = ZDP_SUCCESS;
   \   0000EF   85..82       MOV       DPL,?XSP + 0
   \   0000F2   85..83       MOV       DPH,?XSP + 1
   \   0000F5   E4           CLR       A
   \   0000F6   F0           MOVX      @DPTR,A
   1185          
   1186                      // Notify to save info into NV
   1187                      ZDApp_NVUpdate();
   \   0000F7                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000F7   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1188          
   1189                      // Check for the destination address
   1190                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000FA   85..82       MOV       DPL,?V2
   \   0000FD   85..83       MOV       DPH,?V3
   \   000100   E0           MOVX      A,@DPTR
   \   000101   6403         XRL       A,#0x3
   \   000103   7050         JNZ       ??ZDO_ProcessBindUnbindReq_8
   1191                      {
   1192                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   000105                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000105   7401         MOV       A,#0x1
   \   000107   12....       LCALL     ?XSTACK_DISP102_8
   \   00010A   EE           MOV       A,R6
   \   00010B   FA           MOV       R2,A
   \   00010C   EF           MOV       A,R7
   \   00010D   FB           MOV       R3,A
   \   00010E   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000111   E9           MOV       A,R1
   \   000112   7041         JNZ       ??ZDO_ProcessBindUnbindReq_8
   1193                        {
   1194                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000114                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000114   7D00         MOV       R5,#0x0
   \   000116   7C00         MOV       R4,#0x0
   \   000118   7900         MOV       R1,#0x0
   \   00011A   EE           MOV       A,R6
   \   00011B   FA           MOV       R2,A
   \   00011C   EF           MOV       A,R7
   \   00011D   FB           MOV       R3,A
   \   00011E   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000121   8032         SJMP      ??ZDO_ProcessBindUnbindReq_8
   1195                        }
   1196                      }
   1197                    }
   1198          #endif
   1199                  }
   1200                }
   1201                else // Unbind_req
   1202                {
   1203                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1204                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   000123                ; Setup parameters for call to function APSME_UnBindRequest
   \   000123   8C82         MOV       DPL,R4
   \   000125   8D83         MOV       DPH,R5
   \   000127   E0           MOVX      A,@DPTR
   \   000128   F5..         MOV       ?V2,A
   \   00012A   78..         MOV       R0,#?V2
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012F   EE           MOV       A,R6
   \   000130   FC           MOV       R4,A
   \   000131   EF           MOV       A,R7
   \   000132   FD           MOV       R5,A
   \   000133   8A82         MOV       DPL,R2
   \   000135   8B83         MOV       DPH,R3
   \   000137   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   00013A   12....       LCALL     `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   00013D   7401         MOV       A,#0x1
   \   00013F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000142   E9           MOV       A,R1
   \   000143   85..82       MOV       DPL,?XSP + 0
   \   000146   85..83       MOV       DPH,?XSP + 1
   \   000149   7007         JNZ       ??ZDO_ProcessBindUnbindReq_9
   1205                  {
   1206                    bindStat = ZDP_SUCCESS;
   \   00014B   E4           CLR       A
   \   00014C   F0           MOVX      @DPTR,A
   1207          
   1208                    // Notify to save info into NV
   1209                    ZDApp_NVUpdate();
   \   00014D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00014D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000150   8003         SJMP      ??ZDO_ProcessBindUnbindReq_8
   1210                  }
   1211                  else
   1212                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000152   7488         MOV       A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000154   F0           MOVX      @DPTR,A
   1213                }
   1214              }
   1215            }
   1216          
   1217            // Send back a response message
   1218            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1219                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1220                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000155                ; Setup parameters for call to function ZDP_SendData
   \   000155   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F5..         MOV       ?V2,A
   \   00015B   78..         MOV       R0,#?V2
   \   00015D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000160   7401         MOV       A,#0x1
   \   000162   12....       LCALL     ?XSTACK_DISP100_8
   \   000165   88..         MOV       ?V2,R0
   \   000167   89..         MOV       ?V3,R1
   \   000169   78..         MOV       R0,#?V2
   \   00016B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016E   85..82       MOV       DPL,?V4
   \   000171   85..83       MOV       DPH,?V5
   \   000174   E0           MOVX      A,@DPTR
   \   000175   F5..         MOV       ?V2,A
   \   000177   A3           INC       DPTR
   \   000178   E0           MOVX      A,@DPTR
   \   000179   4480         ORL       A,#0x80
   \   00017B   F5..         MOV       ?V3,A
   \   00017D   78..         MOV       R0,#?V2
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000182   7901         MOV       R1,#0x1
   \   000184   E5..         MOV       A,?V0
   \   000186   2402         ADD       A,#0x2
   \   000188   FC           MOV       R4,A
   \   000189   E4           CLR       A
   \   00018A   35..         ADDC      A,?V1
   \   00018C   FD           MOV       R5,A
   \   00018D   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000190   12....       LCALL     ?DEALLOC_XSTACK8
   1221          }
   \   000193   740C         MOV       A,#0xc
   \   000195   12....       LCALL     ?DEALLOC_XSTACK8
   \   000198   7F09         MOV       R7,#0x9
   \   00019A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   E5..         MOV       A,?V0
   \   000002   240F         ADD       A,#0xf
   \   000004   FA           MOV       R2,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   AC..         MOV       R4,?V2
   \   000009   AD..         MOV       R5,?V3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine161_0
   \   000001                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function APSME_BindRequest
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E5..         MOV       A,?V0
   \   000002   240E         ADD       A,#0xe
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
   1222          #endif // REFLECTOR
   1223          
   1224          /*********************************************************************
   1225           * @fn      ZDO_UpdateAddrManager
   1226           *
   1227           * @brief   Update the Address Manager.
   1228           *
   1229           * @param   nwkAddr - network address
   1230           * @param   extAddr - extended address
   1231           *
   1232           * @return  none
   1233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1234          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1235          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1236            AddrMgrEntry_t addrEntry;
   1237          
   1238            // Update the address manager
   1239            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1240            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   1241            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_248:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV       A,#0x3
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1242            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV       R2,?XSP + 0
   \   000026   AB..         MOV       R3,?XSP + 1
   \   000028   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1243          }
   \   00002B   740D         MOV       A,#0xd
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   1244          
   1245          /*********************************************************************
   1246           * @fn      ZDO_ProcessServerDiscReq
   1247           *
   1248           * @brief   Process the Server_Discovery_req message.
   1249           *
   1250           * @param   inMsg  - incoming message (request)
   1251           *
   1252           * @return  none
   1253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1254          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1255          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine61 & 0xFFFF
   1256            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1257            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_98:
   \   000008   F9           MOV       R1,A
   \   000009   EA           MOV       A,R2
   \   00000A   F8           MOV       R0,A
   \   00000B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   58           ANL       A,R0
   \   000010   F5..         MOV       ?V0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   59           ANL       A,R1
   \   000015   F5..         MOV       ?V1,A
   1258          
   1259            if ( matchMask )
   \   000017   E5..         MOV       A,?V0
   \   000019   45..         ORL       A,?V1
   \   00001B   6026         JZ        ??ZDO_ProcessServerDiscReq_0
   1260            {
   1261              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1262                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   00001D                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000025   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000028   12....       LCALL     ?Subroutine87 & 0xFFFF
   1263            }
   \                     ??CrossCallReturnLabel_265:
   \   00002B   FD           MOV       R5,A
   \   00002C   7C00         MOV       R4,#0x0
   \   00002E   EE           MOV       A,R6
   \   00002F   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000032   3F           ADDC      A,R7
   \   000033   FB           MOV       R3,A
   \   000034   EE           MOV       A,R6
   \   000035   240F         ADD       A,#0xf
   \   000037   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00003A   F9           MOV       R1,A
   \   00003B   12....       LCALL     `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   1264          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000043   02....       LJMP      ??Subroutine142_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   22           RET
   1265          
   1266          /*********************************************************************
   1267           * Call Back Functions from APS  - API
   1268           */
   1269          
   1270          /*********************************************************************
   1271           * @fn          ZDO_EndDeviceTimeoutCB
   1272           *
   1273           * @brief       This function handles the binding timer for the End
   1274           *              Device Bind command.
   1275           *
   1276           * @param       none
   1277           *
   1278           * @return      none
   1279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1280          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1282          #if defined ( REFLECTOR )
   1283            byte stat;
   1284            if ( ZDO_EDBind )
   \   00000A   90....       MOV       DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1285            {
   1286              stat = ZDO_EDBind->status;
   1287          
   1288              // Send the response message to the first sent
   1289              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1290                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E8           MOV       A,R0
   \   000016   2415         ADD       A,#0x15
   \   000018   F582         MOV       DPL,A
   \   00001A   E4           CLR       A
   \   00001B   39           ADDC      A,R1
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   90....       MOV       DPTR,#ZDO_EDBind
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   C9           XCH       A,R1
   \   000028   2416         ADD       A,#0x16
   \   00002A   F582         MOV       DPL,A
   \   00002C   E4           CLR       A
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C0E0         PUSH      A
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   D0E0         POP       A
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   90....       MOV       DPTR,#ZDO_EDBind
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F583         MOV       DPH,A
   \   000044   8982         MOV       DPL,R1
   \   000046   E0           MOVX      A,@DPTR
   \   000047   85..82       MOV       DPL,?XSP + 0
   \   00004A   85..83       MOV       DPH,?XSP + 1
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E                ; Setup parameters for call to function ZDP_SendData
   \   00004E   E8           MOV       A,R0
   \   00004F   F5..         MOV       ?V0,A
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP100_8
   \   00005B   88..         MOV       ?V0,R0
   \   00005D   89..         MOV       ?V1,R1
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   75..20       MOV       ?V0,#0x20
   \   000067   75..80       MOV       ?V1,#-0x80
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   7901         MOV       R1,#0x1
   \   000071   90....       MOV       DPTR,#ZDO_EDBind
   \   000074   E0           MOVX      A,@DPTR
   \   000075   29           ADD       A,R1
   \   000076   FC           MOV       R4,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   3400         ADDC      A,#0x0
   \   00007B   FD           MOV       R5,A
   \   00007C   7405         MOV       A,#0x5
   \   00007E   12....       LCALL     ?XSTACK_DISP101_8
   \   000081   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   1291          
   1292              ZDO_RemoveEndDeviceBind();
   \   000087   90....       MOV       DPTR,#ZDO_EDBind
   \   00008A   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   1293            }
   \                     ??CrossCallReturnLabel_314:
   \   00008D   602F         JZ        ??ZDO_EndDeviceTimeoutCB_0
   \   00008F   E8           MOV       A,R0
   \   000090   2410         ADD       A,#0x10
   \   000092   F582         MOV       DPL,A
   \   000094   E4           CLR       A
   \   000095   39           ADDC      A,R1
   \   000096   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000099   6003         JZ        ??ZDO_EndDeviceTimeoutCB_1
   \   00009B                ; Setup parameters for call to function osal_mem_free
   \   00009B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   00009E   90....       MOV       DPTR,#ZDO_EDBind
   \   0000A1   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   0000A4   C8           XCH       A,R0
   \   0000A5   12....       LCALL     ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   0000A8   38           ADDC      A,R0
   \   0000A9   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   0000AC   6003         JZ        ??ZDO_EndDeviceTimeoutCB_2
   \   0000AE                ; Setup parameters for call to function osal_mem_free
   \   0000AE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000B1                ; Setup parameters for call to function osal_mem_free
   \   0000B1   90....       MOV       DPTR,#ZDO_EDBind
   \   0000B4   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000B7   90....       MOV       DPTR,#ZDO_EDBind
   \   0000BA   E4           CLR       A
   \   0000BB   F0           MOVX      @DPTR,A
   \   0000BC   A3           INC       DPTR
   \   0000BD   F0           MOVX      @DPTR,A
   1294          #endif  // REFLECTOR
   1295          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000BE   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine152_0
   \   000002                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000003   FB           MOV       R3,A
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   12....       LCALL     ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000003   22           RET
   1296          
   1297          /*********************************************************************
   1298           * Optional Management Messages
   1299           */
   1300          
   1301          /*********************************************************************
   1302           * @fn          ZDO_ProcessMgmtLqiReq
   1303           *
   1304           * @brief       This function handles parsing the incoming Management
   1305           *              LQI request and generate the response.
   1306           *
   1307           *   Note:      This function will limit the number of items returned
   1308           *              to ZDO_MAX_LQI_ITEMS items.
   1309           *
   1310           * @param       inMsg - incoming message (request)
   1311           *
   1312           * @return      none
   1313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1314          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1315          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V14,R2
   \   00000C   8B..         MOV       ?V15,R3
   1316            byte x;
   1317            byte index;
   1318            byte numItems;
   1319            byte maxItems;
   1320            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV       ?V12,#0x0
   \   000011   75..00       MOV       ?V13,#0x0
   1321            ZDP_MgmtLqiItem_t* item;
   1322            neighborEntry_t    entry;
   1323            byte aItems = 0;
   \   000014   75..00       MOV       ?V2,#0x0
   1324            associated_devices_t *aDevice;
   1325            AddrMgrEntry_t  nwkEntry;
   1326            uint8 StartIndex = inMsg->asdu[0];
   \   000017   12....       LCALL     ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00001A   35..         ADDC      A,?V15
   \   00001C   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   00001F   F5..         MOV       ?V6,A
   1327          
   1328            // Get the number of neighbor items
   1329            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000021                ; Setup parameters for call to function NLME_GetRequest
   \   000021   AC..         MOV       R4,?XSP + 0
   \   000023   AD..         MOV       R5,?XSP + 1
   \   000025   7A00         MOV       R2,#0x0
   \   000027   7B00         MOV       R3,#0x0
   \   000029   799C         MOV       R1,#-0x64
   \   00002B   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1330          
   1331            //Routing devices uses assoc table, end devices don't
   1332            if ( ZG_DEVICE_RTR_TYPE )
   \   00002E   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000031   E0           MOVX      A,@DPTR
   \   000032   6004         JZ        ??ZDO_ProcessMgmtLqiReq_0
   \   000034   6401         XRL       A,#0x1
   \   000036   7014         JNZ       ??ZDO_ProcessMgmtLqiReq_1
   1333            {
   1334              // Get the number of associated items
   1335              aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000038                ; Setup parameters for call to function AssocCount
   \   000038   7A04         MOV       R2,#0x4
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   00003F   EA           MOV       A,R2
   \   000040   F5..         MOV       ?V2,A
   1336              // Total number of items
   1337              maxItems += aItems;
   \   000042   85..82       MOV       DPL,?XSP + 0
   \   000045   85..83       MOV       DPH,?XSP + 1
   \   000048   E0           MOVX      A,@DPTR
   \   000049   2A           ADD       A,R2
   \   00004A   8008         SJMP      ??ZDO_ProcessMgmtLqiReq_2
   1338            }
   1339            else
   1340            {
   1341              maxItems = 1;
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   00004C   85..82       MOV       DPL,?XSP + 0
   \   00004F   85..83       MOV       DPH,?XSP + 1
   \   000052   7401         MOV       A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   000054   F0           MOVX      @DPTR,A
   1342            }
   1343          
   1344            // Start with the supplied index
   1345            if ( maxItems > StartIndex )
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F8           MOV       R0,A
   \   000057   E5..         MOV       A,?V6
   \   000059   C3           CLR       C
   \   00005A   98           SUBB      A,R0
   \   00005B   4003         JC        $+5
   \   00005D   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1346            {
   1347              numItems = maxItems - StartIndex;
   \   000060   E0           MOVX      A,@DPTR
   \   000061   C3           CLR       C
   \   000062   95..         SUBB      A,?V6
   \   000064   F5..         MOV       ?V1,A
   1348          
   1349              // limit the size of the list
   1350              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000066   C3           CLR       C
   \   000067   9404         SUBB      A,#0x4
   \   000069   4003         JC        ??ZDO_ProcessMgmtLqiReq_4
   1351              {
   1352                numItems = ZDO_MAX_LQI_ITEMS;
   \   00006B   75..03       MOV       ?V1,#0x3
   1353              }
   1354              
   1355              // Allocate the memory to build the table
   1356              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1357                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00006E                ; Setup parameters for call to function osal_mem_alloc
   \   00006E   E5..         MOV       A,?V1
   \   000070   75F01A       MOV       B,#0x1a
   \   000073   A4           MUL       AB
   \   000074   FA           MOV       R2,A
   \   000075   ABF0         MOV       R3,B
   \   000077   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00007A   8A..         MOV       ?V12,R2
   \   00007C   8B..         MOV       ?V13,R3
   1358          
   1359              if ( table != NULL )
   \   00007E   EA           MOV       A,R2
   \   00007F   4B           ORL       A,R3
   \   000080   7003         JNZ       $+5
   \   000082   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   1360              {
   1361                x = 0;
   \   000085   75..00       MOV       ?V3,#0x0
   1362                item = table;
   \   000088   AE..         MOV       R6,?V12
   \   00008A   AF..         MOV       R7,?V13
   1363                index = StartIndex;
   \   00008C   85....       MOV       ?V0,?V6
   \   00008F   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_6 & 0xFFFF
   1364          
   1365                // Loop through associated items and build list
   1366                for ( ; x < numItems; x++ )
   1367                {
   1368                  if ( index < aItems )
   1369                  {
   1370                    // get next associated device
   1371                    aDevice = AssocFindDevice( index++ );
   1372          
   1373                    // set basic fields
   1374                    item->panID   = _NIB.nwkPanId;
   1375                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1376                    item->nwkAddr = aDevice->shortAddr;
   1377                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1378                    item->depth   = 0xFF;
   1379                    item->lqi     = aDevice->linkInfo.rxLqi;
   1380          
   1381                    // set extented address
   1382                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1383                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1384          
   1385                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1386                    {
   1387                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1388                    }
   1389                    else
   1390                    {
   1391                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   000092                ; Setup parameters for call to function osal_memset
   \   000092   7C08         MOV       R4,#0x8
   \   000094   7D00         MOV       R5,#0x0
   \   000096   79FF         MOV       R1,#-0x1
   \   000098   AA..         MOV       R2,?V10
   \   00009A   AB..         MOV       R3,?V11
   \   00009C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1392                    }
   1393          
   1394                    // use association info to set other fields
   1395                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   00009F   E5..         MOV       A,?V4
   \   0000A1   2404         ADD       A,#0x4
   \   0000A3   F8           MOV       R0,A
   \   0000A4   E4           CLR       A
   \   0000A5   35..         ADDC      A,?V5
   \   0000A7   F9           MOV       R1,A
   \   0000A8   EE           MOV       A,R6
   \   0000A9   2416         ADD       A,#0x16
   \   0000AB   FA           MOV       R2,A
   \   0000AC   E4           CLR       A
   \   0000AD   3F           ADDC      A,R7
   \   0000AE   FB           MOV       R3,A
   \   0000AF   EE           MOV       A,R6
   \   0000B0   2415         ADD       A,#0x15
   \   0000B2   FC           MOV       R4,A
   \   0000B3   E4           CLR       A
   \   0000B4   3F           ADDC      A,R7
   \   0000B5   FD           MOV       R5,A
   \   0000B6   EE           MOV       A,R6
   \   0000B7   2414         ADD       A,#0x14
   \   0000B9   F5..         MOV       ?V10,A
   \   0000BB   E4           CLR       A
   \   0000BC   3F           ADDC      A,R7
   \   0000BD   F5..         MOV       ?V11,A
   \   0000BF   8882         MOV       DPL,R0
   \   0000C1   8983         MOV       DPH,R1
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   702E         JNZ       ??ZDO_ProcessMgmtLqiReq_9
   1396                    {
   1397                      if (  aDevice->shortAddr == 0 )
   \   0000C6   85..82       MOV       DPL,?V4
   \   0000C9   85..83       MOV       DPH,?V5
   \   0000CC   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   0000CF   85..82       MOV       DPL,?V10
   \   0000D2   85..83       MOV       DPH,?V11
   \   0000D5   7004         JNZ       ??ZDO_ProcessMgmtLqiReq_10
   1398                      {
   1399                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000D7   E4           CLR       A
   \   0000D8   F0           MOVX      @DPTR,A
   1400                        item->depth = 0;
   \   0000D9   8008         SJMP      ??ZDO_ProcessMgmtLqiReq_11
   1401                      }
   1402                      else
   1403                      {
   1404                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0000DB   7401         MOV       A,#0x1
   \   0000DD   F0           MOVX      @DPTR,A
   1405                        item->depth = _NIB.nodeDepth - 1;
   \   0000DE   90....       MOV       DPTR,#_NIB + 52
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   14           DEC       A
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0000E3   85..82       MOV       DPL,?V8
   \   0000E6   85..83       MOV       DPH,?V9
   1406                      }
   1407          
   1408                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1409                      item->relation = ZDP_MGMT_REL_PARENT;
   1410                    }
   \   0000E9   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000EC   7402         MOV       A,#0x2
   \   0000EE   12....       LCALL     ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   0000F1   E4           CLR       A
   \   0000F2   8033         SJMP      ??ZDO_ProcessMgmtLqiReq_12
   1411                    else
   1412                    {
   1413                      // If not parent, then it's a child
   1414                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0000F4   90....       MOV       DPTR,#_NIB + 52
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   04           INC       A
   \   0000F9   85..82       MOV       DPL,?V8
   \   0000FC   85..83       MOV       DPH,?V9
   \   0000FF   12....       LCALL     ?Subroutine39 & 0xFFFF
   1415          
   1416                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_61:
   \   000102   C3           CLR       C
   \   000103   9403         SUBB      A,#0x3
   \   000105   85..82       MOV       DPL,?V10
   \   000108   85..83       MOV       DPH,?V11
   \   00010B   4003         JC        $+5
   \   00010D   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   1417                      {
   1418                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   000110   7402         MOV       A,#0x2
   \   000112   12....       LCALL     ?Subroutine39 & 0xFFFF
   1419          
   1420                        if ( aDevice->nodeRelation == CHILD_RFD )
   1421                        {
   1422                          item->rxOnIdle = FALSE;
   1423                        }
   1424                        else
   1425                        {
   1426                          item->rxOnIdle = TRUE;
   1427                        }
   1428                      }
   \                     ??CrossCallReturnLabel_62:
   \   000115   6401         XRL       A,#0x1
   \   000117   7003         JNZ       $+5
   \   000119   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   1429                      else
   1430                      {
   1431                        item->devType = ZDP_MGMT_DT_ROUTER;
   1432          
   1433                        if ( aDevice->nodeRelation == CHILD_FFD )
   1434                        {
   1435                          item->rxOnIdle = FALSE;
   1436                        }
   1437                        else
   1438                        {
   1439                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   00011C   8C82         MOV       DPL,R4
   \   00011E   8D83         MOV       DPH,R5
   \   000120   7401         MOV       A,#0x1
   1440                        }
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   000122   12....       LCALL     ??Subroutine170_0 & 0xFFFF
   1441                      }
   1442          
   1443                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_376:
   \   000125   7401         MOV       A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000127   F0           MOVX      @DPTR,A
   1444                    }
   1445          
   1446                    item++;
   \   000128   EE           MOV       A,R6
   \   000129   241A         ADD       A,#0x1a
   \   00012B   FE           MOV       R6,A
   \   00012C   5001         JNC       ??ZDO_ProcessMgmtLqiReq_17
   \   00012E   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   00012F   05..         INC       ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   000131   E5..         MOV       A,?V3
   \   000133   C3           CLR       C
   \   000134   95..         SUBB      A,?V1
   \   000136   4003         JC        $+5
   \   000138   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_18 & 0xFFFF
   \   00013B   E5..         MOV       A,?V0
   \   00013D   C3           CLR       C
   \   00013E   95..         SUBB      A,?V2
   \   000140   4003         JC        $+5
   \   000142   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   \   000145                ; Setup parameters for call to function AssocFindDevice
   \   000145   AA..         MOV       R2,?V0
   \   000147   7B00         MOV       R3,#0x0
   \   000149   12....       LCALL     `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   00014C   8A..         MOV       ?V4,R2
   \   00014E   8B..         MOV       ?V5,R3
   \   000150   05..         INC       ?V0
   \   000152   90....       MOV       DPTR,#_NIB + 33
   \   000155   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000158   85..82       MOV       DPL,?V4
   \   00015B   85..83       MOV       DPH,?V5
   \   00015E   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000161   EE           MOV       A,R6
   \   000162   2412         ADD       A,#0x12
   \   000164   F582         MOV       DPL,A
   \   000166   E4           CLR       A
   \   000167   3F           ADDC      A,R7
   \   000168   F583         MOV       DPH,A
   \   00016A   E8           MOV       A,R0
   \   00016B   F0           MOVX      @DPTR,A
   \   00016C   A3           INC       DPTR
   \   00016D   E9           MOV       A,R1
   \   00016E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000171   EE           MOV       A,R6
   \   000172   2418         ADD       A,#0x18
   \   000174   F5..         MOV       ?V8,A
   \   000176   E4           CLR       A
   \   000177   3F           ADDC      A,R7
   \   000178   F5..         MOV       ?V9,A
   \   00017A   85..82       MOV       DPL,?V8
   \   00017D   F583         MOV       DPH,A
   \   00017F   74FF         MOV       A,#-0x1
   \   000181   F0           MOVX      @DPTR,A
   \   000182   85..82       MOV       DPL,?V4
   \   000185   85..83       MOV       DPH,?V5
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   C0E0         PUSH      A
   \   000195   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000198   D0E0         POP       A
   \   00019A   F0           MOVX      @DPTR,A
   \   00019B   7401         MOV       A,#0x1
   \   00019D   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A0   E4           CLR       A
   \   0001A1   F0           MOVX      @DPTR,A
   \   0001A2   85..82       MOV       DPL,?V4
   \   0001A5   85..83       MOV       DPH,?V5
   \   0001A8   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   0001AB   7402         MOV       A,#0x2
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   E8           MOV       A,R0
   \   0001B1   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0001B4   EE           MOV       A,R6
   \   0001B5   240A         ADD       A,#0xa
   \   0001B7   F5..         MOV       ?V10,A
   \   0001B9   E4           CLR       A
   \   0001BA   3F           ADDC      A,R7
   \   0001BB   F5..         MOV       ?V11,A
   \   0001BD                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0001BD   7401         MOV       A,#0x1
   \   0001BF   12....       LCALL     ?XSTACK_DISP101_8
   \   0001C2   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0001C5   E9           MOV       A,R1
   \   0001C6   6401         XRL       A,#0x1
   \   0001C8   6003         JZ        $+5
   \   0001CA   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_7 & 0xFFFF
   \   0001CD                ; Setup parameters for call to function sAddrExtCpy
   \   0001CD   7404         MOV       A,#0x4
   \   0001CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D2   AC82         MOV       R4,DPL
   \   0001D4   AD83         MOV       R5,DPH
   \   0001D6   AA..         MOV       R2,?V10
   \   0001D8   AB..         MOV       R3,?V11
   \   0001DA   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001DD   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_8 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001E0   7401         MOV       A,#0x1
   \   0001E2   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0001E5   6403         XRL       A,#0x3
   \   0001E7   6003         JZ        $+5
   \   0001E9   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001EC   8C82         MOV       DPL,R4
   \   0001EE   8D83         MOV       DPH,R5
   \   0001F0   E4           CLR       A
   \   0001F1   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   1447                  }
   1448                  else
   1449                  {
   1450                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001F4   E5..         MOV       A,?V2
   \   0001F6   C3           CLR       C
   \   0001F7   95..         SUBB      A,?V6
   \   0001F9   4005         JC        ??ZDO_ProcessMgmtLqiReq_20
   1451                      // Start with 1st neighbor
   1452                      index = 0;
   \   0001FB   75..00       MOV       ?V0,#0x0
   \   0001FE   8058         SJMP      ??ZDO_ProcessMgmtLqiReq_21
   1453                    else
   1454                      // Start with >1st neighbor
   1455                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   000200   E5..         MOV       A,?V6
   \   000202   C3           CLR       C
   \   000203   95..         SUBB      A,?V2
   \   000205   F5..         MOV       ?V0,A
   \   000207   804F         SJMP      ??ZDO_ProcessMgmtLqiReq_21
   1456                    break;
   1457                  }
   1458                }
   1459          
   1460                // Loop through neighbor items and finish list
   1461                for ( ; x < numItems; x++ )
   1462                {
   1463                  // Add next neighbor table item
   1464                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1465          
   1466                  // set ZDP_MgmtLqiItem_t fields
   1467                  item->panID    = entry.panId;
   1468                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1469                  osal_cpyExtAddr( item->extAddr, entry.neighborExtAddr);
   1470                  item->nwkAddr  = entry.neighborAddress;
   1471          
   1472                  if ( ZG_DEVICE_RTR_TYPE )
   1473                  {
   1474                    item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1475                    item->relation = ZDP_MGMT_REL_UNKNOWN;
   1476                    item->depth    = 0xFF;
   1477                  }
   1478                  else
   1479                  {
   1480                    //end devices knows this for sure
   1481                    item->rxOnIdle = ZDP_MGMT_BOOL_RECEIVER_ON;
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   000209   85..82       MOV       DPL,?V4
   \   00020C   85..83       MOV       DPH,?V5
   \   00020F   E4           CLR       A
   \   000210   12....       LCALL     ?Subroutine15 & 0xFFFF
   1482                    item->relation = ZDP_MGMT_REL_PARENT;
   \                     ??CrossCallReturnLabel_14:
   \   000213   F0           MOVX      @DPTR,A
   1483                    item->depth = _NIB.nodeDepth - 1;
   \   000214   90....       MOV       DPTR,#_NIB + 52
   \   000217   E0           MOVX      A,@DPTR
   \   000218   14           DEC       A
   \   000219   8A82         MOV       DPL,R2
   \   00021B   8B83         MOV       DPH,R3
   1484                  }
   \                     ??ZDO_ProcessMgmtLqiReq_23:
   \   00021D   12....       LCALL     ?Subroutine17 & 0xFFFF
   1485                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1486                  item->lqi      = entry.linkInfo.rxLqi;
   \                     ??CrossCallReturnLabel_22:
   \   000220   741D         MOV       A,#0x1d
   \   000222   12....       LCALL     ?XSTACK_DISP0_8
   \   000225   E0           MOVX      A,@DPTR
   \   000226   C0E0         PUSH      A
   \   000228   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00022B   D0E0         POP       A
   \   00022D   F0           MOVX      @DPTR,A
   1487          
   1488                  if ( item->nwkAddr == 0 )
   \   00022E   EE           MOV       A,R6
   \   00022F   2414         ADD       A,#0x14
   \   000231   FA           MOV       R2,A
   \   000232   E4           CLR       A
   \   000233   3F           ADDC      A,R7
   \   000234   FB           MOV       R3,A
   \   000235   8882         MOV       DPL,R0
   \   000237   8983         MOV       DPH,R1
   \   000239   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00023C   8A82         MOV       DPL,R2
   \   00023E   8B83         MOV       DPH,R3
   \   000240   7003         JNZ       ??ZDO_ProcessMgmtLqiReq_24
   1489                  {
   1490                    item->devType = ZDP_MGMT_DT_COORD;
   \   000242   E4           CLR       A
   \   000243   8002         SJMP      ??ZDO_ProcessMgmtLqiReq_25
   1491                  }
   1492                  else
   1493                  {
   1494                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_24:
   \   000245   7401         MOV       A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_25:
   \   000247   F0           MOVX      @DPTR,A
   1495                  }
   1496          
   1497                  item++;
   \   000248   EE           MOV       A,R6
   \   000249   241A         ADD       A,#0x1a
   \   00024B   FE           MOV       R6,A
   \   00024C   5001         JNC       ??ZDO_ProcessMgmtLqiReq_26
   \   00024E   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_26:
   \   00024F   05..         INC       ?V3
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   000251   E5..         MOV       A,?V3
   \   000253   C3           CLR       C
   \   000254   95..         SUBB      A,?V1
   \   000256   507C         JNC       ??ZDO_ProcessMgmtLqiReq_5
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   000258                ; Setup parameters for call to function NLME_GetRequest
   \   000258   740E         MOV       A,#0xe
   \   00025A   12....       LCALL     ?XSTACK_DISP102_8
   \   00025D   AA..         MOV       R2,?V0
   \   00025F   7B00         MOV       R3,#0x0
   \   000261   7987         MOV       R1,#-0x79
   \   000263   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000266   05..         INC       ?V0
   \   000268   7418         MOV       A,#0x18
   \   00026A   12....       LCALL     ?XSTACK_DISP0_8
   \   00026D   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000270                ; Setup parameters for call to function sAddrExtCpy
   \   000270   7410         MOV       A,#0x10
   \   000272   12....       LCALL     ?XSTACK_DISP0_8
   \   000275   AC82         MOV       R4,DPL
   \   000277   AD83         MOV       R5,DPH
   \   000279   EE           MOV       A,R6
   \   00027A   240A         ADD       A,#0xa
   \   00027C   FA           MOV       R2,A
   \   00027D   E4           CLR       A
   \   00027E   3F           ADDC      A,R7
   \   00027F   FB           MOV       R3,A
   \   000280   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000283   EE           MOV       A,R6
   \   000284   2412         ADD       A,#0x12
   \   000286   F8           MOV       R0,A
   \   000287   E4           CLR       A
   \   000288   3F           ADDC      A,R7
   \   000289   F9           MOV       R1,A
   \   00028A   740E         MOV       A,#0xe
   \   00028C   12....       LCALL     ?XSTACK_DISP0_8
   \   00028F   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000292   8882         MOV       DPL,R0
   \   000294   8983         MOV       DPH,R1
   \   000296   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000299   EE           MOV       A,R6
   \   00029A   2418         ADD       A,#0x18
   \   00029C   FA           MOV       R2,A
   \   00029D   E4           CLR       A
   \   00029E   3F           ADDC      A,R7
   \   00029F   FB           MOV       R3,A
   \   0002A0   EE           MOV       A,R6
   \   0002A1   2416         ADD       A,#0x16
   \   0002A3   FC           MOV       R4,A
   \   0002A4   E4           CLR       A
   \   0002A5   3F           ADDC      A,R7
   \   0002A6   FD           MOV       R5,A
   \   0002A7   EE           MOV       A,R6
   \   0002A8   2415         ADD       A,#0x15
   \   0002AA   F5..         MOV       ?V4,A
   \   0002AC   E4           CLR       A
   \   0002AD   3F           ADDC      A,R7
   \   0002AE   F5..         MOV       ?V5,A
   \   0002B0   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0002B3   E0           MOVX      A,@DPTR
   \   0002B4   6007         JZ        ??ZDO_ProcessMgmtLqiReq_27
   \   0002B6   6401         XRL       A,#0x1
   \   0002B8   6003         JZ        $+5
   \   0002BA   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_22 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_27:
   \   0002BD   85..82       MOV       DPL,?V4
   \   0002C0   85..83       MOV       DPH,?V5
   \   0002C3   7402         MOV       A,#0x2
   \   0002C5   12....       LCALL     ?Subroutine15 & 0xFFFF
   1498                }
   1499              }
   1500            }
   \                     ??CrossCallReturnLabel_15:
   \   0002C8   04           INC       A
   \   0002C9   12....       LCALL     ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   0002CC   74FF         MOV       A,#-0x1
   \   0002CE   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_23 & 0xFFFF
   1501            else
   1502            {
   1503              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0002D1   75..00       MOV       ?V1,#0x0
   1504            }
   1505          
   1506            // Send response
   1507            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1508                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0002D4                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   0002D4   75..00       MOV       ?V2,#0x0
   \   0002D7   78..         MOV       R0,#?V2
   \   0002D9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002DC   78..         MOV       R0,#?V12
   \   0002DE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002E1   78..         MOV       R0,#?V1
   \   0002E3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002E6   E5..         MOV       A,?V6
   \   0002E8   F5..         MOV       ?V1,A
   \   0002EA   78..         MOV       R0,#?V1
   \   0002EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002EF   7405         MOV       A,#0x5
   \   0002F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   FD           MOV       R5,A
   \   0002F6   7C00         MOV       R4,#0x0
   \   0002F8   E5..         MOV       A,?V14
   \   0002FA   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0002FD   35..         ADDC      A,?V15
   \   0002FF   FB           MOV       R3,A
   \   000300   E5..         MOV       A,?V14
   \   000302   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000305   35..         ADDC      A,?V15
   \   000307   F583         MOV       DPH,A
   \   000309   E0           MOVX      A,@DPTR
   \   00030A   F9           MOV       R1,A
   \   00030B   12....       LCALL     `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   00030E   7405         MOV       A,#0x5
   \   000310   12....       LCALL     ?DEALLOC_XSTACK8
   1509          
   1510            if ( table )
   \   000313   E5..         MOV       A,?V12
   \   000315   45..         ORL       A,?V13
   \   000317   6007         JZ        ??ZDO_ProcessMgmtLqiReq_28
   1511            {
   1512              osal_mem_free( table );
   \   000319                ; Setup parameters for call to function osal_mem_free
   \   000319   AA..         MOV       R2,?V12
   \   00031B   AB..         MOV       R3,?V13
   \   00031D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1513            }
   1514          }
   \                     ??ZDO_ProcessMgmtLqiReq_28:
   \   000320   7425         MOV       A,#0x25
   \   000322   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   EE           MOV       A,R6
   \   000001   2419         ADD       A,#0x19
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2417         ADD       A,#0x17
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   7402         MOV       A,#0x2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   E8           MOV       A,R0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   EE           MOV       A,R6
   \   000011   2402         ADD       A,#0x2
   \   000013   FA           MOV       R2,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   FB           MOV       R3,A
   \   000017   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine155_0
   \   000002                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   240F         ADD       A,#0xf
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine157_0
   \   000001                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   1515          
   1516          /*********************************************************************
   1517           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1518           *
   1519           * @brief       This function handles parsing the incoming Management
   1520           *              Network Discover request and starts the request.
   1521           *
   1522           * @param       inMsg - incoming message (request)
   1523           *
   1524           * @return      none
   1525           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1526          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1527          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine94 & 0xFFFF
   1528            NLME_ScanFields_t scan;
   1529            uint8             index;
   1530            uint8             *msg;
   1531          
   1532            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_303:
   \   00000D   35..         ADDC      A,?V1
   \   00000F   12....       LCALL     ?Subroutine49 & 0xFFFF
   1533            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_77:
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   12....       LCALL     ?XSTORE_R0123
   1534            msg += 4;
   1535            scan.duration = *msg++;
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C0E0         PUSH      A
   \   000026   7404         MOV       A,#0x4
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   12....       LCALL     ?Subroutine26 & 0xFFFF
   1536            index         = *msg;
   \                     ??CrossCallReturnLabel_34:
   \   000030   F8           MOV       R0,A
   1537            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000031   7405         MOV       A,#0x5
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   7401         MOV       A,#0x1
   \   000038   F0           MOVX      @DPTR,A
   1538            scan.scanApp  = NLME_DISC_SCAN;
   \   000039   7406         MOV       A,#0x6
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   7401         MOV       A,#0x1
   \   000040   F0           MOVX      @DPTR,A
   1539          
   1540            // Save off the information to be used for the response
   1541            zdappMgmtNwkDiscReqInProgress          = true;
   \   000041   90....       MOV       DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000044   F0           MOVX      @DPTR,A
   1542            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000045   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000048   04           INC       A
   \   000049   F0           MOVX      @DPTR,A
   1543            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00004A   85..82       MOV       DPL,?V0
   \   00004D   85..83       MOV       DPH,?V1
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000055   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr
   \   000058   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   1544            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_250:
   \   00005B   E8           MOV       A,R0
   \   00005C   90....       MOV       DPTR,#zdappMgmtNwkDiscStartIndex
   \   00005F   F0           MOVX      @DPTR,A
   1545            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000060   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   90....       MOV       DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000067   F0           MOVX      @DPTR,A
   1546          
   1547            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   000068                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000068   AA..         MOV       R2,?XSP + 0
   \   00006A   AB..         MOV       R3,?XSP + 1
   \   00006C   12....       LCALL     `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   00006F   E9           MOV       A,R1
   \   000070   6003         JZ        ??ZDO_ProcessMgmtNwkDiscReq_0
   1548            {
   1549              NLME_NwkDiscTerm();
   \   000072                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000072   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1550          
   1551              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1552            }
   1553          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000075   7407         MOV       A,#0x7
   \   000077   02....       LJMP      ??Subroutine141_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004                REQUIRE ??Subroutine156_0
   \   000004                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine168_0
   \   000002                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E5..         MOV       A,?V0
   \   000002   240F         ADD       A,#0xf
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function osal_build_uint32
   \   000004                ; Setup parameters for call to function osal_build_uint32
   \   000004   7904         MOV       R1,#0x4
   \   000006   EE           MOV       A,R6
   \   000007   FA           MOV       R2,A
   \   000008   EF           MOV       A,R7
   \   000009   FB           MOV       R3,A
   \   00000A   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00000D   EA           MOV       A,R2
   \   00000E   F8           MOV       R0,A
   \   00000F   EB           MOV       A,R3
   \   000010   F9           MOV       R1,A
   \   000011   EC           MOV       A,R4
   \   000012   FA           MOV       R2,A
   \   000013   ED           MOV       A,R5
   \   000014   FB           MOV       R3,A
   \   000015   22           RET
   1554          
   1555          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1556          /*********************************************************************
   1557           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1558           *
   1559           * @brief       This function finishes the processing of the Management
   1560           *              Network Discover Request and generates the response.
   1561           *
   1562           *   Note:      This function will limit the number of items returned
   1563           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1564           *
   1565           * @param       ResultCountSrcAddr - source of the request
   1566           * @param       msg - pointer to incoming message
   1567           * @param       SecurityUse -
   1568           *
   1569           * @return      none
   1570           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1571          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   \                     ZDO_FinishProcessingMgmtNwkDiscReq:
   1572          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1573            byte count, i, ResultCount = 0;
   \   000005   7E00         MOV       R6,#0x0
   1574            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1575          
   1576            NetworkList = nwk_getNwkDescList();
   \   000007                ; Setup parameters for call to function nwk_getNwkDescList
   \   000007   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   1577          
   1578            // Count the number of nwk descriptors in the list
   1579            pList = nwk_getNwkDescList();
   \   00000E                ; Setup parameters for call to function nwk_getNwkDescList
   \   00000E   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000011   8A..         MOV       ?V2,R2
   \   000013   8B..         MOV       ?V3,R3
   \   000015   A8..         MOV       R0,?V2
   \   000017   A9..         MOV       R1,?V3
   \   000019   800D         SJMP      ??CrossCallReturnLabel_286
   1580            while (pList)
   1581            {
   1582              ResultCount++;
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_0:
   \   00001B   0E           INC       R6
   1583              pList = pList->nextDesc;
   \   00001C   E8           MOV       A,R0
   \   00001D   2414         ADD       A,#0x14
   \   00001F   F582         MOV       DPL,A
   \   000021   E4           CLR       A
   \   000022   39           ADDC      A,R1
   \   000023   F583         MOV       DPH,A
   \   000025   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   1584            }
   \                     ??CrossCallReturnLabel_286:
   \   000028   E8           MOV       A,R0
   \   000029   49           ORL       A,R1
   \   00002A   70EF         JNZ       ??ZDO_FinishProcessingMgmtNwkDiscReq_0
   1585          
   1586            if ( ZSTACK_ROUTER_BUILD )
   1587            {
   1588              // Look for my PanID.
   1589              pList = nwk_getNwkDescList();
   1590              while ( pList )
   1591              {
   1592                if ( pList->panId == _NIB.nwkPanId )
   1593                {
   1594                  break;
   1595                }
   1596          
   1597          
   1598                if ( !pList->nextDesc )
   1599                {
   1600                  break;
   1601                }
   1602                pList = pList->nextDesc;
   1603              }
   1604          
   1605          
   1606              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1607              // prepend it.
   1608              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1609              {
   1610                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1611                if ( newDesc )
   1612                {
   1613                  byte pJoin;
   1614          
   1615                  newDesc->panId = _NIB.nwkPanId;
   1616                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1617                  newDesc->version = NLME_GetProtocolVersion();
   1618                  newDesc->stackProfile = zgStackProfile;
   1619          
   1620                  //Extended PanID
   1621                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1622          
   1623                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1624                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1625                                                     INVALID_NODE_ADDR);
   1626          
   1627                  newDesc->nextDesc = NetworkList;
   1628                  NetworkList = newDesc;
   1629                  ResultCount++;
   1630                }
   1631              }
   1632            }
   1633          
   1634            // Calc the count and apply a max count.
   1635            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   \   00002C   90....       MOV       DPTR,#zdappMgmtNwkDiscStartIndex
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F8           MOV       R0,A
   \   000031   EE           MOV       A,R6
   \   000032   C3           CLR       C
   \   000033   98           SUBB      A,R0
   \   000034   5004         JNC       ??ZDO_FinishProcessingMgmtNwkDiscReq_1
   1636            {
   1637              count = 0;
   \   000036   7900         MOV       R1,#0x0
   \   000038   8026         SJMP      ??ZDO_FinishProcessingMgmtNwkDiscReq_2
   1638            }
   1639            else
   1640            {
   1641              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_1:
   \   00003A   EE           MOV       A,R6
   \   00003B   C3           CLR       C
   \   00003C   98           SUBB      A,R0
   \   00003D   F9           MOV       R1,A
   1642              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   \   00003E   C3           CLR       C
   \   00003F   9406         SUBB      A,#0x6
   \   000041   4002         JC        ??ZDO_FinishProcessingMgmtNwkDiscReq_3
   1643              {
   1644                count = ZDO_MAX_NWKDISC_ITEMS;
   \   000043   7905         MOV       R1,#0x5
   1645              }
   1646          
   1647              // Move the list pointer up to the start index.
   1648              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_3:
   \   000045   7800         MOV       R0,#0x0
   \   000047   800D         SJMP      ??ZDO_FinishProcessingMgmtNwkDiscReq_4
   1649              {
   1650                NetworkList = NetworkList->nextDesc;
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_5:
   \   000049   E5..         MOV       A,?V0
   \   00004B   2414         ADD       A,#0x14
   \   00004D   F582         MOV       DPL,A
   \   00004F   E4           CLR       A
   \   000050   35..         ADDC      A,?V1
   \   000052   12....       LCALL     ?Subroutine66 & 0xFFFF
   1651              }
   \                     ??CrossCallReturnLabel_109:
   \   000055   08           INC       R0
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_4:
   \   000056   90....       MOV       DPTR,#zdappMgmtNwkDiscStartIndex
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   FA           MOV       R2,A
   \   00005B   E8           MOV       A,R0
   \   00005C   C3           CLR       C
   \   00005D   9A           SUBB      A,R2
   \   00005E   40E9         JC        ??ZDO_FinishProcessingMgmtNwkDiscReq_5
   1652            }
   1653          
   1654            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1655                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1656                                zdappMgmtNwkDiscStartIndex,
   1657                                count,
   1658                                NetworkList,
   1659                                false );
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_2:
   \   000060                ; Setup parameters for call to function ZDP_MgmtNwkDiscRsp
   \   000060   75..00       MOV       ?V2,#0x0
   \   000063   78..         MOV       R0,#?V2
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   E9           MOV       A,R1
   \   00006E   F5..         MOV       ?V0,A
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000075   90....       MOV       DPTR,#zdappMgmtNwkDiscStartIndex
   \   000078   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   EE           MOV       A,R6
   \   00007F   FD           MOV       R5,A
   \   000080   7C00         MOV       R4,#0x0
   \   000082   7A..         MOV       R2,#zdappMgmtNwkDiscRspAddr & 0xff
   \   000084   7B..         MOV       R3,#(zdappMgmtNwkDiscRspAddr >> 8) & 0xff
   \   000086   90....       MOV       DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F9           MOV       R1,A
   \   00008B   12....       LCALL     `??ZDP_MgmtNwkDiscRsp::?relay`; Banked call to: ZDP_MgmtNwkDiscRsp
   \   00008E   7405         MOV       A,#0x5
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   1660          
   1661            if ( ZSTACK_ROUTER_BUILD )
   1662            {
   1663              if ( newDesc != NULL )
   1664              {
   1665                osal_mem_free( newDesc );
   1666              }
   1667            }
   1668          
   1669            NLME_NwkDiscTerm();
   \   000093                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000093   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1670          }
   \   000096   02....       LJMP      ?Subroutine4 & 0xFFFF
   1671          #endif
   1672          
   1673          /*********************************************************************
   1674           * @fn          ZDO_ProcessMgmtRtgReq
   1675           *
   1676           * @brief       This function finishes the processing of the Management
   1677           *              Routing Request and generates the response.
   1678           *
   1679           *   Note:      This function will limit the number of items returned
   1680           *              to ZDO_MAX_RTG_ITEMS items.
   1681           *
   1682           * @param       inMsg - incoming message (request)
   1683           *
   1684           * @return      none
   1685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1686          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1688            byte x;
   1689            byte maxNumItems;
   1690            byte numItems = 0;
   \   00000E   7E00         MOV       R6,#0x0
   1691            uint8 *pBuf = NULL;
   \   000010   8E..         MOV       ?V6,R6
   \   000012   8E..         MOV       ?V7,R6
   1692            rtgItem_t *pList;
   1693            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000017   35..         ADDC      A,?V3
   \   000019   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00001C   FF           MOV       R7,A
   1694          
   1695            // Get the number of table items
   1696            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001D                ; Setup parameters for call to function NLME_GetRequest
   \   00001D   AC..         MOV       R4,?XSP + 0
   \   00001F   AD..         MOV       R5,?XSP + 1
   \   000021   7A00         MOV       R2,#0x0
   \   000023   7B00         MOV       R3,#0x0
   \   000025   799D         MOV       R1,#-0x63
   \   000027   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1697          
   1698            if ( maxNumItems > StartIndex )
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   EF           MOV       A,R7
   \   000033   C3           CLR       C
   \   000034   98           SUBB      A,R0
   \   000035   5069         JNC       ??ZDO_ProcessMgmtRtgReq_0
   1699            {
   1700              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C3           CLR       C
   \   000039   9F           SUBB      A,R7
   \   00003A   FE           MOV       R6,A
   1701          
   1702              // limit the size of the list
   1703              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003B   C3           CLR       C
   \   00003C   940B         SUBB      A,#0xb
   \   00003E   4002         JC        ??ZDO_ProcessMgmtRtgReq_1
   1704              {
   1705                numItems = ZDO_MAX_RTG_ITEMS;
   \   000040   7E0A         MOV       R6,#0xa
   1706              }
   1707          
   1708              // Allocate the memory to build the table
   1709              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   EE           MOV       A,R6
   \   000043   75F007       MOV       B,#0x7
   \   000046   A4           MUL       AB
   \   000047   FA           MOV       R2,A
   \   000048   ABF0         MOV       R3,B
   \   00004A   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00004D   8A..         MOV       ?V6,R2
   \   00004F   8B..         MOV       ?V7,R3
   1710          
   1711              if ( pBuf != NULL )
   \   000051   EA           MOV       A,R2
   \   000052   4B           ORL       A,R3
   \   000053   6049         JZ        ??ZDO_ProcessMgmtRtgReq_2
   1712              {
   1713                // Convert buffer to list
   1714                pList = (rtgItem_t *)pBuf;
   1715          
   1716                // Loop through items and build list
   1717                for ( x = 0; x < numItems; x++ )
   \   000055   75..00       MOV       ?V4,#0x0
   \   000058   800F         SJMP      ??ZDO_ProcessMgmtRtgReq_3
   1718                {
   1719                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1720          
   1721                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1722                  switch( pList->status )
   1723                  {
   1724                    case RT_ACTIVE:
   1725                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1726                      break;
   1727          
   1728                    case RT_DISC:
   1729                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1730                      break;
   1731          
   1732                    case RT_LINK_FAIL:
   1733                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1734                      break;
   1735          
   1736                    case RT_INIT:
   1737                    case RT_REPAIR:
   1738                    default:
   1739                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   00005A   7403         MOV       A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   00005C   F0           MOVX      @DPTR,A
   1740                      break;
   1741                  }
   1742          
   1743                  // Increment pointer to next record
   1744                  pList++;
   \   00005D   E5..         MOV       A,?V0
   \   00005F   2407         ADD       A,#0x7
   \   000061   F5..         MOV       ?V0,A
   \   000063   5002         JNC       ??ZDO_ProcessMgmtRtgReq_6
   \   000065   05..         INC       ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   000067   05..         INC       ?V4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   000069   E5..         MOV       A,?V4
   \   00006B   C3           CLR       C
   \   00006C   9E           SUBB      A,R6
   \   00006D   5031         JNC       ??ZDO_ProcessMgmtRtgReq_0
   \   00006F                ; Setup parameters for call to function NLME_GetRequest
   \   00006F   AC..         MOV       R4,?V0
   \   000071   AD..         MOV       R5,?V1
   \   000073   E5..         MOV       A,?V4
   \   000075   2F           ADD       A,R7
   \   000076   FA           MOV       R2,A
   \   000077   E4           CLR       A
   \   000078   3400         ADDC      A,#0x0
   \   00007A   FB           MOV       R3,A
   \   00007B   798B         MOV       R1,#-0x75
   \   00007D   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000080   E5..         MOV       A,?V0
   \   000082   2405         ADD       A,#0x5
   \   000084   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000087   E0           MOVX      A,@DPTR
   \   000088   14           DEC       A
   \   000089   6008         JZ        ??ZDO_ProcessMgmtRtgReq_7
   \   00008B   14           DEC       A
   \   00008C   6008         JZ        ??ZDO_ProcessMgmtRtgReq_8
   \   00008E   14           DEC       A
   \   00008F   6009         JZ        ??ZDO_ProcessMgmtRtgReq_9
   \   000091   80C7         SJMP      ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   000093   E4           CLR       A
   \   000094   80C6         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   000096   7401         MOV       A,#0x1
   \   000098   80C2         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00009A   7402         MOV       A,#0x2
   \   00009C   80BE         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   1745                }
   1746              }
   1747              else
   1748              {
   1749                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   00009E   7E00         MOV       R6,#0x0
   1750              }
   1751            }
   1752          
   1753            // Send response
   1754            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1755                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000A0                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000A0   75..00       MOV       ?V0,#0x0
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   78..         MOV       R0,#?V6
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   EE           MOV       A,R6
   \   0000AE   F5..         MOV       ?V0,A
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   EF           MOV       A,R7
   \   0000B6   F5..         MOV       ?V0,A
   \   0000B8   78..         MOV       R0,#?V0
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BD   7405         MOV       A,#0x5
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   FD           MOV       R5,A
   \   0000C4   7C00         MOV       R4,#0x0
   \   0000C6   E5..         MOV       A,?V2
   \   0000C8   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000CB   35..         ADDC      A,?V3
   \   0000CD   FB           MOV       R3,A
   \   0000CE   E5..         MOV       A,?V2
   \   0000D0   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000D3   35..         ADDC      A,?V3
   \   0000D5   F583         MOV       DPH,A
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   F9           MOV       R1,A
   \   0000D9   12....       LCALL     `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   0000DC   7405         MOV       A,#0x5
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   1756          
   1757            if ( pBuf != NULL )
   \   0000E1   E5..         MOV       A,?V6
   \   0000E3   45..         ORL       A,?V7
   \   0000E5   6007         JZ        ??ZDO_ProcessMgmtRtgReq_10
   1758            {
   1759              osal_mem_free( pBuf );
   \   0000E7                ; Setup parameters for call to function osal_mem_free
   \   0000E7   AA..         MOV       R2,?V6
   \   0000E9   AB..         MOV       R3,?V7
   \   0000EB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1760            }
   1761          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000EE   7401         MOV       A,#0x1
   \   0000F0                REQUIRE ?Subroutine9
   \   0000F0                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   02....       LJMP      ??Subroutine162_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET
   1762          
   1763          /*********************************************************************
   1764           * @fn          ZDO_ProcessMgmtBindReq
   1765           *
   1766           * @brief       This function finishes the processing of the Management
   1767           *              Bind Request and generates the response.
   1768           *
   1769           *   Note:      This function will limit the number of items returned
   1770           *              to ZDO_MAX_BIND_ITEMS items.
   1771           *
   1772           * @param       inMsg - incoming message (request)
   1773           *
   1774           * @return      none
   1775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1776          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   1778          #if defined ( REFLECTOR )
   1779            byte x;
   1780            uint16 maxNumItems;
   1781            uint16 numItems;
   1782            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV       ?V8,#0x0
   \   000011   75..00       MOV       ?V9,#0x0
   1783            apsBindingItem_t *pList;
   1784            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000017   35..         ADDC      A,?V5
   \   000019   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00001C   F5..         MOV       ?V2,A
   1785            uint8 status;
   1786          
   1787            // Get the number of table items
   1788            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   00001E                ; Setup parameters for call to function APSME_GetRequest
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7A00         MOV       R2,#0x0
   \   000024   7B00         MOV       R3,#0x0
   \   000026   79A3         MOV       R1,#-0x5d
   \   000028   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1789          
   1790            if ( maxNumItems > StartIndex )
   \   00002B   AA..         MOV       R2,?V2
   \   00002D   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000030   C3           CLR       C
   \   000031   EA           MOV       A,R2
   \   000032   98           SUBB      A,R0
   \   000033   E4           CLR       A
   \   000034   99           SUBB      A,R1
   \   000035   501E         JNC       ??ZDO_ProcessMgmtBindReq_0
   1791            {
   1792              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000037   85..82       MOV       DPL,?XSP + 0
   \   00003A   85..83       MOV       DPH,?XSP + 1
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   C3           CLR       C
   \   00003F   9A           SUBB      A,R2
   \   000040   FE           MOV       R6,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   9400         SUBB      A,#0x0
   \   000045   FF           MOV       R7,A
   1793            }
   1794            else
   1795            {
   1796              numItems = 0;
   1797            }
   1798          
   1799            // limit the size of the list
   1800            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000046   C3           CLR       C
   \   000047   EE           MOV       A,R6
   \   000048   9404         SUBB      A,#0x4
   \   00004A   EF           MOV       A,R7
   \   00004B   9400         SUBB      A,#0x0
   \   00004D   4064         JC        ??ZDO_ProcessMgmtBindReq_1
   1801            {
   1802              numItems = ZDO_MAX_BIND_ITEMS;
   \   00004F   7E03         MOV       R6,#0x3
   \   000051   7F00         MOV       R7,#0x0
   \   000053   8062         SJMP      ??ZDO_ProcessMgmtBindReq_2
   1803            }
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   000055   7E00         MOV       R6,#0x0
   1804          
   1805            // Allocate the memory to build the table
   1806            if ( numItems )
   1807            {
   1808              pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems );
   1809              
   1810              if(pBuf != NULL)
   1811              {
   1812              
   1813                status = ZSuccess;
   1814          
   1815                // Convert buffer to list
   1816                pList = (apsBindingItem_t *)pBuf;
   1817          
   1818                // Loop through items and build list
   1819                for ( x = 0; x < numItems; x++ )
   1820                {
   1821                  APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   1822                  pList++;
   1823                }
   1824              }
   1825              else
   1826              {
   1827                //No memory to allocate response, respond unsupported attribute
   1828                status = ZApsUnsupportedAttrib;
   1829                numItems = 0;
   1830              }
   1831            }
   1832            else
   1833            {
   1834              status = ZSuccess;
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   000057   75..00       MOV       ?V3,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   00005A   EE           MOV       A,R6
   \   00005B   F9           MOV       R1,A
   1835            }
   1836          
   1837            // Send response
   1838            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1839                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   00005C                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   00005C   75..00       MOV       ?V0,#0x0
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   78..         MOV       R0,#?V8
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   E9           MOV       A,R1
   \   00006A   F5..         MOV       ?V0,A
   \   00006C   78..         MOV       R0,#?V0
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000071   E5..         MOV       A,?V2
   \   000073   F5..         MOV       ?V0,A
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007A   7405         MOV       A,#0x5
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FD           MOV       R5,A
   \   000081   AC..         MOV       R4,?V3
   \   000083   E5..         MOV       A,?V4
   \   000085   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000088   35..         ADDC      A,?V5
   \   00008A   FB           MOV       R3,A
   \   00008B   E5..         MOV       A,?V4
   \   00008D   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000090   35..         ADDC      A,?V5
   \   000092   F583         MOV       DPH,A
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F9           MOV       R1,A
   \   000096   12....       LCALL     `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   000099   7405         MOV       A,#0x5
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   1840          
   1841            if ( pBuf )
   \   00009E   E5..         MOV       A,?V8
   \   0000A0   45..         ORL       A,?V9
   \   0000A2   6007         JZ        ??ZDO_ProcessMgmtBindReq_6
   1842            {
   1843              osal_mem_free( pBuf );
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   AA..         MOV       R2,?V8
   \   0000A6   AB..         MOV       R3,?V9
   \   0000A8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1844            }
   1845          #else
   1846            (void)inMsg;
   1847          #endif
   1848          }
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000AB   7402         MOV       A,#0x2
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   02....       LJMP      ?Subroutine7 & 0xFFFF
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   0000B3   EE           MOV       A,R6
   \   0000B4   4F           ORL       A,R7
   \   0000B5   60A0         JZ        ??ZDO_ProcessMgmtBindReq_3
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   0000B7                ; Setup parameters for call to function osal_mem_alloc
   \   0000B7   EE           MOV       A,R6
   \   0000B8   FA           MOV       R2,A
   \   0000B9   EF           MOV       A,R7
   \   0000BA   FB           MOV       R3,A
   \   0000BB   EA           MOV       A,R2
   \   0000BC   75F015       MOV       B,#0x15
   \   0000BF   A4           MUL       AB
   \   0000C0   FA           MOV       R2,A
   \   0000C1   A8F0         MOV       R0,B
   \   0000C3   75F015       MOV       B,#0x15
   \   0000C6   EB           MOV       A,R3
   \   0000C7   A4           MUL       AB
   \   0000C8   28           ADD       A,R0
   \   0000C9   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   0000CC   8A..         MOV       ?V8,R2
   \   0000CE   8B..         MOV       ?V9,R3
   \   0000D0   EA           MOV       A,R2
   \   0000D1   4B           ORL       A,R3
   \   0000D2   6032         JZ        ??ZDO_ProcessMgmtBindReq_7
   \   0000D4   75..00       MOV       ?V3,#0x0
   \   0000D7   75..00       MOV       ?V6,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_8:
   \   0000DA   C3           CLR       C
   \   0000DB   E5..         MOV       A,?V6
   \   0000DD   9E           SUBB      A,R6
   \   0000DE   E4           CLR       A
   \   0000DF   9F           SUBB      A,R7
   \   0000E0   4003         JC        $+5
   \   0000E2   02....       LJMP      ??ZDO_ProcessMgmtBindReq_4 & 0xFFFF
   \   0000E5                ; Setup parameters for call to function APSME_GetRequest
   \   0000E5   AC..         MOV       R4,?V0
   \   0000E7   AD..         MOV       R5,?V1
   \   0000E9   A8..         MOV       R0,?V2
   \   0000EB   E5..         MOV       A,?V6
   \   0000ED   28           ADD       A,R0
   \   0000EE   FA           MOV       R2,A
   \   0000EF   E4           CLR       A
   \   0000F0   3400         ADDC      A,#0x0
   \   0000F2   FB           MOV       R3,A
   \   0000F3   79A2         MOV       R1,#-0x5e
   \   0000F5   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   0000F8   E5..         MOV       A,?V0
   \   0000FA   2415         ADD       A,#0x15
   \   0000FC   F5..         MOV       ?V0,A
   \   0000FE   5002         JNC       ??ZDO_ProcessMgmtBindReq_9
   \   000100   05..         INC       ?V1
   \                     ??ZDO_ProcessMgmtBindReq_9:
   \   000102   05..         INC       ?V6
   \   000104   80D4         SJMP      ??ZDO_ProcessMgmtBindReq_8
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000106   75..B5       MOV       ?V3,#-0x4b
   \   000109   7900         MOV       R1,#0x0
   \   00010B   02....       LJMP      ??ZDO_ProcessMgmtBindReq_5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine164_0
   \   000001                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1849          
   1850          /*********************************************************************
   1851           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1852           *
   1853           * @brief       This function finishes the processing of the Management
   1854           *              Direct Join Request and generates the response.
   1855           *
   1856           * @param       inMsg - incoming message (request)
   1857           *
   1858           * @return      none
   1859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1860          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1861          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine91 & 0xFFFF
   1862            uint8 *deviceAddr;
   1863            uint8 capInfo;
   1864            uint8 stat;
   1865          
   1866            // Parse the message
   1867            deviceAddr = inMsg->asdu;
   1868            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1869          
   1870            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_310:
   \   00000D   F583         MOV       DPH,A
   \   00000F   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000012                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000012   8A82         MOV       DPL,R2
   \   000014   F583         MOV       DPH,A
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000023   E9           MOV       A,R1
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   F0           MOVX      @DPTR,A
   1871          
   1872            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002B                ; Setup parameters for call to function ZDP_SendData
   \   00002B   75..00       MOV       ?V0,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP100_8
   \   000038   88..         MOV       ?V0,R0
   \   00003A   89..         MOV       ?V1,R1
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..35       MOV       ?V0,#0x35
   \   000044   75..80       MOV       ?V1,#-0x80
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   1873          }
   \   000052                REQUIRE ?Subroutine8
   \   000052                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV       A,#0x1
   \   000002   02....       LJMP      ??Subroutine141_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                REQUIRE ??Subroutine158_0
   \   000004                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000005   FA           MOV       R2,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   00000B   22           RET
   1874          
   1875          /*********************************************************************
   1876           * @fn          ZDO_ProcessMgmtLeaveReq
   1877           *
   1878           * @brief       This function processes a Management Leave Request
   1879           *              and generates the response.
   1880           *
   1881           * @param       inMsg - incoming message (request)
   1882           *
   1883           * @return      none
   1884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1885          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1886          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine94 & 0xFFFF
   1887            NLME_LeaveReq_t req;
   1888            ZStatus_t       status;
   1889            uint8           option;
   1890            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_304:
   \   00000D   35..         ADDC      A,?V1
   \   00000F   12....       LCALL     ??Subroutine145_0 & 0xFFFF
   1891            
   1892            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1893                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_241:
   \   000012                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000012   EE           MOV       A,R6
   \   000013   FA           MOV       R2,A
   \   000014   EF           MOV       A,R7
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000019   E9           MOV       A,R1
   \   00001A   600F         JZ        ??ZDO_ProcessMgmtLeaveReq_0
   \   00001C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001C   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00001F                ; Setup parameters for call to function sAddrExtCmp
   \   00001F   EE           MOV       A,R6
   \   000020   FA           MOV       R2,A
   \   000021   EF           MOV       A,R7
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000026   E9           MOV       A,R1
   \   000027   6401         XRL       A,#0x1
   \   000029   700A         JNZ       ??ZDO_ProcessMgmtLeaveReq_1
   1894            {
   1895              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1896              {
   1897                // Coordinator shall drop the leave request for itself
   1898                // section 3.6.1.10.3.1 R21
   1899                return;
   1900              }
   1901              else
   1902              {
   1903                // Remove this device
   1904                req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00002B   7401         MOV       A,#0x1
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   8009         SJMP      ??ZDO_ProcessMgmtLeaveReq_2
   1905              }
   1906            }
   1907            else
   1908            {
   1909              // Remove child device
   1910              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000035   7401         MOV       A,#0x1
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   EE           MOV       A,R6
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   EF           MOV       A,R7
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   00003E   F0           MOVX      @DPTR,A
   1911            }
   1912            if ( ( ZG_BUILD_ENDDEVICE_TYPE ) && ( ZG_DEVICE_ENDDEVICE_TYPE ) )
   1913            {
   1914              //Only the parent device can request to leave, otherwise silently discard the frame
   1915              if(inMsg->srcAddr.addr.shortAddr != _NIB.nwkCoordAddress)
   \   00003F   E5..         MOV       A,?V0
   \   000041   2402         ADD       A,#0x2
   \   000043   FC           MOV       R4,A
   \   000044   E4           CLR       A
   \   000045   35..         ADDC      A,?V1
   \   000047   FD           MOV       R5,A
   \   000048   8C82         MOV       DPL,R4
   \   00004A   F583         MOV       DPH,A
   \   00004C   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   68           XRL       A,R0
   \   000051   7003         JNZ       ??ZDO_ProcessMgmtLeaveReq_3
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   69           XRL       A,R1
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000056   6003         JZ        $+5
   \   000058   02....       LJMP      ??ZDO_ProcessMgmtLeaveReq_4 & 0xFFFF
   1916              {
   1917                return;
   1918              }
   1919            }
   1920          
   1921            option = msg[Z_EXTADDR_LEN];
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   FE           MOV       R6,A
   1922            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000069   A2E6         MOV       C,0xE0 /* A   */.6
   \   00006B   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_5
   1923            {
   1924              req.removeChildren = TRUE;
   \   00006D   7403         MOV       A,#0x3
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   7401         MOV       A,#0x1
   \   000074   F0           MOVX      @DPTR,A
   1925            }
   1926          
   1927            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_5:
   \   000075   EE           MOV       A,R6
   \   000076   A2E7         MOV       C,0xE0 /* A   */.7
   \   000078   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_6
   1928            {
   1929               req.rejoin = TRUE;
   \   00007A   7404         MOV       A,#0x4
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   7401         MOV       A,#0x1
   \   000081   F0           MOVX      @DPTR,A
   1930            }
   1931          
   1932            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_6:
   \   000082   7405         MOV       A,#0x5
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   E4           CLR       A
   \   000088   12....       LCALL     ?Subroutine112 & 0xFFFF
   1933            
   1934            //According to R21 spec sec2.4.3.3.5.2 Mgmt leave rsp must contain the status response from the nwk leave processing. 
   1935            //Latest discussion in Zigbee indicates that mgmt leave rsp due to an OTA command must have status=success (9/12/16)
   1936            status = ZSuccess;
   \                     ??CrossCallReturnLabel_257:
   \   00008B   F0           MOVX      @DPTR,A
   1937            
   1938            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00008C                ; Setup parameters for call to function ZDP_SendData
   \   00008C   F5..         MOV       ?V2,A
   \   00008E   78..         MOV       R0,#?V2
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   7401         MOV       A,#0x1
   \   000095   12....       LCALL     ?XSTACK_DISP100_8
   \   000098   88..         MOV       ?V2,R0
   \   00009A   89..         MOV       ?V3,R1
   \   00009C   78..         MOV       R0,#?V2
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   75..34       MOV       ?V2,#0x34
   \   0000A4   75..80       MOV       ?V3,#-0x80
   \   0000A7   78..         MOV       R0,#?V2
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   7901         MOV       R1,#0x1
   \   0000AE   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   1939            
   1940            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1941            {
   1942              // Stop polling and get ready to reset
   1943              NLME_SetPollRate( 0 );
   \   0000B4                ; Setup parameters for call to function NLME_SetPollRate
   \   0000B4   90....       MOV       DPTR,#__Constant_0
   \   0000B7   12....       LCALL     ?XLOAD_R2345
   \   0000BA   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1944              NLME_SetResponseRate(0);
   \   0000BD                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000BD   7A00         MOV       R2,#0x0
   \   0000BF   7B00         MOV       R3,#0x0
   \   0000C1   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1945              NLME_SetQueuedPollRate(0);
   \   0000C4                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000C4   7A00         MOV       R2,#0x0
   \   0000C6   7B00         MOV       R3,#0x0
   \   0000C8   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1946            }
   1947            
   1948            NLME_LeaveReq(&req);
   \   0000CB                ; Setup parameters for call to function NLME_LeaveReq
   \   0000CB   7401         MOV       A,#0x1
   \   0000CD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D0   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   1949            
   1950            if (! (option & ZDP_MGMT_LEAVE_REQ_REJOIN) )
   \   0000D3   EE           MOV       A,R6
   \   0000D4   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000D6   400D         JC        ??ZDO_ProcessMgmtLeaveReq_4
   1951            {
   1952              if(req.extAddr == NULL)
   \   0000D8   7401         MOV       A,#0x1
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   0000E0   7003         JNZ       ??ZDO_ProcessMgmtLeaveReq_4
   1953              {
   1954                bdb_setFN();
   \   0000E2                ; Setup parameters for call to function bdb_setFN
   \   0000E2   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1955              }
   1956            }
   1957          }
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   0000E5   7406         MOV       A,#0x6
   \   0000E7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EA                REQUIRE ?Subroutine4
   \   0000EA                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000003   90....       MOV       DPTR,#_NIB + 23
   \   000006   22           RET
   1958          
   1959          
   1960          /*********************************************************************
   1961           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1962           *
   1963           * @brief       This function processes a Management Permit Join Request
   1964           *              and generates the response.
   1965           *
   1966           * @param       inMsg - incoming message (request)
   1967           *
   1968           * @return      none
   1969           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1970          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1971          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine91 & 0xFFFF
   1972            uint8 stat;
   1973            uint8 duration;
   1974          #if (ZG_BUILD_COORDINATOR_TYPE)
   1975            if(ZG_DEVICE_COORDINATOR_TYPE)
   1976            {
   1977              //If zgAllowRemoteTCPolicyChange is set to FALSE, the request from other 
   1978              //devices cannot affect the  Trust Center policies
   1979              if((zgAllowRemoteTCPolicyChange == 0) && (inMsg->srcAddr.addr.shortAddr!= 0x0000))
   1980              {
   1981                return;
   1982              }
   1983            }
   1984          #endif
   1985            
   1986            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \                     ??CrossCallReturnLabel_311:
   \   00000D   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000010   F5..         MOV       ?V0,A
   1987            // Per R21 Spec this field is not longer relevant 2.4.3.3.7.2 (Mgmt_Permit_Joining_req Effect on Receipt)
   1988            //tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1989          
   1990            // Per R21 Spec this duration cannot last forever 2.4.3.3.7.2 (Mgmt_Permit_Joining_req Effect on Receipt)
   1991            if(duration == 0xFF)
   \   000012   74FF         MOV       A,#-0x1
   \   000014   65..         XRL       A,?V0
   \   000016   7003         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_0
   1992            {
   1993              duration = 0xFE;
   \   000018   75..FE       MOV       ?V0,#-0x2
   1994            }
   1995            
   1996            // Set the network layer permit join duration
   1997            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00001B                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00001B   A9..         MOV       R1,?V0
   \   00001D   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000020   E9           MOV       A,R1
   \   000021   85..82       MOV       DPL,?XSP + 0
   \   000024   85..83       MOV       DPH,?XSP + 1
   \   000027   F0           MOVX      @DPTR,A
   1998          
   1999            //Handle the permit joining if running a distributed network
   2000            if(APSME_IsDistributedSecurity())
   \   000028                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000028   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   00002B   E9           MOV       A,R1
   \   00002C   6005         JZ        ??ZDO_ProcessMgmtPermitJoinReq_1
   2001            {
   2002              ZDSecMgrPermitJoining( duration );
   \   00002E                ; Setup parameters for call to function ZDSecMgrPermitJoining
   \   00002E   A9..         MOV       R1,?V0
   \   000030   12....       LCALL     `??ZDSecMgrPermitJoining::?relay`; Banked call to: ZDSecMgrPermitJoining
   2003            }
   2004            
   2005            // Handle the Trust Center Significance
   2006            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   2007            {
   2008              ZDSecMgrPermitJoining( duration );
   2009            }
   2010          
   2011            // Send a response if unicast
   2012            if ( !inMsg->wasBroadcast )
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000033   EE           MOV       A,R6
   \   000034   240B         ADD       A,#0xb
   \   000036   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000039   7027         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_2
   2013            {
   2014              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00003B                ; Setup parameters for call to function ZDP_SendData
   \   00003B   75..00       MOV       ?V0,#0x0
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000043   7401         MOV       A,#0x1
   \   000045   12....       LCALL     ?XSTACK_DISP100_8
   \   000048   88..         MOV       ?V0,R0
   \   00004A   89..         MOV       ?V1,R1
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   75..36       MOV       ?V0,#0x36
   \   000054   75..80       MOV       ?V1,#-0x80
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   12....       LCALL     ?Subroutine86 & 0xFFFF
   2015            }
   \                     ??CrossCallReturnLabel_152:
   \   00005F   12....       LCALL     ?DEALLOC_XSTACK8
   2016          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_2:
   \   000062   02....       LJMP      ?Subroutine8 & 0xFFFF
   2017          
   2018          /*
   2019           * This function stub allows the next higher layer to be notified of
   2020           * a permit joining timeout.
   2021           */
   2022          /*********************************************************************
   2023           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   2024           *
   2025           * @brief       This function stub allows the next higher layer to be
   2026           *              notified of a permit joining timeout. Currently, this
   2027           *              directly bypasses the APS layer.
   2028           *
   2029           * @param       none
   2030           *
   2031           * @return      none
   2032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2033          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   2034          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2035            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   2036            // Currently, only the ZDSecMgr needs to be notified
   2037            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   2038            {
   2039              ZDSecMgrPermitJoiningTimeout();
   2040            }
   2041            #endif
   2042          }
   \   000000   02....       LJMP      ?BRET
   2043          
   2044          /*********************************************************************
   2045           * @fn          ZDO_ProcessUserDescReq
   2046           *
   2047           * @brief       This function finishes the processing of the User
   2048           *              Descriptor Request and generates the response.
   2049           *
   2050           * @param       inMsg - incoming message (request)
   2051           *
   2052           * @return      none
   2053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2054          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   2055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine61 & 0xFFFF
   2056            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_99:
   \   00000D   F8           MOV       R0,A
   \   00000E   E4           CLR       A
   \   00000F   C8           XCH       A,R0
   \   000010   F9           MOV       R1,A
   \   000011   EA           MOV       A,R2
   \   000012   28           ADD       A,R0
   \   000013   F5..         MOV       ?V4,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \   000017   F5..         MOV       ?V5,A
   2057            UserDescriptorFormat_t userDesc;
   2058          
   2059            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   2060                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000019   EE           MOV       A,R6
   \   00001A   240F         ADD       A,#0xf
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   F5..         MOV       ?V3,A
   \   000022   EE           MOV       A,R6
   \   000023   2402         ADD       A,#0x2
   \   000025   F5..         MOV       ?V0,A
   \   000027   E4           CLR       A
   \   000028   3F           ADDC      A,R7
   \   000029   F5..         MOV       ?V1,A
   \   00002B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6A           XRL       A,R2
   \   000030   7003         JNZ       ??ZDO_ProcessUserDescReq_0
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   69           XRL       A,R1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000035   705B         JNZ       ??ZDO_ProcessUserDescReq_1
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   A8..         MOV       R0,?XSP + 0
   \   000039   A9..         MOV       R1,?XSP + 1
   \   00003B   88..         MOV       ?V6,R0
   \   00003D   89..         MOV       ?V7,R1
   \   00003F   78..         MOV       R0,#?V6
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV       ?V6,#0x11
   \   000047   75..00       MOV       ?V7,#0x0
   \   00004A   78..         MOV       R0,#?V6
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV       R4,#0x0
   \   000051   7D00         MOV       R5,#0x0
   \   000053   7A81         MOV       R2,#-0x7f
   \   000055   7B00         MOV       R3,#0x0
   \   000057   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005A   7404         MOV       A,#0x4
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   E9           MOV       A,R1
   \   000060   7030         JNZ       ??ZDO_ProcessUserDescReq_1
   2061            {
   2062              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000062                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000062   75..00       MOV       ?V6,#0x0
   \   000065   78..         MOV       R0,#?V6
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   7401         MOV       A,#0x1
   \   00006C   12....       LCALL     ?XSTACK_DISP100_8
   \   00006F   88..         MOV       ?V6,R0
   \   000071   89..         MOV       ?V7,R1
   \   000073   78..         MOV       R0,#?V6
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   AC..         MOV       R4,?V4
   \   00007A   AD..         MOV       R5,?V5
   \   00007C   AA..         MOV       R2,?V0
   \   00007E   AB..         MOV       R3,?V1
   \   000080   85..82       MOV       DPL,?V2
   \   000083   85..83       MOV       DPH,?V3
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F9           MOV       R1,A
   \   000088   12....       LCALL     `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   00008B   7403         MOV       A,#0x3
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000090   802A         SJMP      ??ZDO_ProcessUserDescReq_2
   2063            }
   2064            else
   2065            {
   2066              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   2067                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000092                ; Setup parameters for call to function ZDP_GenericRsp
   \   000092   75..11       MOV       ?V6,#0x11
   \   000095   75..80       MOV       ?V7,#-0x80
   \   000098   78..         MOV       R0,#?V6
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   78..         MOV       R0,#?V4
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A2   12....       LCALL     ?Subroutine87 & 0xFFFF
   2068            }
   \                     ??CrossCallReturnLabel_266:
   \   0000A5   FD           MOV       R5,A
   \   0000A6   7C84         MOV       R4,#-0x7c
   \   0000A8   AA..         MOV       R2,?V0
   \   0000AA   AB..         MOV       R3,?V1
   \   0000AC   85..82       MOV       DPL,?V2
   \   0000AF   85..83       MOV       DPH,?V3
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F9           MOV       R1,A
   \   0000B4   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000B7   7404         MOV       A,#0x4
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   2069          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000BC   7411         MOV       A,#0x11
   \   0000BE   02....       LJMP      ?Subroutine9 & 0xFFFF
   2070          
   2071          /*********************************************************************
   2072           * @fn          ZDO_ProcessUserDescSet
   2073           *
   2074           * @brief       This function finishes the processing of the User
   2075           *              Descriptor Set and generates the response.
   2076           *
   2077           * @param       inMsg - incoming message (request)
   2078           *
   2079           * @return      none
   2080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2081          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   2082          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   2083            uint8 *msg;
   2084            uint16 aoi;
   2085            UserDescriptorFormat_t userDesc;
   2086            uint8 outMsg[3];
   2087            uint8 status;
   2088          
   2089            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000011   35..         ADDC      A,?V3
   \   000013   12....       LCALL     ?Subroutine60 & 0xFFFF
   2090            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_96:
   \   000016   FA           MOV       R2,A
   \   000017   E4           CLR       A
   \   000018   CA           XCH       A,R2
   \   000019   FB           MOV       R3,A
   \   00001A   EC           MOV       A,R4
   \   00001B   2A           ADD       A,R2
   \   00001C   FE           MOV       R6,A
   \   00001D   E4           CLR       A
   \   00001E   3B           ADDC      A,R3
   \   00001F   FF           MOV       R7,A
   2091          
   2092            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6E           XRL       A,R6
   \   000025   7003         JNZ       ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6F           XRL       A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ        $+5
   \   00002C   02....       LJMP      ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   2093            {
   2094              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FA           MOV       R2,A
   \   000037   9410         SUBB      A,#0x10
   \   000039   5004         JNC       ??ZDO_ProcessUserDescSet_2
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8003         SJMP      ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00003F   75..10       MOV       ?V0,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E5..         MOV       A,?V0
   \   000049   12....       LCALL     ?Subroutine33 & 0xFFFF
   2095              msg ++;  // increment one for the length field
   2096          
   2097              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_49:
   \   00004C   A982         MOV       R1,DPL
   \   00004E   AA83         MOV       R2,DPH
   \   000050   89..         MOV       ?V4,R1
   \   000052   8A..         MOV       ?V5,R2
   \   000054   75..00       MOV       ?V6,#0x0
   \   000057   78..         MOV       R0,#?V4
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005C   7407         MOV       A,#0x7
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FC           MOV       R4,A
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7408         MOV       A,#0x8
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   AA82         MOV       R2,DPL
   \   00006C   AB83         MOV       R3,DPH
   \   00006E   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   2098              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000074                ; Setup parameters for call to function osal_nv_write
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?XSTACK_DISP100_8
   \   000079   88..         MOV       ?V4,R0
   \   00007B   89..         MOV       ?V5,R1
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   75..11       MOV       ?V4,#0x11
   \   000085   75..00       MOV       ?V5,#0x0
   \   000088   78..         MOV       R0,#?V4
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   7C00         MOV       R4,#0x0
   \   00008F   7D00         MOV       R5,#0x0
   \   000091   7A81         MOV       R2,#-0x7f
   \   000093   7B00         MOV       R3,#0x0
   \   000095   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000098   7404         MOV       A,#0x4
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   2099              if ( userDesc.len != 0 )
   \   00009D   7404         MOV       A,#0x4
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   0000A6   6005         JZ        ??ZDO_ProcessUserDescSet_4
   2100              {
   2101                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   D2E4         SETB      0xE0 /* A   */.4
   \   0000AB   8003         SJMP      ??ZDO_ProcessUserDescSet_5
   2102              }
   2103              else
   2104              {
   2105                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   C2E4         CLR       0xE0 /* A   */.4
   2106              }
   2107          
   2108              status = ZDP_SUCCESS;
   2109            }
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000B0   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   0000B3   E4           CLR       A
   \   0000B4   8008         SJMP      ??ZDO_ProcessUserDescSet_6
   2110            else
   2111            {
   2112              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000B6   85..82       MOV       DPL,?XSP + 0
   \   0000B9   85..83       MOV       DPH,?XSP + 1
   \   0000BC   7484         MOV       A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000BE   F0           MOVX      @DPTR,A
   2113            }
   2114          
   2115            outMsg[0] = status;
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   C0E0         PUSH      A
   \   0000C2   7401         MOV       A,#0x1
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   D0E0         POP       A
   \   0000C9   F0           MOVX      @DPTR,A
   2116            outMsg[1] = LO_UINT16( aoi );
   \   0000CA   7402         MOV       A,#0x2
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   EE           MOV       A,R6
   \   0000D0   F0           MOVX      @DPTR,A
   2117            outMsg[2] = LO_UINT16( aoi );
   \   0000D1   7403         MOV       A,#0x3
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   EE           MOV       A,R6
   \   0000D7   F0           MOVX      @DPTR,A
   2118          
   2119            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   2120                         inMsg->SecurityUse );
   \   0000D8                ; Setup parameters for call to function ZDP_SendData
   \   0000D8   E5..         MOV       A,?V2
   \   0000DA   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000DD   35..         ADDC      A,?V3
   \   0000DF   F583         MOV       DPH,A
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   F5..         MOV       ?V1,A
   \   0000E4   78..         MOV       R0,#?V1
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E9   7402         MOV       A,#0x2
   \   0000EB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EE   88..         MOV       ?V4,R0
   \   0000F0   89..         MOV       ?V5,R1
   \   0000F2   78..         MOV       R0,#?V4
   \   0000F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F7   75..14       MOV       ?V4,#0x14
   \   0000FA   75..80       MOV       ?V5,#-0x80
   \   0000FD   78..         MOV       R0,#?V4
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000102   7903         MOV       R1,#0x3
   \   000104   E5..         MOV       A,?V2
   \   000106   2402         ADD       A,#0x2
   \   000108   FC           MOV       R4,A
   \   000109   E4           CLR       A
   \   00010A   35..         ADDC      A,?V3
   \   00010C   FD           MOV       R5,A
   \   00010D   E5..         MOV       A,?V2
   \   00010F   240F         ADD       A,#0xf
   \   000111   FA           MOV       R2,A
   \   000112   E4           CLR       A
   \   000113   35..         ADDC      A,?V3
   \   000115   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   2121          }
   \   00011B   7415         MOV       A,#0x15
   \   00011D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000120   7F07         MOV       R7,#0x7
   \   000122   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   2122          
   2123          /*********************************************************************
   2124           * @fn          ZDO_ProcessDeviceAnnce
   2125           *
   2126           * @brief       This function processes a device annouce message.
   2127           *
   2128           * @param       inMsg - incoming message
   2129           *
   2130           * @return      none
   2131           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine153_0
   \   000006                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2132          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   2133          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV       A,#-0x20
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2134            ZDO_DeviceAnnce_t Annce;
   2135            AddrMgrEntry_t addrEntry;
   2136            uint8 parentExt[Z_EXTADDR_LEN];
   2137          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   2138            uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   2139          #endif
   2140          
   2141            if ( (_NIB.nwkState != NWK_ROUTER) && (_NIB.nwkState != NWK_ENDDEVICE) )
   \   00000A   90....       MOV       DPTR,#_NIB + 35
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   7408         MOV       A,#0x8
   \   000011   68           XRL       A,R0
   \   000012   6008         JZ        ??ZDO_ProcessDeviceAnnce_0
   \   000014   7404         MOV       A,#0x4
   \   000016   68           XRL       A,R0
   \   000017   6003         JZ        $+5
   \   000019   02....       LJMP      ??ZDO_ProcessDeviceAnnce_1 & 0xFFFF
   2142            {
   2143              // we aren抰 stable, ignore the message
   2144              return;
   2145            }
   2146            
   2147            // Parse incoming message
   2148            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   00001C                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00001C   AC..         MOV       R4,?XSP + 0
   \   00001E   AD..         MOV       R5,?XSP + 1
   \   000020   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2149          
   2150            if ( ZSTACK_END_DEVICE_BUILD )
   2151            {
   2152              // Make sure the message didn't come from myself - end device only
   2153              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000023                ; Setup parameters for call to function NLME_GetExtAddr
   \   000023   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000026                ; Setup parameters for call to function sAddrExtCmp
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   AC82         MOV       R4,DPL
   \   00002D   AD83         MOV       R5,DPH
   \   00002F   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000032   E9           MOV       A,R1
   \   000033   601D         JZ        ??ZDO_ProcessDeviceAnnce_2
   \   000035                ; Setup parameters for call to function NLME_GetShortAddr
   \   000035   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000038   8A..         MOV       ?V0,R2
   \   00003A   8B..         MOV       ?V1,R3
   \   00003C   A8..         MOV       R0,?V0
   \   00003E   A9..         MOV       R1,?V1
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   E0           MOVX      A,@DPTR
   \   000047   68           XRL       A,R0
   \   000048   7003         JNZ       ??ZDO_ProcessDeviceAnnce_3
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   00004D   7003         JNZ       $+5
   \   00004F   02....       LJMP      ??ZDO_ProcessDeviceAnnce_1 & 0xFFFF
   2154              {
   2155                return;
   2156              }
   2157            }
   2158          
   2159          #if defined ( ZIGBEEPRO )
   2160            // Clean up the neighbor table
   2161            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   000052                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000052   12....       LCALL     `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   2162          
   2163            // If address conflict is detected, no need to update the address manager
   2164            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000055                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   AC82         MOV       R4,DPL
   \   00005C   AD83         MOV       R5,DPH
   \   00005E   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000061   12....       LCALL     `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000064   E9           MOV       A,R1
   \   000065   6401         XRL       A,#0x1
   \   000067   7003         JNZ       $+5
   \   000069   02....       LJMP      ??ZDO_ProcessDeviceAnnce_1 & 0xFFFF
   2165            {
   2166              return;
   2167            }
   2168          
   2169            // Check for parent's address
   2170            NLME_GetCoordExtAddr( parentExt );
   \   00006C                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00006C   7418         MOV       A,#0x18
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   2171            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000074                ; Setup parameters for call to function sAddrExtCmp
   \   000074   7402         MOV       A,#0x2
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   AC82         MOV       R4,DPL
   \   00007B   AD83         MOV       R5,DPH
   \   00007D   7418         MOV       A,#0x18
   \   00007F   12....       LCALL     ?XSTACK_DISP101_8
   \   000082   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000085   E9           MOV       A,R1
   \   000086   6030         JZ        ??ZDO_ProcessDeviceAnnce_4
   2172            {
   2173              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000088                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000088   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00008B   8A..         MOV       ?V0,R2
   \   00008D   8B..         MOV       ?V1,R3
   \   00008F   A8..         MOV       R0,?V0
   \   000091   A9..         MOV       R1,?V1
   \   000093   85..82       MOV       DPL,?XSP + 0
   \   000096   85..83       MOV       DPH,?XSP + 1
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   68           XRL       A,R0
   \   00009B   7003         JNZ       ??ZDO_ProcessDeviceAnnce_5
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000A0   6016         JZ        ??ZDO_ProcessDeviceAnnce_4
   2174              {
   2175                // Set the Parent's MAC's new short address
   2176                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   0000A2   85..82       MOV       DPL,?XSP + 0
   \   0000A5   85..83       MOV       DPH,?XSP + 1
   \   0000A8   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000AB   E8           MOV       A,R0
   \   0000AC   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   2177                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_441:
   \   0000AF                ; Setup parameters for call to function ZMacSetReq
   \   0000AF   7A..         MOV       R2,#(_NIB + 23) & 0xff
   \   0000B1   7B..         MOV       R3,#((_NIB + 23) >> 8) & 0xff
   \   0000B3   794B         MOV       R1,#0x4b
   \   0000B5   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2178              }
   2179            }
   2180          
   2181            if ( ZSTACK_ROUTER_BUILD )
   2182            {
   2183              // If the device annce comes from a end device child that has moved
   2184              // to another parent, remove it from associated device list
   2185          
   2186              // If the dev annce is coming from other device's children,
   2187              // (The dev annce from its own children shall be unicast to itself,
   2188              // So check the mac destination address)
   2189              // Remove it from the associated device list. If it is not
   2190              // a child, no action will be taken in AssocRemove() anyway.
   2191              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   2192              {
   2193                associated_devices_t *dev_ptr;
   2194          
   2195                // If it's an end device child
   2196                dev_ptr = AssocGetWithExt( Annce.extAddr );
   2197                if ( dev_ptr )
   2198                {
   2199                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2200                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   2201                  {
   2202                    AssocRemove( Annce.extAddr );
   2203                  }
   2204                }
   2205          
   2206                // Remove the address from the SrcMatch table,
   2207                // just in case the device was aged out by Child Management Table process
   2208                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2209                     ( zgChildAgingEnable == TRUE ) )
   2210                {
   2211                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   2212                }
   2213              }
   2214            }
   2215          
   2216            // Assume that the device has moved, remove existing routing entries
   2217            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000B8                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000B8   7900         MOV       R1,#0x0
   \   0000BA   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   0000BD   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2218          
   2219            // Remove entry from neighborTable
   2220            nwkNeighborRemove( Annce.nwkAddr, _NIB.nwkPanId );
   \   0000C0                ; Setup parameters for call to function nwkNeighborRemove
   \   0000C0   90....       MOV       DPTR,#_NIB + 33
   \   0000C3   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0000C6   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   0000C9   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2221          
   2222          #endif // ZIGBEEPRO
   2223          
   2224            // Fill in the extended address in address manager if we don't have it already.
   2225            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000CC   740B         MOV       A,#0xb
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   E4           CLR       A
   \   0000D2   12....       LCALL     ??Subroutine149_0 & 0xFFFF
   2226            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_253:
   \   0000D5   F8           MOV       R0,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   F9           MOV       R1,A
   \   0000D9   740C         MOV       A,#0xc
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E8           MOV       A,R0
   \   0000DF   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   2227            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_442:
   \   0000E2                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0000E2   740B         MOV       A,#0xb
   \   0000E4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E7   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0000EA   E9           MOV       A,R1
   \   0000EB   603F         JZ        ??ZDO_ProcessDeviceAnnce_6
   2228            {
   2229              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0000ED                ; Setup parameters for call to function osal_memset
   \   0000ED   7C08         MOV       R4,#0x8
   \   0000EF   7D00         MOV       R5,#0x0
   \   0000F1   7900         MOV       R1,#0x0
   \   0000F3   7418         MOV       A,#0x18
   \   0000F5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F8   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2230              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0000FB                ; Setup parameters for call to function sAddrExtCmp
   \   0000FB   740E         MOV       A,#0xe
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   AC82         MOV       R4,DPL
   \   000102   AD83         MOV       R5,DPH
   \   000104   7418         MOV       A,#0x18
   \   000106   12....       LCALL     ?XSTACK_DISP101_8
   \   000109   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00010C   E9           MOV       A,R1
   \   00010D   601D         JZ        ??ZDO_ProcessDeviceAnnce_6
   2231              {
   2232                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   00010F                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00010F   7402         MOV       A,#0x2
   \   000111   12....       LCALL     ?XSTACK_DISP0_8
   \   000114   AC82         MOV       R4,DPL
   \   000116   AD83         MOV       R5,DPH
   \   000118   740E         MOV       A,#0xe
   \   00011A   12....       LCALL     ?XSTACK_DISP0_8
   \   00011D   AA82         MOV       R2,DPL
   \   00011F   AB83         MOV       R3,DPH
   \   000121   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2233                AddrMgrEntryUpdate( &addrEntry );
   \   000124                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000124   740B         MOV       A,#0xb
   \   000126   12....       LCALL     ?XSTACK_DISP101_8
   \   000129   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2234              }
   2235            }
   2236          
   2237            // Update the short address in address manager if it's been changed
   2238            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   00012C                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00012C   7402         MOV       A,#0x2
   \   00012E   12....       LCALL     ?XSTACK_DISP0_8
   \   000131   AC82         MOV       R4,DPL
   \   000133   AD83         MOV       R5,DPH
   \   000135   740E         MOV       A,#0xe
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   AA82         MOV       R2,DPL
   \   00013C   AB83         MOV       R3,DPH
   \   00013E   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2239            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   000141                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000141   740B         MOV       A,#0xb
   \   000143   12....       LCALL     ?XSTACK_DISP101_8
   \   000146   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000149   E9           MOV       A,R1
   \   00014A   6025         JZ        ??ZDO_ProcessDeviceAnnce_1
   2240            {
   2241              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   00014C   740C         MOV       A,#0xc
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000154   E0           MOVX      A,@DPTR
   \   000155   68           XRL       A,R0
   \   000156   7003         JNZ       ??ZDO_ProcessDeviceAnnce_7
   \   000158   A3           INC       DPTR
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   00015B   6014         JZ        ??ZDO_ProcessDeviceAnnce_1
   2242              {
   2243                addrEntry.nwkAddr = Annce.nwkAddr;
   \   00015D   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000160   740C         MOV       A,#0xc
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   E8           MOV       A,R0
   \   000166   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   2244                AddrMgrEntryUpdate( &addrEntry );
   \                     ??CrossCallReturnLabel_443:
   \   000169                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000169   740B         MOV       A,#0xb
   \   00016B   12....       LCALL     ?XSTACK_DISP101_8
   \   00016E   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2245              }
   2246            }
   2247          
   2248          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   2249            if(ZG_DEVICE_RTR_TYPE)
   2250            {
   2251              uint32 timeout;
   2252              uint8 invalidAddr;
   2253              uint8 sameAnnce;
   2254              
   2255              timeout = osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   2256              invalidAddr = osal_memcmp( Annce.extAddr, invalidIEEE, Z_EXTADDR_LEN );
   2257              sameAnnce = osal_memcmp( &Annce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) );
   2258                  
   2259              // Check GP proxy table to update the entry if necesary
   2260              if( timeout && ( invalidAddr && sameAnnce ) )
   2261              {
   2262                osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   2263              }
   2264              else if(GP_CheckAnnouncedDeviceGCB != NULL)
   2265              {
   2266                GP_CheckAnnouncedDeviceGCB( Annce.extAddr, Annce.nwkAddr );       
   2267              }
   2268            }
   2269          #endif
   2270          }
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000171   7420         MOV       A,#0x20
   \   000173   02....       LJMP      ??Subroutine141_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET
   2271          
   2272          /*********************************************************************
   2273           * @fn          ZDO_ProcessParentAnnce
   2274           *
   2275           * @brief       This function processes a Parent annouce message.
   2276           *
   2277           * @param       inMsg - incoming message
   2278           *
   2279           * @return      none
   2280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2281          void ZDO_ProcessParentAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessParentAnnce:
   2282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   2283            ZDO_ParentAnnce_t *parentAnnce;
   2284            uint8 x;
   2285            uint8 childCount = 0;
   \   00000E   75..00       MOV       ?V7,#0x0
   2286          
   2287            ZDO_ChildInfoList_t *listHead = NULL;
   \   000011   75..00       MOV       ?V0,#0x0
   \   000014   75..00       MOV       ?V1,#0x0
   2288            ZDO_ChildInfoList_t *listTail;
   2289            ZDO_ChildInfoList_t *newNode;
   2290          
   2291            // Parse incoming message, memory is allocated by the parse function,
   2292            // it should be free after processing the message
   2293            parentAnnce = ZDO_ParseParentAnnce( inMsg );
   \   000017                ; Setup parameters for call to function ZDO_ParseParentAnnce
   \   000017   12....       LCALL     `??ZDO_ParseParentAnnce::?relay`; Banked call to: ZDO_ParseParentAnnce
   \   00001A   8A..         MOV       ?V4,R2
   \   00001C   8B..         MOV       ?V5,R3
   2294          
   2295            if ( parentAnnce != NULL )
   \   00001E   EA           MOV       A,R2
   \   00001F   4B           ORL       A,R3
   \   000020   7003         JNZ       $+5
   \   000022   02....       LJMP      ??ZDO_ProcessParentAnnce_0 & 0xFFFF
   2296            {
   2297              for ( x = 0; x < parentAnnce->numOfChildren; x++ )
   \   000025   75..00       MOV       ?V6,#0x0
   \   000028   801A         SJMP      ??ZDO_ProcessParentAnnce_1
   2298              {
   2299                associated_devices_t *dev_ptr;
   2300          
   2301                // If it's an End Device child
   2302                dev_ptr = AssocGetWithExt( parentAnnce->childInfo[x].extAddr );
   2303          
   2304                if ( dev_ptr )
   2305                {
   2306                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2307                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   2308                  {
   2309                    if ( dev_ptr->keepaliveRcv == TRUE )
   2310                    {
   2311                      // Add one element to the list
   2312                      newNode = (ZDO_ChildInfoList_t *)osal_mem_alloc( sizeof(ZDO_ChildInfoList_t) );
   2313          
   2314                      osal_cpyExtAddr( newNode->child.extAddr, parentAnnce->childInfo[x].extAddr );
   2315          
   2316                      newNode->next = NULL;
   2317          
   2318                      if ( listHead == NULL )
   \                     ??ZDO_ProcessParentAnnce_2:
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E5..         MOV       A,?V2
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   E5..         MOV       A,?V3
   \   00003C   F0           MOVX      @DPTR,A
   2319                      {
   2320                        // Initialize the head of the list
   2321                        listHead = listTail = newNode;
   2322                      }
   2323                      else
   2324                      {
   2325                        // Add new element to the end
   2326                        listTail->next = newNode;
   2327          
   2328                        listTail = listTail->next;
   \   00003D   AE..         MOV       R6,?V12
   \   00003F   FF           MOV       R7,A
   2329                      }
   2330          
   2331                      childCount++;
   \                     ??ZDO_ProcessParentAnnce_3:
   \   000040   05..         INC       ?V7
   \                     ??ZDO_ProcessParentAnnce_4:
   \   000042   05..         INC       ?V6
   \                     ??ZDO_ProcessParentAnnce_1:
   \   000044   85..82       MOV       DPL,?V4
   \   000047   85..83       MOV       DPH,?V5
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   E5..         MOV       A,?V6
   \   00004E   C3           CLR       C
   \   00004F   98           SUBB      A,R0
   \   000050   4003         JC        $+5
   \   000052   02....       LJMP      ??ZDO_ProcessParentAnnce_5 & 0xFFFF
   \   000055   E5..         MOV       A,?V6
   \   000057   F5..         MOV       ?V2,A
   \   000059   75..00       MOV       ?V3,#0x0
   \   00005C   7403         MOV       A,#0x3
   \   00005E   78..         MOV       R0,#?V2
   \   000060   12....       LCALL     ?S_SHL
   \   000063   E5..         MOV       A,?V4
   \   000065   25..         ADD       A,?V2
   \   000067   F582         MOV       DPL,A
   \   000069   E5..         MOV       A,?V5
   \   00006B   35..         ADDC      A,?V3
   \   00006D   F583         MOV       DPH,A
   \   00006F   A3           INC       DPTR
   \   000070   8582..       MOV       ?V10,DPL
   \   000073   8583..       MOV       ?V11,DPH
   \   000076                ; Setup parameters for call to function AssocGetWithExt
   \   000076   AA..         MOV       R2,?V10
   \   000078   AB..         MOV       R3,?V11
   \   00007A   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00007D   8A..         MOV       ?V2,R2
   \   00007F   8B..         MOV       ?V3,R3
   \   000081   A9..         MOV       R1,?V3
   \   000083   EA           MOV       A,R2
   \   000084   49           ORL       A,R1
   \   000085   60BB         JZ        ??ZDO_ProcessParentAnnce_4
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   FA           MOV       R2,A
   \   000091   7401         MOV       A,#0x1
   \   000093   6A           XRL       A,R2
   \   000094   6005         JZ        ??ZDO_ProcessParentAnnce_6
   \   000096   7402         MOV       A,#0x2
   \   000098   6A           XRL       A,R2
   \   000099   70A7         JNZ       ??ZDO_ProcessParentAnnce_4
   \                     ??ZDO_ProcessParentAnnce_6:
   \   00009B   E5..         MOV       A,?V2
   \   00009D   241B         ADD       A,#0x1b
   \   00009F   F582         MOV       DPL,A
   \   0000A1   E4           CLR       A
   \   0000A2   39           ADDC      A,R1
   \   0000A3   F583         MOV       DPH,A
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   6401         XRL       A,#0x1
   \   0000A8   7098         JNZ       ??ZDO_ProcessParentAnnce_4
   \   0000AA                ; Setup parameters for call to function osal_mem_alloc
   \   0000AA   7A0A         MOV       R2,#0xa
   \   0000AC   7B00         MOV       R3,#0x0
   \   0000AE   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B1   8A..         MOV       ?V2,R2
   \   0000B3   8B..         MOV       ?V3,R3
   \   0000B5   8A..         MOV       ?V12,R2
   \   0000B7                ; Setup parameters for call to function sAddrExtCpy
   \   0000B7   AC..         MOV       R4,?V10
   \   0000B9   AD..         MOV       R5,?V11
   \   0000BB   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000BE   E4           CLR       A
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   E5..         MOV       A,?V0
   \   0000C4   45..         ORL       A,?V1
   \   0000C6   6003         JZ        $+5
   \   0000C8   02....       LJMP      ??ZDO_ProcessParentAnnce_2 & 0xFFFF
   \   0000CB   AE..         MOV       R6,?V2
   \   0000CD   AF..         MOV       R7,?V3
   \   0000CF   8E..         MOV       ?V0,R6
   \   0000D1   8F..         MOV       ?V1,R7
   \   0000D3   02....       LJMP      ??ZDO_ProcessParentAnnce_3 & 0xFFFF
   2332                    }
   2333                  }
   2334                }
   2335              }
   2336          
   2337              // If the device has children that match some in the received list,
   2338              // it should send a unicast Parent_Annce_rsp message.
   2339              if ( childCount > 0 )
   \                     ??ZDO_ProcessParentAnnce_5:
   \   0000D6   E5..         MOV       A,?V7
   \   0000D8   7003         JNZ       $+5
   \   0000DA   02....       LJMP      ??ZDO_ProcessParentAnnce_7 & 0xFFFF
   2340              {
   2341                ZDO_ChildInfo_t *childInfo;
   2342                zAddrType_t dstAddr;
   2343          
   2344                dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000DD   7408         MOV       A,#0x8
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   7402         MOV       A,#0x2
   \   0000E4   F0           MOVX      @DPTR,A
   2345                dstAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   0000E5   85..82       MOV       DPL,?V8
   \   0000E8   85..83       MOV       DPH,?V9
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000F0   E8           MOV       A,R0
   \   0000F1   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   2346          
   2347                x = 0;
   \                     ??CrossCallReturnLabel_444:
   \   0000F4   75..00       MOV       ?V6,#0x0
   2348          
   2349                childInfo = (ZDO_ChildInfo_t *)osal_mem_alloc( childCount * sizeof(ZDO_ChildInfo_t) );
   \   0000F7                ; Setup parameters for call to function osal_mem_alloc
   \   0000F7   E5..         MOV       A,?V7
   \   0000F9   F5..         MOV       ?V2,A
   \   0000FB   75..00       MOV       ?V3,#0x0
   \   0000FE   7403         MOV       A,#0x3
   \   000100   78..         MOV       R0,#?V2
   \   000102   12....       LCALL     ?S_SHL
   \   000105   AA..         MOV       R2,?V2
   \   000107   AB..         MOV       R3,?V3
   \   000109   12....       LCALL     ??Subroutine175_0 & 0xFFFF
   2350          
   2351                if ( childInfo != NULL )
   \                     ??CrossCallReturnLabel_412:
   \   00010C   6070         JZ        ??CrossCallReturnLabel_91
   \   00010E   8028         SJMP      ??CrossCallReturnLabel_90
   2352                {
   2353                  // Copy the content of the link list into this buffer
   2354                  while ( listHead != NULL )
   2355                  {
   2356                    listTail = listHead;
   \                     ??ZDO_ProcessParentAnnce_8:
   \   000110   AE..         MOV       R6,?V0
   \   000112   AF..         MOV       R7,?V1
   2357          
   2358                    osal_cpyExtAddr( childInfo[x].extAddr,  listHead->child.extAddr );
   \   000114                ; Setup parameters for call to function sAddrExtCpy
   \   000114   AC..         MOV       R4,?V0
   \   000116   AD..         MOV       R5,?V1
   \   000118   E5..         MOV       A,?V6
   \   00011A   F5..         MOV       ?V0,A
   \   00011C   75..00       MOV       ?V1,#0x0
   \   00011F   7403         MOV       A,#0x3
   \   000121   78..         MOV       R0,#?V0
   \   000123   12....       LCALL     ?S_SHL
   \   000126   E5..         MOV       A,?V2
   \   000128   25..         ADD       A,?V0
   \   00012A   FA           MOV       R2,A
   \   00012B   E5..         MOV       A,?V3
   \   00012D   35..         ADDC      A,?V1
   \   00012F   FB           MOV       R3,A
   \   000130   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2359          
   2360                    x++;
   \   000133   05..         INC       ?V6
   2361          
   2362                    listHead = listTail->next;
   \   000135   12....       LCALL     ?Subroutine56 & 0xFFFF
   2363          
   2364                    // Free this element of the link list
   2365                    osal_mem_free( listTail );
   2366                  }
   \                     ??CrossCallReturnLabel_90:
   \   000138   E5..         MOV       A,?V0
   \   00013A   45..         ORL       A,?V1
   \   00013C   70D2         JNZ       ??ZDO_ProcessParentAnnce_8
   2367          
   2368                  ZDP_ParentAnnceRsp( (inMsg->TransSeq), dstAddr, childCount,
   2369                                      ((uint8 *)childInfo), 0 );
   \   00013E                ; Setup parameters for call to function ZDP_ParentAnnce
   \   00013E   75..00       MOV       ?V0,#0x0
   \   000141   78..         MOV       R0,#?V0
   \   000143   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000146   75..1F       MOV       ?V0,#0x1f
   \   000149   75..80       MOV       ?V1,#-0x80
   \   00014C   78..         MOV       R0,#?V0
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000151   78..         MOV       R0,#?V2
   \   000153   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000156   A9..         MOV       R1,?V7
   \   000158   7405         MOV       A,#0x5
   \   00015A   12....       LCALL     ?XSTACK_DISP102_8
   \   00015D   E5..         MOV       A,?V8
   \   00015F   240F         ADD       A,#0xf
   \   000161   FA           MOV       R2,A
   \   000162   E4           CLR       A
   \   000163   35..         ADDC      A,?V9
   \   000165   FB           MOV       R3,A
   \   000166   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000169   7405         MOV       A,#0x5
   \   00016B   12....       LCALL     ?DEALLOC_XSTACK8
   2370                  
   2371                  
   2372                  osal_mem_free(childInfo);
   \   00016E                ; Setup parameters for call to function osal_mem_free
   \   00016E   AA..         MOV       R2,?V2
   \   000170   AB..         MOV       R3,?V3
   \   000172   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000175   800D         SJMP      ??ZDO_ProcessParentAnnce_7
   2373                }
   2374                else
   2375                {
   2376                  while(listHead != NULL)
   2377                  {
   2378                    listTail = listHead;
   \                     ??ZDO_ProcessParentAnnce_9:
   \   000177   AE..         MOV       R6,?V0
   \   000179   AF..         MOV       R7,?V1
   2379                    listHead = listTail->next;
   \   00017B   12....       LCALL     ?Subroutine56 & 0xFFFF
   2380          
   2381                    // Free this element of the link list
   2382                    osal_mem_free( listTail );
   2383                  }  
   \                     ??CrossCallReturnLabel_91:
   \   00017E   E5..         MOV       A,?V0
   \   000180   45..         ORL       A,?V1
   \   000182   70F3         JNZ       ??ZDO_ProcessParentAnnce_9
   2384                }
   2385              }
   2386              
   2387              // Free memory allocated by parsing function
   2388              osal_mem_free( parentAnnce );
   \                     ??ZDO_ProcessParentAnnce_7:
   \   000184                ; Setup parameters for call to function osal_mem_free
   \   000184   AA..         MOV       R2,?V4
   \   000186   AB..         MOV       R3,?V5
   \   000188   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2389            }
   2390          }
   \                     ??ZDO_ProcessParentAnnce_0:
   \   00018B   7409         MOV       A,#0x9
   \   00018D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000190   7F0E         MOV       R7,#0xe
   \   000192   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00000F   F5..         MOV       ?V1,A
   \   000011                ; Setup parameters for call to function osal_mem_free
   \   000011                ; Setup parameters for call to function osal_mem_free
   \   000011   EE           MOV       A,R6
   \   000012   FA           MOV       R2,A
   \   000013   EF           MOV       A,R7
   \   000014   FB           MOV       R3,A
   \   000015   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET
   2391          
   2392          /*********************************************************************
   2393           * @fn          ZDO_ProcessParentAnnceRsp
   2394           *
   2395           * @brief       This function processes a Parent annouce response message.
   2396           *
   2397           * @param       inMsg - incoming message
   2398           *
   2399           * @return      none
   2400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2401          void ZDO_ProcessParentAnnceRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessParentAnnceRsp:
   2402          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2403            ZDO_ParentAnnce_t *parentAnnce;
   2404            uint8 x;
   2405          
   2406            // Parse incoming message, memory is allocated by the parse function,
   2407            // it should be free after processing the message
   2408            parentAnnce = ZDO_ParseParentAnnce( inMsg );
   \   000005                ; Setup parameters for call to function ZDO_ParseParentAnnce
   \   000005   12....       LCALL     `??ZDO_ParseParentAnnce::?relay`; Banked call to: ZDO_ParseParentAnnce
   \   000008   8A..         MOV       ?V0,R2
   \   00000A   8B..         MOV       ?V1,R3
   2409          
   2410            if ( parentAnnce != NULL )
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   6063         JZ        ??ZDO_ProcessParentAnnceRsp_0
   2411            {
   2412              for ( x = 0; x < parentAnnce->numOfChildren; x++ )
   \   000010   75..00       MOV       ?V2,#0x0
   \   000013   8049         SJMP      ??ZDO_ProcessParentAnnceRsp_1
   2413              {
   2414                associated_devices_t *dev_ptr;
   2415          
   2416                // If it's an End Device child
   2417                dev_ptr = AssocGetWithExt( parentAnnce->childInfo[x].extAddr );
   \                     ??ZDO_ProcessParentAnnceRsp_2:
   \   000015   E5..         MOV       A,?V2
   \   000017   F5..         MOV       ?V4,A
   \   000019   75..00       MOV       ?V5,#0x0
   \   00001C   7403         MOV       A,#0x3
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?S_SHL
   \   000023   E5..         MOV       A,?V0
   \   000025   25..         ADD       A,?V4
   \   000027   F582         MOV       DPL,A
   \   000029   E5..         MOV       A,?V1
   \   00002B   35..         ADDC      A,?V5
   \   00002D   F583         MOV       DPH,A
   \   00002F   A3           INC       DPTR
   \   000030   AE82         MOV       R6,DPL
   \   000032   AF83         MOV       R7,DPH
   \   000034                ; Setup parameters for call to function AssocGetWithExt
   \   000034   EE           MOV       A,R6
   \   000035   FA           MOV       R2,A
   \   000036   EF           MOV       A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   2418          
   2419                if ( dev_ptr )
   \   00003F   E582         MOV       A,DPL
   \   000041   4583         ORL       A,DPH
   \   000043   6017         JZ        ??ZDO_ProcessParentAnnceRsp_3
   2420                {
   2421                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2422                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F8           MOV       R0,A
   \   00004B   7401         MOV       A,#0x1
   \   00004D   68           XRL       A,R0
   \   00004E   6005         JZ        ??ZDO_ProcessParentAnnceRsp_4
   \   000050   7402         MOV       A,#0x2
   \   000052   68           XRL       A,R0
   \   000053   7007         JNZ       ??ZDO_ProcessParentAnnceRsp_3
   2423                  {
   2424                    AssocRemove( parentAnnce->childInfo[x].extAddr );
   \                     ??ZDO_ProcessParentAnnceRsp_4:
   \   000055                ; Setup parameters for call to function AssocRemove
   \   000055   EE           MOV       A,R6
   \   000056   FA           MOV       R2,A
   \   000057   EF           MOV       A,R7
   \   000058   FB           MOV       R3,A
   \   000059   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   2425                  }
   2426                }
   2427              }
   \                     ??ZDO_ProcessParentAnnceRsp_3:
   \   00005C   05..         INC       ?V2
   \                     ??ZDO_ProcessParentAnnceRsp_1:
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   E5..         MOV       A,?V2
   \   000068   C3           CLR       C
   \   000069   98           SUBB      A,R0
   \   00006A   40A9         JC        ??ZDO_ProcessParentAnnceRsp_2
   2428          
   2429              // Free memory allocated by parsing function
   2430              osal_mem_free( parentAnnce );
   \   00006C                ; Setup parameters for call to function osal_mem_free
   \   00006C   AA..         MOV       R2,?V0
   \   00006E   AB..         MOV       R3,?V1
   \   000070   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2431            }
   2432          }
   \                     ??ZDO_ProcessParentAnnceRsp_0:
   \   000073   02....       LJMP      ??Subroutine163_0 & 0xFFFF
   2433          
   2434          /*********************************************************************
   2435           * @fn          ZDO_BuildSimpleDescBuf
   2436           *
   2437           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2438           *
   2439           * @param       buf  - pointer to a byte array big enough for data.
   2440           * @param       desc - SimpleDescriptionFormat_t *
   2441           *
   2442           * @return      none
   2443           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2444          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2445          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2446            byte cnt;
   2447            uint16 *ptr;
   2448          
   2449            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00000C   12....       LCALL     ?Subroutine15 & 0xFFFF
   2450            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_16:
   \   00000F   A3           INC       DPTR
   \   000010   A882         MOV       R0,DPL
   \   000012   A983         MOV       R1,DPH
   \   000014   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   000017   12....       LCALL     ?Subroutine21 & 0xFFFF
   2451            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_25:
   \   00001A   F0           MOVX      @DPTR,A
   2452            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001B   EC           MOV       A,R4
   \   00001C   2403         ADD       A,#0x3
   \   00001E   F8           MOV       R0,A
   \   00001F   E4           CLR       A
   \   000020   3D           ADDC      A,R5
   \   000021   F9           MOV       R1,A
   \   000022   8882         MOV       DPL,R0
   \   000024   F583         MOV       DPH,A
   \   000026   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine21 & 0xFFFF
   2453            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_26:
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   12....       LCALL     ?Subroutine15 & 0xFFFF
   2454          
   2455            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_17:
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C4           SWAP      A
   \   00003A   54F0         ANL       A,#0xf0
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   F0           MOVX      @DPTR,A
   2456          
   2457            *buf++ = desc->AppNumInClusters;
   \   000046   EC           MOV       A,R4
   \   000047   2406         ADD       A,#0x6
   \   000049   F8           MOV       R0,A
   \   00004A   E4           CLR       A
   \   00004B   3D           ADDC      A,R5
   \   00004C   88..         MOV       ?V2,R0
   \   00004E   F5..         MOV       ?V3,A
   \   000050   8882         MOV       DPL,R0
   \   000052   F583         MOV       DPH,A
   \   000054   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   EA           MOV       A,R2
   \   00005F   2407         ADD       A,#0x7
   \   000061   FA           MOV       R2,A
   \   000062   5001         JNC       ??ZDO_BuildSimpleDescBuf_0
   \   000064   0B           INC       R3
   2458            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000065   8C82         MOV       DPL,R4
   \   000067   8D83         MOV       DPH,R5
   \   000069   12....       LCALL     ?Subroutine79 & 0xFFFF
   2459            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_129:
   \   00006C   8018         SJMP      ??ZDO_BuildSimpleDescBuf_1
   2460            {
   2461              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00006E   12....       LCALL     ?Subroutine22 & 0xFFFF
   2462              *buf++ = LO_UINT16( *ptr );
   2463            }
   \                     ??CrossCallReturnLabel_413:
   \   000071   8882         MOV       DPL,R0
   \   000073   8983         MOV       DPH,R1
   \   000075   F0           MOVX      @DPTR,A
   \   000076   EA           MOV       A,R2
   \   000077   2402         ADD       A,#0x2
   \   000079   FA           MOV       R2,A
   \   00007A   5001         JNC       ??ZDO_BuildSimpleDescBuf_3
   \   00007C   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00007D   EE           MOV       A,R6
   \   00007E   2402         ADD       A,#0x2
   \   000080   FE           MOV       R6,A
   \   000081   5001         JNC       ??ZDO_BuildSimpleDescBuf_4
   \   000083   0F           INC       R7
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000084   05..         INC       ?V0
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000086   8A82         MOV       DPL,R2
   \   000088   8B83         MOV       DPH,R3
   \   00008A   A3           INC       DPTR
   \   00008B   A882         MOV       R0,DPL
   \   00008D   A983         MOV       R1,DPH
   \   00008F   85..82       MOV       DPL,?V2
   \   000092   85..83       MOV       DPH,?V3
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F5..         MOV       ?V1,A
   \   000098   E5..         MOV       A,?V0
   \   00009A   C3           CLR       C
   \   00009B   95..         SUBB      A,?V1
   \   00009D   40CF         JC        ??ZDO_BuildSimpleDescBuf_2
   2464          
   2465            *buf++ = desc->AppNumOutClusters;
   \   00009F   EC           MOV       A,R4
   \   0000A0   2409         ADD       A,#0x9
   \   0000A2   FE           MOV       R6,A
   \   0000A3   E4           CLR       A
   \   0000A4   3D           ADDC      A,R5
   \   0000A5   8E..         MOV       ?V2,R6
   \   0000A7   F5..         MOV       ?V3,A
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   F583         MOV       DPH,A
   \   0000AD   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   0000B0   F0           MOVX      @DPTR,A
   \   0000B1   E8           MOV       A,R0
   \   0000B2   FA           MOV       R2,A
   \   0000B3   E9           MOV       A,R1
   \   0000B4   FB           MOV       R3,A
   2466            ptr = desc->pAppOutClusterList;
   \   0000B5   8C82         MOV       DPL,R4
   \   0000B7   8D83         MOV       DPH,R5
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   12....       LCALL     ?Subroutine79 & 0xFFFF
   2467            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_130:
   \   0000BF   8019         SJMP      ??ZDO_BuildSimpleDescBuf_5
   2468            {
   2469              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   0000C1   12....       LCALL     ?Subroutine22 & 0xFFFF
   2470              *buf++ = LO_UINT16( *ptr );
   2471            }
   \                     ??CrossCallReturnLabel_414:
   \   0000C4   8A82         MOV       DPL,R2
   \   0000C6   8B83         MOV       DPH,R3
   \   0000C8   A3           INC       DPTR
   \   0000C9   F0           MOVX      @DPTR,A
   \   0000CA   EA           MOV       A,R2
   \   0000CB   2402         ADD       A,#0x2
   \   0000CD   FA           MOV       R2,A
   \   0000CE   5001         JNC       ??ZDO_BuildSimpleDescBuf_7
   \   0000D0   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000D1   EE           MOV       A,R6
   \   0000D2   2402         ADD       A,#0x2
   \   0000D4   FE           MOV       R6,A
   \   0000D5   5001         JNC       ??ZDO_BuildSimpleDescBuf_8
   \   0000D7   0F           INC       R7
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000D8   05..         INC       ?V0
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000DA   85..82       MOV       DPL,?V2
   \   0000DD   85..83       MOV       DPH,?V3
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   F8           MOV       R0,A
   \   0000E2   E5..         MOV       A,?V0
   \   0000E4   C3           CLR       C
   \   0000E5   98           SUBB      A,R0
   \   0000E6   40D9         JC        ??ZDO_BuildSimpleDescBuf_6
   2472          }
   \   0000E8   80..         SJMP      ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   00000A   FF           MOV       R7,A
   \   00000B   75..00       MOV       ?V0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A                REQUIRE ??Subroutine176_0
   \   00000A                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine179_0
   \   000001                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
   2473          
   2474          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2475          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   2476          /*********************************************************************
   2477           * @fn      ZDO_MatchEndDeviceBind()
   2478           *
   2479           * @brief
   2480           *
   2481           *   Called to match end device binding requests
   2482           *
   2483           * @param  bindReq  - binding request information
   2484           * @param  SecurityUse - Security enable/disable
   2485           *
   2486           * @return  none
   2487           */
   2488          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   2489          {
   2490            zAddrType_t dstAddr;
   2491            uint8 sendRsp = FALSE;
   2492            uint8 status;
   2493          
   2494            // Is this the first request?
   2495            if ( matchED == NULL )
   2496            {
   2497              // Create match info structure
   2498              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   2499              if ( matchED )
   2500              {
   2501                // Clear the structure
   2502                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   2503          
   2504                // Copy the first request's information
   2505                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   2506                {
   2507                  status = ZDP_NO_ENTRY;
   2508                  sendRsp = TRUE;
   2509                }
   2510              }
   2511              else
   2512              {
   2513                status = ZDP_NO_ENTRY;
   2514                sendRsp = TRUE;
   2515              }
   2516          
   2517              if ( !sendRsp )
   2518              {
   2519                // Set into the correct state
   2520                matchED->state = ZDMATCH_WAIT_REQ;
   2521          
   2522                // Setup the timeout
   2523                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2524              }
   2525            }
   2526            else
   2527            {
   2528              if(matchED->state == ZDMATCH_WAIT_REQ)//when bind is running,refuse new end-device-bind-req
   2529              {
   2530                matchED->state = ZDMATCH_SENDING_BINDS;
   2531          
   2532                // Copy the 2nd request's information
   2533                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   2534                {
   2535                  status = ZDP_NO_ENTRY;
   2536                  sendRsp = TRUE;
   2537                }
   2538          
   2539                // Make a source match for ed1
   2540                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2541                matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2542                matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   2543                if ( matchED->ed1numMatched )
   2544                {
   2545                  // Save the match list
   2546                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   2547                  if ( matchED->ed1Matched )
   2548                  {
   2549                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   2550                  }
   2551                  else
   2552                  {
   2553                    // Allocation error, stop
   2554                    status = ZDP_NO_ENTRY;
   2555                    sendRsp = TRUE;
   2556                  }
   2557                }
   2558          
   2559                // Make a source match for ed2
   2560                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2561                matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2562                matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   2563                if ( matchED->ed2numMatched )
   2564                {
   2565                  // Save the match list
   2566                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   2567                  if ( matchED->ed2Matched )
   2568                  {
   2569                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   2570                  }
   2571                  else
   2572                  {
   2573                    // Allocation error, stop
   2574                    status = ZDP_NO_ENTRY;
   2575                    sendRsp = TRUE;
   2576                  }
   2577                }
   2578          
   2579                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   2580                {
   2581                  // Do the first unbind/bind state
   2582                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   2583                }
   2584                else
   2585                {
   2586                  status = ZDP_NO_MATCH;
   2587                  sendRsp = TRUE;
   2588                }
   2589              }
   2590              else
   2591              {
   2592                status = ZDP_NO_ENTRY;
   2593                dstAddr.addrMode = Addr16Bit;
   2594                dstAddr.addr.shortAddr = bindReq->srcAddr;
   2595                ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   2596                return;
   2597              }
   2598            }
   2599          
   2600            if ( sendRsp )
   2601            {
   2602              // send response to this requester
   2603              dstAddr.addrMode = Addr16Bit;
   2604              dstAddr.addr.shortAddr = bindReq->srcAddr;
   2605              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   2606          
   2607              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2608              {
   2609                // send response to first requester
   2610                dstAddr.addrMode = Addr16Bit;
   2611                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2612                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2613              }
   2614          
   2615              // Process ended - release memory used
   2616              ZDO_RemoveMatchMemory();
   2617            }
   2618          }
   2619          #endif
   2620          
   2621          /*********************************************************************
   2622           * @fn      ZDO_RemoveMatchMemory()
   2623           *
   2624           * @brief   Called to clear the memory used for the end device bind.
   2625           *
   2626           * @param  none
   2627           *
   2628           * @return  none
   2629           */
   2630          static void ZDO_RemoveMatchMemory( void )
   2631          {
   2632            if ( matchED != NULL )
   2633            {
   2634              if ( matchED->ed2Matched != NULL )
   2635              {
   2636                osal_mem_free( matchED->ed2Matched );
   2637              }
   2638              if ( matchED->ed1Matched != NULL )
   2639              {
   2640                osal_mem_free( matchED->ed1Matched );
   2641              }
   2642              if ( matchED->ed1.inClusters != NULL )
   2643              {
   2644                osal_mem_free( matchED->ed1.inClusters );
   2645              }
   2646              if ( matchED->ed1.outClusters != NULL )
   2647              {
   2648                osal_mem_free( matchED->ed1.outClusters );
   2649              }
   2650              if ( matchED->ed2.inClusters != NULL )
   2651              {
   2652                osal_mem_free( matchED->ed2.inClusters );
   2653              }
   2654              if ( matchED->ed2.outClusters != NULL )
   2655              {
   2656                osal_mem_free( matchED->ed2.outClusters );
   2657              }
   2658          
   2659              osal_mem_free( matchED );
   2660              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   2661            }
   2662          }
   2663          
   2664          /*********************************************************************
   2665           * @fn      ZDO_CopyMatchInfo()
   2666           *
   2667           * @brief   Called to copy memory used for the end device bind.
   2668           *
   2669           * @param  srcReq - source information
   2670           * @param  dstReq - destination location
   2671           *
   2672           * @return  TRUE if copy was successful.
   2673           */
   2674          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   2675          {
   2676            uint8 allOK = TRUE;
   2677          
   2678            // Copy bind information into the match info structure
   2679            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   2680          
   2681            // Initialize the destination cluster pointers
   2682            destReq->inClusters = NULL;
   2683            destReq->outClusters = NULL;
   2684          
   2685            // Copy input cluster IDs
   2686            if ( srcReq->numInClusters )
   2687            {
   2688              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   2689              if ( destReq->inClusters )
   2690              {
   2691                // Copy the clusters
   2692                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2693                                (srcReq->numInClusters * sizeof ( uint16 )) );
   2694              }
   2695              else
   2696              {
   2697                allOK = FALSE;
   2698              }
   2699            }
   2700          
   2701            // Copy output cluster IDs
   2702            if ( srcReq->numOutClusters )
   2703            {
   2704              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   2705              if ( destReq->outClusters )
   2706              {
   2707                // Copy the clusters
   2708                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2709                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   2710              }
   2711              else
   2712              {
   2713                allOK = FALSE;
   2714              }
   2715            }
   2716          
   2717            if ( allOK == FALSE )
   2718            {
   2719              if ( destReq->inClusters != NULL )
   2720              {
   2721                osal_mem_free( destReq->inClusters );
   2722              }
   2723              if ( destReq->outClusters != NULL )
   2724              {
   2725                osal_mem_free( destReq->outClusters );
   2726              }
   2727            }
   2728          
   2729            return ( allOK );
   2730          }
   2731          
   2732          /*********************************************************************
   2733           * @fn      ZDMatchSendState()
   2734           *
   2735           * @brief   State machine for the End device match message algorithm.
   2736           *
   2737           * @param  reason - state of algoritm
   2738           * @param  status - initial message status
   2739           * @param  TransSeq - next transaction sequence number
   2740           *
   2741           * @return  FALSE if error and we are not currently matching, TRUE
   2742           *          if success.
   2743           */
   2744          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   2745          {
   2746            uint8 *dstIEEEAddr = NULL;
   2747            uint8 dstEP = 0xFF;
   2748            zAddrType_t dstAddr;
   2749            zAddrType_t destinationAddr;
   2750            uint16 msgType;
   2751            uint16 clusterID = 0xFFFF;
   2752            ZDEndDeviceBind_t *ed = NULL;
   2753            uint8 rspStatus = ZDP_SUCCESS;
   2754          
   2755            if ( matchED == NULL )
   2756            {
   2757              return ( FALSE );
   2758            }
   2759          
   2760            // Check sequence number
   2761            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   2762            {
   2763              if ( TransSeq != matchED->transSeq )
   2764              {
   2765                return( FALSE ); // ignore the message
   2766              }
   2767            }
   2768          
   2769            // turn off timer
   2770            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   2771          
   2772            if ( reason == ZDMATCH_REASON_TIMEOUT )
   2773            {
   2774              rspStatus = ZDP_TIMEOUT;    // The process will stop
   2775            }
   2776          
   2777            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   2778            {
   2779              matchED->sending = ZDMATCH_SENDING_UNBIND;
   2780          
   2781              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   2782              {
   2783                rspStatus = status;
   2784              }
   2785            }
   2786            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   2787            {
   2788              if ( status == ZDP_SUCCESS )
   2789              {
   2790                matchED->sending = ZDMATCH_SENDING_UNBIND;
   2791              }
   2792              else
   2793              {
   2794                matchED->sending = ZDMATCH_SENDING_BIND;
   2795              }
   2796            }
   2797          
   2798            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   2799            {
   2800              // Move to the next cluster ID
   2801              if ( matchED->ed1numMatched )
   2802              {
   2803                matchED->ed1numMatched--;
   2804              }
   2805              else if ( matchED->ed2numMatched )
   2806              {
   2807                matchED->ed2numMatched--;
   2808              }
   2809            }
   2810          
   2811            // What message do we send now
   2812            if ( matchED->ed1numMatched )
   2813            {
   2814              ed = &(matchED->ed1);
   2815              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   2816              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2817              dstEP = matchED->ed2.endpoint;
   2818            }
   2819            else if ( matchED->ed2numMatched )
   2820            {
   2821              ed = &(matchED->ed2);
   2822              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   2823              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2824              dstEP = matchED->ed1.endpoint;
   2825            }
   2826          
   2827            dstAddr.addrMode = Addr16Bit;
   2828          
   2829            // Send the next message
   2830            if ( (rspStatus == ZDP_SUCCESS) && ed )
   2831            {
   2832              // Send unbind/bind message to source
   2833              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   2834              {
   2835                msgType = Unbind_req;
   2836              }
   2837              else
   2838              {
   2839                msgType = Bind_req;
   2840              }
   2841          
   2842              dstAddr.addr.shortAddr = ed->srcAddr;
   2843          
   2844              // Save off the transaction sequence number
   2845              matchED->transSeq = ZDP_TransID;
   2846          
   2847              destinationAddr.addrMode = Addr64Bit;
   2848              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   2849          
   2850              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2851                  &destinationAddr, dstEP, ed->SecurityUse );
   2852          
   2853              // Set timeout for response
   2854              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2855            }
   2856            else
   2857            {
   2858              // Send the response messages to requesting devices
   2859              // send response to first requester
   2860              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2861              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   2862          
   2863              // send response to second requester
   2864              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2865              {
   2866                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   2867                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2868              }
   2869          
   2870              // Process ended - release memory used
   2871              ZDO_RemoveMatchMemory();
   2872            }
   2873          
   2874            return ( TRUE );
   2875          }
   2876          
   2877          /*********************************************************************
   2878           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2879           *
   2880           * @brief   End device bind timeout.
   2881           *
   2882           * @param  none
   2883           *
   2884           * @return  none
   2885           */
   2886          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   2887          {
   2888            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   2889          }
   2890          #endif // ZG_BUILD_COORDINATOR_TYPE
   2891          
   2892          /*********************************************************************
   2893           * ZDO MESSAGE PARSING API FUNCTIONS
   2894           */
   2895          
   2896          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   2897          /*********************************************************************
   2898           * @fn          ZDO_ParseEndDeviceBindReq
   2899           *
   2900           * @brief       This function parses the End_Device_Bind_req message.
   2901           *
   2902           *     NOTE:  The clusters lists in bindReq are allocated in this
   2903           *            function and must be freed by that calling function.
   2904           *
   2905           * @param       inMsg  - incoming message (request)
   2906           * @param       bindReq - pointer to place to parse message to
   2907           *
   2908           * @return      none
   2909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2910          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   2912            uint8 *msg;
   2913          
   2914            // Parse the message
   2915            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00000D   3B           ADDC      A,R3
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000013   12....       LCALL     ?Subroutine31 & 0xFFFF
   2916            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_44:
   \   000016   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000019   8C82         MOV       DPL,R4
   \   00001B   8D83         MOV       DPH,R5
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E8           MOV       A,R0
   \   000020   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   2917            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_445:
   \   000023   EA           MOV       A,R2
   \   000024   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000027   3B           ADDC      A,R3
   \   000028   F583         MOV       DPH,A
   \   00002A   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00002D   F0           MOVX      @DPTR,A
   2918            msg = inMsg->asdu;
   \   00002E   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000031   F5..         MOV       ?V2,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F5..         MOV       ?V3,A
   2919          
   2920            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   000037   85..82       MOV       DPL,?V2
   \   00003A   F583         MOV       DPH,A
   \   00003C   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00003F   A3           INC       DPTR
   \   000040   12....       LCALL     ?Subroutine28 & 0xFFFF
   2921            msg += 2;
   \                     ??CrossCallReturnLabel_39:
   \   000043   5002         JNC       ??ZDO_ParseEndDeviceBindReq_0
   \   000045   05..         INC       ?V3
   2922          
   2923            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   000047                ; Setup parameters for call to function sAddrExtCpy
   \   000047   FC           MOV       R4,A
   \   000048   AD..         MOV       R5,?V3
   \   00004A   EE           MOV       A,R6
   \   00004B   2406         ADD       A,#0x6
   \   00004D   FA           MOV       R2,A
   \   00004E   E4           CLR       A
   \   00004F   3F           ADDC      A,R7
   \   000050   12....       LCALL     ?Subroutine41 & 0xFFFF
   2924            msg += Z_EXTADDR_LEN;
   2925          
   2926            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_339:
   \   000053   C0E0         PUSH      A
   \   000055   EE           MOV       A,R6
   \   000056   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000059   3F           ADDC      A,R7
   \   00005A   F583         MOV       DPH,A
   \   00005C   D0E0         POP       A
   \   00005E   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000061   5002         JNC       ??ZDO_ParseEndDeviceBindReq_1
   \   000063   05..         INC       ?V3
   2927            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000065   F582         MOV       DPL,A
   \   000067   85..83       MOV       DPH,?V3
   \   00006A   12....       LCALL     ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00006D   EE           MOV       A,R6
   \   00006E   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000071   3F           ADDC      A,R7
   \   000072   F583         MOV       DPH,A
   \   000074   EA           MOV       A,R2
   \   000075   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   2928            msg += 2;
   2929          
   2930            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_446:
   \   000078   EE           MOV       A,R6
   \   000079   2412         ADD       A,#0x12
   \   00007B   F5..         MOV       ?V4,A
   \   00007D   E4           CLR       A
   \   00007E   3F           ADDC      A,R7
   \   00007F   F5..         MOV       ?V5,A
   \   000081   85..82       MOV       DPL,?V4
   \   000084   F583         MOV       DPH,A
   \   000086   E4           CLR       A
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   F0           MOVX      @DPTR,A
   2931            bindReq->outClusters = NULL;
   \   00008A   EE           MOV       A,R6
   \   00008B   2415         ADD       A,#0x15
   \   00008D   F5..         MOV       ?V6,A
   \   00008F   E4           CLR       A
   \   000090   3F           ADDC      A,R7
   \   000091   F5..         MOV       ?V7,A
   \   000093   85..82       MOV       DPL,?V6
   \   000096   F583         MOV       DPH,A
   \   000098   E4           CLR       A
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   A3           INC       DPTR
   \   00009B   12....       LCALL     ?Subroutine23 & 0xFFFF
   2932          
   2933            if ((bindReq->numInClusters = *msg++) &&
   2934                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_27:
   \   00009E   2411         ADD       A,#0x11
   \   0000A0   F5..         MOV       ?V0,A
   \   0000A2   E4           CLR       A
   \   0000A3   3F           ADDC      A,R7
   \   0000A4   F5..         MOV       ?V1,A
   \   0000A6   E8           MOV       A,R0
   \   0000A7   85..82       MOV       DPL,?V0
   \   0000AA   85..83       MOV       DPH,?V1
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   E5..         MOV       A,?V2
   \   0000B0   2403         ADD       A,#0x3
   \   0000B2   F5..         MOV       ?V2,A
   \   0000B4   5002         JNC       ??ZDO_ParseEndDeviceBindReq_2
   \   0000B6   05..         INC       ?V3
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000B8   E8           MOV       A,R0
   \   0000B9   6031         JZ        ??ZDO_ParseEndDeviceBindReq_3
   \   0000BB                ; Setup parameters for call to function osal_mem_alloc
   \   0000BB   28           ADD       A,R0
   \   0000BC   FA           MOV       R2,A
   \   0000BD   E4           CLR       A
   \   0000BE   33           RLC       A
   \   0000BF   FB           MOV       R3,A
   \   0000C0   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C3   8A..         MOV       ?V8,R2
   \   0000C5   8B..         MOV       ?V9,R3
   \   0000C7   AC..         MOV       R4,?V8
   \   0000C9   AD..         MOV       R5,?V9
   \   0000CB   85..82       MOV       DPL,?V4
   \   0000CE   85..83       MOV       DPH,?V5
   \   0000D1   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000D4   4D           ORL       A,R5
   \   0000D5   6015         JZ        ??ZDO_ParseEndDeviceBindReq_3
   2935            {
   2936              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000D7                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000D7   AA..         MOV       R2,?V2
   \   0000D9   AB..         MOV       R3,?V3
   \   0000DB   85..82       MOV       DPL,?V0
   \   0000DE   85..83       MOV       DPH,?V1
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   F9           MOV       R1,A
   \   0000E3   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000E6   8A..         MOV       ?V2,R2
   \   0000E8   8B..         MOV       ?V3,R3
   \   0000EA   8008         SJMP      ??ZDO_ParseEndDeviceBindReq_4
   2937            }
   2938            else
   2939            {
   2940              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000EC   85..82       MOV       DPL,?V0
   \   0000EF   85..83       MOV       DPH,?V1
   \   0000F2   E4           CLR       A
   \   0000F3   F0           MOVX      @DPTR,A
   2941            }
   2942          
   2943            if ((bindReq->numOutClusters = *msg++) &&
   2944                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000F4   85..82       MOV       DPL,?V2
   \   0000F7   85..83       MOV       DPH,?V3
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   FA           MOV       R2,A
   \   0000FC   EE           MOV       A,R6
   \   0000FD   2414         ADD       A,#0x14
   \   0000FF   F8           MOV       R0,A
   \   000100   E4           CLR       A
   \   000101   3F           ADDC      A,R7
   \   000102   F9           MOV       R1,A
   \   000103   E8           MOV       A,R0
   \   000104   FE           MOV       R6,A
   \   000105   E9           MOV       A,R1
   \   000106   FF           MOV       R7,A
   \   000107   EA           MOV       A,R2
   \   000108   8882         MOV       DPL,R0
   \   00010A   8983         MOV       DPH,R1
   \   00010C   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00010F   8582..       MOV       ?V2,DPL
   \   000112   8583..       MOV       ?V3,DPH
   \   000115   6026         JZ        ??ZDO_ParseEndDeviceBindReq_5
   \   000117                ; Setup parameters for call to function osal_mem_alloc
   \   000117   2A           ADD       A,R2
   \   000118   FA           MOV       R2,A
   \   000119   E4           CLR       A
   \   00011A   33           RLC       A
   \   00011B   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   00011E   AC..         MOV       R4,?V0
   \   000120   AD..         MOV       R5,?V1
   \   000122   85..82       MOV       DPL,?V6
   \   000125   85..83       MOV       DPH,?V7
   \   000128   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00012B   4D           ORL       A,R5
   \   00012C   600F         JZ        ??ZDO_ParseEndDeviceBindReq_5
   2945            {
   2946              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00012E                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00012E   AA..         MOV       R2,?V2
   \   000130   AB..         MOV       R3,?V3
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   E0           MOVX      A,@DPTR
   \   000137   F9           MOV       R1,A
   \   000138   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00013B   8006         SJMP      ??ZDO_ParseEndDeviceBindReq_6
   2947            }
   2948            else
   2949            {
   2950              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00013D   8E82         MOV       DPL,R6
   \   00013F   8F83         MOV       DPH,R7
   \   000141   E4           CLR       A
   \   000142   F0           MOVX      @DPTR,A
   2951            }
   2952          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   000143   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine165_0
   \   000001                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   E5..         MOV       A,?V2
   \   000006   2402         ADD       A,#0x2
   \   000008   F5..         MOV       ?V2,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E5..         MOV       A,?V2
   \   000003   2409         ADD       A,#0x9
   \   000005   F5..         MOV       ?V2,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   EE           MOV       A,R6
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET
   2953          #endif
   2954          
   2955          /*********************************************************************
   2956           * @fn          ZDO_ParseBindUnbindReq
   2957           *
   2958           * @brief       This function parses the Bind_req or Unbind_req message.
   2959           *
   2960           * @param       inMsg  - incoming message (request)
   2961           * @param       pReq - place to put parsed information
   2962           *
   2963           * @return      none
   2964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2965          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   2967            uint8 *msg;
   2968          
   2969            msg = inMsg->asdu;
   \   000009   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00000C   12....       LCALL     ?Subroutine66 & 0xFFFF
   2970            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_110:
   \   00000F                ; Setup parameters for call to function sAddrExtCpy
   \   00000F   AC..         MOV       R4,?V0
   \   000011   FD           MOV       R5,A
   \   000012   EE           MOV       A,R6
   \   000013   FA           MOV       R2,A
   \   000014   EF           MOV       A,R7
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     ?Subroutine43 & 0xFFFF
   2971            msg += Z_EXTADDR_LEN;
   2972            pReq->srcEndpoint = *msg++;
   \                     ??CrossCallReturnLabel_68:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
   \   000026   E5..         MOV       A,?V0
   \   000028   2409         ADD       A,#0x9
   \   00002A   F5..         MOV       ?V0,A
   \   00002C   5002         JNC       ??ZDO_ParseBindUnbindReq_0
   \   00002E   05..         INC       ?V1
   2973            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000030   F582         MOV       DPL,A
   \   000032   85..83       MOV       DPH,?V1
   \   000035   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000038   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   2974            msg += 2;
   2975            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_450:
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F8           MOV       R0,A
   \   000045   EE           MOV       A,R6
   \   000046   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000049   E5..         MOV       A,?V0
   \   00004B   2403         ADD       A,#0x3
   \   00004D   F5..         MOV       ?V0,A
   \   00004F   5002         JNC       ??ZDO_ParseBindUnbindReq_1
   \   000051   05..         INC       ?V1
   2976            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000053   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000056   7010         JNZ       ??ZDO_ParseBindUnbindReq_2
   2977            {
   2978              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000058                ; Setup parameters for call to function sAddrExtCpy
   \   000058   AC..         MOV       R4,?V0
   \   00005A   AD..         MOV       R5,?V1
   \   00005C   12....       LCALL     ?Subroutine43 & 0xFFFF
   2979              msg += Z_EXTADDR_LEN;
   2980              pReq->dstEndpoint = *msg;
   2981            }
   \                     ??CrossCallReturnLabel_69:
   \   00005F   C0E0         PUSH      A
   \   000061   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000064   D0E0         POP       A
   \   000066   800C         SJMP      ??ZDO_ParseBindUnbindReq_3
   2982            else
   2983            {
   2984              // copy group address
   2985              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   12....       LCALL     ?Subroutine68 & 0xFFFF
   2986            }
   \                     ??CrossCallReturnLabel_113:
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   E9           MOV       A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   000074   F0           MOVX      @DPTR,A
   2987          }
   \   000075   02....       LJMP      ??Subroutine142_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine169_0
   \   000001                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   7403         MOV       A,#0x3
   \   000009   68           XRL       A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   E8           MOV       A,R0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EC           MOV       A,R4
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine181_0
   \   000001                ; // Fall through to label ??Subroutine181_0
   2988          
   2989          /*********************************************************************
   2990           * @fn      ZDO_ParseAddrRsp
   2991           *
   2992           * @brief   Turns the inMsg (incoming message) into the out parsed
   2993           *          structure.
   2994           *
   2995           * @param   inMsg - incoming message
   2996           *
   2997           * @return  pointer to parsed structures.  This structure was
   2998           *          allocated using osal_mem_alloc, so it must be freed
   2999           *          by the calling function [osal_mem_free()].
   3000           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3001          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   3002          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3003            ZDO_NwkIEEEAddrResp_t *rsp;
   3004            uint8 *msg;
   3005            byte cnt = 0;
   \   000005   75..00       MOV       ?V2,#0x0
   3006          
   3007            // Calculate the number of items in the list
   3008            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000008   EA           MOV       A,R2
   \   000009   2413         ADD       A,#0x13
   \   00000B   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00000E   EA           MOV       A,R2
   \   00000F   2410         ADD       A,#0x10
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3B           ADDC      A,R3
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C3           CLR       C
   \   000019   940C         SUBB      A,#0xc
   \   00001B   4009         JC        ??ZDO_ParseAddrRsp_0
   3009            {
   3010              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   12....       LCALL     ?Subroutine58 & 0xFFFF
   3011            }
   \                     ??CrossCallReturnLabel_93:
   \   000024   F5..         MOV       ?V2,A
   3012            else
   3013            {
   3014              cnt = 0;
   3015            }
   3016          
   3017            // Make buffer
   3018            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   A8..         MOV       R0,?V2
   \   000028   E8           MOV       A,R0
   \   000029   28           ADD       A,R0
   \   00002A   F8           MOV       R0,A
   \   00002B   E4           CLR       A
   \   00002C   33           RLC       A
   \   00002D   F9           MOV       R1,A
   \   00002E   E8           MOV       A,R0
   \   00002F   240D         ADD       A,#0xd
   \   000031   12....       LCALL     ?Subroutine89 & 0xFFFF
   3019          
   3020            if ( rsp )
   \                     ??CrossCallReturnLabel_155:
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??ZDO_ParseAddrRsp_1 & 0xFFFF
   3021            {
   3022              msg = inMsg->asdu;
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   3023          
   3024              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_240:
   \   000040   8E82         MOV       DPL,R6
   \   000042   F583         MOV       DPH,A
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   8A82         MOV       DPL,R2
   \   000048   8B83         MOV       DPH,R3
   \   00004A   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00004D   AE82         MOV       R6,DPL
   \   00004F   AF83         MOV       R7,DPH
   3025              if ( rsp->status == ZDO_SUCCESS )
   \   000051   707C         JNZ       ??ZDO_ParseAddrRsp_1
   3026              {
   3027                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000053                ; Setup parameters for call to function sAddrExtCpy
   \   000053   EE           MOV       A,R6
   \   000054   FC           MOV       R4,A
   \   000055   EF           MOV       A,R7
   \   000056   FD           MOV       R5,A
   \   000057   EA           MOV       A,R2
   \   000058   2403         ADD       A,#0x3
   \   00005A   12....       LCALL     ?Subroutine42 & 0xFFFF
   3028                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_354:
   \   00005D   5001         JNC       ??ZDO_ParseAddrRsp_2
   \   00005F   0F           INC       R7
   3029                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   000060   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000063   EA           MOV       A,R2
   \   000064   85..82       MOV       DPL,?V0
   \   000067   85..83       MOV       DPH,?V1
   \   00006A   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   3030          
   3031                msg += 2;
   3032                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_451:
   \   00006D   E5..         MOV       A,?V0
   \   00006F   240B         ADD       A,#0xb
   \   000071   F8           MOV       R0,A
   \   000072   E4           CLR       A
   \   000073   35..         ADDC      A,?V1
   \   000075   F9           MOV       R1,A
   \   000076   E8           MOV       A,R0
   \   000077   FA           MOV       R2,A
   \   000078   E9           MOV       A,R1
   \   000079   FB           MOV       R3,A
   \   00007A   8882         MOV       DPL,R0
   \   00007C   F583         MOV       DPH,A
   \   00007E   E4           CLR       A
   \   00007F   F0           MOVX      @DPTR,A
   3033          
   3034                // StartIndex field is only present if NumAssocDev field is non-zero.
   3035                if ( cnt > 0 )
   \   000080   E5..         MOV       A,?V2
   \   000082   604B         JZ        ??ZDO_ParseAddrRsp_1
   3036                {
   3037                  uint16 *pList = &(rsp->devList[0]);
   \   000084   E5..         MOV       A,?V0
   \   000086   240D         ADD       A,#0xd
   \   000088   F8           MOV       R0,A
   \   000089   E4           CLR       A
   \   00008A   35..         ADDC      A,?V1
   \   00008C   F9           MOV       R1,A
   3038                  byte n = cnt;
   3039          
   3040                  rsp->numAssocDevs = *msg++;
   \   00008D   8E82         MOV       DPL,R6
   \   00008F   8F83         MOV       DPH,R7
   \   000091   A3           INC       DPTR
   \   000092   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000095   12....       LCALL     ?Subroutine12 & 0xFFFF
   3041                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   000098   C0E0         PUSH      A
   \   00009A   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   00009D   D0E0         POP       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   EE           MOV       A,R6
   \   0000A1   2404         ADD       A,#0x4
   \   0000A3   FE           MOV       R6,A
   \   0000A4   5001         JNC       ??ZDO_ParseAddrRsp_3
   \   0000A6   0F           INC       R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000A7   85....       MOV       ?V3,?V2
   3042          
   3043                  while ( n != 0 )
   3044                  {
   3045                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000AA   8E82         MOV       DPL,R6
   \   0000AC   8F83         MOV       DPH,R7
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   FC           MOV       R4,A
   \   0000B0   A3           INC       DPTR
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   FB           MOV       R3,A
   \   0000B3   EC           MOV       A,R4
   \   0000B4   8882         MOV       DPL,R0
   \   0000B6   8983         MOV       DPH,R1
   \   0000B8   12....       LCALL     ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   0000BB   E8           MOV       A,R0
   \   0000BC   2402         ADD       A,#0x2
   \   0000BE   F8           MOV       R0,A
   \   0000BF   5001         JNC       ??ZDO_ParseAddrRsp_5
   \   0000C1   09           INC       R1
   3046                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000C2   EE           MOV       A,R6
   \   0000C3   2402         ADD       A,#0x2
   \   0000C5   FE           MOV       R6,A
   \   0000C6   5001         JNC       ??ZDO_ParseAddrRsp_6
   \   0000C8   0F           INC       R7
   3047                    n--;
   3048                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000C9   15..         DEC       ?V3
   \   0000CB   E5..         MOV       A,?V3
   \   0000CD   70DB         JNZ       ??ZDO_ParseAddrRsp_4
   3049                }
   3050              }
   3051            }
   3052          
   3053            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000CF   AA..         MOV       R2,?V0
   \   0000D1   AB..         MOV       R3,?V1
   \   0000D3   02....       LJMP      ??Subroutine163_0 & 0xFFFF
   3054          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F582         MOV       DPL,A
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine166_0
   \   000004                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   FB           MOV       R3,A
   \   000005                REQUIRE ??Subroutine167_0
   \   000005                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   EE           MOV       A,R6
   \   000004   2408         ADD       A,#0x8
   \   000006   FE           MOV       R6,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3B           ADDC      A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   FE           MOV       R6,A
   \   000006   E9           MOV       A,R1
   \   000007   FF           MOV       R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   E5..         MOV       A,?V0
   \   000002   240C         ADD       A,#0xc
   \   000004                REQUIRE ??Subroutine174_0
   \   000004                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   39           ADDC      A,R1
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   22           RET
   3055          
   3056          /*********************************************************************
   3057           * @fn          ZDO_ParseNodeDescRsp
   3058           *
   3059           * @brief       This function parses the Node_Desc_rsp message.
   3060           *
   3061           * @param       inMsg - incoming message
   3062           * @param       pNDRsp - place to parse the message into
   3063           *
   3064           * @return      none
   3065           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3066          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   3067          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3068            uint8 *msg;
   3069          
   3070            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine10 & 0xFFFF
   3071          
   3072            pNDRsp->status = *msg++;
   3073            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   3074          
   3075            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   3076            {
   3077              msg += 2;
   3078              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV       A,R0
   \   00000E   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000011   39           ADDC      A,R1
   \   000012   FB           MOV       R3,A
   \   000013   EC           MOV       A,R4
   \   000014   2403         ADD       A,#0x3
   \   000016   FE           MOV       R6,A
   \   000017   E4           CLR       A
   \   000018   3D           ADDC      A,R5
   \   000019   FF           MOV       R7,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   5407         ANL       A,#0x7
   \   000021   F5..         MOV       ?V0,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   54F8         ANL       A,#0xf8
   \   00002A   45..         ORL       A,?V0
   \   00002C   F5..         MOV       ?V1,A
   \   00002E   12....       LCALL     ?Subroutine36 & 0xFFFF
   3079          
   3080              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_56:
   \   000031   A2E3         MOV       C,0xE0 /* A   */.3
   \   000033   E4           CLR       A
   \   000034   33           RLC       A
   \   000035   F5..         MOV       ?V0,A
   \   000037   A2E0         MOV       C,0xE0 /* A   */.0
   \   000039   E4           CLR       A
   \   00003A   33           RLC       A
   \   00003B   33           RLC       A
   \   00003C   33           RLC       A
   \   00003D   33           RLC       A
   \   00003E   F5..         MOV       ?V0,A
   \   000040   74F7         MOV       A,#-0x9
   \   000042   55..         ANL       A,?V1
   \   000044   45..         ORL       A,?V0
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   12....       LCALL     ?Subroutine36 & 0xFFFF
   3081              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_57:
   \   00004D   A2E4         MOV       C,0xE0 /* A   */.4
   \   00004F   E4           CLR       A
   \   000050   33           RLC       A
   \   000051   FA           MOV       R2,A
   \   000052   A2E0         MOV       C,0xE0 /* A   */.0
   \   000054   E4           CLR       A
   \   000055   33           RLC       A
   \   000056   C4           SWAP      A
   \   000057   FA           MOV       R2,A
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   54EF         ANL       A,#0xef
   \   00005F   4A           ORL       A,R2
   \   000060   F0           MOVX      @DPTR,A
   3082          
   3083              msg++;  // Reserved bits.
   3084              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000061   E8           MOV       A,R0
   \   000062   2403         ADD       A,#0x3
   \   000064   FA           MOV       R2,A
   \   000065   E4           CLR       A
   \   000066   39           ADDC      A,R1
   \   000067   FB           MOV       R3,A
   \   000068   EC           MOV       A,R4
   \   000069   2404         ADD       A,#0x4
   \   00006B   0E           INC       R6
   \   00006C   E4           CLR       A
   \   00006D   3D           ADDC      A,R5
   \   00006E   FF           MOV       R7,A
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   E0           MOVX      A,@DPTR
   \   000074   54F8         ANL       A,#0xf8
   \   000076   F5..         MOV       ?V0,A
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   5407         ANL       A,#0x7
   \   00007F   45..         ORL       A,?V0
   \   000081   F5..         MOV       ?V0,A
   \   000083   12....       LCALL     ?Subroutine36 & 0xFFFF
   3085              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_58:
   \   000086   5407         ANL       A,#0x7
   \   000088   FA           MOV       R2,A
   \   000089   74F8         MOV       A,#-0x8
   \   00008B   55..         ANL       A,?V0
   \   00008D   4A           ORL       A,R2
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   12....       LCALL     ?Subroutine32 & 0xFFFF
   3086              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_47:
   \   000095   8C82         MOV       DPL,R4
   \   000097   8D83         MOV       DPH,R5
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   12....       LCALL     ?Subroutine33 & 0xFFFF
   3087              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_50:
   \   0000A1   A3           INC       DPTR
   \   0000A2   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   0000A5   12....       LCALL     ?Subroutine25 & 0xFFFF
   3088              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_32:
   \   0000A8   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000AB   12....       LCALL     ?Subroutine25 & 0xFFFF
   3089              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_33:
   \   0000AE   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000B1   12....       LCALL     ?Subroutine19 & 0xFFFF
   3090              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_23:
   \   0000B4   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000B7   12....       LCALL     ?Subroutine19 & 0xFFFF
   3091              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_24:
   \   0000BA   A3           INC       DPTR
   \   0000BB   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   E8           MOV       A,R0
   \   0000C9   240A         ADD       A,#0xa
   \   0000CB   F8           MOV       R0,A
   \   0000CC   5001         JNC       ??ZDO_ParseNodeDescRsp_1
   \   0000CE   09           INC       R1
   3092              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000CF   F582         MOV       DPL,A
   \   0000D1   8983         MOV       DPH,R1
   \   0000D3   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   0000D6   FB           MOV       R3,A
   \   0000D7   EC           MOV       A,R4
   \   0000D8   240B         ADD       A,#0xb
   \   0000DA   F582         MOV       DPL,A
   \   0000DC   E4           CLR       A
   \   0000DD   3D           ADDC      A,R5
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   EE           MOV       A,R6
   \   0000E1   12....       LCALL     ??Subroutine148_0 & 0xFFFF
   3093              msg += 2;
   3094              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_245:
   \   0000E4   8882         MOV       DPL,R0
   \   0000E6   8983         MOV       DPH,R1
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   C0E0         PUSH      A
   \   0000ED   EC           MOV       A,R4
   \   0000EE   240D         ADD       A,#0xd
   \   0000F0   F582         MOV       DPL,A
   \   0000F2   E4           CLR       A
   \   0000F3   3D           ADDC      A,R5
   \   0000F4   F583         MOV       DPH,A
   \   0000F6   D0E0         POP       A
   \   0000F8   12....       LCALL     ?Subroutine33 & 0xFFFF
   3095              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   3096              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   3097            }
   \                     ??CrossCallReturnLabel_51:
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   C0E0         PUSH      A
   \   0000FE   EC           MOV       A,R4
   \   0000FF   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000102   3D           ADDC      A,R5
   \   000103   F583         MOV       DPH,A
   \   000105   D0E0         POP       A
   \   000107   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00010A   C0E0         PUSH      A
   \   00010C   EC           MOV       A,R4
   \   00010D   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000110   3D           ADDC      A,R5
   \   000111   F583         MOV       DPH,A
   \   000113   D0E0         POP       A
   \   000115   F0           MOVX      @DPTR,A
   3098          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000116   02....       LJMP      ??Subroutine142_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000003   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000006   8C82         MOV       DPL,R4
   \   000008   8D83         MOV       DPH,R5
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   8882         MOV       DPL,R0
   \   00000D   8983         MOV       DPH,R1
   \   00000F   A3           INC       DPTR
   \   000010   A882         MOV       R0,DPL
   \   000012   A983         MOV       R1,DPH
   \   000014   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000017   FB           MOV       R3,A
   \   000018   EE           MOV       A,R6
   \   000019   8C82         MOV       DPL,R4
   \   00001B   8D83         MOV       DPH,R5
   \   00001D   A3           INC       DPTR
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   EB           MOV       A,R3
   \   000021   F0           MOVX      @DPTR,A
   \   000022   8C82         MOV       DPL,R4
   \   000024   8D83         MOV       DPH,R5
   \   000026   E0           MOVX      A,@DPTR
   \   000027   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine172_0
   \   000001                ; // Fall through to label ??Subroutine172_0
   3099          
   3100          /*********************************************************************
   3101           * @fn          ZDO_ParsePowerDescRsp
   3102           *
   3103           * @brief       This function parses the Power_Desc_rsp message.
   3104           *
   3105           * @param       inMsg  - incoming message
   3106           * @param       pNPRsp - place to parse the message into
   3107           *
   3108           * @return      none
   3109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3110          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   3111          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3112            uint8 *msg;
   3113          
   3114            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000008   F583         MOV       DPH,A
   \   00000A   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   3115            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_277:
   \   00000D   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000010   A3           INC       DPTR
   \   000011   AA82         MOV       R2,DPL
   \   000013   AB83         MOV       R3,DPH
   3116            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000015   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000018   F9           MOV       R1,A
   \   000019   EE           MOV       A,R6
   \   00001A   8C82         MOV       DPL,R4
   \   00001C   8D83         MOV       DPH,R5
   \   00001E   A3           INC       DPTR
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   E9           MOV       A,R1
   \   000022   12....       LCALL     ?Subroutine15 & 0xFFFF
   3117          
   3118            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_18:
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6003         JZ        $+5
   \   000028   02....       LJMP      ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   3119            {
   3120              msg += 2;
   3121              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   00002B   EA           MOV       A,R2
   \   00002C   2402         ADD       A,#0x2
   \   00002E   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000031   EC           MOV       A,R4
   \   000032   2403         ADD       A,#0x3
   \   000034   E4           CLR       A
   \   000035   3D           ADDC      A,R5
   \   000036   0C           INC       R4
   \   000037   0C           INC       R4
   \   000038   0C           INC       R4
   \   000039   FD           MOV       R5,A
   \   00003A   8C82         MOV       DPL,R4
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   540F         ANL       A,#0xf
   \   000041   F5..         MOV       ?V0,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V1,A
   \   000047   8882         MOV       DPL,R0
   \   000049   8983         MOV       DPH,R1
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   C4           SWAP      A
   \   00004D   540F         ANL       A,#0xf
   \   00004F   F5..         MOV       ?V2,A
   \   000051   75..00       MOV       ?V3,#0x0
   \   000054   7404         MOV       A,#0x4
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?S_SHL
   \   00005B   E5..         MOV       A,?V0
   \   00005D   45..         ORL       A,?V2
   \   00005F   F8           MOV       R0,A
   \   000060   A9..         MOV       R1,?V1
   \   000062   8C82         MOV       DPL,R4
   \   000064   8D83         MOV       DPH,R5
   \   000066   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   3122              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_447:
   \   000069   E8           MOV       A,R0
   \   00006A   54F0         ANL       A,#0xf0
   \   00006C   F8           MOV       R0,A
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   E0           MOVX      A,@DPTR
   \   000072   540F         ANL       A,#0xf
   \   000074   FE           MOV       R6,A
   \   000075   E8           MOV       A,R0
   \   000076   4E           ORL       A,R6
   \   000077   F5..         MOV       ?V0,A
   \   000079   8C82         MOV       DPL,R4
   \   00007B   8D83         MOV       DPH,R5
   \   00007D   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   3123              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_448:
   \   000080   EA           MOV       A,R2
   \   000081   2403         ADD       A,#0x3
   \   000083   12....       LCALL     ?Subroutine103 & 0xFFFF
   3124              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   3125            }
   \                     ??CrossCallReturnLabel_188:
   \   000086   E5..         MOV       A,?V1
   \   000088   540F         ANL       A,#0xf
   \   00008A   F5..         MOV       ?V1,A
   \   00008C   8882         MOV       DPL,R0
   \   00008E   8983         MOV       DPH,R1
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C4           SWAP      A
   \   000092   540F         ANL       A,#0xf
   \   000094   F5..         MOV       ?V2,A
   \   000096   740C         MOV       A,#0xc
   \   000098   78..         MOV       R0,#?V2
   \   00009A   12....       LCALL     ?S_SHL
   \   00009D   E5..         MOV       A,?V1
   \   00009F   45..         ORL       A,?V3
   \   0000A1   F9           MOV       R1,A
   \   0000A2   8C82         MOV       DPL,R4
   \   0000A4   8D83         MOV       DPH,R5
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   E9           MOV       A,R1
   \   0000AB   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   0000AE   540F         ANL       A,#0xf
   \   0000B0   F8           MOV       R0,A
   \   0000B1   EA           MOV       A,R2
   \   0000B2   2404         ADD       A,#0x4
   \   0000B4   8C82         MOV       DPL,R4
   \   0000B6   8D83         MOV       DPH,R5
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   54F0         ANL       A,#0xf0
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   E8           MOV       A,R0
   \   0000BE   F9           MOV       R1,A
   \   0000BF   8C82         MOV       DPL,R4
   \   0000C1   8D83         MOV       DPH,R5
   \   0000C3   A3           INC       DPTR
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   49           ORL       A,R1
   \   0000C6   F0           MOVX      @DPTR,A
   3126          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000C7   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   8A82         MOV       DPL,R2
   \   000002   F583         MOV       DPH,A
   \   000004   E0           MOVX      A,@DPTR
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009                REQUIRE ??Subroutine170_0
   \   000009                ; // Fall through to label ??Subroutine170_0
   3127          
   3128          /*********************************************************************
   3129           * @fn          ZDO_ParseSimpleDescRsp
   3130           *
   3131           * @brief       This function parse the Simple_Desc_rsp message.
   3132           *
   3133           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   3134           *         in the SimpleDescriptionFormat_t structure are allocated
   3135           *         and the calling function needs to free [osal_msg_free()]
   3136           *         these buffers.
   3137           *
   3138           * @param       inMsg  - incoming message
   3139           * @param       pSimpleDescRsp - place to parse the message into
   3140           *
   3141           * @return      none
   3142           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3143          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   3144          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3145            uint8 *msg;
   3146          
   3147            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine10 & 0xFFFF
   3148            pSimpleDescRsp->status = *msg++;
   3149            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   3150            msg += sizeof ( uint16 );
   3151            msg++; // Skip past the length field.
   3152          
   3153            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7011         JNZ       ??ZDO_ParseSimpleDescRsp_0
   3154            {
   3155              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV       A,R4
   \   00000B   2403         ADD       A,#0x3
   \   00000D   FC           MOV       R4,A
   \   00000E   5001         JNC       ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC       R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV       A,R0
   \   000012   2403         ADD       A,#0x3
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   3156            }
   3157          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B   02....       LJMP      ?Subroutine3 & 0xFFFF
   3158          
   3159          /*********************************************************************
   3160           * @fn          ZDO_ParseEPListRsp
   3161           *
   3162           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   3163           *
   3164           * @param       inMsg  - incoming message
   3165           *
   3166           * @return      none
   3167           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3168          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   3169          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3170            ZDO_ActiveEndpointRsp_t *pRsp;
   3171            uint8 *msg;
   3172            uint8 Status;
   3173            uint8 cnt;
   3174          
   3175            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine67 & 0xFFFF
   3176            Status = *msg++;
   \                     ??CrossCallReturnLabel_111:
   \   000008   F5..         MOV       ?V5,A
   \   00000A   A3           INC       DPTR
   \   00000B   8582..       MOV       ?V2,DPL
   \   00000E   8583..       MOV       ?V3,DPH
   3177            cnt = msg[2];
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V4,A
   3178          
   3179            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000016   F5..         MOV       ?V0,A
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   00001B   3400         ADDC      A,#0x0
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV       ?V6,R2
   \   000023   8B..         MOV       ?V7,R3
   \   000025   AE..         MOV       R6,?V6
   \   000027   AF..         MOV       R7,?V7
   3180            if ( pRsp )
   \   000029   EA           MOV       A,R2
   \   00002A   4F           ORL       A,R7
   \   00002B   6044         JZ        ??ZDO_ParseEPListRsp_0
   3181            {
   3182              pRsp->status = Status;
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   E5..         MOV       A,?V5
   \   000033   F0           MOVX      @DPTR,A
   3183              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000034   85..82       MOV       DPL,?V2
   \   000037   85..83       MOV       DPH,?V3
   \   00003A   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8B83         MOV       DPH,R3
   \   000041   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   3184              msg += sizeof( uint16 );
   3185              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_452:
   \   000044   8E82         MOV       DPL,R6
   \   000046   8B83         MOV       DPH,R3
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E5..         MOV       A,?V4
   \   00004D   12....       LCALL     ?Subroutine24 & 0xFFFF
   3186              msg++; // pass cnt
   3187              osal_memcpy( pRsp->epList, msg, cnt );
   3188            }
   \                     ??CrossCallReturnLabel_29:
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A982         MOV       R1,DPL
   \   000054   AA83         MOV       R2,DPH
   \   000056   89..         MOV       ?V4,R1
   \   000058   8A..         MOV       ?V5,R2
   \   00005A   88..         MOV       ?V6,R0
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000061   AC..         MOV       R4,?V0
   \   000063   7D00         MOV       R5,#0x0
   \   000065   EE           MOV       A,R6
   \   000066   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000069   3F           ADDC      A,R7
   \   00006A   FB           MOV       R3,A
   \   00006B   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   3189          
   3190            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000071   EE           MOV       A,R6
   \   000072   FA           MOV       R2,A
   \   000073   EF           MOV       A,R7
   \   000074   FB           MOV       R3,A
   \   000075   02....       LJMP      ??Subroutine162_0 & 0xFFFF
   3191          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002                REQUIRE ??Subroutine171_0
   \   000002                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   C8           XCH       A,R0
   \   000005   F9           MOV       R1,A
   \   000006   EA           MOV       A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   F5..         MOV       ?V2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   85..82       MOV       DPL,?V2
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   2404         ADD       A,#0x4
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET
   3192          
   3193          /*********************************************************************
   3194           * @fn          ZDO_ParseServerDiscRsp
   3195           *
   3196           * @brief       Parse the Server_Discovery_rsp message.
   3197           *
   3198           * @param       inMsg - incoming message.
   3199           * @param       pRsp - place to put the parsed information.
   3200           *
   3201           * @return      none
   3202           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3203          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   3204          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3205            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV       A,R2
   \   000006   2413         ADD       A,#0x13
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000013   F583         MOV       DPH,A
   \   000015   8A82         MOV       DPL,R2
   \   000017   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   00001A   12....       LCALL     ?Subroutine39 & 0xFFFF
   3206            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_64:
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   8882         MOV       DPL,R0
   \   000023   F583         MOV       DPH,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FA           MOV       R2,A
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   12....       LCALL     ?Subroutine29 & 0xFFFF
   3207          }
   \                     ??CrossCallReturnLabel_455:
   \   000030   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F9           MOV       R1,A
   \   000003   EA           MOV       A,R2
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008                REQUIRE ??Subroutine180_0
   \   000008                ; // Fall through to label ??Subroutine180_0
   3208          
   3209          /*********************************************************************
   3210           * @fn          ZDO_ParseMgmtLqiRsp
   3211           *
   3212           * @brief       This function parses the incoming Management
   3213           *              LQI response
   3214           *
   3215           * @param       inMsg - incoming message
   3216           *
   3217           * @return      a pointer to parsed response structure (NULL if not allocated).
   3218           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3219           *          by the calling function [osal_mem_free()].
   3220           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA..         MOV       R2,?V2
   \   000002   AB..         MOV       R3,?V3
   \   000004                REQUIRE ??Subroutine162_0
   \   000004                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3221          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   3222          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3223            ZDO_MgmtLqiRsp_t *pRsp;
   3224            uint8 status;
   3225            uint8 startIndex = 0;
   \   000005   75..00       MOV       ?V5,#0x0
   3226            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV       ?V4,#0x0
   3227            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV       ?V6,#0x0
   3228            uint8 *msg;
   3229          
   3230            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine55 & 0xFFFF
   3231          
   3232            status = *msg++;
   \                     ??CrossCallReturnLabel_87:
   \   000011   F5..         MOV       ?V7,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   3233            if ( status == ZSuccess )
   \   000018   7017         JNZ       ??ZDO_ParseMgmtLqiRsp_0
   3234            {
   3235              neighborLqiEntries = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V6,A
   3236              startIndex = *msg++;
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V5,A
   3237              neighborLqiCount = *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V4,A
   \   00002A   EE           MOV       A,R6
   \   00002B   2403         ADD       A,#0x3
   \   00002D   FE           MOV       R6,A
   \   00002E   5001         JNC       ??ZDO_ParseMgmtLqiRsp_0
   \   000030   0F           INC       R7
   3238            }
   3239          
   3240            // Allocate a buffer big enough to handle the list.
   3241            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   3242                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV       A,?V4
   \   000033   75F01A       MOV       B,#0x1a
   \   000036   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000039   39           ADDC      A,R1
   \   00003A   12....       LCALL     ?Subroutine101 & 0xFFFF
   3243            if ( pRsp )
   \                     ??CrossCallReturnLabel_409:
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   3244            {
   3245              uint8 x;
   3246              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   000042   12....       LCALL     ?Subroutine108 & 0xFFFF
   3247              pRsp->status = status;
   \                     ??CrossCallReturnLabel_191:
   \   000045   12....       LCALL     ?Subroutine11 & 0xFFFF
   3248              pRsp->neighborLqiEntries = neighborLqiEntries;
   3249              pRsp->startIndex = startIndex;
   3250              pRsp->neighborLqiCount = neighborLqiCount;
   3251          
   3252              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_2:
   \   000048   02....       LJMP      ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   3253              {
   3254                uint8 tmp;
   3255          
   3256                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   E4           CLR       A
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   F0           MOVX      @DPTR,A
   3257                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   000055                ; Setup parameters for call to function sAddrExtCpy
   \   000055   EE           MOV       A,R6
   \   000056   FC           MOV       R4,A
   \   000057   EF           MOV       A,R7
   \   000058   FD           MOV       R5,A
   \   000059   E5..         MOV       A,?V0
   \   00005B   2402         ADD       A,#0x2
   \   00005D   12....       LCALL     ?Subroutine42 & 0xFFFF
   3258                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_355:
   \   000060   5001         JNC       ??ZDO_ParseMgmtLqiRsp_4
   \   000062   0F           INC       R7
   3259          
   3260                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000063                ; Setup parameters for call to function sAddrExtCpy
   \   000063   FC           MOV       R4,A
   \   000064   EF           MOV       A,R7
   \   000065   FD           MOV       R5,A
   \   000066   E5..         MOV       A,?V0
   \   000068   240A         ADD       A,#0xa
   \   00006A   12....       LCALL     ?Subroutine42 & 0xFFFF
   3261                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_356:
   \   00006D   5001         JNC       ??ZDO_ParseMgmtLqiRsp_5
   \   00006F   0F           INC       R7
   3262          
   3263                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000070   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000073   E5..         MOV       A,?V0
   \   000075   2412         ADD       A,#0x12
   \   000077   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   00007A   EA           MOV       A,R2
   \   00007B   12....       LCALL     ?Subroutine20 & 0xFFFF
   3264                msg += 2;
   3265          
   3266                tmp = *msg++;
   \                     ??CrossCallReturnLabel_391:
   \   00007E   F8           MOV       R0,A
   3267                pList->devType = tmp & 0x03;
   \   00007F   7403         MOV       A,#0x3
   \   000081   58           ANL       A,R0
   \   000082   C0E0         PUSH      A
   \   000084   E5..         MOV       A,?V0
   \   000086   2414         ADD       A,#0x14
   \   000088   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   00008B   D0E0         POP       A
   \   00008D   F0           MOVX      @DPTR,A
   3268                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   00008E   E8           MOV       A,R0
   \   00008F   13           RRC       A
   \   000090   13           RRC       A
   \   000091   543F         ANL       A,#0x3f
   \   000093   5403         ANL       A,#0x3
   \   000095   C0E0         PUSH      A
   \   000097   E5..         MOV       A,?V0
   \   000099   2415         ADD       A,#0x15
   \   00009B   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   00009E   D0E0         POP       A
   \   0000A0   F0           MOVX      @DPTR,A
   3269                pList->relation = (tmp >> 4) & 0x07;
   \   0000A1   E8           MOV       A,R0
   \   0000A2   C4           SWAP      A
   \   0000A3   540F         ANL       A,#0xf
   \   0000A5   5407         ANL       A,#0x7
   \   0000A7   C0E0         PUSH      A
   \   0000A9   E5..         MOV       A,?V0
   \   0000AB   2416         ADD       A,#0x16
   \   0000AD   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   0000B0   D0E0         POP       A
   \   0000B2   12....       LCALL     ?Subroutine12 & 0xFFFF
   3270          
   3271                pList->permit = (*msg++) & 0x03;
   \                     ??CrossCallReturnLabel_5:
   \   0000B5   5403         ANL       A,#0x3
   \   0000B7   C0E0         PUSH      A
   \   0000B9   E5..         MOV       A,?V0
   \   0000BB   2417         ADD       A,#0x17
   \   0000BD   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   0000C0   D0E0         POP       A
   \   0000C2   12....       LCALL     ?Subroutine40 & 0xFFFF
   3272          
   3273                pList->depth = *msg++;
   \                     ??CrossCallReturnLabel_65:
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   C0E0         PUSH      A
   \   0000CB   E5..         MOV       A,?V0
   \   0000CD   2418         ADD       A,#0x18
   \   0000CF   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   0000D2   D0E0         POP       A
   \   0000D4   12....       LCALL     ?Subroutine26 & 0xFFFF
   3274          
   3275                pList->lqi = *msg++;
   \                     ??CrossCallReturnLabel_35:
   \   0000D7   C0E0         PUSH      A
   \   0000D9   E5..         MOV       A,?V0
   \   0000DB   2419         ADD       A,#0x19
   \   0000DD   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   0000E0   D0E0         POP       A
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   EE           MOV       A,R6
   \   0000E4   2406         ADD       A,#0x6
   \   0000E6   FE           MOV       R6,A
   \   0000E7   5001         JNC       ??ZDO_ParseMgmtLqiRsp_6
   \   0000E9   0F           INC       R7
   3276                pList++;
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   0000EA   E5..         MOV       A,?V0
   \   0000EC   241A         ADD       A,#0x1a
   \   0000EE   F5..         MOV       ?V0,A
   \   0000F0   5002         JNC       ??ZDO_ParseMgmtLqiRsp_7
   \   0000F2   05..         INC       ?V1
   3277              }
   \                     ??ZDO_ParseMgmtLqiRsp_7:
   \   0000F4   05..         INC       ?V5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   0000F6   E5..         MOV       A,?V5
   \   0000F8   C3           CLR       C
   \   0000F9   95..         SUBB      A,?V4
   \   0000FB   5003         JNC       $+5
   \   0000FD   02....       LJMP      ??ZDO_ParseMgmtLqiRsp_3 & 0xFFFF
   3278            }
   3279          
   3280            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   000100   02....       LJMP      ?Subroutine6 & 0xFFFF
   3281          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003                REQUIRE ??Subroutine173_0
   \   000003                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EA           MOV       A,R2
   \   000001   2404         ADD       A,#0x4
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V3
   \   000008   F5..         MOV       ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine175_0
   \   000001                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000003   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000006   8E82         MOV       DPL,R6
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E5..         MOV       A,?V7
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   E5..         MOV       A,?V6
   \   00000A   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E5..         MOV       A,?V5
   \   000011   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000014   E5..         MOV       A,?V4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   75..00       MOV       ?V5,#0x0
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   A4           MUL       AB
   \   000001   A9F0         MOV       R1,B
   \   000003                REQUIRE ??Subroutine177_0
   \   000003                ; // Fall through to label ??Subroutine177_0
   3282          
   3283          /*********************************************************************
   3284           * @fn          ZDO_ParseMgmNwkDiscRsp
   3285           *
   3286           * @brief       This function parses the incoming Management
   3287           *              Network Discover response.
   3288           *
   3289           * @param       inMsg - incoming message
   3290           *
   3291           * @return      pointer to parsed response.  This structure was
   3292           *          allocated using osal_mem_alloc, so it must be freed
   3293           *          by the calling function [osal_mem_free()].
   3294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3295          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   3296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3297            ZDO_MgmNwkDiscRsp_t *pRsp;
   3298            uint8 status;
   3299            uint8 networkCount = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   3300            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V0,#0x0
   3301            uint8 networkListCount = 0;
   \   00000B   75..00       MOV       ?V4,#0x0
   3302            uint8 *msg;
   3303          
   3304            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine55 & 0xFFFF
   3305            status = *msg++;
   \                     ??CrossCallReturnLabel_88:
   \   000011   F5..         MOV       ?V5,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   3306          
   3307            if ( status == ZSuccess )
   \   000018   7017         JNZ       ??ZDO_ParseMgmNwkDiscRsp_0
   3308            {
   3309              networkCount = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V1,A
   3310              startIndex = *msg++;
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V0,A
   3311              networkListCount = *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V4,A
   \   00002A   EE           MOV       A,R6
   \   00002B   2403         ADD       A,#0x3
   \   00002D   FE           MOV       R6,A
   \   00002E   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_0
   \   000030   0F           INC       R7
   3312            }
   3313          
   3314            // Allocate a buffer big enough to handle the list.
   3315            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   3316                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV       A,?V4
   \   000033   F5..         MOV       ?V2,A
   \   000035   75..00       MOV       ?V3,#0x0
   \   000038   7404         MOV       A,#0x4
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?S_SHL
   \   00003F   E5..         MOV       A,?V2
   \   000041   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000044   35..         ADDC      A,?V3
   \   000046   12....       LCALL     ?Subroutine101 & 0xFFFF
   3317            if ( pRsp )
   \                     ??CrossCallReturnLabel_410:
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   3318            {
   3319              uint8 x;
   3320              mgmtNwkDiscItem_t *pList;
   3321          
   3322              pRsp->status = status;
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   E5..         MOV       A,?V5
   \   000054   F0           MOVX      @DPTR,A
   3323              pRsp->networkCount = networkCount;
   \   000055   A3           INC       DPTR
   \   000056   E5..         MOV       A,?V1
   \   000058   12....       LCALL     ?Subroutine31 & 0xFFFF
   3324              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_45:
   \   00005B   E5..         MOV       A,?V0
   \   00005D   12....       LCALL     ?Subroutine30 & 0xFFFF
   3325              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_41:
   \   000060   E5..         MOV       A,?V4
   \   000062   F0           MOVX      @DPTR,A
   3326              pList = pRsp->list;
   \   000063   12....       LCALL     ?Subroutine108 & 0xFFFF
   3327          
   3328              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_192:
   \   000066   75..00       MOV       ?V5,#0x0
   \   000069   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   3329              {
   3330                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   00006C                ; Setup parameters for call to function sAddrExtCpy
   \   00006C   EE           MOV       A,R6
   \   00006D   FC           MOV       R4,A
   \   00006E   EF           MOV       A,R7
   \   00006F   FD           MOV       R5,A
   \   000070   AA..         MOV       R2,?V0
   \   000072   AB..         MOV       R3,?V1
   \   000074   12....       LCALL     ??Subroutine167_0 & 0xFFFF
   3331                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_357:
   \   000077   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_4
   \   000079   0F           INC       R7
   3332                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   00007A   F582         MOV       DPL,A
   \   00007C   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00007F   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   3333                if ( !notdoSCANCmd ) {
   \                     ??CrossCallReturnLabel_453:
   \   000082   90....       MOV       DPTR,#notdoSCANCmd
   \   000085   E0           MOVX      A,@DPTR
   \   000086   7007         JNZ       ??ZDO_ParseMgmNwkDiscRsp_5
   3334                  msg = msg + 2;
   \   000088   EE           MOV       A,R6
   \   000089   2402         ADD       A,#0x2
   \   00008B   FE           MOV       R6,A
   \   00008C   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_5
   \   00008E   0F           INC       R7
   3335                }    
   3336          
   3337                pList->logicalChannel = *msg++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000096   12....       LCALL     ?Subroutine40 & 0xFFFF
   3338                pList->stackProfile = (*msg) & 0x0F;
   \                     ??CrossCallReturnLabel_66:
   \   000099   A882         MOV       R0,DPL
   \   00009B   A983         MOV       R1,DPH
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   540F         ANL       A,#0xf
   \   0000A0   C0E0         PUSH      A
   \   0000A2   E5..         MOV       A,?V0
   \   0000A4   240B         ADD       A,#0xb
   \   0000A6   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   0000A9   D0E0         POP       A
   \   0000AB   12....       LCALL     ?Subroutine38 & 0xFFFF
   3339                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_59:
   \   0000AE   C0E0         PUSH      A
   \   0000B0   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   0000B3   D0E0         POP       A
   \   0000B5   F0           MOVX      @DPTR,A
   3340                pList->beaconOrder = (*msg) & 0x0F;
   \   0000B6   EE           MOV       A,R6
   \   0000B7   2402         ADD       A,#0x2
   \   0000B9   F8           MOV       R0,A
   \   0000BA   E4           CLR       A
   \   0000BB   3F           ADDC      A,R7
   \   0000BC   F9           MOV       R1,A
   \   0000BD   8882         MOV       DPL,R0
   \   0000BF   F583         MOV       DPH,A
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   540F         ANL       A,#0xf
   \   0000C4   C0E0         PUSH      A
   \   0000C6   E5..         MOV       A,?V0
   \   0000C8   240D         ADD       A,#0xd
   \   0000CA   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   0000CD   D0E0         POP       A
   \   0000CF   12....       LCALL     ?Subroutine38 & 0xFFFF
   3341                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_60:
   \   0000D2   C0E0         PUSH      A
   \   0000D4   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000D7   D0E0         POP       A
   \   0000D9   12....       LCALL     ?Subroutine12 & 0xFFFF
   3342                pList->permitJoining = *msg++;
   \                     ??CrossCallReturnLabel_6:
   \   0000DC   C0E0         PUSH      A
   \   0000DE   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0000E1   D0E0         POP       A
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   EE           MOV       A,R6
   \   0000E5   2404         ADD       A,#0x4
   \   0000E7   FE           MOV       R6,A
   \   0000E8   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_6
   \   0000EA   0F           INC       R7
   3343                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_6:
   \   0000EB   E5..         MOV       A,?V0
   \   0000ED   2410         ADD       A,#0x10
   \   0000EF   F5..         MOV       ?V0,A
   \   0000F1   5002         JNC       ??ZDO_ParseMgmNwkDiscRsp_7
   \   0000F3   05..         INC       ?V1
   3344              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_7:
   \   0000F5   05..         INC       ?V5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000F7   E5..         MOV       A,?V5
   \   0000F9   C3           CLR       C
   \   0000FA   95..         SUBB      A,?V4
   \   0000FC   5003         JNC       $+5
   \   0000FE   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   3345            }
   3346          
   3347            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   000101   02....       LJMP      ?Subroutine6 & 0xFFFF
   3348          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003   C4           SWAP      A
   \   000004   540F         ANL       A,#0xf
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8F83         MOV       DPH,R7
   \   000002   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   22           RET
   3349          
   3350          /*********************************************************************
   3351           * @fn          ZDO_ParseMgmtRtgRsp
   3352           *
   3353           * @brief       This function parses the incoming Management
   3354           *              Routing response.
   3355           *
   3356           * @param       inMsg - incoming message
   3357           *
   3358           * @return      a pointer to parsed response structure (NULL if not allocated).
   3359           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3360           *          by the calling function [osal_mem_free()].
   3361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3362          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3363          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3364            ZDO_MgmtRtgRsp_t *pRsp;
   3365            uint8 status;
   3366            uint8 rtgCount = 0;
   \   000005   75..00       MOV       ?V2,#0x0
   3367            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V1,#0x0
   3368            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV       ?V0,#0x0
   3369            uint8 *msg;
   3370          
   3371            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine55 & 0xFFFF
   3372          
   3373            status = *msg++;
   \                     ??CrossCallReturnLabel_89:
   \   000011   F5..         MOV       ?V3,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   3374            if ( status == ZSuccess )
   \   000018   7017         JNZ       ??ZDO_ParseMgmtRtgRsp_0
   3375            {
   3376              rtgCount = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V2,A
   3377              startIndex = *msg++;
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V1,A
   3378              rtgListCount = *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V0,A
   \   00002A   EE           MOV       A,R6
   \   00002B   2403         ADD       A,#0x3
   \   00002D   FE           MOV       R6,A
   \   00002E   5001         JNC       ??ZDO_ParseMgmtRtgRsp_0
   \   000030   0F           INC       R7
   3379            }
   3380          
   3381            // Allocate a buffer big enough to handle the list
   3382            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3383                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV       A,?V0
   \   000033   75F007       MOV       B,#0x7
   \   000036   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000039   39           ADDC      A,R1
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3384            if ( pRsp )
   \   00003E   EA           MOV       A,R2
   \   00003F   4B           ORL       A,R3
   \   000040   6078         JZ        ??ZDO_ParseMgmtRtgRsp_1
   3385            {
   3386              uint8 x;
   3387              rtgItem_t *pList = pRsp->list;
   \   000042   EA           MOV       A,R2
   \   000043   2404         ADD       A,#0x4
   \   000045   F8           MOV       R0,A
   \   000046   E4           CLR       A
   \   000047   3B           ADDC      A,R3
   \   000048   F9           MOV       R1,A
   3388              pRsp->status = status;
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   E5..         MOV       A,?V3
   \   00004F   F0           MOVX      @DPTR,A
   3389              pRsp->rtgCount = rtgCount;
   \   000050   A3           INC       DPTR
   \   000051   E5..         MOV       A,?V2
   \   000053   12....       LCALL     ?Subroutine31 & 0xFFFF
   3390              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_46:
   \   000056   E5..         MOV       A,?V1
   \   000058   12....       LCALL     ?Subroutine30 & 0xFFFF
   3391              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_42:
   \   00005B   E5..         MOV       A,?V0
   \   00005D   F0           MOVX      @DPTR,A
   3392          
   3393              for ( x = 0; x < rtgListCount; x++ )
   \   00005E   7C00         MOV       R4,#0x0
   \   000060   8052         SJMP      ??ZDO_ParseMgmtRtgRsp_2
   3394              {
   3395                uint8 statOpt;
   3396          
   3397                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   E0           MOVX      A,@DPTR
   \   000067   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   E5..         MOV       A,?V3
   \   00006E   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   3398                msg += 2;
   3399                statOpt = *msg++;
   \                     ??CrossCallReturnLabel_393:
   \   000071   FD           MOV       R5,A
   \   000072   EE           MOV       A,R6
   \   000073   2403         ADD       A,#0x3
   \   000075   FE           MOV       R6,A
   \   000076   5001         JNC       ??ZDO_ParseMgmtRtgRsp_4
   \   000078   0F           INC       R7
   3400                pList->status = (statOpt & 0x07);
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000079   7407         MOV       A,#0x7
   \   00007B   5D           ANL       A,R5
   \   00007C   8882         MOV       DPL,R0
   \   00007E   8983         MOV       DPH,R1
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   F0           MOVX      @DPTR,A
   3401                pList->options = ((statOpt >> 3) & 0x07);
   \   000086   ED           MOV       A,R5
   \   000087   13           RRC       A
   \   000088   13           RRC       A
   \   000089   13           RRC       A
   \   00008A   541F         ANL       A,#0x1f
   \   00008C   5407         ANL       A,#0x7
   \   00008E   8882         MOV       DPL,R0
   \   000090   8983         MOV       DPH,R1
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   3402                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_416:
   \   00009B   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E5..         MOV       A,?V3
   \   0000A4   F0           MOVX      @DPTR,A
   3403                msg += 2;
   \   0000A5   EE           MOV       A,R6
   \   0000A6   2402         ADD       A,#0x2
   \   0000A8   FE           MOV       R6,A
   \   0000A9   5001         JNC       ??ZDO_ParseMgmtRtgRsp_5
   \   0000AB   0F           INC       R7
   3404                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   0000AC   E8           MOV       A,R0
   \   0000AD   2407         ADD       A,#0x7
   \   0000AF   F8           MOV       R0,A
   \   0000B0   5001         JNC       ??ZDO_ParseMgmtRtgRsp_6
   \   0000B2   09           INC       R1
   3405              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   0000B3   0C           INC       R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000B4   EC           MOV       A,R4
   \   0000B5   C3           CLR       C
   \   0000B6   95..         SUBB      A,?V0
   \   0000B8   40A8         JC        ??ZDO_ParseMgmtRtgRsp_3
   3406            }
   3407          
   3408            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000BA   02....       LJMP      ??Subroutine163_0 & 0xFFFF
   3409          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   F5..         MOV       ?V4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F5..         MOV       ?V3,A
   \   000006   E5..         MOV       A,?V4
   \   000008   8882         MOV       DPL,R0
   \   00000A   8983         MOV       DPH,R1
   \   00000C   22           RET
   3410          
   3411          /*********************************************************************
   3412           * @fn          ZDO_ParseMgmtBindRsp
   3413           *
   3414           * @brief       This function parses the incoming Management
   3415           *              Binding response.
   3416           *
   3417           * @param       inMsg - pointer to message to parse
   3418           *
   3419           * @return      a pointer to parsed response structure (NULL if not allocated).
   3420           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3421           *          by the calling function [osal_mem_free()].
   3422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3423          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3424          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3425            ZDO_MgmtBindRsp_t *pRsp;
   3426            uint8 status;
   3427            uint8 bindingCount = 0;
   \   000005   75..00       MOV       ?V6,#0x0
   3428            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V5,#0x0
   3429            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV       ?V4,#0x0
   3430            uint8 *msg;
   3431          
   3432            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine67 & 0xFFFF
   3433          
   3434            status = *msg++;
   \                     ??CrossCallReturnLabel_112:
   \   000011   F5..         MOV       ?V7,A
   \   000013   A3           INC       DPTR
   \   000014   8582..       MOV       ?V2,DPL
   \   000017   8583..       MOV       ?V3,DPH
   3435            if ( status == ZSuccess )
   \   00001A   701C         JNZ       ??ZDO_ParseMgmtBindRsp_0
   3436            {
   3437              bindingCount = *msg++;
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V6,A
   3438              startIndex = *msg++;
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V5,A
   3439              bindingListCount = *msg++;
   \   000023   85..82       MOV       DPL,?V2
   \   000026   85..83       MOV       DPH,?V3
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V4,A
   \   00002E   E5..         MOV       A,?V2
   \   000030   2403         ADD       A,#0x3
   \   000032   F5..         MOV       ?V2,A
   \   000034   5002         JNC       ??ZDO_ParseMgmtBindRsp_0
   \   000036   05..         INC       ?V3
   3440            }
   3441          
   3442            // Allocate a buffer big enough to handle the list
   3443            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3444                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   E5..         MOV       A,?V4
   \   00003A   75F015       MOV       B,#0x15
   \   00003D   A4           MUL       AB
   \   00003E   A9F0         MOV       R1,B
   \   000040   2404         ADD       A,#0x4
   \   000042   12....       LCALL     ?Subroutine89 & 0xFFFF
   3445            if ( pRsp )
   \                     ??CrossCallReturnLabel_156:
   \   000045   7003         JNZ       $+5
   \   000047   02....       LJMP      ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3446            {
   3447              uint8 x;
   3448              apsBindingItem_t *pList = pRsp->list;
   \   00004A   EA           MOV       A,R2
   \   00004B   2404         ADD       A,#0x4
   \   00004D   FE           MOV       R6,A
   \   00004E   E4           CLR       A
   \   00004F   35..         ADDC      A,?V1
   \   000051   FF           MOV       R7,A
   3449              pRsp->status = status;
   \   000052   12....       LCALL     ?Subroutine11 & 0xFFFF
   3450              pRsp->bindingCount = bindingCount;
   3451              pRsp->startIndex = startIndex;
   3452              pRsp->bindingListCount = bindingListCount;
   3453          
   3454              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   000055   8019         SJMP      ??ZDO_ParseMgmtBindRsp_2
   3455              {
   3456                osal_cpyExtAddr( pList->srcAddr, msg );
   3457                msg += Z_EXTADDR_LEN;
   3458                pList->srcEP = *msg++;
   3459          
   3460                // Get the Cluster ID
   3461          
   3462                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3463                msg += 2;
   3464                pList->dstAddr.addrMode = *msg++;
   3465                if ( pList->dstAddr.addrMode == Addr64Bit )
   3466                {
   3467                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3468                  msg += Z_EXTADDR_LEN;
   3469                  pList->dstEP = *msg++;
   3470                }
   3471                else
   3472                {
   3473                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   000057   85..82       MOV       DPL,?V2
   \   00005A   85..83       MOV       DPH,?V3
   \   00005D   12....       LCALL     ?Subroutine68 & 0xFFFF
   3474                  msg += 2;
   3475                }
   \                     ??CrossCallReturnLabel_114:
   \   000060   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000063   5002         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   000065   05..         INC       ?V3
   3476          
   3477                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000067   EE           MOV       A,R6
   \   000068   2415         ADD       A,#0x15
   \   00006A   FE           MOV       R6,A
   \   00006B   5001         JNC       ??ZDO_ParseMgmtBindRsp_5
   \   00006D   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   00006E   05..         INC       ?V5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000070   E5..         MOV       A,?V5
   \   000072   C3           CLR       C
   \   000073   95..         SUBB      A,?V4
   \   000075   5055         JNC       ??ZDO_ParseMgmtBindRsp_1
   \   000077                ; Setup parameters for call to function sAddrExtCpy
   \   000077   AC..         MOV       R4,?V2
   \   000079   AD..         MOV       R5,?V3
   \   00007B   EE           MOV       A,R6
   \   00007C   FA           MOV       R2,A
   \   00007D   EF           MOV       A,R7
   \   00007E   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000090   5002         JNC       ??ZDO_ParseMgmtBindRsp_6
   \   000092   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000094   F582         MOV       DPL,A
   \   000096   85..83       MOV       DPH,?V3
   \   000099   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00009C   A3           INC       DPTR
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   A3           INC       DPTR
   \   00009F   E9           MOV       A,R1
   \   0000A0   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000A3   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000A6   E5..         MOV       A,?V2
   \   0000A8   2403         ADD       A,#0x3
   \   0000AA   F5..         MOV       ?V2,A
   \   0000AC   5002         JNC       ??ZDO_ParseMgmtBindRsp_7
   \   0000AE   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   0000B0   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000B3   70A2         JNZ       ??ZDO_ParseMgmtBindRsp_3
   \   0000B5                ; Setup parameters for call to function sAddrExtCpy
   \   0000B5   AC..         MOV       R4,?V2
   \   0000B7   AD..         MOV       R5,?V3
   \   0000B9   12....       LCALL     ??Subroutine165_0 & 0xFFFF
   3478              }
   3479            }
   \                     ??CrossCallReturnLabel_341:
   \   0000BC   C0E0         PUSH      A
   \   0000BE   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000C1   D0E0         POP       A
   \   0000C3   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000C6   509F         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   0000C8   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000CA   809B         SJMP      ??ZDO_ParseMgmtBindRsp_4
   3480          
   3481            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000CC   AA..         MOV       R2,?V0
   \   0000CE   AB..         MOV       R3,?V1
   \   0000D0                REQUIRE ?Subroutine7
   \   0000D0                ; // Fall through to label ?Subroutine7
   3482          }
   3483          
   3484          /*********************************************************************
   3485           * @fn          ZDO_ParseUserDescRsp
   3486           *
   3487           * @brief       This function parses the incoming User
   3488           *              Descriptor Response.
   3489           *
   3490           * @param       inMsg - incoming response message
   3491           *
   3492           * @return      a pointer to parsed response structure (NULL if not allocated).
   3493           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3494           *          by the calling function [osal_mem_free()].
   3495           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3496          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3497          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3498            ZDO_UserDescRsp_t *pRsp;
   3499            uint8 *msg;
   3500            uint8 descLen = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   3501          
   3502            msg = inMsg->asdu;
   \   000008   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00000B   88..         MOV       ?V2,R0
   \   00000D   F5..         MOV       ?V3,A
   3503          
   3504            if ( msg[0] == ZSuccess )
   \   00000F   8882         MOV       DPL,R0
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   7006         JNZ       ??ZDO_ParseUserDescRsp_0
   3505            {
   3506              descLen = msg[3];
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V4,A
   3507            }
   3508          
   3509            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001C   AE..         MOV       R6,?V4
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   EE           MOV       A,R6
   \   00001F   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000022   3400         ADDC      A,#0x0
   \   000024   12....       LCALL     ?Subroutine102 & 0xFFFF
   3510            if ( pRsp )
   \                     ??CrossCallReturnLabel_337:
   \   000027   EA           MOV       A,R2
   \   000028   4B           ORL       A,R3
   \   000029   6050         JZ        ??ZDO_ParseUserDescRsp_1
   3511            {
   3512              pRsp->status = msg[0];
   \   00002B   85..82       MOV       DPL,?V2
   \   00002E   85..83       MOV       DPH,?V3
   \   000031   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000034   12....       LCALL     ?Subroutine24 & 0xFFFF
   3513              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_30:
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   85..83       MOV       DPH,?V3
   \   00003F   A3           INC       DPTR
   \   000040   12....       LCALL     ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   8B83         MOV       DPH,R3
   \   000048   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   3514              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_454:
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   8B83         MOV       DPH,R3
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   EE           MOV       A,R6
   \   000054   F0           MOVX      @DPTR,A
   3515              if ( descLen )
   \   000055   6024         JZ        ??ZDO_ParseUserDescRsp_1
   3516              {
   3517                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000057                ; Setup parameters for call to function osal_memcpy
   \   000057   E5..         MOV       A,?V2
   \   000059   2404         ADD       A,#0x4
   \   00005B   F5..         MOV       ?V4,A
   \   00005D   E4           CLR       A
   \   00005E   35..         ADDC      A,?V3
   \   000060   F5..         MOV       ?V5,A
   \   000062   88..         MOV       ?V6,R0
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000069   EE           MOV       A,R6
   \   00006A   FC           MOV       R4,A
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   E5..         MOV       A,?V0
   \   00006F   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   3518              }
   3519            }
   \                     ??CrossCallReturnLabel_421:
   \   000072   35..         ADDC      A,?V1
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   3520          
   3521            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   00007B   AA..         MOV       R2,?V0
   \   00007D   AB..         MOV       R3,?V1
   \   00007F   02....       LJMP      ??Subroutine162_0 & 0xFFFF
   3522          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   3523          
   3524          /*********************************************************************
   3525           * @fn          ZDO_ParseSimpleDescBuf
   3526           *
   3527           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3528           *
   3529           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3530           * @param       desc - SimpleDescriptionFormat_t *
   3531           *
   3532           *              This routine allocates storage for the cluster IDs because
   3533           *              they are 16-bit and need to be aligned to be properly processed.
   3534           *              This routine returns non-zero if an allocation fails.
   3535           *
   3536           *              NOTE: This means that the caller or user of the input structure
   3537           *                    is responsible for freeing the memory
   3538           *
   3539           * @return      0: success
   3540           *              1: failure due to malloc failure.
   3541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3542          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3543          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   8C..         MOV       ?V0,R4
   \   000008   8D..         MOV       ?V1,R5
   3544            uint8 num, i;
   3545          
   3546            desc->EndPoint = *buf++;
   \   00000A   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00000D   A3           INC       DPTR
   \   00000E   AE82         MOV       R6,DPL
   \   000010   AF83         MOV       R7,DPH
   3547            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FA           MOV       R2,A
   \   000014   12....       LCALL     ?Subroutine29 & 0xFFFF
   3548            buf += 2;
   \                     ??CrossCallReturnLabel_456:
   \   000017   EE           MOV       A,R6
   \   000018   2402         ADD       A,#0x2
   \   00001A   FE           MOV       R6,A
   \   00001B   5001         JNC       ??ZDO_ParseSimpleDescBuf_0
   \   00001D   0F           INC       R7
   3549            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   00001E   F582         MOV       DPL,A
   \   000020   8F83         MOV       DPH,R7
   \   000022   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000025   12....       LCALL     ?Subroutine20 & 0xFFFF
   3550            buf += 2;
   3551            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_392:
   \   000028   C4           SWAP      A
   \   000029   540F         ANL       A,#0xf
   3552          
   3553            desc->Reserved = 0;
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   12....       LCALL     ?Subroutine12 & 0xFFFF
   3554            buf++;
   3555          
   3556            // move in input cluster list (if any). allocate aligned memory.
   3557            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_7:
   \   000037   F5..         MOV       ?V4,A
   \   000039   EE           MOV       A,R6
   \   00003A   2404         ADD       A,#0x4
   \   00003C   FE           MOV       R6,A
   \   00003D   5001         JNC       ??ZDO_ParseSimpleDescBuf_1
   \   00003F   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000040   8C82         MOV       DPL,R4
   \   000042   8D83         MOV       DPH,R5
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E5..         MOV       A,?V4
   \   00004C   F0           MOVX      @DPTR,A
   3558            if ( num )
   \   00004D   EC           MOV       A,R4
   \   00004E   2407         ADD       A,#0x7
   \   000050   F5..         MOV       ?V2,A
   \   000052   E4           CLR       A
   \   000053   35..         ADDC      A,?V1
   \   000055   F5..         MOV       ?V3,A
   \   000057   E5..         MOV       A,?V4
   \   000059   6052         JZ        ??ZDO_ParseSimpleDescBuf_2
   3559            {
   3560              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   00005B                ; Setup parameters for call to function osal_mem_alloc
   \   00005B   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00005E   A8..         MOV       R0,?V6
   \   000060   A9..         MOV       R1,?V7
   \   000062   85..82       MOV       DPL,?V2
   \   000065   85..83       MOV       DPH,?V3
   \   000068   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00006B   49           ORL       A,R1
   \   00006C   7003         JNZ       $+5
   \   00006E   02....       LJMP      ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3561              {
   3562                // malloc failed. we're done.
   3563                return 1;
   3564              }
   3565              for (i=0; i<num; ++i)
   \   000071   7A00         MOV       R2,#0x0
   \   000073   8032         SJMP      ??ZDO_ParseSimpleDescBuf_4
   3566              {
   3567                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F5..         MOV       ?V6,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   FC           MOV       R4,A
   \   00007F   E4           CLR       A
   \   000080   CC           XCH       A,R4
   \   000081   FD           MOV       R5,A
   \   000082   E5..         MOV       A,?V6
   \   000084   2C           ADD       A,R4
   \   000085   E4           CLR       A
   \   000086   3D           ADDC      A,R5
   \   000087   F5..         MOV       ?V7,A
   \   000089   EA           MOV       A,R2
   \   00008A   25E0         ADD       A,0xE0 /* A   */
   \   00008C   FC           MOV       R4,A
   \   00008D   E4           CLR       A
   \   00008E   33           RLC       A
   \   00008F   FD           MOV       R5,A
   \   000090   E8           MOV       A,R0
   \   000091   2C           ADD       A,R4
   \   000092   F582         MOV       DPL,A
   \   000094   EB           MOV       A,R3
   \   000095   3D           ADDC      A,R5
   \   000096   F583         MOV       DPH,A
   \   000098   E5..         MOV       A,?V6
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   E5..         MOV       A,?V7
   \   00009E   F0           MOVX      @DPTR,A
   3568                buf += 2;
   \   00009F   EE           MOV       A,R6
   \   0000A0   2402         ADD       A,#0x2
   \   0000A2   FE           MOV       R6,A
   \   0000A3   5001         JNC       ??ZDO_ParseSimpleDescBuf_6
   \   0000A5   0F           INC       R7
   3569              }
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   0000A6   0A           INC       R2
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0000A7   EA           MOV       A,R2
   \   0000A8   C3           CLR       C
   \   0000A9   95..         SUBB      A,?V4
   \   0000AB   40C8         JC        ??ZDO_ParseSimpleDescBuf_5
   3570            }
   3571          
   3572            // move in output cluster list (if any). allocate aligned memory.
   3573            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   0000AD   8E82         MOV       DPL,R6
   \   0000AF   8F83         MOV       DPH,R7
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F5..         MOV       ?V4,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   AE82         MOV       R6,DPL
   \   0000B7   AF83         MOV       R7,DPH
   \   0000B9   85..82       MOV       DPL,?V0
   \   0000BC   85..83       MOV       DPH,?V1
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   F0           MOVX      @DPTR,A
   3574            if (num)
   \   0000C9   6072         JZ        ??ZDO_ParseSimpleDescBuf_7
   3575            {
   3576              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000CB                ; Setup parameters for call to function osal_mem_alloc
   \   0000CB   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000CE   A9..         MOV       R1,?V7
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000E3   49           ORL       A,R1
   \   0000E4   701C         JNZ       ??ZDO_ParseSimpleDescBuf_8
   3577              {
   3578                // malloc failed. free input cluster list memory if there is any
   3579                if ( desc->pAppInClusterList != NULL )
   \   0000E6   85..82       MOV       DPL,?V2
   \   0000E9   85..83       MOV       DPH,?V3
   \   0000EC   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   0000EF   600D         JZ        ??ZDO_ParseSimpleDescBuf_3
   3580                {
   3581                  osal_mem_free(desc->pAppInClusterList);
   \   0000F1                ; Setup parameters for call to function osal_mem_free
   \   0000F1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3582          
   3583                  desc->pAppInClusterList = NULL;
   \   0000F4   85..82       MOV       DPL,?V2
   \   0000F7   85..83       MOV       DPH,?V3
   \   0000FA   E4           CLR       A
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   F0           MOVX      @DPTR,A
   3584                }
   3585                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000FE   7901         MOV       R1,#0x1
   \   000100   803D         SJMP      ??ZDO_ParseSimpleDescBuf_9
   3586              }
   3587              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000102   7A00         MOV       R2,#0x0
   \   000104   8031         SJMP      ??ZDO_ParseSimpleDescBuf_10
   3588              {
   3589                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000106   8E82         MOV       DPL,R6
   \   000108   8F83         MOV       DPH,R7
   \   00010A   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00010D   FC           MOV       R4,A
   \   00010E   E4           CLR       A
   \   00010F   CC           XCH       A,R4
   \   000110   FD           MOV       R5,A
   \   000111   E5..         MOV       A,?V0
   \   000113   2C           ADD       A,R4
   \   000114   E4           CLR       A
   \   000115   3D           ADDC      A,R5
   \   000116   F5..         MOV       ?V1,A
   \   000118   EA           MOV       A,R2
   \   000119   25E0         ADD       A,0xE0 /* A   */
   \   00011B   FC           MOV       R4,A
   \   00011C   E4           CLR       A
   \   00011D   33           RLC       A
   \   00011E   FD           MOV       R5,A
   \   00011F   E5..         MOV       A,?V6
   \   000121   2C           ADD       A,R4
   \   000122   F582         MOV       DPL,A
   \   000124   EB           MOV       A,R3
   \   000125   3D           ADDC      A,R5
   \   000126   F583         MOV       DPH,A
   \   000128   E5..         MOV       A,?V0
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   A3           INC       DPTR
   \   00012C   E5..         MOV       A,?V1
   \   00012E   F0           MOVX      @DPTR,A
   3590                buf += 2;
   \   00012F   EE           MOV       A,R6
   \   000130   2402         ADD       A,#0x2
   \   000132   FE           MOV       R6,A
   \   000133   5001         JNC       ??ZDO_ParseSimpleDescBuf_12
   \   000135   0F           INC       R7
   3591              }
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   000136   0A           INC       R2
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000137   EA           MOV       A,R2
   \   000138   C3           CLR       C
   \   000139   95..         SUBB      A,?V4
   \   00013B   40C9         JC        ??ZDO_ParseSimpleDescBuf_11
   3592            }
   3593            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   00013D   7900         MOV       R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   00013F   02....       LJMP      ??Subroutine162_0 & 0xFFFF
   3594          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   8A..         MOV       ?V6,R2
   \   000005   8B..         MOV       ?V7,R3
   \   000007   22           RET
   3595          
   3596          /*********************************************************************
   3597           * @fn          ZDO_ParseDeviceAnnce
   3598           *
   3599           * @brief       Parse a Device Announce message.
   3600           *
   3601           * @param       inMsg - Incoming message
   3602           * @param       pAnnce - place to put the parsed information
   3603           *
   3604           * @return      none
   3605           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3606          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3607          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3608            uint8 *msg;
   3609          
   3610            // Parse incoming message
   3611            msg = inMsg->asdu;
   \   000009   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00000C   FF           MOV       R7,A
   3612            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00000D   8882         MOV       DPL,R0
   \   00000F   F583         MOV       DPH,A
   \   000011   12....       LCALL     ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000014   EA           MOV       A,R2
   \   000015   8C82         MOV       DPL,R4
   \   000017   8D83         MOV       DPH,R5
   \   000019   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   3613            msg += 2;
   \                     ??CrossCallReturnLabel_449:
   \   00001C   E8           MOV       A,R0
   \   00001D   2402         ADD       A,#0x2
   \   00001F   FE           MOV       R6,A
   \   000020   5001         JNC       ??ZDO_ParseDeviceAnnce_0
   \   000022   0F           INC       R7
   3614            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000023                ; Setup parameters for call to function sAddrExtCpy
   \   000023   FC           MOV       R4,A
   \   000024   EF           MOV       A,R7
   \   000025   FD           MOV       R5,A
   \   000026   E5..         MOV       A,?V0
   \   000028   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00002B   35..         ADDC      A,?V1
   \   00002D   FB           MOV       R3,A
   \   00002E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3615            msg += Z_EXTADDR_LEN;
   3616            pAnnce->capabilities = *msg;
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000040   F0           MOVX      @DPTR,A
   3617          }
   \   000041   02....       LJMP      ??Subroutine142_0 & 0xFFFF
   3618          
   3619          /*********************************************************************
   3620           * @fn          ZDO_ParseParentAnnce
   3621           *
   3622           * @brief       Parse Parent Announce and Parent Announce Rsp messages,
   3623           *              both messages have the same payload.
   3624           *
   3625           * @param       inMsg - Incoming message
   3626           *
   3627           * @return      a pointer to parsed response structure (NULL if not allocated).
   3628           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3629           *          by the calling function [osal_mem_free()].
   3630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3631          ZDO_ParentAnnce_t *ZDO_ParseParentAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseParentAnnce:
   3632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3633            ZDO_ParentAnnce_t *pRcvdMsg;
   3634            uint8 *msg;
   3635            uint8 numChildren;
   3636          
   3637            msg = inMsg->asdu;
   \   000005   EA           MOV       A,R2
   \   000006   12....       LCALL     ?Subroutine80 & 0xFFFF
   3638            if ( inMsg->clusterID == Parent_annce_rsp)
   \                     ??CrossCallReturnLabel_243:
   \   000009   EA           MOV       A,R2
   \   00000A   240C         ADD       A,#0xc
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   641F         XRL       A,#0x1f
   \   000015   7004         JNZ       ??ZDO_ParseParentAnnce_0
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6480         XRL       A,#0x80
   \                     ??ZDO_ParseParentAnnce_0:
   \   00001B   7009         JNZ       ??ZDO_ParseParentAnnce_1
   3639            {
   3640              *msg++;
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   A3           INC       DPTR
   \   000022   AE82         MOV       R6,DPL
   \   000024   AF83         MOV       R7,DPH
   3641            }
   3642            numChildren = *msg++;
   \                     ??ZDO_ParseParentAnnce_1:
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F5..         MOV       ?V5,A
   \   00002D   A3           INC       DPTR
   \   00002E   AE82         MOV       R6,DPL
   \   000030   AF83         MOV       R7,DPH
   3643          
   3644            // Allocate a buffer big enough to handle the list
   3645            pRcvdMsg = (ZDO_ParentAnnce_t *)osal_mem_alloc(
   3646                       (sizeof(ZDO_ParentAnnce_t) + (numChildren * sizeof(ZDO_ChildInfo_t))));
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   F5..         MOV       ?V0,A
   \   000034   75..00       MOV       ?V1,#0x0
   \   000037   7403         MOV       A,#0x3
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?S_SHL
   \   00003E   E5..         MOV       A,?V0
   \   000040   2401         ADD       A,#0x1
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   35..         ADDC      A,?V1
   \   000046   12....       LCALL     ?Subroutine101 & 0xFFFF
   3647          
   3648            if ( pRcvdMsg )
   \                     ??CrossCallReturnLabel_411:
   \   000049   6038         JZ        ??ZDO_ParseParentAnnce_2
   3649            {
   3650              uint8 x;
   3651              ZDO_ChildInfo_t *pList = pRcvdMsg->childInfo;
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   A3           INC       DPTR
   \   000050   8582..       MOV       ?V0,DPL
   \   000053   8583..       MOV       ?V1,DPH
   3652          
   3653              pRcvdMsg->numOfChildren = numChildren;
   \   000056   8A82         MOV       DPL,R2
   \   000058   8B83         MOV       DPH,R3
   \   00005A   E5..         MOV       A,?V5
   \   00005C   F0           MOVX      @DPTR,A
   3654          
   3655              for ( x = 0; x < numChildren; x++ )
   \   00005D   75..00       MOV       ?V4,#0x0
   \   000060   801A         SJMP      ??ZDO_ParseParentAnnce_3
   3656              {
   3657                osal_cpyExtAddr( pList->extAddr, msg );
   \                     ??ZDO_ParseParentAnnce_4:
   \   000062                ; Setup parameters for call to function sAddrExtCpy
   \   000062   EE           MOV       A,R6
   \   000063   FC           MOV       R4,A
   \   000064   EF           MOV       A,R7
   \   000065   FD           MOV       R5,A
   \   000066   AA..         MOV       R2,?V0
   \   000068   AB..         MOV       R3,?V1
   \   00006A   12....       LCALL     ??Subroutine167_0 & 0xFFFF
   3658                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_358:
   \   00006D   5001         JNC       ??ZDO_ParseParentAnnce_5
   \   00006F   0F           INC       R7
   3659          
   3660                pList++;
   \                     ??ZDO_ParseParentAnnce_5:
   \   000070   E5..         MOV       A,?V0
   \   000072   2408         ADD       A,#0x8
   \   000074   F5..         MOV       ?V0,A
   \   000076   5002         JNC       ??ZDO_ParseParentAnnce_6
   \   000078   05..         INC       ?V1
   3661              }
   \                     ??ZDO_ParseParentAnnce_6:
   \   00007A   05..         INC       ?V4
   \                     ??ZDO_ParseParentAnnce_3:
   \   00007C   E5..         MOV       A,?V4
   \   00007E   C3           CLR       C
   \   00007F   95..         SUBB      A,?V5
   \   000081   40DF         JC        ??ZDO_ParseParentAnnce_4
   3662            }
   3663          
   3664            return ( pRcvdMsg );
   \                     ??ZDO_ParseParentAnnce_2:
   \   000083   AA..         MOV       R2,?V2
   \   000085   AB..         MOV       R3,?V3
   \   000087   02....       LJMP      ??Subroutine163_0 & 0xFFFF
   3665          }
   3666          
   3667          /*********************************************************************
   3668           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3669           *
   3670           * @brief       This function handles parsing of the incoming Management
   3671           *              Network Update notify.
   3672           *
   3673           * @param       inMsg - incoming message (request)
   3674           *
   3675           * @return      a pointer to parsed response structure (NULL if not allocated).
   3676           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3677           *          by the calling function [osal_mem_free()].
   3678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3679          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3681            uint8 status;
   3682            uint32 scannedChannels = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   \   000008   75..00       MOV       ?V5,#0x0
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   75..00       MOV       ?V7,#0x0
   3683            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV       ?V0,#0x0
   \   000014   75..00       MOV       ?V1,#0x0
   3684            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV       ?V2,#0x0
   \   00001A   75..00       MOV       ?V3,#0x0
   3685            uint8 listCount = 0;
   \   00001D   75..00       MOV       ?V10,#0x0
   3686            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000023   F5..         MOV       ?V8,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   3687            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3688          
   3689            status = *msg++;
   \   000027   85..82       MOV       DPL,?V8
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V11,A
   \   00002F   A3           INC       DPTR
   \   000030   8582..       MOV       ?V8,DPL
   \   000033   8583..       MOV       ?V9,DPH
   3690            if ( status == ZSuccess )
   \   000036   7051         JNZ       ??ZDO_ParseMgmtNwkUpdateNotify_0
   3691            {
   3692              scannedChannels = osal_build_uint32( msg, 4 );
   \   000038                ; Setup parameters for call to function osal_build_uint32
   \   000038   7904         MOV       R1,#0x4
   \   00003A   AA..         MOV       R2,?V8
   \   00003C   AB..         MOV       R3,?V9
   \   00003E   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000041   8A..         MOV       ?V4,R2
   \   000043   8B..         MOV       ?V5,R3
   \   000045   8C..         MOV       ?V6,R4
   \   000047   8D..         MOV       ?V7,R5
   3693              msg += 4;
   \   000049   E5..         MOV       A,?V8
   \   00004B   2404         ADD       A,#0x4
   \   00004D   F5..         MOV       ?V8,A
   \   00004F   5002         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000051   05..         INC       ?V9
   3694              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000053   F582         MOV       DPL,A
   \   000055   85..83       MOV       DPH,?V9
   \   000058   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   00005B   28           ADD       A,R0
   \   00005C   F5..         MOV       ?V0,A
   \   00005E   E4           CLR       A
   \   00005F   39           ADDC      A,R1
   \   000060   F5..         MOV       ?V1,A
   3695              msg += 2;
   \   000062   E5..         MOV       A,?V8
   \   000064   2402         ADD       A,#0x2
   \   000066   F5..         MOV       ?V8,A
   \   000068   5002         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   00006A   05..         INC       ?V9
   3696              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   00006C   F582         MOV       DPL,A
   \   00006E   85..83       MOV       DPH,?V9
   \   000071   12....       LCALL     ??Subroutine143_0 & 0xFFFF
   3697              msg += 2;
   3698              listCount = *msg++;
   \                     ??CrossCallReturnLabel_237:
   \   000074   85..82       MOV       DPL,?V8
   \   000077   85..83       MOV       DPH,?V9
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F5..         MOV       ?V10,A
   \   00007F   E5..         MOV       A,?V8
   \   000081   2403         ADD       A,#0x3
   \   000083   F5..         MOV       ?V8,A
   \   000085   5002         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_0
   \   000087   05..         INC       ?V9
   3699            }
   3700          
   3701            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000089   AE..         MOV       R6,?V10
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   EE           MOV       A,R6
   \   00008C   240A         ADD       A,#0xa
   \   00008E   FA           MOV       R2,A
   \   00008F   E4           CLR       A
   \   000090   3400         ADDC      A,#0x0
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000096   8A..         MOV       ?V14,R2
   \   000098   8B..         MOV       ?V15,R3
   3702          
   3703            if ( pRsp )
   \   00009A   EA           MOV       A,R2
   \   00009B   4B           ORL       A,R3
   \   00009C   6049         JZ        ??ZDO_ParseMgmtNwkUpdateNotify_3
   3704            {
   3705              pRsp->status = status;
   \   00009E   8A82         MOV       DPL,R2
   \   0000A0   8B83         MOV       DPH,R3
   \   0000A2   E5..         MOV       A,?V11
   \   0000A4   F0           MOVX      @DPTR,A
   3706              pRsp->scannedChannels = scannedChannels;
   \   0000A5   A3           INC       DPTR
   \   0000A6   78..         MOV       R0,#?V4
   \   0000A8   12....       LCALL     ?L_MOV_TO_X
   3707              pRsp->totalTransmissions = totalTransmissions;
   \   0000AB   8A82         MOV       DPL,R2
   \   0000AD   8B83         MOV       DPH,R3
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   E5..         MOV       A,?V0
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E5..         MOV       A,?V1
   \   0000BA   12....       LCALL     ?Subroutine14 & 0xFFFF
   3708              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_11:
   \   0000BD   A3           INC       DPTR
   \   0000BE   E5..         MOV       A,?V3
   \   0000C0   12....       LCALL     ?Subroutine30 & 0xFFFF
   3709              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_43:
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   EE           MOV       A,R6
   \   0000CA   F0           MOVX      @DPTR,A
   3710          
   3711              // Allocate a buffer big enough to handle the list.
   3712              if ( listCount > 0 )
   \   0000CB   601A         JZ        ??ZDO_ParseMgmtNwkUpdateNotify_3
   3713              {
   3714                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000CD                ; Setup parameters for call to function osal_memcpy
   \   0000CD   75..00       MOV       ?V10,#0x0
   \   0000D0   78..         MOV       R0,#?V8
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D5   EE           MOV       A,R6
   \   0000D6   FC           MOV       R4,A
   \   0000D7   7D00         MOV       R5,#0x0
   \   0000D9   EA           MOV       A,R2
   \   0000DA   240A         ADD       A,#0xa
   \   0000DC   FA           MOV       R2,A
   \   0000DD   E4           CLR       A
   \   0000DE   35..         ADDC      A,?V15
   \   0000E0   FB           MOV       R3,A
   \   0000E1   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   3715              }
   3716            }
   \                     ??CrossCallReturnLabel_429:
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
   3717          
   3718            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000E7   AA..         MOV       R2,?V14
   \   0000E9   AB..         MOV       R3,?V15
   \   0000EB   02....       LJMP      ??Subroutine144_0 & 0xFFFF
   3719          }
   3720          
   3721          /*********************************************************************
   3722           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3723           *
   3724           * @brief       This function handles parsing the incoming Management
   3725           *              Network Update request and starts the request (if needed).
   3726           *
   3727           * @param       inMsg - incoming message (request)
   3728           * @param       pReq - pointer to place to parse message to
   3729           *
   3730           * @return      none
   3731           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3732          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3733          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3734            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00000C   12....       LCALL     ?Subroutine49 & 0xFFFF
   3735          
   3736            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_78:
   \   00000F   85..82       MOV       DPL,?V0
   \   000012   85..83       MOV       DPH,?V1
   \   000015   12....       LCALL     ?XSTORE_R0123
   3737            msg += 4;
   3738            pReq->scanDuration = *msg++;
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FA           MOV       R2,A
   \   000022   E5..         MOV       A,?V0
   \   000024   2404         ADD       A,#0x4
   \   000026   F8           MOV       R0,A
   \   000027   E4           CLR       A
   \   000028   35..         ADDC      A,?V1
   \   00002A   F9           MOV       R1,A
   \   00002B   EA           MOV       A,R2
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   \   000030   F0           MOVX      @DPTR,A
   3739          
   3740            if ( pReq->scanDuration <= 0x05 )
   \   000031   C3           CLR       C
   \   000032   9406         SUBB      A,#0x6
   \   000034   5005         JNC       ??ZDO_ParseMgmtNwkUpdateReq_0
   3741            {
   3742              // Request is to scan over channelMask
   3743              pReq->scanCount = *msg;
   \   000036   12....       LCALL     ?Subroutine63 & 0xFFFF
   3744            }
   \                     ??CrossCallReturnLabel_104:
   \   000039   8026         SJMP      ??ZDO_ParseMgmtNwkUpdateReq_1
   3745            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   00003B   74FE         MOV       A,#-0x2
   \   00003D   6A           XRL       A,R2
   \   00003E   6005         JZ        ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000040   74FF         MOV       A,#-0x1
   \   000042   6A           XRL       A,R2
   \   000043   701D         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3746            {
   3747              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3748              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000045   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000048   A3           INC       DPTR
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   EE           MOV       A,R6
   \   00004B   2406         ADD       A,#0x6
   \   00004D   FE           MOV       R6,A
   \   00004E   5001         JNC       ??ZDO_ParseMgmtNwkUpdateReq_4
   \   000050   0F           INC       R7
   3749          
   3750              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   000051   8882         MOV       DPL,R0
   \   000053   8983         MOV       DPH,R1
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F4           CPL       A
   \   000057   7009         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3751              {
   3752                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000059   8E82         MOV       DPL,R6
   \   00005B   12....       LCALL     ?Subroutine50 & 0xFFFF
   3753              }
   3754            }
   \                     ??CrossCallReturnLabel_80:
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E9           MOV       A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000061   F0           MOVX      @DPTR,A
   3755          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000062   02....       LJMP      ??Subroutine142_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00000C   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nNodeDesc:%04X,%02X">`:
   \   000000   0D0A4E6F     DB "\015\012NodeDesc:%04X,%02X"
   \            64654465
   \            73633A25
   \            3034582C
   \            25303258
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nType:%s">`:
   \   000000   0D0A5479     DB "\015\012Type:%s"
   \            70653A25
   \            7300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COOR">`:
   \   000000   434F4F52     DB "COOR"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ROUTER">`:
   \   000000   524F5554     DB "ROUTER"
   \            455200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ENDDEV">`:
   \   000000   454E4444     DB "ENDDEV"
   \            455600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nComplexDesc:%s">`:
   \   000000   0D0A436F     DB "\015\012ComplexDesc:%s"
   \            6D706C65
   \            78446573
   \            633A2573
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Yes">`:
   \   000000   59657300     DB "Yes"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "No">`:
   \   000000   4E6F00       DB "No"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nUserDesc:%s">`:
   \   000000   0D0A5573     DB "\015\012UserDesc:%s"
   \            65724465
   \            73633A25
   \            7300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nAPSFlags:%02X">`:
   \   000000   0D0A4150     DB "\015\012APSFlags:%02X"
   \            53466C61
   \            67733A25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nFreqBand:%02X">`:
   \   000000   0D0A4672     DB "\015\012FreqBand:%02X"
   \            65714261
   \            6E643A25
   \            30325800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nMacCap:%02x">`:
   \   000000   0D0A4D61     DB "\015\012MacCap:%02x"
   \            63436170
   \            3A253032
   \            7800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nManufCode:%04X">`:
   \   000000   0D0A4D61     DB "\015\012ManufCode:%04X"
   \            6E756643
   \            6F64653A
   \            25303458
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nMaxBufSize:%02X">`:
   \   000000   0D0A4D61     DB "\015\012MaxBufSize:%02X"
   \            78427566
   \            53697A65
   \            3A253032
   \            5800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nMaxInSize:%04X">`:
   \   000000   0D0A4D61     DB "\015\012MaxInSize:%04X"
   \            78496E53
   \            697A653A
   \            25303458
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nSrvMask:%02X">`:
   \   000000   0D0A5372     DB "\015\012SrvMask:%02X"
   \            764D6173
   \            6B3A2530
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nMaxOutSize:%04X">`:
   \   000000   0D0A4D61     DB "\015\012MaxOutSize:%04X"
   \            784F7574
   \            53697A65
   \            3A253034
   \            5800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nDescCap:%02X">`:
   \   000000   0D0A4465     DB "\015\012DescCap:%02X"
   \            73634361
   \            703A2530
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0
   3756          
   3757          /*********************************************************************
   3758          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      0     46   ZDO_AnyClusterMatches
      1     14   ZDO_BuildSimpleDescBuf
      0     42   ZDO_ConvertOTAClusters
      1     17   ZDO_EndDeviceTimeoutCB
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      0     17   ZDO_FinishProcessingMgmtNwkDiscReq
        0     12   -> NLME_NwkDiscTerm
        0     17   -> ZDP_MgmtNwkDiscRsp
        0     12   -> nwk_getNwkDescList
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     19   ZDO_ParseEPListRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      1     18   ZDO_ParseEndDeviceBindReq
        0     18   -> ZDO_ConvertOTAClusters
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     27   ZDO_ParseMgmtNwkUpdateNotify
        0     24   -> osal_build_uint32
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      1     36   ZDO_ParseNodeDescRsp
      1     45   ZDO_ParseParentAnnce
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     25   ZDO_ParseSimpleDescBuf
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     19   ZDO_ParseUserDescRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     34   ZDO_ProcessBindUnbindReq
        0     30   -> APSME_BindRequest
        0     29   -> APSME_LookupNwkAddr
        0     30   -> APSME_UnBindRequest
        0     29   -> NLME_GetExtAddr
        0     29   -> ZDApp_NVUpdate
        0     29   -> ZDP_NwkAddrReq
        0     34   -> ZDP_SendData
        0     29   -> sAddrExtCmp
        0     29   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemove
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      1     39   ZDO_ProcessMatchDescReq
        0     32   -> NLME_IsAddressBroadcast
        0     34   -> ZDO_AnyClusterMatches
        0     32   -> ZDO_ConvertOTAClusters
        0     39   -> ZDP_EPRsp
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     35   -> osal_memcpy
        0     32   -> osal_msg_allocate
        0     32   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      0     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     18   -> NLME_SetPollRate
        0     18   -> NLME_SetQueuedPollRate
        0     18   -> NLME_SetResponseRate
        0     23   -> ZDP_SendData
        0     18   -> bdb_setFN
        0     18   -> sAddrExtCmp
      1     66   ZDO_ProcessMgmtLqiReq
        0     61   -> AddrMgrEntryLookupNwk
        0     61   -> AssocCount
        0     61   -> AssocFindDevice
        0     61   -> NLME_GetRequest
        0     66   -> ZDP_MgmtLqiRsp
        0     61   -> osal_mem_alloc
        0     61   -> osal_mem_free
        0     61   -> osal_memset
        0     61   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> APSME_IsDistributedSecurity
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
        0     11   -> ZDSecMgrPermitJoining
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     30   ZDO_ProcessNodeDescRsp
        0     26   -> ZDO_ParseNodeDescRsp
        0     26   -> printf
        0     28   -> printf
        0     30   -> printf
      0     36   ZDO_ProcessParentAnnce
        0     31   -> AssocGetWithExt
        0     31   -> ZDO_ParseParentAnnce
        0     36   -> ZDP_ParentAnnce
        0     31   -> osal_mem_alloc
        0     31   -> osal_mem_free
        0     31   -> sAddrExtCpy
      0     14   ZDO_ProcessParentAnnceRsp
        0     14   -> AssocGetWithExt
        0     14   -> AssocRemove
        0     14   -> ZDO_ParseParentAnnce
        0     14   -> osal_mem_free
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0      0   ZDO_ProcessSimpleDescRsp
      0     37   ZDO_ProcessUserDescReq
        0     37   -> ZDP_GenericRsp
        0     36   -> ZDP_UserDescRsp
        0     37   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      0     26   ZDO_StartDevice
        0     16   -> APSME_IsDistributedSecurity
        0     16   -> NLME_JoinConfirm
        0     16   -> NLME_NetworkDiscoveryRequest
        0     26   -> NLME_NetworkFormationRequest
        0     16   -> NLME_OrphanJoinRequest
        0     16   -> ZDApp_ChangeState
        0     16   -> ZMacGetReq
        0     16   -> osal_rand
        0     20   -> osal_start_timerEx
        0     16   -> osal_stop_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0      9   ZDO_UpdateNwkStatus
        0      9   -> NLME_GetExtAddr
        0      9   -> NLME_GetShortAddr
        0      9   -> zdoSendStateChangeMsg
      1     19   zdoSendStateChangeMsg
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_find
        0     10   -> osal_msg_send
        0     10   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant "COOR">
       7  ?<Constant "ENDDEV">
       3  ?<Constant "No">
       7  ?<Constant "ROUTER">
       4  ?<Constant "Yes">
       3  ?<Constant "\r\n">
      16  ?<Constant "\r\nAPSFlags:%02X">
      17  ?<Constant "\r\nComplexDesc:%s">
      15  ?<Constant "\r\nDescCap:%02X">
      16  ?<Constant "\r\nFreqBand:%02X">
      14  ?<Constant "\r\nMacCap:%02x">
      17  ?<Constant "\r\nManufCode:%04X">
      18  ?<Constant "\r\nMaxBufSize:%02X">
      17  ?<Constant "\r\nMaxInSize:%04X">
      18  ?<Constant "\r\nMaxOutSize:%04X">
      21  ?<Constant "\r\nNodeDesc:%04X,%02X">
      15  ?<Constant "\r\nSrvMask:%02X">
      10  ?<Constant "\r\nType:%s">
      14  ?<Constant "\r\nUserDesc:%s">
       2  ?<Initializer for zdpExternalStateTaskID>
       3  ??Subroutine141_0
       5  ??Subroutine142_0
      16  ??Subroutine143_0
       5  ??Subroutine144_0
       2  ??Subroutine145_0
       5  ??Subroutine146_0
       1  ??Subroutine147_0
       5  ??Subroutine148_0
       5  ??Subroutine149_0
       3  ??Subroutine150_0
       5  ??Subroutine151_0
       7  ??Subroutine152_0
       5  ??Subroutine153_0
       4  ??Subroutine154_0
       4  ??Subroutine155_0
       1  ??Subroutine156_0
       4  ??Subroutine157_0
       5  ??Subroutine158_0
       6  ??Subroutine159_0
       6  ??Subroutine160_0
       6  ??Subroutine161_0
       5  ??Subroutine162_0
       5  ??Subroutine163_0
       8  ??Subroutine164_0
       5  ??Subroutine165_0
       5  ??Subroutine166_0
       8  ??Subroutine167_0
       5  ??Subroutine168_0
       5  ??Subroutine169_0
       4  ??Subroutine170_0
       8  ??Subroutine171_0
       6  ??Subroutine172_0
       6  ??Subroutine173_0
       8  ??Subroutine174_0
      10  ??Subroutine175_0
       7  ??Subroutine176_0
       5  ??Subroutine177_0
       6  ??Subroutine178_0
       6  ??Subroutine179_0
       1  ??Subroutine180_0
       5  ??Subroutine181_0
       7  ?Subroutine0
       3  ?Subroutine1
      40  ?Subroutine10
       5  ?Subroutine100
       1  ?Subroutine101
       1  ?Subroutine102
       9  ?Subroutine103
       4  ?Subroutine104
       6  ?Subroutine105
      11  ?Subroutine106
       3  ?Subroutine107
      11  ?Subroutine108
      10  ?Subroutine109
      27  ?Subroutine11
      10  ?Subroutine110
       9  ?Subroutine111
       8  ?Subroutine112
      13  ?Subroutine113
       7  ?Subroutine114
       6  ?Subroutine115
       4  ?Subroutine116
       9  ?Subroutine117
       6  ?Subroutine118
      18  ?Subroutine119
       5  ?Subroutine12
       5  ?Subroutine120
      16  ?Subroutine121
      13  ?Subroutine122
       2  ?Subroutine123
      12  ?Subroutine124
       5  ?Subroutine125
       7  ?Subroutine126
       6  ?Subroutine127
       5  ?Subroutine128
      10  ?Subroutine129
      27  ?Subroutine13
       8  ?Subroutine130
       1  ?Subroutine131
      11  ?Subroutine132
       1  ?Subroutine133
       7  ?Subroutine134
       9  ?Subroutine135
       8  ?Subroutine136
       8  ?Subroutine137
       9  ?Subroutine138
       1  ?Subroutine139
      11  ?Subroutine14
       5  ?Subroutine140
       6  ?Subroutine15
      18  ?Subroutine16
      14  ?Subroutine17
       4  ?Subroutine18
       8  ?Subroutine19
       2  ?Subroutine2
       3  ?Subroutine20
      11  ?Subroutine21
      10  ?Subroutine22
       8  ?Subroutine23
       4  ?Subroutine24
       4  ?Subroutine25
       7  ?Subroutine26
       8  ?Subroutine27
      11  ?Subroutine28
       8  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
       6  ?Subroutine31
       6  ?Subroutine32
       4  ?Subroutine33
       7  ?Subroutine34
       1  ?Subroutine35
       5  ?Subroutine36
       9  ?Subroutine37
       7  ?Subroutine38
       4  ?Subroutine39
       5  ?Subroutine4
       4  ?Subroutine40
       1  ?Subroutine41
       5  ?Subroutine42
      19  ?Subroutine43
       2  ?Subroutine44
       6  ?Subroutine45
      19  ?Subroutine46
      37  ?Subroutine47
       8  ?Subroutine48
      22  ?Subroutine49
       3  ?Subroutine5
      19  ?Subroutine50
      14  ?Subroutine51
       2  ?Subroutine52
      16  ?Subroutine53
       9  ?Subroutine54
      12  ?Subroutine55
      25  ?Subroutine56
       1  ?Subroutine57
      14  ?Subroutine58
      11  ?Subroutine59
       4  ?Subroutine6
       7  ?Subroutine60
       4  ?Subroutine61
       7  ?Subroutine62
      13  ?Subroutine63
       2  ?Subroutine64
      10  ?Subroutine65
       8  ?Subroutine66
      14  ?Subroutine67
      11  ?Subroutine68
       8  ?Subroutine69
       5  ?Subroutine7
       6  ?Subroutine70
       2  ?Subroutine71
       4  ?Subroutine72
       6  ?Subroutine73
       6  ?Subroutine74
      13  ?Subroutine75
       1  ?Subroutine76
       7  ?Subroutine77
       6  ?Subroutine78
      15  ?Subroutine79
       5  ?Subroutine8
       3  ?Subroutine80
       6  ?Subroutine81
       8  ?Subroutine82
      12  ?Subroutine83
       4  ?Subroutine84
       6  ?Subroutine85
      12  ?Subroutine86
       3  ?Subroutine87
       7  ?Subroutine88
      14  ?Subroutine89
       6  ?Subroutine9
       6  ?Subroutine90
       4  ?Subroutine91
       4  ?Subroutine92
       4  ?Subroutine93
       4  ?Subroutine94
      12  ?Subroutine95
      12  ?Subroutine96
       6  ?Subroutine97
      12  ?Subroutine98
       6  ?Subroutine99
       3  NLME_PermitJoiningTimeout
      52  ZDOBuildBuf
      90  ZDO_AnyClusterMatches
     234  ZDO_BuildSimpleDescBuf
      67  ZDO_ConvertOTAClusters
       2  ZDO_EDBind
     193  ZDO_EndDeviceTimeoutCB
     153  ZDO_FinishProcessingMgmtNwkDiscReq
      28  ZDO_Init
     214  ZDO_ParseAddrRsp
     120  ZDO_ParseBindUnbindReq
      68  ZDO_ParseDeviceAnnce
     120  ZDO_ParseEPListRsp
     326  ZDO_ParseEndDeviceBindReq
     260  ZDO_ParseMgmNwkDiscRsp
     208  ZDO_ParseMgmtBindRsp
     259  ZDO_ParseMgmtLqiRsp
     238  ZDO_ParseMgmtNwkUpdateNotify
     101  ZDO_ParseMgmtNwkUpdateReq
     189  ZDO_ParseMgmtRtgRsp
     281  ZDO_ParseNodeDescRsp
     138  ZDO_ParseParentAnnce
     202  ZDO_ParsePowerDescRsp
      51  ZDO_ParseServerDiscRsp
     322  ZDO_ParseSimpleDescBuf
      30  ZDO_ParseSimpleDescRsp
     130  ZDO_ParseUserDescRsp
     122  ZDO_ProcessActiveEPReq
     413  ZDO_ProcessBindUnbindReq
     374  ZDO_ProcessDeviceAnnce
     985  ZDO_ProcessMatchDescReq
     270  ZDO_ProcessMgmtBindReq
      82  ZDO_ProcessMgmtDirectJoinReq
     234  ZDO_ProcessMgmtLeaveReq
     805  ZDO_ProcessMgmtLqiReq
     122  ZDO_ProcessMgmtNwkDiscReq
     101  ZDO_ProcessMgmtPermitJoinReq
     240  ZDO_ProcessMgmtRtgReq
      66  ZDO_ProcessNodeDescReq
     414  ZDO_ProcessNodeDescRsp
     405  ZDO_ProcessParentAnnce
     118  ZDO_ProcessParentAnnceRsp
      66  ZDO_ProcessPowerDescReq
      70  ZDO_ProcessServerDiscReq
     134  ZDO_ProcessSimpleDescReq
       3  ZDO_ProcessSimpleDescRsp
     193  ZDO_ProcessUserDescReq
     293  ZDO_ProcessUserDescSet
     333  ZDO_StartDevice
      51  ZDO_UpdateAddrManager
      85  ZDO_UpdateNwkStatus
       4  __Constant_0
       4  __Constant_3e8
       4  apsChannelMask
       1  discRetries
       2  matchED
       1  scanCnt
      73  zdoSendStateChangeMsg
       2  zdpExternalStateTaskID
     300  -- Other

 
 11 471 bytes in segment BANKED_CODE
    300 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
    245 bytes in segment XDATA_ROM_C
     62 bytes in segment XDATA_Z
 
    302 bytes of CODE     memory
    237 bytes of CONST    memory (+ 8 bytes shared)
 11 471 bytes of HUGECODE memory
     64 bytes of XDATA    memory

Errors: none
Warnings: none
