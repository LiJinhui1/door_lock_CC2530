###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               23/Feb/2022  09:35:00
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\UserAPI\AT_uart.c
#    Command line       =  
#        -f C:\Users\Administrator\AppData\Local\Temp\EW2F77.tmp
#        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\UserAPI\AT_uart.c
#        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
#        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
#        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
#        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
#        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
#        ISR_KEYINTERRUPT -lC
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=300
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000) -f
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\AT_uart.lst
#    Object file        =  
#        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj\AT_uart.r51
#
###############################################################################

D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\UserAPI\AT_uart.c
      1          /**************************************************************************************************
      2            Filename:       AT_uart.c
      3          
      4            Description:    AT command module
      5            Author:         Xiao Wang, Yasin Zhang
      6          **************************************************************************************************/
      7          
      8          /*********************************************************************
      9           * INCLUDES
     10           */
     11          #include "string.h"
     12          #include "AF.h"
     13          #include "ZDNwkMgr.h"
     14          #include "ZDObject.h"
     15          #include "AddrMgr.h"
     16          #include "ZDSecMgr.h"
     17          #include "osal_Clock.h"
     18          #include "mac_pib.h"
     19          #include "mac_radio_defs.h"
     20          
     21          #if defined (INTER_PAN)
     22          #include "InterPAN.h"
     23          #include "stub_aps.h"
     24          #endif
     25          
     26          #include "bdb.h"
     27          #include "bdb_interface.h"
     28          
     29          #include "zcl.h"
     30          #include "zcl_general.h"
     31          #include "zcl_lighting.h"
     32          #include "zcl_closures.h"
     33          
     34          #include "ATApp.h"
     35          #include "AT_controller.h"
     36          #include "AT_uart.h"
     37          #include "AT_printf.h"
     38          #include "AT_cmd.h"
     39          
     40          /*********************************************************************
     41           * MACROS
     42           */
     43          
     44          /*********************************************************************
     45           * CONSTANTS
     46           */
     47          #define AT_HEAD_STATE1    0x00
     48          #define AT_HEAD_STATE2    0x01
     49          #define AT_DATA_STATE     0x02
     50          #define AT_END_STATE      0x03
     51          #define AT_FCS_STATE      0x04
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * GLOBAL VARIABLES
     59           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     60          bool notdoFNCmd = TRUE;
   \                     notdoFNCmd:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for notdoFNCmd>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     61          bool notdoJNCmd = TRUE;
   \                     notdoJNCmd:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for notdoJNCmd>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     62          bool notdoSCANCmd = TRUE;
   \                     notdoSCANCmd:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for notdoSCANCmd>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     63          bool notdoEUIREQcmd = TRUE;
   \                     notdoEUIREQcmd:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for notdoEUIREQcmd>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     64          bool notdoSIMPLEDESCcmd = TRUE;
   \                     notdoSIMPLEDESCcmd:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for notdoSIMPLEDESCcmd>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     65          bool notdoNODEDESEcmd = TRUE;
   \                     notdoNODEDESEcmd:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for notdoNODEDESEcmd>`
   \   000001                REQUIRE __INIT_XDATA_I
     66          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     67          uint8 keySeqNum = 1;
   \                     keySeqNum:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for keySeqNum>`
   \   000001                REQUIRE __INIT_XDATA_I
     68          

   \                                 In  segment XDATA_ROM_C, align 1
     69          const AT_Cmd_t AT_Cmd_Arr[] = {
   \                     AT_Cmd_Arr:
   \   000000   ....         DW `?<Constant "BLOAD">`
   \   000002   ....         DW `??AT_Cmd_BLoad::?relay`
   \   000004   ....         DW `?<Constant "Enter The Boot Loader...">`
   \   000006   ....         DW `?<Constant "TIME">`
   \   000008   ....         DW `??AT_Cmd_Time::?relay`
   \   00000A   ....         DW `?<Constant "Get or Set Local Time">`
   \   00000C   ....         DW `?<Constant "RAWZCL">`
   \   00000E   ....         DW `??AT_Cmd_RawZCL::?relay`
   \   000010   ....         DW `?<Constant "Send A Raw ZCL Messag...">`
   \   000012   ....         DW `?<Constant "RAWZDO">`
   \   000014   ....         DW `??AT_Cmd_RawZDO::?relay`
   \   000016   ....         DW `?<Constant "Construct A Raw ZDO M...">`
   \   000018   ....         DW `?<Constant "INTERPAN">`
   \   00001A   ....         DW `??AT_Cmd_InterPAN::?relay`
   \   00001C   ....         DW `?<Constant "Send an Interpan Command">`
   \   00001E   ....         DW `?<Constant "SCAN">`
   \   000020   ....         DW `??AT_Cmd_Scan::?relay`
   \   000022   ....         DW `?<Constant "Scan The Energy Of Al...">`
   \   000024   ....         DW `?<Constant "JN">`
   \   000026   ....         DW `??AT_Cmd_JN::?relay`
   \   000028   ....         DW `?<Constant "Join Network">`
   \   00002A   ....         DW `?<Constant "LN">`
   \   00002C   ....         DW `??AT_Cmd_LN::?relay`
   \   00002E   ....         DW `?<Constant "Make Local Device Lea...">`
   \   000030   ....         DW `?<Constant "N">`
   \   000032   ....         DW `??AT_Cmd_N::?relay`
   \   000034   ....         DW `?<Constant "Display Network Infor...">`
   \   000036   ....         DW `?<Constant "RJ">`
   \   000038   ....         DW `??AT_Cmd_RJ::?relay`
   \   00003A   ....         DW `?<Constant "Rejoin the network">`
   \   00003C   ....         DW `?<Constant "KEYTAB">`
   \   00003E   ....         DW `??AT_Cmd_KeyTab::?relay`
   \   000040   ....         DW `?<Constant "Print Local Key And L...">`
   \   000042   ....         DW `?<Constant "IDREQ">`
   \   000044   ....         DW `??AT_Cmd_IDREQ::?relay`
   \   000046   ....         DW `?<Constant "Request Node\\'s NodeID">`
   \   000048   ....         DW `?<Constant "EUIREQ">`
   \   00004A   ....         DW `??AT_Cmd_EUIREQ::?relay`
   \   00004C   ....         DW `?<Constant "Request Node\\'s EUI64">`
   \   00004E   ....         DW `?<Constant "NODEDESC">`
   \   000050   ....         DW `??AT_Cmd_NODEDESC::?relay`
   \   000052   ....         DW `?<Constant "Request Node\\'s Descri...">`
   \   000054   ....         DW `?<Constant "POWERDESC">`
   \   000056   ....         DW `??AT_Cmd_POWERDESC::?relay`
   \   000058   ....         DW `?<Constant "Request Node\\'s Power ...">`
   \   00005A   ....         DW `?<Constant "ACTEPDESC">`
   \   00005C   ....         DW `??AT_Cmd_ACTEPDESC::?relay`
   \   00005E   ....         DW `?<Constant "Request Node\\'s Active...">`
   \   000060   ....         DW `?<Constant "SIMPLEDESC">`
   \   000062   ....         DW `??AT_Cmd_SIMPLEDESC::?relay`
   \   000064   ....         DW `?<Constant "Request Node\\'s Simple...">`
   \   000066   ....         DW `?<Constant "MATCHREQ">`
   \   000068   ....         DW `??AT_Cmd_MATCHREQ::?relay`
   \   00006A   ....         DW `?<Constant "Find Nodes which Matc...">`
   \   00006C   ....         DW `?<Constant "ANNCE">`
   \   00006E   ....         DW `??AT_Cmd_ANNCE::?relay`
   \   000070   ....         DW `?<Constant "Anounce Local Device ...">`
   \   000072   ....         DW `?<Constant "BTABLE">`
   \   000074   ....         DW `??AT_Cmd_BTABLE::?relay`
   \   000076   ....         DW `?<Constant "Display Binding Table">`
   \   000078   ....         DW `?<Constant "BSET">`
   \   00007A   ....         DW `??AT_Cmd_BSET::?relay`
   \   00007C   ....         DW `?<Constant "Set local Binding Tab...">`
   \   00007E   ....         DW `?<Constant "BCLR">`
   \   000080   ....         DW `??AT_Cmd_BCLR::?relay`
   \   000082   ....         DW `?<Constant "Clear local Binding T...">`
   \   000084   ....         DW `?<Constant "BIND">`
   \   000086   ....         DW `??AT_Cmd_BIND::?relay`
   \   000088   ....         DW `?<Constant "Create Binding on Rem...">`
   \   00008A   ....         DW `?<Constant "UNBIND">`
   \   00008C   ....         DW `??AT_Cmd_UNBIND::?relay`
   \   00008E   ....         DW `?<Constant "Delete Binding on Rem...">`
   \   000090   ....         DW `?<Constant "EBIND">`
   \   000092   ....         DW `??AT_Cmd_EBIND::?relay`
   \   000094   ....         DW `?<Constant "End Device Bind">`
   \   000096   ....         DW `?<Constant "DASSR">`
   \   000098   ....         DW `??AT_Cmd_DASSR::?relay`
   \   00009A   ....         DW `?<Constant "Disassociate Remote N...">`
   \   00009C   ....         DW `?<Constant "RADIOCH">`
   \   00009E   ....         DW `??AT_Cmd_RADIOCH::?relay`
   \   0000A0   ....         DW `?<Constant "Set or get local radi...">`
   \   0000A2   ....         DW `?<Constant "ATABLE">`
   \   0000A4   ....         DW `??AT_Cmd_ATABLE::?relay`
   \   0000A6   ....         DW `?<Constant "Display Address Table">`
   \   0000A8   ....         DW `?<Constant "ASET">`
   \   0000AA   ....         DW `??AT_Cmd_ASET::?relay`
   \   0000AC   ....         DW `?<Constant "Set Address Table Entry">`
   \   0000AE   ....         DW `?<Constant "ATRDISC">`
   \   0000B0   ....         DW `??AT_Cmd_ATRDISC::?relay`
   \   0000B2   ....         DW `?<Constant "Find Supported Define...">`
   \   0000B4   ....         DW `?<Constant "READATTR">`
   \   0000B6   ....         DW `??AT_Cmd_ReadAttr::?relay`
   \   0000B8   ....         DW `?<Constant "read the attribute da...">`
   \   0000BA   ....         DW `?<Constant "WRITEATTR">`
   \   0000BC   ....         DW `??AT_Cmd_WriteAttr::?relay`
   \   0000BE   ....         DW `?<Constant "write the attribute d...">`
   \   0000C0   ....         DW `?<Constant "HELP">`
   \   0000C2   ....         DW `??AT_Cmd_Help::?relay`
   \   0000C4   ....         DW `?<Constant "show all the AT commands">`
   \   0000C6   ....         DW `?<Constant "GETADDR">`
   \   0000C8   ....         DW `??AT_Cmd_GetAddr::?relay`
   \   0000CA   ....         DW `?<Constant "show self short address">`
   \   0000CC   ....         DW `?<Constant "EPCTRL">`
   \   0000CE   ....         DW `??AT_Cmd_EpCtrl::?relay`
   \   0000D0   ....         DW `?<Constant "control the local end...">`
   \   0000D2   ....         DW `?<Constant "REPCTRL">`
   \   0000D4   ....         DW `??AT_Cmd_REpCtrl::?relay`
   \   0000D6   ....         DW `?<Constant "control the remote en...">`
   \   0000D8   ....         DW `?<Constant "TEST">`
   \   0000DA   ....         DW `??AT_Cmd_Test::?relay`
   \   0000DC   ....         DW `?<Constant "Debug test">`
     70            {"BLOAD",     AT_Cmd_BLoad,     "Enter The Boot Loader Menu"},
     71            {"TIME",      AT_Cmd_Time,      "Get or Set Local Time"},
     72            {"RAWZCL",    AT_Cmd_RawZCL,    "Send A Raw ZCL Message With Specified ProfileID And Source Endpoint"},
     73            {"RAWZDO",    AT_Cmd_RawZDO,    "Construct A Raw ZDO Message And Send To Target"},
     74            {"INTERPAN",  AT_Cmd_InterPAN,  "Send an Interpan Command"},
     75            {"SCAN",      AT_Cmd_Scan,      "Scan The Energy Of All Channels or Scan For Active PANs"},
     76          
     77            #if ( ZG_BUILD_RTR_TYPE )
     78            // on FFD device
     79            {"FN",        AT_Cmd_FN,        "Establish Network"},
     80            #endif
     81            #if (ZG_BUILD_JOINING_TYPE)
     82            // on Join type deviece
     83            {"JN",        AT_Cmd_JN,        "Join Network"},
     84            #endif
     85            {"LN",        AT_Cmd_LN,        "Make Local Device Leave PAN"},
     86            {"N",         AT_Cmd_N,         "Display Network Information"},
     87            #if ( ZG_BUILD_RTR_TYPE )
     88            // Coordinator or router
     89            {"PJ",        AT_Cmd_PJ,        "Permit joining"},
     90            #endif
     91            #if (ZG_DEVICE_RTRONLY_TYPE|ZG_BUILD_ENDDEVICE_TYPE)
     92            // Not Coordinator
     93            {"RJ",        AT_Cmd_RJ,        "Rejoin the network"},
     94            #endif
     95          
     96            {"KEYTAB",    AT_Cmd_KeyTab,    "Print Local Key And Link Key Table"},
     97            #if ( ZG_BUILD_RTR_TYPE )
     98            // Coordinator or router
     99            {"ADDKEY",    AT_Cmd_AddKey,    "Add a key entry to local key table"},
    100            #endif
    101          
    102            {"IDREQ",     AT_Cmd_IDREQ,     "Request Node's NodeID"},
    103            {"EUIREQ",    AT_Cmd_EUIREQ,    "Request Node's EUI64"},
    104            {"NODEDESC",  AT_Cmd_NODEDESC,  "Request Node's Descriptor"},
    105            {"POWERDESC", AT_Cmd_POWERDESC, "Request Node's Power Descriptor"},
    106            {"ACTEPDESC", AT_Cmd_ACTEPDESC, "Request Node's Active EndPoint List"},
    107            {"SIMPLEDESC",AT_Cmd_SIMPLEDESC,"Request Node's Simple Descriptor"},
    108            {"MATCHREQ",  AT_Cmd_MATCHREQ,  "Find Nodes which Match a Specific Descriptor"},
    109          
    110            {"ANNCE",     AT_Cmd_ANNCE,     "Anounce Local Device In The Network"},
    111            #if ( ZG_BUILD_RTR_TYPE )
    112            // FFD Devices
    113            {"PANNCE",    AT_Cmd_PANNCE,    "Send A Parent Announce In The Network"},
    114            // FFD,COO Devices
    115            {"NTABLE",    AT_Cmd_NTABLE,    "Display Neighbour Table"},
    116            // FFD,COO Devices
    117            {"RTABLE",    AT_Cmd_RTABLE,    "Display Routing Table"},
    118            #endif
    119          
    120            #if defined ( REFLECTOR )
    121            #if defined ( ZDO_MGMT_BIND_RESPONSE )
    122            {"BTABLE",    AT_Cmd_BTABLE,    "Display Binding Table"},
    123            #endif // ZDO_MGMT_BIND_RESPONSE
    124            {"BSET",      AT_Cmd_BSET,      "Set local Binding Table Entry"},
    125            {"BCLR",      AT_Cmd_BCLR,      "Clear local Binding Table Entry"},
    126            {"BIND",      AT_Cmd_BIND,      "Create Binding on Remote Device"},
    127            {"UNBIND",    AT_Cmd_UNBIND,    "Delete Binding on Remote Device"},
    128            {"EBIND",     AT_Cmd_EBIND,     "End Device Bind"},
    129            #endif // REFLECTOR
    130          
    131            {"DASSR",     AT_Cmd_DASSR,     "Disassociate Remote Node from PAN"},
    132            #if ( ZG_BUILD_COORDINATOR_TYPE )
    133            {"KEYUPD",    AT_Cmd_KEYUPD,    "Update the Network Key"},
    134            {"CCHANGE",   AT_Cmd_CCHANGE,   "Change the network's channel"},
    135            #endif
    136            {"RADIOCH",   AT_Cmd_RADIOCH,   "Set or get local radio channel"},
    137            {"ATABLE",    AT_Cmd_ATABLE,    "Display Address Table"},
    138            {"ASET",      AT_Cmd_ASET,      "Set Address Table Entry"},
    139          
    140            #ifdef ZCL_DISCOVER
    141            {"ATRDISC",   AT_Cmd_ATRDISC,   "Find Supported Defined Attributes On A Remote Device"},
    142            #endif
    143            #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    144            {"READRCFG",  AT_Cmd_READRCFG,  "Read Reporting Configuration From Remote Device"},
    145            {"CFGRPT",    AT_Cmd_CFGRPT,    "Configure Attribute Reporting"},
    146            #endif
    147            #ifdef ZCL_READ
    148            {"READATTR",  AT_Cmd_ReadAttr,  "read the attribute data by attrID"},       // AT+READATTR:<Addr>,<EP>,<SendMode>,<ClusterID>,<AttrID>,...,<AttrID>"},
    149            #endif
    150            #ifdef ZCL_WRITE
    151            {"WRITEATTR", AT_Cmd_WriteAttr, "write the attribute data by attrID"},      // AT+WRITEATTR:<Addr>,<EP>,<SendMode>,<ClusterID>,<AttrID>,,<DataType>,<Data>"}
    152            #endif
    153          
    154            {"HELP",      AT_Cmd_Help,      "show all the AT commands"},
    155            {"GETADDR",   AT_Cmd_GetAddr,   "show self short address"},
    156            {"EPCTRL",    AT_Cmd_EpCtrl,    "control the local endpoint"},              // AT+EPCTRL:<0/1>,<EP>"},
    157            {"REPCTRL",   AT_Cmd_REpCtrl,   "control the remote endpoint"},             // AT+REPCTRL:<shortAddr>,<0/1>,<EP>"},
    158            {"TEST",      AT_Cmd_Test,      "Debug test"}
    159          };
    160          

   \                                 In  segment XDATA_ROM_C, align 1
    161          const uint16 AT_CMD_SZ = sizeof(AT_Cmd_Arr) / sizeof(AT_Cmd_Arr[0]);
   \                     AT_CMD_SZ:
   \   000000   2500         DW 37
    162          
    163          #if AT_SHOW_STATE_CHANGE

   \                                 In  segment XDATA_I, align 1, keep-with-next
    164          const uint8* devStates_str[]=
   \                     devStates_str:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for devStates_str>`
   \   000020                REQUIRE __INIT_XDATA_I
    165          {
    166            "DEV_HOLD",                                // Initialized - not started automatically
    167            "DEV_INIT",                                // Initialized - not connected to anything
    168            "DEV_NWK_DISC",                            // Discovering PAN's to join
    169            "DEV_NWK_JOINING",                         // Joining a PAN
    170            "DEV_NWK_SEC_REJOIN_CURR_CHANNEL",         // ReJoining a PAN in secure mode scanning in current channel, only for end devices
    171            "DEV_END_DEVICE_UNAUTH",                   // Joined but not yet authenticated by trust center
    172            "DEV_END_DEVICE",                          // Started as device after authentication
    173            "DEV_ROUTER",                              // Device joined, authenticated and is a router
    174            "DEV_COORD_STARTING",                      // Started as Zigbee Coordinator
    175            "DEV_ZB_COORD",                            // Started as Zigbee Coordinator
    176            "DEV_NWK_ORPHAN",                          // Device has lost information about its parent..
    177            "DEV_NWK_KA",                              // Device is sending KeepAlive message to its parent
    178            "DEV_NWK_BACKOFF",                         // Device is waiting before trying to rejoin
    179            "DEV_NWK_SEC_REJOIN_ALL_CHANNEL",          // ReJoining a PAN in secure mode scanning in all channels, only for end devices
    180            "DEV_NWK_TC_REJOIN_CURR_CHANNEL",          // ReJoining a PAN in Trust center mode scanning in current channel, only for end devices
    181            "DEV_NWK_TC_REJOIN_ALL_CHANNEL"            // ReJoining a PAN in Trust center mode scanning in all channels, only for end devices
    182          };
    183          #endif
    184          
    185          /*********************************************************************
    186           * EXTERNAL VARIABLES
    187           */
    188          extern devStartModes_t devStartMode;
    189          extern uint8 _tmpRejoinState;
    190          
    191          extern uint8 EBindSeq;
    192          
    193          typedef struct
    194          {
    195            uint16            ami;
    196            uint16            keyNvId;   // index to the Link Key table in NV
    197            ZDSecMgr_Authentication_Option authenticateOption;
    198          } ZDSecMgrEntry_t;
    199          extern ZDSecMgrEntry_t* ZDSecMgrEntries;
    200          
    201          /*********************************************************************
    202           * EXTERNAL FUNCTIONS
    203           */
    204          // the Energy scan call back funtion
    205          extern void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
    206          
    207          /*********************************************************************
    208           * LOCAL VARIABLES
    209           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          byte AT_UART_TaskID;   // Task ID for internal task/event processing
   \                     AT_UART_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    211                                  // This variable will be received when
    212                                  // ATApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          uint8 AT_RxBuffer[AT_CMD_BUFF_MAX];      // UART Rx buffer
   \                     AT_RxBuffer:
   \   000000                DS 100
   \   000064                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          uint8 at_state = AT_HEAD_STATE1;         // AT_command_Rx_state
   \                     at_state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          uint8 AT_templen = 0;                    // the length of AT_command
   \                     AT_templen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    216          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    217          char FWReversion[] = "AT-Command 1.0";
   \                     FWReversion:
   \   000000                DS 15
   \   00000F                REQUIRE `?<Initializer for FWReversion>`
   \   00000F                REQUIRE __INIT_XDATA_I
    218          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          devStartModes_t startMode;
   \                     startMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    220          
    221          /*********************************************************************
    222           * LOCAL FUNCTIONS
    223           */
    224          static void  AT_UartProcess( uint8 port, uint8 event );
    225          static uint8 getLength( uint8 *msg_ptr, uint8 fn );
    226          static uint8 AT_get_next_cmdUnit( AT_CmdUnit* cmdUnit, uint8 start_point, uint8* msg );
    227          static void  AT_UpperCaseCmd( AT_CmdUnit *cmdUnit );
    228          static int8  AT_CmdCmp( AT_CmdUnit* cmdUnit, uint8* str2 );
    229          static uint8 AT_ChartoInt( uint8 n );
    230          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    231          static uint8* AT_AttrData_ChartoInt( uint8 dataType, AT_CmdUnit *cmdUnit );
    232          #endif
    233          #if AT_FCS_VERIFY
    234          static byte AT_UartCalcFCS( uint8 *msg_ptr, uint8 len );
    235          #endif
    236          
    237          /*********************************************************************
    238           * PUBLIC FUNCTIONS
    239           */
    240          
    241          /*********************************************************************
    242          * @fn      AT_UART_Init
    243          *
    244          * @brief   Initialization function for the UART Task.
    245          *
    246          * @param   task_id - the ID assigned by OSAL.  This ID should be
    247          *                    used to send messages and set timers.
    248          *
    249          * @return  uint8 - the status of UART configuration
    250          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          uint8 AT_UART_Init( byte task_id )
   \                     AT_UART_Init:
    252          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
    253            AT_UART_TaskID = task_id;
   \   00000B   90....       MOV       DPTR,#AT_UART_TaskID
   \   00000E   12....       LCALL     ?Subroutine20 & 0xFFFF
    254          
    255            halUARTCfg_t uartConfig;
    256          
    257            /* UART Configuration */
    258            uartConfig.configured           = TRUE;
   \                     ??CrossCallReturnLabel_26:
   \   000011   7401         MOV       A,#0x1
   \   000013   F0           MOVX      @DPTR,A
    259            uartConfig.baudRate             = AT_UART_BR;
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   7404         MOV       A,#0x4
   \   000019   F0           MOVX      @DPTR,A
    260            uartConfig.flowControl          = FALSE;
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E4           CLR       A
   \   000020   F0           MOVX      @DPTR,A
    261            uartConfig.flowControlThreshold = MT_UART_THRESHOLD;
   \   000021   7403         MOV       A,#0x3
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   7440         MOV       A,#0x40
   \   000028   12....       LCALL     ??Subroutine184_0 & 0xFFFF
    262            uartConfig.rx.maxBufSize        = AT_UART_RX_BUFF_MAX;
   \                     ??CrossCallReturnLabel_459:
   \   00002B   740A         MOV       A,#0xa
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   7464         MOV       A,#0x64
   \   000032   12....       LCALL     ??Subroutine184_0 & 0xFFFF
    263            uartConfig.tx.maxBufSize        = AT_UART_TX_BUFF_MAX;
   \                     ??CrossCallReturnLabel_460:
   \   000035   7412         MOV       A,#0x12
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   7464         MOV       A,#0x64
   \   00003C   12....       LCALL     ??Subroutine184_0 & 0xFFFF
    264            uartConfig.idleTimeout          = MT_UART_IDLE_TIMEOUT;
   \                     ??CrossCallReturnLabel_461:
   \   00003F   7405         MOV       A,#0x5
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   7406         MOV       A,#0x6
   \   000046   F0           MOVX      @DPTR,A
    265            uartConfig.intEnable            = TRUE;
   \   000047   7416         MOV       A,#0x16
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   7401         MOV       A,#0x1
   \   00004E   F0           MOVX      @DPTR,A
    266            uartConfig.callBackFunc         = AT_UartProcess;
   \   00004F   741B         MOV       A,#0x1b
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   74..         MOV       A,#`??AT_UartProcess::?relay` & 0xff
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   74..         MOV       A,#(`??AT_UartProcess::?relay` >> 8) & 0xff
   \   00005A   F0           MOVX      @DPTR,A
    267          
    268            AT_RxBuffer[0] = '\r';
   \   00005B   90....       MOV       DPTR,#AT_RxBuffer
   \   00005E   740D         MOV       A,#0xd
   \   000060   12....       LCALL     ?Subroutine122 & 0xFFFF
    269          
    270            return HalUARTOpen(AT_UART_PORT, &uartConfig);
   \                     ??CrossCallReturnLabel_476:
   \   000063   7900         MOV       R1,#0x0
   \   000065   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
   \   000068   741D         MOV       A,#0x1d
   \   00006A   02....       LJMP      ??Subroutine156_0 & 0xFFFF
    271          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001                ; Setup parameters for call to function AT_ChartoInt8
   \   000001                ; Setup parameters for call to function AT_ChartoInt8
   \   000001                ; Setup parameters for call to function AT_ChartoInt8
   \   000001                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function AddrMgrEntryGet
   \   000001                ; Setup parameters for call to function AddrMgrEntryGet
   \   000001                ; Setup parameters for call to function AddrMgrEntryGet
   \   000001                ; Setup parameters for call to function AddrMgrEntryGet
   \   000001                ; Setup parameters for call to function AddrMgrEntryGet
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine157_0
   \   000003                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    272          
    273          /***************************************************************************************************
    274           * @fn      AT_UartProcess
    275           *
    276           * @brief   | Head  |   Data   |  End  |  FCS   |
    277           *          |   2   |   0-Len  |   1   |   1    |
    278           *          |  AT   |     ?    | '\r'  | verify |
    279           *
    280           * @field processed by AT_HandleCMD()  : Data + End('\r')
    281           * @field verified  by AT_UartCalcFCS(): Data + End('\r')
    282           *
    283           *          Parses the data and send the data to correct place (AT or APP)
    284           *
    285           * @param   port     - UART port
    286           * @param   event    - Event that causes the callback
    287           *
    288           *
    289           * @return  None
    290           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void AT_UartProcess ( uint8 port, uint8 event )
   \                     AT_UartProcess:
    292          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    293            uint8  ch;
    294            (void)event;  // Intentionally unreferenced parameter
    295          
    296            /*
    297             * due to the AT_UartProcess may be re-entried during AT_HandleCMD aused by HallUARTPollISR,
    298             * which is denergerous, As a result of some command ERROR, so we prevent the function from being re-entryed
    299             */
    300            static uint8 isProcessing = false;
    301            if(isProcessing) return;
   \   00000C   90....       MOV       DPTR,#??isProcessing
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6003         JZ        $+5
   \   000012   02....       LJMP      ??AT_UartProcess_0 & 0xFFFF
    302            isProcessing = true;
   \                     ??AT_UartProcess_1:
   \   000015   7401         MOV       A,#0x1
   \   000017   8005         SJMP      ??AT_UartProcess_2
    303          
    304            while (Hal_UART_RxBufLen(port)) {
    305              HalUARTRead (port, &ch, 1);
    306          
    307              switch (at_state) {
    308                case AT_HEAD_STATE1:
    309                  if (ch == 'A' || ch == 'a')
    310                    at_state = AT_HEAD_STATE2;
    311                  //else still in AT_HEAD_STATE1;
    312                  break;
    313          
    314                case AT_HEAD_STATE2:
    315                  if (ch == 'T' || ch == 't')
    316                    at_state = AT_DATA_STATE;
   \                     ??AT_UartProcess_3:
   \   000019   90....       MOV       DPTR,#at_state
   \   00001C   7402         MOV       A,#0x2
   \                     ??AT_UartProcess_2:
   \   00001E   F0           MOVX      @DPTR,A
   \                     ??AT_UartProcess_4:
   \   00001F                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00001F   EE           MOV       A,R6
   \   000020   F9           MOV       R1,A
   \   000021   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000024   EA           MOV       A,R2
   \   000025   4B           ORL       A,R3
   \   000026   7003         JNZ       $+5
   \   000028   02....       LJMP      ??AT_UartProcess_5 & 0xFFFF
   \   00002B                ; Setup parameters for call to function HalUARTRead
   \   00002B   7C01         MOV       R4,#0x1
   \   00002D   7D00         MOV       R5,#0x0
   \   00002F   AA..         MOV       R2,?XSP + 0
   \   000031   AB..         MOV       R3,?XSP + 1
   \   000033   EE           MOV       A,R6
   \   000034   F9           MOV       R1,A
   \   000035   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000038   90....       MOV       DPTR,#at_state
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6008         JZ        ??AT_UartProcess_6
   \   00003E   14           DEC       A
   \   00003F   6017         JZ        ??AT_UartProcess_7
   \   000041   14           DEC       A
   \   000042   6039         JZ        ??AT_UartProcess_8
   \   000044   80D9         SJMP      ??AT_UartProcess_4
   \                     ??AT_UartProcess_6:
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6441         XRL       A,#0x41
   \   00004F   6021         JZ        ??AT_UartProcess_9
   \   000051   E0           MOVX      A,@DPTR
   \   000052   6461         XRL       A,#0x61
   \   000054   70C9         JNZ       ??AT_UartProcess_4
   \   000056   801A         SJMP      ??AT_UartProcess_9
   \                     ??AT_UartProcess_7:
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   6454         XRL       A,#0x54
   \   000061   60B6         JZ        ??AT_UartProcess_3
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6474         XRL       A,#0x74
   \   000066   60B1         JZ        ??AT_UartProcess_3
    317                  else if (ch == 'A' || ch == 'a')
   \   000068   E0           MOVX      A,@DPTR
   \   000069   6441         XRL       A,#0x41
   \   00006B   6005         JZ        ??AT_UartProcess_9
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   6461         XRL       A,#0x61
   \   000070   7005         JNZ       ??AT_UartProcess_10
    318                    at_state = AT_HEAD_STATE2;
   \                     ??AT_UartProcess_9:
   \   000072   90....       MOV       DPTR,#at_state
   \   000075   809E         SJMP      ??AT_UartProcess_1
    319                  else
    320                    at_state = AT_HEAD_STATE1;
   \                     ??AT_UartProcess_10:
   \   000077   90....       MOV       DPTR,#at_state
   \   00007A   E4           CLR       A
   \   00007B   80A1         SJMP      ??AT_UartProcess_2
    321                  break;
    322          
    323                case AT_DATA_STATE:
    324          #if AT_UART_BACKSPACE
    325                  if(ch=='\b'||ch=='\x7f'){         // for backspace function, allow user to delete characters
   \                     ??AT_UartProcess_8:
   \   00007D   85..82       MOV       DPL,?XSP + 0
   \   000080   85..83       MOV       DPH,?XSP + 1
   \   000083   E0           MOVX      A,@DPTR
   \   000084   6408         XRL       A,#0x8
   \   000086   6005         JZ        ??AT_UartProcess_11
   \   000088   E0           MOVX      A,@DPTR
   \   000089   647F         XRL       A,#0x7f
   \   00008B   7009         JNZ       ??AT_UartProcess_12
    326                    if(AT_templen>0)
   \                     ??AT_UartProcess_11:
   \   00008D   90....       MOV       DPTR,#AT_templen
   \   000090   E0           MOVX      A,@DPTR
   \   000091   608C         JZ        ??AT_UartProcess_4
    327                      AT_templen--;
   \   000093   14           DEC       A
   \   000094   8088         SJMP      ??AT_UartProcess_2
    328                    break;
    329                  }
    330          #endif
    331                  if (ch == '\r') {
   \                     ??AT_UartProcess_12:
   \   000096   90....       MOV       DPTR,#AT_templen
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F8           MOV       R0,A
   \   00009B   74..         MOV       A,#AT_RxBuffer & 0xff
   \   00009D   28           ADD       A,R0
   \   00009E   F8           MOV       R0,A
   \   00009F   E4           CLR       A
   \   0000A0   34..         ADDC      A,#(AT_RxBuffer >> 8) & 0xff
   \   0000A2   F9           MOV       R1,A
   \   0000A3   85..82       MOV       DPL,?XSP + 0
   \   0000A6   85..83       MOV       DPH,?XSP + 1
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   640D         XRL       A,#0xd
   \   0000AC   7015         JNZ       ??AT_UartProcess_13
    332                    AT_RxBuffer[AT_templen++] = '\r';
   \   0000AE   8882         MOV       DPL,R0
   \   0000B0   8983         MOV       DPH,R1
   \   0000B2   740D         MOV       A,#0xd
   \   0000B4   F0           MOVX      @DPTR,A
    333          #if AT_FCS_VERIFY
    334                    at_state = AT_FCS_STATE;
    335                    break;
    336          #else
    337                    AT_templen = 0;
   \   0000B5   90....       MOV       DPTR,#AT_templen
   \   0000B8   E4           CLR       A
   \   0000B9   F0           MOVX      @DPTR,A
    338                    AT_HandleCMD(AT_RxBuffer);
   \   0000BA                ; Setup parameters for call to function AT_HandleCMD
   \   0000BA   7A..         MOV       R2,#AT_RxBuffer & 0xff
   \   0000BC   7B..         MOV       R3,#(AT_RxBuffer >> 8) & 0xff
   \   0000BE   12....       LCALL     `??AT_HandleCMD::?relay`; Banked call to: AT_HandleCMD
    339                    at_state = AT_HEAD_STATE1;
   \   0000C1   80B4         SJMP      ??AT_UartProcess_10
    340          #endif
    341                  } else {
    342                    if (AT_templen < (AT_CMD_BUFF_MAX - 1)) {
   \                     ??AT_UartProcess_13:
   \   0000C3   90....       MOV       DPTR,#AT_templen
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   C3           CLR       C
   \   0000C8   9463         SUBB      A,#0x63
   \   0000CA   5014         JNC       ??AT_UartProcess_14
    343                      AT_RxBuffer[AT_templen++] = ch;
   \   0000CC   85..82       MOV       DPL,?XSP + 0
   \   0000CF   85..83       MOV       DPH,?XSP + 1
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   8882         MOV       DPL,R0
   \   0000D5   8983         MOV       DPH,R1
   \   0000D7   F0           MOVX      @DPTR,A
   \   0000D8   90....       MOV       DPTR,#AT_templen
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   04           INC       A
   \   0000DD   02....       LJMP      ??AT_UartProcess_2 & 0xFFFF
    344                      // still in AT_DATA_STATE;
    345                    } else {
    346                      osal_memset(AT_RxBuffer, 0, AT_UART_RX_BUFF_MAX);
   \                     ??AT_UartProcess_14:
   \   0000E0                ; Setup parameters for call to function osal_memset
   \   0000E0   7C64         MOV       R4,#0x64
   \   0000E2   7D00         MOV       R5,#0x0
   \   0000E4   7900         MOV       R1,#0x0
   \   0000E6   7A..         MOV       R2,#AT_RxBuffer & 0xff
   \   0000E8   7B..         MOV       R3,#(AT_RxBuffer >> 8) & 0xff
   \   0000EA   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    347                      AT_templen = 0;
   \   0000ED   90....       MOV       DPTR,#AT_templen
   \   0000F0   E4           CLR       A
   \   0000F1   F0           MOVX      @DPTR,A
    348                      at_state = AT_HEAD_STATE1;
   \   0000F2   90....       MOV       DPTR,#at_state
   \   0000F5   02....       LJMP      ??AT_UartProcess_2 & 0xFFFF
    349                    }
    350                  }
    351          
    352                  break;
    353          
    354          #if AT_FCS_VERIFY
    355                case AT_FCS_STATE:
    356          
    357                  /* Make sure it's correct */
    358                  if ((AT_UartCalcFCS (AT_RxBuffer, AT_templen) == ch))
    359                  {
    360                    AT_HandleCMD(AT_RxBuffer);
    361                    osal_memset(AT_RxBuffer, 0, AT_templen);
    362                    AT_templen = 0;
    363                  }
    364                  else
    365                  {
    366                    AT_ERROR(AT_FATAL_ERROR);  // SEND FCS ERROR MSG AT_FATAL_ERROR
    367                  }
    368          
    369                  /* Reset the state, send or discard the buffers at this point */
    370                  at_state = AT_HEAD_STATE1;
    371          
    372                  break;
    373          #endif
    374          
    375                default:
    376                 break;
    377              }
    378            }
    379            isProcessing = false;
   \                     ??AT_UartProcess_5:
   \   0000F8   90....       MOV       DPTR,#??isProcessing
   \   0000FB   E4           CLR       A
   \   0000FC   F0           MOVX      @DPTR,A
    380          }
   \                     ??AT_UartProcess_0:
   \   0000FD   7401         MOV       A,#0x1
   \   0000FF   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine162_0
   \   000003                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??isProcessing:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    381          
    382          /***************************************************************************************************
    383           * @fn      AT_HandleCMD
    384           *
    385           * @brief   Parse the AT_commands and call it's response function
    386           *
    387           * @param   byte *msg_ptr - message pointer
    388           *
    389           * @return  None
    390           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          void AT_HandleCMD( uint8 *msg_ptr )
   \                     AT_HandleCMD:
    392          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    393            uint8 cmd_ptr = 0;
    394            uint16 i;
    395            AT_DEBUG("\r\n", 2);
    396            AT_DEBUG(msg_ptr, getLength(msg_ptr, 0x02));
    397          
    398            // Get next cmdUnit and upper case it
    399            AT_CmdUnit cmdUnit;
    400            cmd_ptr = AT_get_next_cmdUnit(&cmdUnit, cmd_ptr, msg_ptr);
   \   00000E                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000E   EA           MOV       A,R2
   \   00000F   FC           MOV       R4,A
   \   000010   EB           MOV       A,R3
   \   000011   FD           MOV       R5,A
   \   000012   7900         MOV       R1,#0x0
   \   000014   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000017   F5..         MOV       ?V4,A
    401            AT_UpperCaseCmd(&cmdUnit);
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   801F         SJMP      ??AT_HandleCMD_0
   \                     ??AT_HandleCMD_1:
   \   00001D   EA           MOV       A,R2
   \   00001E   F8           MOV       R0,A
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E0           MOVX      A,@DPTR
   \   000025   28           ADD       A,R0
   \   000026   F8           MOV       R0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   3400         ADDC      A,#0x0
   \   00002B   8882         MOV       DPL,R0
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   249F         ADD       A,#-0x61
   \   000032   C3           CLR       C
   \   000033   941A         SUBB      A,#0x1a
   \   000035   5004         JNC       ??AT_HandleCMD_2
   \   000037   E0           MOVX      A,@DPTR
   \   000038   24E0         ADD       A,#-0x20
   \   00003A   F0           MOVX      @DPTR,A
   \                     ??AT_HandleCMD_2:
   \   00003B   0A           INC       R2
   \                     ??AT_HandleCMD_0:
   \   00003C   7401         MOV       A,#0x1
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F8           MOV       R0,A
   \   000043   EA           MOV       A,R2
   \   000044   C3           CLR       C
   \   000045   98           SUBB      A,R0
   \   000046   40D5         JC        ??AT_HandleCMD_1
    402          
    403            // process the cmdUnit
    404            if (cmdUnit.symbol == '\r') {  // which means there is no followed operator or command
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   640D         XRL       A,#0xd
   \   000051   700E         JNZ       ??AT_HandleCMD_3
    405              AT_OK();
   \   000053                ; Setup parameters for call to function AT_Uart0_Send
   \   000053   7C06         MOV       R4,#0x6
   \   000055   7D00         MOV       R5,#0x0
   \   000057   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000059   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00005B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00005E   02....       LJMP      ??AT_HandleCMD_4 & 0xFFFF
    406            }
    407            else if (cmdUnit.symbol == '\0') {
   \                     ??AT_HandleCMD_3:
   \   000061   E0           MOVX      A,@DPTR
   \   000062   7055         JNZ       ??AT_HandleCMD_5
    408              if (AT_CmdCmp(&cmdUnit, "I") == 0) {
   \   000064                ; Setup parameters for call to function AT_CmdCmp
   \   000064   7C..         MOV       R4,#`?<Constant "I">` & 0xff
   \   000066   7D..         MOV       R5,#(`?<Constant "I">` >> 8) & 0xff
   \   000068   AA..         MOV       R2,?XSP + 0
   \   00006A   AB..         MOV       R3,?XSP + 1
   \   00006C   12....       LCALL     `??AT_CmdCmp::?relay`; Banked call to: AT_CmdCmp
   \   00006F   E9           MOV       A,R1
   \   000070   700C         JNZ       ??AT_HandleCMD_6
    409                AT_Cmd_ATI(cmd_ptr, msg_ptr);
   \   000072                ; Setup parameters for call to function AT_Cmd_ATI
   \   000072   EE           MOV       A,R6
   \   000073   FA           MOV       R2,A
   \   000074   EF           MOV       A,R7
   \   000075   FB           MOV       R3,A
   \   000076   A9..         MOV       R1,?V4
   \   000078   12....       LCALL     `??AT_Cmd_ATI::?relay`; Banked call to: AT_Cmd_ATI
   \   00007B   02....       LJMP      ??AT_HandleCMD_4 & 0xFFFF
    410              } else if (AT_CmdCmp(&cmdUnit, "Z") == 0) {
   \                     ??AT_HandleCMD_6:
   \   00007E                ; Setup parameters for call to function AT_CmdCmp
   \   00007E   7C..         MOV       R4,#`?<Constant "Z">` & 0xff
   \   000080   7D..         MOV       R5,#(`?<Constant "Z">` >> 8) & 0xff
   \   000082   AA..         MOV       R2,?XSP + 0
   \   000084   AB..         MOV       R3,?XSP + 1
   \   000086   12....       LCALL     `??AT_CmdCmp::?relay`; Banked call to: AT_CmdCmp
   \   000089   E9           MOV       A,R1
   \   00008A   700C         JNZ       ??AT_HandleCMD_7
    411                AT_DEBUG("\r\nSoftware Reset\r\n", sizeof("\r\nSoftware Reset\r\n"));
    412                AT_Cmd_ATZ(cmd_ptr, msg_ptr);
   \   00008C                ; Setup parameters for call to function AT_Cmd_ATZ
   \   00008C   EE           MOV       A,R6
   \   00008D   FA           MOV       R2,A
   \   00008E   EF           MOV       A,R7
   \   00008F   FB           MOV       R3,A
   \   000090   A9..         MOV       R1,?V4
   \   000092   12....       LCALL     `??AT_Cmd_ATZ::?relay`; Banked call to: AT_Cmd_ATZ
   \   000095   02....       LJMP      ??AT_HandleCMD_4 & 0xFFFF
    413              } else if (AT_CmdCmp(&cmdUnit, "F") == 0) {
   \                     ??AT_HandleCMD_7:
   \   000098                ; Setup parameters for call to function AT_CmdCmp
   \   000098   7C..         MOV       R4,#`?<Constant "F">` & 0xff
   \   00009A   7D..         MOV       R5,#(`?<Constant "F">` >> 8) & 0xff
   \   00009C   AA..         MOV       R2,?XSP + 0
   \   00009E   AB..         MOV       R3,?XSP + 1
   \   0000A0   12....       LCALL     `??AT_CmdCmp::?relay`; Banked call to: AT_CmdCmp
   \   0000A3   E9           MOV       A,R1
   \   0000A4   700C         JNZ       ??AT_HandleCMD_8
    414                AT_DEBUG("\r\nRestore Local Device's Factory Defaults\r\n", sizeof("\r\nRestore Local Device's Factory Defaults\r\n"));
    415                AT_Cmd_ATF(cmd_ptr, msg_ptr);
   \   0000A6                ; Setup parameters for call to function AT_Cmd_ATF
   \   0000A6   EE           MOV       A,R6
   \   0000A7   FA           MOV       R2,A
   \   0000A8   EF           MOV       A,R7
   \   0000A9   FB           MOV       R3,A
   \   0000AA   A9..         MOV       R1,?V4
   \   0000AC   12....       LCALL     `??AT_Cmd_ATF::?relay`; Banked call to: AT_Cmd_ATF
   \   0000AF   02....       LJMP      ??AT_HandleCMD_4 & 0xFFFF
    416              } else {
    417                AT_ERROR(AT_LACK_OPERATOR);
   \                     ??AT_HandleCMD_8:
   \   0000B2                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000B2   7A01         MOV       R2,#0x1
   \   0000B4   7922         MOV       R1,#0x22
   \   0000B6   02....       LJMP      ??AT_HandleCMD_9 & 0xFFFF
    418              }
    419            }
    420            else if (cmdUnit.symbol == '+') {
   \                     ??AT_HandleCMD_5:
   \   0000B9   642B         XRL       A,#0x2b
   \   0000BB   707C         JNZ       ??AT_HandleCMD_10
    421              for (i = 0; i < AT_CMD_SZ; i++) {
   \   0000BD   75..00       MOV       ?V0,#0x0
   \   0000C0   75..00       MOV       ?V1,#0x0
    422                if (AT_CmdCmp(&cmdUnit, (uint8*)AT_Cmd_Arr[i].AT_Cmd_str) == 0) {
   \                     ??AT_HandleCMD_11:
   \   0000C3   E5..         MOV       A,?V0
   \   0000C5   75F006       MOV       B,#0x6
   \   0000C8   A4           MUL       AB
   \   0000C9   F8           MOV       R0,A
   \   0000CA   AAF0         MOV       R2,B
   \   0000CC   75F006       MOV       B,#0x6
   \   0000CF   E5..         MOV       A,?V1
   \   0000D1   A4           MUL       AB
   \   0000D2   2A           ADD       A,R2
   \   0000D3   F9           MOV       R1,A
   \   0000D4   74..         MOV       A,#AT_Cmd_Arr & 0xff
   \   0000D6   28           ADD       A,R0
   \   0000D7   F8           MOV       R0,A
   \   0000D8   74..         MOV       A,#(AT_Cmd_Arr >> 8) & 0xff
   \   0000DA   39           ADDC      A,R1
   \   0000DB   88..         MOV       ?V2,R0
   \   0000DD   F5..         MOV       ?V3,A
   \   0000DF                ; Setup parameters for call to function AT_CmdCmp
   \   0000DF   8882         MOV       DPL,R0
   \   0000E1   F583         MOV       DPH,A
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   FC           MOV       R4,A
   \   0000E5   A3           INC       DPTR
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   FD           MOV       R5,A
   \   0000E8   AA..         MOV       R2,?XSP + 0
   \   0000EA   AB..         MOV       R3,?XSP + 1
   \   0000EC   12....       LCALL     `??AT_CmdCmp::?relay`; Banked call to: AT_CmdCmp
   \   0000EF   E9           MOV       A,R1
   \   0000F0   7016         JNZ       ??AT_HandleCMD_12
    423          #if AT_DEBUG_INF_SHOW
    424                  AT_NEXT_LINE();
    425                  AT_RESP(AT_Cmd_Arr[i].ATCmdDescription, strlen(AT_Cmd_Arr[i].ATCmdDescription));
    426          #endif
    427                  AT_Cmd_Arr[i].AT_CmdFn(cmd_ptr, msg_ptr);
   \   0000F2                ; Setup parameters for indirect call
   \   0000F2   EE           MOV       A,R6
   \   0000F3   FA           MOV       R2,A
   \   0000F4   EF           MOV       A,R7
   \   0000F5   FB           MOV       R3,A
   \   0000F6   A9..         MOV       R1,?V4
   \   0000F8   85..82       MOV       DPL,?V2
   \   0000FB   85..83       MOV       DPH,?V3
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000103   12....       LCALL     ?CALL_IND
    428                  break;
   \   000106   8011         SJMP      ??AT_HandleCMD_13
    429                }
    430              }
   \                     ??AT_HandleCMD_12:
   \   000108   05..         INC       ?V0
   \   00010A   E5..         MOV       A,?V0
   \   00010C   7002         JNZ       ??AT_HandleCMD_14
   \   00010E   05..         INC       ?V1
   \                     ??AT_HandleCMD_14:
   \   000110   C3           CLR       C
   \   000111   9425         SUBB      A,#0x25
   \   000113   E5..         MOV       A,?V1
   \   000115   9400         SUBB      A,#0x0
   \   000117   40AA         JC        ??AT_HandleCMD_11
    431              if (AT_CMD_SZ == i) {
   \                     ??AT_HandleCMD_13:
   \   000119   7425         MOV       A,#0x25
   \   00011B   65..         XRL       A,?V0
   \   00011D   45..         ORL       A,?V1
   \   00011F   701F         JNZ       ??AT_HandleCMD_4
    432                if (AT_CmdCmp(&cmdUnit, "") == 0) {
   \   000121                ; Setup parameters for call to function AT_CmdCmp
   \   000121   7C..         MOV       R4,#`?<Constant "">` & 0xff
   \   000123   7D..         MOV       R5,#(`?<Constant "">` >> 8) & 0xff
   \   000125   AA..         MOV       R2,?XSP + 0
   \   000127   AB..         MOV       R3,?XSP + 1
   \   000129   12....       LCALL     `??AT_CmdCmp::?relay`; Banked call to: AT_CmdCmp
   \   00012C   E9           MOV       A,R1
   \   00012D   7A01         MOV       R2,#0x1
   \   00012F   7004         JNZ       ??AT_HandleCMD_15
    433                  AT_ERROR(AT_LACK_CMD);
   \   000131                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000131   7903         MOV       R1,#0x3
   \   000133   8008         SJMP      ??AT_HandleCMD_9
    434                } else {
    435                  AT_ERROR(AT_UNKNOWN_CMD);
   \                     ??AT_HandleCMD_15:
   \   000135                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000135   7902         MOV       R1,#0x2
   \   000137   8004         SJMP      ??AT_HandleCMD_9
    436                }
    437              }
    438            }
    439            else {
    440              AT_ERROR(AT_INVALID_PARA);
   \                     ??AT_HandleCMD_10:
   \   000139                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000139   7A01         MOV       R2,#0x1
   \   00013B   7905         MOV       R1,#0x5
   \                     ??AT_HandleCMD_9:
   \   00013D   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
    441            }
    442          }
   \                     ??AT_HandleCMD_4:
   \   000140   7404         MOV       A,#0x4
   \   000142   12....       LCALL     ?DEALLOC_XSTACK8
   \   000145                REQUIRE ?Subroutine2
   \   000145                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F05         MOV       R7,#0x5
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   AA..         MOV       R2,?XSP + 0
   \   000002   AB..         MOV       R3,?XSP + 1
   \   000004                REQUIRE ??Subroutine188_0
   \   000004                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   \   000003   E9           MOV       A,R1
   \   000004   22           RET
    443          
    444          #if AT_FCS_VERIFY
    445          /***************************************************************************************************
    446           * @fn      AT_UartCalcFCS
    447           *
    448           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    449           *          Remember to NOT include Head fields, so start at the CMD field.
    450           *
    451           * @param   byte *msg_ptr - message pointer
    452           * @param   byte len - length (in bytes) of message
    453           *
    454           * @return  result byte
    455           ***************************************************************************************************/
    456          byte AT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
    457          {
    458            byte x;
    459            byte xorResult;
    460          
    461            xorResult = 0;
    462          
    463            for ( x = 0; x < len; x++, msg_ptr++ )
    464              xorResult = xorResult ^ *msg_ptr;
    465          
    466            return ( xorResult );
    467          }
    468          #endif
    469          
    470          /******************************************************************************
    471          * @fn      AT_HalUARTWrite
    472          *
    473          * @brief   Override HalUARTWrite function to write a buffer to the UART.
    474          *          Note: CALL HalUARTPoll() TO GET A FULL TEXT DISPLAY.
    475          *                AVOID TEST LOST.
    476          *
    477          * @param   port - UART port
    478          * @param   buf  - pointer to the buffer that will be written, not freed
    479          * @param   len  - length of the buffer
    480          *
    481          * @return  length of the buffer that was sent
    482          *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          uint16 AT_HalUARTWrite( uint8 port, uint8 *buf, uint16 len ) {
   \                     AT_HalUARTWrite:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    484            uint16 cnt = 0;
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
    485            if(len > 0 && len < AT_UART_TX_BUFF_MAX) {   // if the len is not checked, the system will fail. if len==0, the system will loop here all the time.
   \   000013   EC           MOV       A,R4
   \   000014   4F           ORL       A,R7
   \   000015   6033         JZ        ??AT_HalUARTWrite_0
   \   000017   C3           CLR       C
   \   000018   EC           MOV       A,R4
   \   000019   9464         SUBB      A,#0x64
   \   00001B   ED           MOV       A,R5
   \   00001C   9400         SUBB      A,#0x0
   \   00001E   502A         JNC       ??AT_HalUARTWrite_0
   \   000020   8014         SJMP      ??AT_HalUARTWrite_1
    486              while ((cnt = HalUARTWrite(port, buf, len)) < len) {
    487                buf += cnt;
   \                     ??AT_HalUARTWrite_2:
   \   000022   E5..         MOV       A,?V0
   \   000024   2A           ADD       A,R2
   \   000025   F5..         MOV       ?V0,A
   \   000027   E5..         MOV       A,?V1
   \   000029   3B           ADDC      A,R3
   \   00002A   F5..         MOV       ?V1,A
    488                len -= cnt;
   \   00002C   C3           CLR       C
   \   00002D   EE           MOV       A,R6
   \   00002E   9A           SUBB      A,R2
   \   00002F   FE           MOV       R6,A
   \   000030   EF           MOV       A,R7
   \   000031   9B           SUBB      A,R3
   \   000032   FF           MOV       R7,A
    489                HalUARTPoll();//wait until the text is sent successfully
   \   000033                ; Setup parameters for call to function HalUARTPoll
   \   000033   12....       LCALL     `??HalUARTPoll::?relay`; Banked call to: HalUARTPoll
    490                              //when using Z-Stack 2.51a, we have to set the HAL_UART_ISR=1 and HAL_UART_DMA=0 compile flags to enable ISR mode
    491                              //maybe the bug of the Z-Stack, the DMA mode does work with this
    492                              //if using Z-Stack 2.3.0, both the DMA mode and ISR mode are OK
    493                //while(1);
    494              }
   \                     ??AT_HalUARTWrite_1:
   \   000036                ; Setup parameters for call to function HalUARTWrite
   \   000036   EE           MOV       A,R6
   \   000037   FC           MOV       R4,A
   \   000038   EF           MOV       A,R7
   \   000039   FD           MOV       R5,A
   \   00003A   AA..         MOV       R2,?V0
   \   00003C   AB..         MOV       R3,?V1
   \   00003E   A9..         MOV       R1,?V2
   \   000040   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000043   C3           CLR       C
   \   000044   EA           MOV       A,R2
   \   000045   9E           SUBB      A,R6
   \   000046   EB           MOV       A,R3
   \   000047   9F           SUBB      A,R7
   \   000048   40D8         JC        ??AT_HalUARTWrite_2
    495            }
    496            return cnt;
   \                     ??AT_HalUARTWrite_0:
   \   00004A   02....       LJMP      ??Subroutine177_0 & 0xFFFF
    497          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    498          
    499          /***************************************************************************************************
    500           * @fn      getLength
    501           *
    502           * @brief   Get the length of a string (end by '\0')
    503           *                         or a command (end by '\r')
    504           *
    505           * @param   byte   *msg_ptr - message pointer
    506           * @param   uint8  fn - select different functions
    507           *                       0x01 - string    0x02 - command
    508           *
    509           * @return  length
    510           ***************************************************************************************************/
    511          uint8 getLength( uint8 *msg_ptr, uint8 fn )
    512          {
    513            uint8 i;
    514            if (fn == 0x01) {
    515              for (i = 0; i < 255; i++) {
    516                if (msg_ptr[i] == '\0') break;
    517              }
    518            } else {
    519              for (i = 0; i < 255; i++) {
    520                if (msg_ptr[i] == '\r') break;
    521              }
    522            }
    523          
    524            return i;
    525          }
    526          
    527          /***************************************************************************************************
    528           * @fn      AT_get_next_cmdUnit
    529           *
    530           * @brief   The command have servel unit, this funciton get the next unit
    531           *          and save it in cmdUnit(type of AT_CmdUnit, see in AT_UART.h)
    532           *
    533           * @param   AT_CmdUnit* cmdUnit - the place to save the cmd unit
    534           * @param   uint8 start_point   - the point show the place we start scan the command
    535           * @param   uint8* msg          - the command to scan
    536           *
    537           * @return  start_point
    538           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    539          uint8 AT_get_next_cmdUnit( AT_CmdUnit* cmdUnit, uint8 start_point, uint8* msg )
   \                     AT_get_next_cmdUnit:
    540          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   E9           MOV       A,R1
   \   00000A   FA           MOV       R2,A
    541            cmdUnit->unitLen=0;
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   A3           INC       DPTR
   \   000010   8582..       MOV       ?V0,DPL
   \   000013   8583..       MOV       ?V1,DPH
   \   000016   E4           CLR       A
   \   000017   F0           MOVX      @DPTR,A
   \   000018   8001         SJMP      ??AT_get_next_cmdUnit_0
    542            for(;;start_point++){
   \                     ??AT_get_next_cmdUnit_1:
   \   00001A   0A           INC       R2
    543              if(msg[start_point] == ' '|| msg[start_point] == '\0'){
   \                     ??AT_get_next_cmdUnit_0:
   \   00001B   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00001E   60FA         JZ        ??AT_get_next_cmdUnit_1
   \   000020   E8           MOV       A,R0
   \   000021   60F7         JZ        ??AT_get_next_cmdUnit_1
    544                continue;
    545              }
    546              else if((msg[start_point]<='z' && msg[start_point]>='a') ||
    547                 (msg[start_point]<='Z' && msg[start_point]>='A') ||
    548                 (msg[start_point]<='9' && msg[start_point]>='0')){
   \   000023   F8           MOV       R0,A
   \   000024   749F         MOV       A,#-0x61
   \   000026   28           ADD       A,R0
   \   000027   C3           CLR       C
   \   000028   941A         SUBB      A,#0x1a
   \   00002A   4010         JC        ??AT_get_next_cmdUnit_2
   \   00002C   74BF         MOV       A,#-0x41
   \   00002E   28           ADD       A,R0
   \   00002F   C3           CLR       C
   \   000030   941A         SUBB      A,#0x1a
   \   000032   4008         JC        ??AT_get_next_cmdUnit_2
   \   000034   74D0         MOV       A,#-0x30
   \   000036   28           ADD       A,R0
   \   000037   C3           CLR       C
   \   000038   940A         SUBB      A,#0xa
   \   00003A   5008         JNC       ??AT_get_next_cmdUnit_3
    549                 cmdUnit->symbol ='\0';                 //indicate no operator
   \                     ??AT_get_next_cmdUnit_2:
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8B83         MOV       DPH,R3
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
    550                 break;
   \   000042   8014         SJMP      ??AT_get_next_cmdUnit_4
    551              }
    552              else if(msg[start_point] == '\r'){        //indicate the end of one command
   \                     ??AT_get_next_cmdUnit_3:
   \   000044   740D         MOV       A,#0xd
   \   000046   68           XRL       A,R0
   \   000047   7008         JNZ       ??AT_get_next_cmdUnit_5
    553                cmdUnit->symbol =msg[start_point];
   \   000049   E8           MOV       A,R0
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   F0           MOVX      @DPTR,A
    554                return start_point;
   \   00004F   8053         SJMP      ??AT_get_next_cmdUnit_6
    555              }
    556              else {
    557                cmdUnit->symbol =msg[start_point];
   \                     ??AT_get_next_cmdUnit_5:
   \   000051   E8           MOV       A,R0
   \   000052   8E82         MOV       DPL,R6
   \   000054   8B83         MOV       DPH,R3
   \   000056   F0           MOVX      @DPTR,A
    558                start_point++;
    559                break;
    560              }
    561            }
    562          
    563            for(;;start_point++){
    564              if(msg[start_point] == ' '|| msg[start_point] == '\0'){
    565                continue;
   \                     ??AT_get_next_cmdUnit_7:
   \   000057   0A           INC       R2
   \                     ??AT_get_next_cmdUnit_4:
   \   000058   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00005B   60FA         JZ        ??AT_get_next_cmdUnit_7
   \   00005D   E8           MOV       A,R0
   \   00005E   60F7         JZ        ??AT_get_next_cmdUnit_7
    566              }
    567              else while((msg[start_point]<='z' && msg[start_point]>='a') ||
    568                 (msg[start_point]<='Z' && msg[start_point]>='A') ||
    569                 (msg[start_point]<='9' && msg[start_point]>='0') )   {
   \                     ??AT_get_next_cmdUnit_8:
   \   000060   EA           MOV       A,R2
   \   000061   F8           MOV       R0,A
   \   000062   EC           MOV       A,R4
   \   000063   28           ADD       A,R0
   \   000064   F8           MOV       R0,A
   \   000065   E4           CLR       A
   \   000066   3D           ADDC      A,R5
   \   000067   F9           MOV       R1,A
   \   000068   8882         MOV       DPL,R0
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FB           MOV       R3,A
   \   00006E   749F         MOV       A,#-0x61
   \   000070   2B           ADD       A,R3
   \   000071   C3           CLR       C
   \   000072   941A         SUBB      A,#0x1a
   \   000074   4010         JC        ??AT_get_next_cmdUnit_9
   \   000076   74BF         MOV       A,#-0x41
   \   000078   2B           ADD       A,R3
   \   000079   C3           CLR       C
   \   00007A   941A         SUBB      A,#0x1a
   \   00007C   4008         JC        ??AT_get_next_cmdUnit_9
   \   00007E   74D0         MOV       A,#-0x30
   \   000080   2B           ADD       A,R3
   \   000081   C3           CLR       C
   \   000082   940A         SUBB      A,#0xa
   \   000084   501E         JNC       ??AT_get_next_cmdUnit_6
    570                 if(cmdUnit->unitLen==0) cmdUnit->unit = &msg[start_point];
   \                     ??AT_get_next_cmdUnit_9:
   \   000086   85..82       MOV       DPL,?V0
   \   000089   85..83       MOV       DPH,?V1
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   7009         JNZ       ??CrossCallReturnLabel_12
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   12....       LCALL     ?Subroutine17 & 0xFFFF
    571                 cmdUnit->unitLen++;
   \                     ??CrossCallReturnLabel_12:
   \   000098   85..82       MOV       DPL,?V0
   \   00009B   85..83       MOV       DPH,?V1
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   04           INC       A
   \   0000A0   F0           MOVX      @DPTR,A
    572                 start_point++;
   \   0000A1   0A           INC       R2
   \   0000A2   80BC         SJMP      ??AT_get_next_cmdUnit_8
    573              }
    574              return start_point;
   \                     ??AT_get_next_cmdUnit_6:
   \   0000A4   EA           MOV       A,R2
   \   0000A5   F9           MOV       R1,A
   \   0000A6   02....       LJMP      ??Subroutine162_0 & 0xFFFF
    575            }
    576          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   EA           MOV       A,R2
   \   000001   F8           MOV       R0,A
   \   000002   EC           MOV       A,R4
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   7420         MOV       A,#0x20
   \   00000E   68           XRL       A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    577          
    578          /***************************************************************************************************
    579           * @fn      AT_UpperCaseCmd
    580           *
    581           * @brief   Upper case the command
    582           *
    583           * @param   AT_CmdUnit* cmdUnit - the cmd unit need to be upper cased
    584           *
    585           * @return  None
    586           ***************************************************************************************************/
    587          void AT_UpperCaseCmd( AT_CmdUnit *cmdUnit )
    588          {
    589            uint8 i;
    590            for (i = 0; i < cmdUnit->unitLen; i++) {
    591              if (cmdUnit->unit[i] <= 'z' && cmdUnit->unit[i] >= 'a') {
    592                cmdUnit->unit[i] += ('A' - 'a');
    593              }
    594            }
    595          }
    596          
    597          /***************************************************************************************************
    598           * @fn      AT_CmdCmp
    599           *
    600           * @brief   Compare with str2, if equal, return 0; else return cmdUnit.unit[i] - str2[i]
    601           *
    602           * @param   AT_CmdUnit* cmdUnit - the cmd unit need to be upper cased
    603           * @param   uint8* str2 - the string to compare with
    604           *
    605           * @return  int8
    606           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    607          int8 AT_CmdCmp( AT_CmdUnit* cmdUnit, uint8* str2 )
   \                     AT_CmdCmp:
    608          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    609            int i;
    610            for(i = 0; i < cmdUnit->unitLen; i++) {
   \   000005   7800         MOV       R0,#0x0
   \   000007   7900         MOV       R1,#0x0
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FE           MOV       R6,A
   \   000010   8005         SJMP      ??AT_CmdCmp_0
   \                     ??AT_CmdCmp_1:
   \   000012   08           INC       R0
   \   000013   E8           MOV       A,R0
   \   000014   7001         JNZ       ??AT_CmdCmp_0
   \   000016   09           INC       R1
   \                     ??AT_CmdCmp_0:
   \   000017   C3           CLR       C
   \   000018   E8           MOV       A,R0
   \   000019   9E           SUBB      A,R6
   \   00001A   E9           MOV       A,R1
   \   00001B   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00001E   502B         JNC       ??AT_CmdCmp_2
    611              if (cmdUnit->unit[i] != str2[i]) {
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   28           ADD       A,R0
   \   000028   F5..         MOV       ?V0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   39           ADDC      A,R1
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V1,A
   \   000035   EC           MOV       A,R4
   \   000036   28           ADD       A,R0
   \   000037   F582         MOV       DPL,A
   \   000039   ED           MOV       A,R5
   \   00003A   39           ADDC      A,R1
   \   00003B   F583         MOV       DPH,A
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F5..         MOV       ?V0,A
   \   000040   65..         XRL       A,?V1
   \   000042   60CE         JZ        ??AT_CmdCmp_1
    612                return cmdUnit->unit[i] - str2[i];
   \   000044   E5..         MOV       A,?V1
   \   000046   C3           CLR       C
   \   000047   95..         SUBB      A,?V0
   \   000049   800B         SJMP      ??AT_CmdCmp_3
    613              }
    614            }
    615            return 0 - str2[cmdUnit->unitLen];
   \                     ??AT_CmdCmp_2:
   \   00004B   EC           MOV       A,R4
   \   00004C   2E           ADD       A,R6
   \   00004D   F582         MOV       DPL,A
   \   00004F   E4           CLR       A
   \   000050   3D           ADDC      A,R5
   \   000051   F583         MOV       DPH,A
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F4           CPL       A
   \   000055   04           INC       A
   \                     ??AT_CmdCmp_3:
   \   000056   F9           MOV       R1,A
   \   000057   02....       LJMP      ??Subroutine162_0 & 0xFFFF
    616          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   9400         SUBB      A,#0x0
   \   000002   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000004   65D0         XRL       A,PSW
   \   000006   33           RLC       A
   \   000007   22           RET
    617          
    618          /***************************************************************************************************
    619           * @fn      AT_UARTWriteErrMsg
    620           *
    621           * @brief   Send error messages
    622           *          Respose :
    623           *                    ERROR:<error code>
    624           *
    625           *
    626           * @param   uint8 errCode - indicate different error
    627           * @param   uint8 fn - type of error
    628           *
    629           * @return  None
    630           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void AT_UARTWriteErrMsg( uint8 errCode, uint8 fn )
   \                     AT_UARTWriteErrMsg:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 46
   \   000005   74D2         MOV       A,#-0x2e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
    633            if (fn == 1) {
   \   00000C   740F         MOV       A,#0xf
   \   00000E   59           ANL       A,R1
   \   00000F   FA           MOV       R2,A
   \   000010   E9           MOV       A,R1
   \   000011   C4           SWAP      A
   \   000012   540F         ANL       A,#0xf
   \   000014   FB           MOV       R3,A
   \   000015   7401         MOV       A,#0x1
   \   000017   6E           XRL       A,R6
   \   000018   7065         JNZ       ??AT_UARTWriteErrMsg_0
    634              uint8* errMsg_t = "\r\nERROR:XX\r\n";
    635              uint8 errMsg[sizeof("\r\nERROR:XX\r\n")];
    636              uint8 ch;
    637              uint8* pStr = &errMsg[sizeof("\r\nERROR:")-1];
    638              for (int i = 0; i < sizeof(errMsg); i++) {
   \   00001A   7800         MOV       R0,#0x0
   \   00001C   7900         MOV       R1,#0x0
    639                errMsg[i] = errMsg_t[i];
   \                     ??AT_UARTWriteErrMsg_1:
   \   00001E   74..         MOV       A,#`?<Constant "\\r\\nERROR:XX\\r\\n">` & 0xff
   \   000020   28           ADD       A,R0
   \   000021   F582         MOV       DPL,A
   \   000023   74..         MOV       A,#(`?<Constant "\\r\\nERROR:XX\\r\\n">` >> 8) & 0xff
   \   000025   39           ADDC      A,R1
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   C0E0         PUSH      A
   \   00002B   85..82       MOV       DPL,?XSP + 0
   \   00002E   85..83       MOV       DPH,?XSP + 1
   \   000031   12....       LCALL     ?Subroutine55 & 0xFFFF
    640              }
   \                     ??CrossCallReturnLabel_114:
   \   000034   D0E0         POP       A
   \   000036   F0           MOVX      @DPTR,A
   \   000037   08           INC       R0
   \   000038   E8           MOV       A,R0
   \   000039   7001         JNZ       ??AT_UARTWriteErrMsg_2
   \   00003B   09           INC       R1
   \                     ??AT_UARTWriteErrMsg_2:
   \   00003C   C3           CLR       C
   \   00003D   940D         SUBB      A,#0xd
   \   00003F   E9           MOV       A,R1
   \   000040   9400         SUBB      A,#0x0
   \   000042   40DA         JC        ??AT_UARTWriteErrMsg_1
    641              ch = (errCode >> 4) & 0x0F;
   \   000044   EB           MOV       A,R3
    642              *pStr++ = ch + ((ch < 10) ? '0' : '7');
   \   000045   C3           CLR       C
   \   000046   940A         SUBB      A,#0xa
   \   000048   5004         JNC       ??AT_UARTWriteErrMsg_3
   \   00004A   7830         MOV       R0,#0x30
   \   00004C   8002         SJMP      ??AT_UARTWriteErrMsg_4
   \                     ??AT_UARTWriteErrMsg_3:
   \   00004E   7837         MOV       R0,#0x37
   \                     ??AT_UARTWriteErrMsg_4:
   \   000050   EB           MOV       A,R3
   \   000051   28           ADD       A,R0
   \   000052   C0E0         PUSH      A
   \   000054   7408         MOV       A,#0x8
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   D0E0         POP       A
   \   00005B   F0           MOVX      @DPTR,A
    643              ch = errCode & 0x0F;
   \   00005C   EA           MOV       A,R2
    644              *pStr++ = ch + ((ch < 10) ? '0' : '7');
   \   00005D   C3           CLR       C
   \   00005E   940A         SUBB      A,#0xa
   \   000060   5004         JNC       ??AT_UARTWriteErrMsg_5
   \   000062   7830         MOV       R0,#0x30
   \   000064   8002         SJMP      ??AT_UARTWriteErrMsg_6
   \                     ??AT_UARTWriteErrMsg_5:
   \   000066   7837         MOV       R0,#0x37
   \                     ??AT_UARTWriteErrMsg_6:
   \   000068   EA           MOV       A,R2
   \   000069   28           ADD       A,R0
   \   00006A   C0E0         PUSH      A
   \   00006C   7409         MOV       A,#0x9
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   D0E0         POP       A
   \   000073   F0           MOVX      @DPTR,A
    645              AT_RESP(errMsg, sizeof("\r\nERROR:XX\r\n"));
   \   000074                ; Setup parameters for call to function AT_Uart0_Send
   \   000074   7C0D         MOV       R4,#0xd
   \   000076   7D00         MOV       R5,#0x0
   \   000078   AA..         MOV       R2,?XSP + 0
   \   00007A   AB..         MOV       R3,?XSP + 1
   \   00007C   02....       LJMP      ??AT_UARTWriteErrMsg_7 & 0xFFFF
    646            } else if (fn == 2) {
   \                     ??AT_UARTWriteErrMsg_0:
   \   00007F   7402         MOV       A,#0x2
   \   000081   6E           XRL       A,R6
   \   000082   7061         JNZ       ??AT_UARTWriteErrMsg_8
    647              uint8* errMsg_t = "\r\nSENDERROR:XX\r\n";
    648              uint8 errMsg[sizeof("\r\nSENDERROR:XX\r\n")];
    649              uint8 ch;
    650              uint8* pStr = &errMsg[sizeof("\r\nSENDERROR:")-1];
    651              for (int i = 0; i < sizeof(errMsg); i++) {
   \   000084   7800         MOV       R0,#0x0
   \   000086   7900         MOV       R1,#0x0
    652                errMsg[i] = errMsg_t[i];
   \                     ??AT_UARTWriteErrMsg_9:
   \   000088   74..         MOV       A,#`?<Constant "\\r\\nSENDERROR:XX\\r\\n">` & 0xff
   \   00008A   28           ADD       A,R0
   \   00008B   F582         MOV       DPL,A
   \   00008D   74..         MOV       A,#(`?<Constant "\\r\\nSENDERROR:XX\\r\\n">` >> 8) & 0xff
   \   00008F   39           ADDC      A,R1
   \   000090   F583         MOV       DPH,A
   \   000092   E0           MOVX      A,@DPTR
   \   000093   C0E0         PUSH      A
   \   000095   741D         MOV       A,#0x1d
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine55 & 0xFFFF
    653              }
   \                     ??CrossCallReturnLabel_115:
   \   00009D   D0E0         POP       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   08           INC       R0
   \   0000A1   E8           MOV       A,R0
   \   0000A2   7001         JNZ       ??AT_UARTWriteErrMsg_10
   \   0000A4   09           INC       R1
   \                     ??AT_UARTWriteErrMsg_10:
   \   0000A5   C3           CLR       C
   \   0000A6   9411         SUBB      A,#0x11
   \   0000A8   E9           MOV       A,R1
   \   0000A9   9400         SUBB      A,#0x0
   \   0000AB   40DB         JC        ??AT_UARTWriteErrMsg_9
    654              ch = (errCode >> 4) & 0x0F;
    655              *pStr++ = ch + ((ch < 10) ? '0' : '7');
   \   0000AD   EB           MOV       A,R3
   \   0000AE   C3           CLR       C
   \   0000AF   940A         SUBB      A,#0xa
   \   0000B1   5004         JNC       ??AT_UARTWriteErrMsg_11
   \   0000B3   7830         MOV       R0,#0x30
   \   0000B5   8002         SJMP      ??AT_UARTWriteErrMsg_12
   \                     ??AT_UARTWriteErrMsg_11:
   \   0000B7   7837         MOV       R0,#0x37
   \                     ??AT_UARTWriteErrMsg_12:
   \   0000B9   EB           MOV       A,R3
   \   0000BA   28           ADD       A,R0
   \   0000BB   C0E0         PUSH      A
   \   0000BD   7429         MOV       A,#0x29
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   D0E0         POP       A
   \   0000C4   F0           MOVX      @DPTR,A
    656              ch = errCode & 0x0F;
    657              *pStr++ = ch + ((ch < 10) ? '0' : '7');
   \   0000C5   EA           MOV       A,R2
   \   0000C6   C3           CLR       C
   \   0000C7   940A         SUBB      A,#0xa
   \   0000C9   5004         JNC       ??AT_UARTWriteErrMsg_13
   \   0000CB   7830         MOV       R0,#0x30
   \   0000CD   8002         SJMP      ??AT_UARTWriteErrMsg_14
   \                     ??AT_UARTWriteErrMsg_13:
   \   0000CF   7837         MOV       R0,#0x37
   \                     ??AT_UARTWriteErrMsg_14:
   \   0000D1   EA           MOV       A,R2
   \   0000D2   28           ADD       A,R0
   \   0000D3   C0E0         PUSH      A
   \   0000D5   742A         MOV       A,#0x2a
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   D0E0         POP       A
   \   0000DC   F0           MOVX      @DPTR,A
    658              AT_RESP(errMsg, sizeof("\r\nSENDERROR:XX\r\n"));
   \   0000DD                ; Setup parameters for call to function AT_Uart0_Send
   \   0000DD   7C11         MOV       R4,#0x11
   \   0000DF   7D00         MOV       R5,#0x0
   \   0000E1   741D         MOV       A,#0x1d
   \   0000E3   8064         SJMP      ??AT_UARTWriteErrMsg_15
    659            } else if (fn == 3) {
   \                     ??AT_UARTWriteErrMsg_8:
   \   0000E5   7403         MOV       A,#0x3
   \   0000E7   6E           XRL       A,R6
   \   0000E8   7065         JNZ       ??AT_UARTWriteErrMsg_16
    660              uint8* errMsg_t = "\r\nZDOERROR:XX\r\n";
    661              uint8 errMsg[sizeof("\r\nZDOERROR:XX\r\n")];
    662              uint8 ch;
    663              uint8* pStr = &errMsg[sizeof("\r\nZDOERROR:")-1];
    664              for (int i = 0; i < sizeof(errMsg); i++) {
   \   0000EA   7800         MOV       R0,#0x0
   \   0000EC   7900         MOV       R1,#0x0
    665                errMsg[i] = errMsg_t[i];
   \                     ??AT_UARTWriteErrMsg_17:
   \   0000EE   74..         MOV       A,#`?<Constant "\\r\\nZDOERROR:XX\\r\\n">` & 0xff
   \   0000F0   28           ADD       A,R0
   \   0000F1   F582         MOV       DPL,A
   \   0000F3   74..         MOV       A,#(`?<Constant "\\r\\nZDOERROR:XX\\r\\n">` >> 8) & 0xff
   \   0000F5   39           ADDC      A,R1
   \   0000F6   F583         MOV       DPH,A
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   C0E0         PUSH      A
   \   0000FB   740D         MOV       A,#0xd
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   12....       LCALL     ?Subroutine55 & 0xFFFF
    666              }
   \                     ??CrossCallReturnLabel_116:
   \   000103   D0E0         POP       A
   \   000105   F0           MOVX      @DPTR,A
   \   000106   08           INC       R0
   \   000107   E8           MOV       A,R0
   \   000108   7001         JNZ       ??AT_UARTWriteErrMsg_18
   \   00010A   09           INC       R1
   \                     ??AT_UARTWriteErrMsg_18:
   \   00010B   C3           CLR       C
   \   00010C   9410         SUBB      A,#0x10
   \   00010E   E9           MOV       A,R1
   \   00010F   9400         SUBB      A,#0x0
   \   000111   40DB         JC        ??AT_UARTWriteErrMsg_17
    667              ch = (errCode >> 4) & 0x0F;
    668              *pStr++ = ch + ((ch < 10) ? '0' : '7');
   \   000113   EB           MOV       A,R3
   \   000114   C3           CLR       C
   \   000115   940A         SUBB      A,#0xa
   \   000117   5004         JNC       ??AT_UARTWriteErrMsg_19
   \   000119   7830         MOV       R0,#0x30
   \   00011B   8002         SJMP      ??AT_UARTWriteErrMsg_20
   \                     ??AT_UARTWriteErrMsg_19:
   \   00011D   7837         MOV       R0,#0x37
   \                     ??AT_UARTWriteErrMsg_20:
   \   00011F   EB           MOV       A,R3
   \   000120   28           ADD       A,R0
   \   000121   C0E0         PUSH      A
   \   000123   7418         MOV       A,#0x18
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   D0E0         POP       A
   \   00012A   F0           MOVX      @DPTR,A
    669              ch = errCode & 0x0F;
    670              *pStr++ = ch + ((ch < 10) ? '0' : '7');
   \   00012B   EA           MOV       A,R2
   \   00012C   C3           CLR       C
   \   00012D   940A         SUBB      A,#0xa
   \   00012F   5004         JNC       ??AT_UARTWriteErrMsg_21
   \   000131   7830         MOV       R0,#0x30
   \   000133   8002         SJMP      ??AT_UARTWriteErrMsg_22
   \                     ??AT_UARTWriteErrMsg_21:
   \   000135   7837         MOV       R0,#0x37
   \                     ??AT_UARTWriteErrMsg_22:
   \   000137   EA           MOV       A,R2
   \   000138   28           ADD       A,R0
   \   000139   C0E0         PUSH      A
   \   00013B   7419         MOV       A,#0x19
   \   00013D   12....       LCALL     ?XSTACK_DISP0_8
   \   000140   D0E0         POP       A
   \   000142   F0           MOVX      @DPTR,A
    671              AT_RESP(errMsg, sizeof("\r\nZDOERROR:XX\r\n"));
   \   000143                ; Setup parameters for call to function AT_Uart0_Send
   \   000143   7C10         MOV       R4,#0x10
   \   000145   7D00         MOV       R5,#0x0
   \   000147   740D         MOV       A,#0xd
   \                     ??AT_UARTWriteErrMsg_15:
   \   000149   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??AT_UARTWriteErrMsg_7:
   \   00014C   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
    672            }
    673          }
   \                     ??AT_UARTWriteErrMsg_16:
   \   00014F   742E         MOV       A,#0x2e
   \   000151   12....       LCALL     ?DEALLOC_XSTACK8
   \   000154   7F03         MOV       R7,#0x3
   \   000156   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET
    674          
    675          /***************************************************************************************************
    676           * @fn      AT_GetIEEEAddrStr
    677           *
    678           * @brief   Tool Functions
    679           *          Get the IEEE address of the device
    680           *
    681           * @param   uint8* pIeeeAddr - the pointer of IEEE address
    682           * @param   uint8* pStr      - store the IEEE address
    683           *
    684           * @return  None
    685           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          void AT_GetIEEEAddrStr( uint8* pIeeeAddr, uint8* pStr )
   \                     AT_GetIEEEAddrStr:
    687          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    688            uint8 i;
    689            uint8 *xad = pIeeeAddr + Z_EXTADDR_LEN - 1;
   \   000005   EA           MOV       A,R2
   \   000006   2407         ADD       A,#0x7
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
    690          
    691            for (i = 0; i < 16; xad--)
   \   00000C   75..00       MOV       ?V0,#0x0
    692            {
    693              uint8 ch;
    694              ch = (*xad >> 4) & 0x0F;
   \                     ??AT_GetIEEEAddrStr_0:
   \   00000F   8882         MOV       DPL,R0
   \   000011   8983         MOV       DPH,R1
   \   000013   E0           MOVX      A,@DPTR
   \   000014   C4           SWAP      A
   \   000015   540F         ANL       A,#0xf
   \   000017   FE           MOV       R6,A
    695              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
   \   000018   EC           MOV       A,R4
   \   000019   FA           MOV       R2,A
   \   00001A   ED           MOV       A,R5
   \   00001B   FB           MOV       R3,A
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   F583         MOV       DPH,A
   \   000020   A3           INC       DPTR
   \   000021   AC82         MOV       R4,DPL
   \   000023   AD83         MOV       R5,DPH
   \   000025   EE           MOV       A,R6
   \   000026   C3           CLR       C
   \   000027   940A         SUBB      A,#0xa
   \   000029   5004         JNC       ??AT_GetIEEEAddrStr_1
   \   00002B   7F30         MOV       R7,#0x30
   \   00002D   8002         SJMP      ??AT_GetIEEEAddrStr_2
   \                     ??AT_GetIEEEAddrStr_1:
   \   00002F   7F37         MOV       R7,#0x37
   \                     ??AT_GetIEEEAddrStr_2:
   \   000031   12....       LCALL     ?Subroutine83 & 0xFFFF
    696              i++;
    697              ch = *xad & 0x0F;
   \                     ??CrossCallReturnLabel_162:
   \   000034   8882         MOV       DPL,R0
   \   000036   8983         MOV       DPH,R1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   540F         ANL       A,#0xf
   \   00003B   FE           MOV       R6,A
    698              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
   \   00003C   EC           MOV       A,R4
   \   00003D   FA           MOV       R2,A
   \   00003E   ED           MOV       A,R5
   \   00003F   FB           MOV       R3,A
   \   000040   8C82         MOV       DPL,R4
   \   000042   F583         MOV       DPH,A
   \   000044   A3           INC       DPTR
   \   000045   0C           INC       R4
   \   000046   AD83         MOV       R5,DPH
   \   000048   EE           MOV       A,R6
   \   000049   C3           CLR       C
   \   00004A   940A         SUBB      A,#0xa
   \   00004C   5004         JNC       ??AT_GetIEEEAddrStr_3
   \   00004E   7F30         MOV       R7,#0x30
   \   000050   8002         SJMP      ??AT_GetIEEEAddrStr_4
   \                     ??AT_GetIEEEAddrStr_3:
   \   000052   7F37         MOV       R7,#0x37
   \                     ??AT_GetIEEEAddrStr_4:
   \   000054   12....       LCALL     ?Subroutine83 & 0xFFFF
    699              i++;
    700            }
   \                     ??CrossCallReturnLabel_163:
   \   000057   E8           MOV       A,R0
   \   000058   24FF         ADD       A,#-0x1
   \   00005A   18           DEC       R0
   \   00005B   E9           MOV       A,R1
   \   00005C   34FF         ADDC      A,#-0x1
   \   00005E   F9           MOV       R1,A
   \   00005F   E5..         MOV       A,?V0
   \   000061   C3           CLR       C
   \   000062   9410         SUBB      A,#0x10
   \   000064   40A9         JC        ??AT_GetIEEEAddrStr_0
    701          }
   \   000066   02....       LJMP      ??Subroutine157_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   EE           MOV       A,R6
   \   000001   2F           ADD       A,R7
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   F0           MOVX      @DPTR,A
   \   000007   05..         INC       ?V0
   \   000009   22           RET
    702          
    703          /***************************************************************************************************
    704           * @fn      AT_Int8toChar
    705           *
    706           * @brief   Tool Functions
    707           *          Convert a byte to a string
    708           *
    709           * @param   uint8  pbyte - the byte to be converted
    710           * @param   uint8* pStr  - store the new character
    711           *
    712           * @return  None
    713           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    714          void AT_Int8toChar( uint8 pbyte, uint8* str )
   \                     AT_Int8toChar:
    715          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    716            str[1] = pbyte%16 < 10 ? pbyte%16+'0' : (pbyte%16-10)+'A';
   \   000004   740F         MOV       A,#0xf
   \   000006   59           ANL       A,R1
   \   000007   F8           MOV       R0,A
   \   000008   C3           CLR       C
   \   000009   940A         SUBB      A,#0xa
   \   00000B   5004         JNC       ??AT_Int8toChar_0
   \   00000D   7430         MOV       A,#0x30
   \   00000F   8002         SJMP      ??AT_Int8toChar_1
   \                     ??AT_Int8toChar_0:
   \   000011   7437         MOV       A,#0x37
   \                     ??AT_Int8toChar_1:
   \   000013   28           ADD       A,R0
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   A3           INC       DPTR
   \   000019   F0           MOVX      @DPTR,A
    717            str[0] = pbyte/16 < 10 ? pbyte/16+'0' : (pbyte/16-10)+'A';
   \   00001A   E9           MOV       A,R1
   \   00001B   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00001E   5004         JNC       ??AT_Int8toChar_2
   \   000020   7430         MOV       A,#0x30
   \   000022   8002         SJMP      ??AT_Int8toChar_3
   \                     ??AT_Int8toChar_2:
   \   000024   7437         MOV       A,#0x37
   \                     ??AT_Int8toChar_3:
   \   000026   28           ADD       A,R0
   \   000027   F8           MOV       R0,A
   \   000028   E8           MOV       A,R0
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   F0           MOVX      @DPTR,A
    718          }
   \   00002E   D083         POP       DPH
   \   000030   D082         POP       DPL
   \   000032   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   C4           SWAP      A
   \   000001                REQUIRE ??Subroutine145_0
   \   000001                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   540F         ANL       A,#0xf
   \   000002   F8           MOV       R0,A
   \   000003   940A         SUBB      A,#0xa
   \   000005   22           RET
    719          
    720          /***************************************************************************************************
    721           * @fn      AT_Int8toChar
    722           *
    723           * @brief   Tool Functions
    724           *          Convert a word to a string
    725           *
    726           * @param   uint8  pWord - the word to be converted
    727           * @param   uint8* pStr  - store the new character
    728           *
    729           * @return  None
    730           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          void AT_Int16toChar( uint16 pWord, uint8* str )
   \                     AT_Int16toChar:
    732          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    733            uint16 ch = pWord >> 8;
   \   000005   EB           MOV       A,R3
    734            str[1] = ch%16 < 10 ? ch%16+'0' : (ch%16-10)+'A';
   \   000006   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000009   5004         JNC       ??AT_Int16toChar_0
   \   00000B   7430         MOV       A,#0x30
   \   00000D   8002         SJMP      ??AT_Int16toChar_1
   \                     ??AT_Int16toChar_0:
   \   00000F   7437         MOV       A,#0x37
   \                     ??AT_Int16toChar_1:
   \   000011   2E           ADD       A,R6
   \   000012   8C82         MOV       DPL,R4
   \   000014   8D83         MOV       DPH,R5
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    735            str[0] = ch/16 < 10 ? ch/16+'0' : (ch/16-10)+'A';
   \   000018   EB           MOV       A,R3
   \   000019   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00001C   5004         JNC       ??AT_Int16toChar_2
   \   00001E   7430         MOV       A,#0x30
   \   000020   8002         SJMP      ??AT_Int16toChar_3
   \                     ??AT_Int16toChar_2:
   \   000022   7437         MOV       A,#0x37
   \                     ??AT_Int16toChar_3:
   \   000024   28           ADD       A,R0
   \   000025   F8           MOV       R0,A
   \   000026   E8           MOV       A,R0
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   \   00002B   F0           MOVX      @DPTR,A
    736            ch = pWord & 0x00ff;
    737            str[3] = ch%16 < 10 ? ch%16+'0' : (ch%16-10)+'A';
   \   00002C   EA           MOV       A,R2
   \   00002D   12....       LCALL     ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000030   5004         JNC       ??AT_Int16toChar_4
   \   000032   7430         MOV       A,#0x30
   \   000034   8002         SJMP      ??AT_Int16toChar_5
   \                     ??AT_Int16toChar_4:
   \   000036   7437         MOV       A,#0x37
   \                     ??AT_Int16toChar_5:
   \   000038   28           ADD       A,R0
   \   000039   F8           MOV       R0,A
   \   00003A   E8           MOV       A,R0
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
    738            str[2] = ch/16 < 10 ? ch/16+'0' : (ch/16-10)+'A';
   \   00003F   EA           MOV       A,R2
   \   000040   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000043   5004         JNC       ??AT_Int16toChar_6
   \   000045   7430         MOV       A,#0x30
   \   000047   8002         SJMP      ??AT_Int16toChar_7
   \                     ??AT_Int16toChar_6:
   \   000049   7437         MOV       A,#0x37
   \                     ??AT_Int16toChar_7:
   \   00004B   28           ADD       A,R0
   \   00004C   F8           MOV       R0,A
   \   00004D   E8           MOV       A,R0
   \   00004E   8C82         MOV       DPL,R4
   \   000050   8D83         MOV       DPH,R5
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   F0           MOVX      @DPTR,A
    739          }
   \   000055   02....       LJMP      ??Subroutine157_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   540F         ANL       A,#0xf
   \   000002   FE           MOV       R6,A
   \   000003   C3           CLR       C
   \   000004   940A         SUBB      A,#0xa
   \   000006   22           RET
    740          
    741          /***************************************************************************************************
    742           * @fn      AT_Int32toChar
    743           *
    744           * @brief   Tool Functions
    745           *          Convert double words to a string
    746           *
    747           * @param   uint32 pDWord - the double words to be converted
    748           * @param   uint8* pStr   - store the new character
    749           *
    750           * @return  None
    751           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    752          void AT_Int32toChar( uint32 pDWord, uint8* str )
   \                     AT_Int32toChar:
    753          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
    754            uint16 ch = pDWord >> 24;
    755            str[1] = ch%16 < 10 ? ch%16+'0' : (ch%16-10)+'A';
   \   00000B   ED           MOV       A,R5
   \   00000C   540F         ANL       A,#0xf
   \   00000E   FA           MOV       R2,A
   \   00000F   C3           CLR       C
   \   000010   940A         SUBB      A,#0xa
   \   000012   5004         JNC       ??AT_Int32toChar_0
   \   000014   7430         MOV       A,#0x30
   \   000016   8002         SJMP      ??AT_Int32toChar_1
   \                     ??AT_Int32toChar_0:
   \   000018   7437         MOV       A,#0x37
   \                     ??AT_Int32toChar_1:
   \   00001A   2A           ADD       A,R2
   \   00001B   FE           MOV       R6,A
   \   00001C   7410         MOV       A,#0x10
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000024   EA           MOV       A,R2
   \   000025   FC           MOV       R4,A
   \   000026   EE           MOV       A,R6
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   A3           INC       DPTR
   \   00002C   F0           MOVX      @DPTR,A
    756            str[0] = ch/16 < 10 ? ch/16+'0' : (ch/16-10)+'A';
   \   00002D   ED           MOV       A,R5
   \   00002E   C4           SWAP      A
   \   00002F   540F         ANL       A,#0xf
   \   000031   F8           MOV       R0,A
   \   000032   C3           CLR       C
   \   000033   940A         SUBB      A,#0xa
   \   000035   5004         JNC       ??AT_Int32toChar_2
   \   000037   7430         MOV       A,#0x30
   \   000039   8002         SJMP      ??AT_Int32toChar_3
   \                     ??AT_Int32toChar_2:
   \   00003B   7437         MOV       A,#0x37
   \                     ??AT_Int32toChar_3:
   \   00003D   28           ADD       A,R0
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   F0           MOVX      @DPTR,A
    757            ch = (pDWord >> 16) & 0x00ff;
   \   000043   85....       MOV       ?V4,?V0
   \   000046   85....       MOV       ?V5,?V1
   \   000049   85....       MOV       ?V6,?V2
   \   00004C   8D..         MOV       ?V7,R5
   \   00004E   7410         MOV       A,#0x10
   \   000050   78..         MOV       R0,#?V4
   \   000052   12....       LCALL     ?UL_SHR
   \   000055   A8..         MOV       R0,?V4
    758            str[3] = ch%16 < 10 ? ch%16+'0' : (ch%16-10)+'A';
   \   000057   E8           MOV       A,R0
   \   000058   540F         ANL       A,#0xf
   \   00005A   FA           MOV       R2,A
   \   00005B   C3           CLR       C
   \   00005C   940A         SUBB      A,#0xa
   \   00005E   5004         JNC       ??AT_Int32toChar_4
   \   000060   7430         MOV       A,#0x30
   \   000062   8002         SJMP      ??AT_Int32toChar_5
   \                     ??AT_Int32toChar_4:
   \   000064   7437         MOV       A,#0x37
   \                     ??AT_Int32toChar_5:
   \   000066   2A           ADD       A,R2
   \   000067   FA           MOV       R2,A
   \   000068   EA           MOV       A,R2
   \   000069   12....       LCALL     ??Subroutine146_0 & 0xFFFF
    759            str[2] = ch/16 < 10 ? ch/16+'0' : (ch/16-10)+'A';
   \                     ??CrossCallReturnLabel_259:
   \   00006C   5004         JNC       ??AT_Int32toChar_6
   \   00006E   7430         MOV       A,#0x30
   \   000070   8002         SJMP      ??AT_Int32toChar_7
   \                     ??AT_Int32toChar_6:
   \   000072   7437         MOV       A,#0x37
   \                     ??AT_Int32toChar_7:
   \   000074   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000077   F0           MOVX      @DPTR,A
    760            ch = (pDWord >> 8) & 0x0000ff;
   \   000078   A8..         MOV       R0,?V1
    761            str[5] = ch%16 < 10 ? ch%16+'0' : (ch%16-10)+'A';
   \   00007A   E8           MOV       A,R0
   \   00007B   540F         ANL       A,#0xf
   \   00007D   FA           MOV       R2,A
   \   00007E   940A         SUBB      A,#0xa
   \   000080   5004         JNC       ??AT_Int32toChar_8
   \   000082   7430         MOV       A,#0x30
   \   000084   8002         SJMP      ??AT_Int32toChar_9
   \                     ??AT_Int32toChar_8:
   \   000086   7437         MOV       A,#0x37
   \                     ??AT_Int32toChar_9:
   \   000088   2A           ADD       A,R2
   \   000089   FA           MOV       R2,A
   \   00008A   EA           MOV       A,R2
   \   00008B   8C82         MOV       DPL,R4
   \   00008D   8B83         MOV       DPH,R3
   \   00008F   12....       LCALL     ?Subroutine16 & 0xFFFF
    762            str[4] = ch/16 < 10 ? ch/16+'0' : (ch/16-10)+'A';
   \                     ??CrossCallReturnLabel_257:
   \   000092   5004         JNC       ??AT_Int32toChar_10
   \   000094   7430         MOV       A,#0x30
   \   000096   8002         SJMP      ??AT_Int32toChar_11
   \                     ??AT_Int32toChar_10:
   \   000098   7437         MOV       A,#0x37
   \                     ??AT_Int32toChar_11:
   \   00009A   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00009D   F0           MOVX      @DPTR,A
    763            ch = pDWord & 0x000000ff;
   \   00009E   A8..         MOV       R0,?V0
    764            str[7] = ch%16 < 10 ? ch%16+'0' : (ch%16-10)+'A';
   \   0000A0   E8           MOV       A,R0
   \   0000A1   540F         ANL       A,#0xf
   \   0000A3   FA           MOV       R2,A
   \   0000A4   940A         SUBB      A,#0xa
   \   0000A6   5004         JNC       ??AT_Int32toChar_12
   \   0000A8   7430         MOV       A,#0x30
   \   0000AA   8002         SJMP      ??AT_Int32toChar_13
   \                     ??AT_Int32toChar_12:
   \   0000AC   7437         MOV       A,#0x37
   \                     ??AT_Int32toChar_13:
   \   0000AE   2A           ADD       A,R2
   \   0000AF   FA           MOV       R2,A
   \   0000B0   EA           MOV       A,R2
   \   0000B1   8C82         MOV       DPL,R4
   \   0000B3   8B83         MOV       DPH,R3
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   12....       LCALL     ?Subroutine16 & 0xFFFF
    765            str[6] = ch/16 < 10 ? ch/16+'0' : (ch/16-10)+'A';
   \                     ??CrossCallReturnLabel_258:
   \   0000BA   5004         JNC       ??AT_Int32toChar_14
   \   0000BC   7430         MOV       A,#0x30
   \   0000BE   8002         SJMP      ??AT_Int32toChar_15
   \                     ??AT_Int32toChar_14:
   \   0000C0   7437         MOV       A,#0x37
   \                     ??AT_Int32toChar_15:
   \   0000C2   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   F0           MOVX      @DPTR,A
    766          }
   \   0000C8   02....       LJMP      ??Subroutine163_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   28           ADD       A,R0
   \   000001   F8           MOV       R0,A
   \   000002   E8           MOV       A,R0
   \   000003   8C82         MOV       DPL,R4
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine146_0
   \   000002                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   F0           MOVX      @DPTR,A
   \   000004   E8           MOV       A,R0
   \   000005   C4           SWAP      A
   \   000006   540F         ANL       A,#0xf
   \   000008   F8           MOV       R0,A
   \   000009   940A         SUBB      A,#0xa
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    767          
    768          /***************************************************************************************************
    769           * @fn      AT_IntxtoChar
    770           *
    771           * @brief   Tool Function
    772           *
    773           * @param   data - a point to the data
    774           * @param   pStr - a point to the string
    775           * @param   x - the bit length of the data
    776           *
    777           * @return  None
    778           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void AT_IntxtoChar( uint8* data, uint8 *pStr, uint8 x )
   \                     AT_IntxtoChar:
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
    781            uint8 len = x/8;
   \   000005   E9           MOV       A,R1
   \   000006   13           RRC       A
   \   000007   13           RRC       A
   \   000008   13           RRC       A
   \   000009   541F         ANL       A,#0x1f
   \   00000B   F5..         MOV       ?V3,A
    782            uint8 i;
    783            uint8 k = len*2-1;
   \   00000D   C3           CLR       C
   \   00000E   33           RLC       A
   \   00000F   14           DEC       A
   \   000010   F9           MOV       R1,A
    784            for ( i = 0; i < len; i++) {
   \   000011   7800         MOV       R0,#0x0
   \   000013   E5..         MOV       A,?V3
   \   000015   6017         JZ        ??AT_IntxtoChar_0
    785              pStr[i] = 0;
   \   000017   FE           MOV       R6,A
   \   000018   7F00         MOV       R7,#0x0
   \   00001A   8C82         MOV       DPL,R4
   \   00001C   8D83         MOV       DPH,R5
   \                     ??AT_IntxtoChar_1:
   \   00001E   E4           CLR       A
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   EE           MOV       A,R6
   \   000022   24FF         ADD       A,#-0x1
   \   000024   1E           DEC       R6
   \   000025   EF           MOV       A,R7
   \   000026   34FF         ADDC      A,#-0x1
   \   000028   FF           MOV       R7,A
   \   000029   4E           ORL       A,R6
   \   00002A   70F2         JNZ       ??AT_IntxtoChar_1
    786            }
   \   00002C   7801         MOV       R0,#0x1
    787            for ( i = 0; i < len; i++ ) {
   \                     ??AT_IntxtoChar_0:
   \   00002E   7800         MOV       R0,#0x0
   \   000030   8011         SJMP      ??AT_IntxtoChar_2
    788              pStr[k--] = data[i]%16 < 10 ? data[i]%16+'0' : (data[i]%16-10)+'A';
    789              pStr[k--] = data[i]/16 < 10 ? data[i]/16+'0' : (data[i]/16-10)+'A';
   \                     ??AT_IntxtoChar_3:
   \   000032   7437         MOV       A,#0x37
   \                     ??AT_IntxtoChar_4:
   \   000034   2E           ADD       A,R6
   \   000035   C0E0         PUSH      A
   \   000037   EC           MOV       A,R4
   \   000038   2F           ADD       A,R7
   \   000039   F582         MOV       DPL,A
   \   00003B   E4           CLR       A
   \   00003C   3D           ADDC      A,R5
   \   00003D   F583         MOV       DPH,A
   \   00003F   D0E0         POP       A
   \   000041   F0           MOVX      @DPTR,A
   \   000042   08           INC       R0
   \                     ??AT_IntxtoChar_2:
   \   000043   E8           MOV       A,R0
   \   000044   C3           CLR       C
   \   000045   95..         SUBB      A,?V3
   \   000047   504A         JNC       ??AT_IntxtoChar_5
   \   000049   89..         MOV       ?V4,R1
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   29           ADD       A,R1
   \   00004E   F9           MOV       R1,A
   \   00004F   E8           MOV       A,R0
   \   000050   FE           MOV       R6,A
   \   000051   EA           MOV       A,R2
   \   000052   2E           ADD       A,R6
   \   000053   FE           MOV       R6,A
   \   000054   E4           CLR       A
   \   000055   3B           ADDC      A,R3
   \   000056   8E..         MOV       ?V0,R6
   \   000058   F5..         MOV       ?V1,A
   \   00005A   8E82         MOV       DPL,R6
   \   00005C   F583         MOV       DPH,A
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000062   5004         JNC       ??AT_IntxtoChar_6
   \   000064   7430         MOV       A,#0x30
   \   000066   8002         SJMP      ??AT_IntxtoChar_7
   \                     ??AT_IntxtoChar_6:
   \   000068   7437         MOV       A,#0x37
   \                     ??AT_IntxtoChar_7:
   \   00006A   2E           ADD       A,R6
   \   00006B   FE           MOV       R6,A
   \   00006C   EE           MOV       A,R6
   \   00006D   C0E0         PUSH      A
   \   00006F   AE..         MOV       R6,?V4
   \   000071   EC           MOV       A,R4
   \   000072   2E           ADD       A,R6
   \   000073   F582         MOV       DPL,A
   \   000075   E4           CLR       A
   \   000076   3D           ADDC      A,R5
   \   000077   F583         MOV       DPH,A
   \   000079   D0E0         POP       A
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   E9           MOV       A,R1
   \   00007D   FF           MOV       R7,A
   \   00007E   74FF         MOV       A,#-0x1
   \   000080   29           ADD       A,R1
   \   000081   F9           MOV       R1,A
   \   000082   85..82       MOV       DPL,?V0
   \   000085   85..83       MOV       DPH,?V1
   \   000088   E0           MOVX      A,@DPTR
   \   000089   C4           SWAP      A
   \   00008A   12....       LCALL     ?Subroutine81 & 0xFFFF
    790            }
   \                     ??CrossCallReturnLabel_161:
   \   00008D   50A3         JNC       ??AT_IntxtoChar_3
   \   00008F   7430         MOV       A,#0x30
   \   000091   80A1         SJMP      ??AT_IntxtoChar_4
    791          }
   \                     ??AT_IntxtoChar_5:
   \   000093   02....       LJMP      ?Subroutine2 & 0xFFFF
    792          
    793          /***************************************************************************************************
    794           * @fn      AT_ChartoInt8
    795           *
    796           * @brief   Tool Functions
    797           *          Convert a character to integer
    798           *
    799           * @param   AT_CmdUnit *cmdUnit - a point to the AT_CmdUnit
    800           *
    801           * @return  None
    802           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    803          uint8 AT_ChartoInt( uint8 n )
   \                     AT_ChartoInt:
    804          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    805            if (n >= '0' && n <= '9') return n-'0';
   \   000002   74D0         MOV       A,#-0x30
   \   000004   29           ADD       A,R1
   \   000005   F9           MOV       R1,A
   \   000006   C3           CLR       C
   \   000007   940A         SUBB      A,#0xa
   \   000009   401C         JC        ??AT_ChartoInt_0
    806            if (n >= 'a' && n <= 'f') return n-'a'+10;
   \   00000B   749F         MOV       A,#-0x61
   \   00000D   28           ADD       A,R0
   \   00000E   C3           CLR       C
   \   00000F   9406         SUBB      A,#0x6
   \   000011   5004         JNC       ??AT_ChartoInt_1
   \   000013   74A9         MOV       A,#-0x57
   \   000015   800A         SJMP      ??AT_ChartoInt_2
    807            if (n >= 'A' && n <= 'F') return n-'A'+10;
   \                     ??AT_ChartoInt_1:
   \   000017   74BF         MOV       A,#-0x41
   \   000019   28           ADD       A,R0
   \   00001A   C3           CLR       C
   \   00001B   9406         SUBB      A,#0x6
   \   00001D   5006         JNC       ??AT_ChartoInt_3
   \   00001F   74C9         MOV       A,#-0x37
   \                     ??AT_ChartoInt_2:
   \   000021   28           ADD       A,R0
   \   000022   F9           MOV       R1,A
   \   000023   8002         SJMP      ??AT_ChartoInt_0
    808            return 0xff;
   \                     ??AT_ChartoInt_3:
   \   000025   79FF         MOV       R1,#-0x1
   \                     ??AT_ChartoInt_0:
   \   000027   02....       LJMP      ?BRET
    809          }
    810          
    811          /***************************************************************************************************
    812           * @fn      AT_ChartoInt8
    813           *
    814           * @brief   Tool Functions
    815           *          Convert 1-2 character to a byte
    816           *
    817           * @param   AT_CmdUnit *cmdUnit - a point to the AT_CmdUnit
    818           *
    819           * @return  uint8
    820           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    821          uint8 AT_ChartoInt8( AT_CmdUnit *cmdUnit )
   \                     AT_ChartoInt8:
    822          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    823            uint8 result=0;
   \   000005   7E00         MOV       R6,#0x0
    824            if(cmdUnit->unitLen>0)
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   8582..       MOV       ?V0,DPL
   \   00000F   8583..       MOV       ?V1,DPH
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FC           MOV       R4,A
   \   000014   600E         JZ        ??AT_ChartoInt8_0
    825              result |= AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-1]);
   \   000016   12....       LCALL     ?Subroutine35 & 0xFFFF
    826            if(cmdUnit->unitLen>1)
   \                     ??CrossCallReturnLabel_74:
   \   000019   4009         JC        ??AT_ChartoInt8_0
    827              result |= AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-2])<<4;
   \   00001B                ; Setup parameters for call to function AT_ChartoInt
   \   00001B   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00001E   C4           SWAP      A
   \   00001F   54F0         ANL       A,#0xf0
   \   000021   CE           XCH       A,R6
   \   000022   4E           ORL       A,R6
   \   000023   FE           MOV       R6,A
    828            return result;
   \                     ??AT_ChartoInt8_0:
   \   000024   EE           MOV       A,R6
   \   000025   F9           MOV       R1,A
   \   000026   02....       LJMP      ??Subroutine166_0 & 0xFFFF
    829          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   28           ADD       A,R0
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   3400         ADDC      A,#0x0
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   24FE         ADD       A,#-0x2
   \   000011   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   88..         MOV       ?V2,R0
   \   000008   F5..         MOV       ?V3,A
   \   00000A                ; Setup parameters for call to function AT_ChartoInt
   \   00000A                ; Setup parameters for call to function AT_ChartoInt
   \   00000A   8882         MOV       DPL,R0
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   2C           ADD       A,R4
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   3400         ADDC      A,#0x0
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   24FF         ADD       A,#-0x1
   \   000019   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00001C   FE           MOV       R6,A
   \   00001D   85..82       MOV       DPL,?V0
   \   000020   85..83       MOV       DPH,?V1
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   \   000025   C3           CLR       C
   \   000026   9402         SUBB      A,#0x2
   \   000028   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   F582         MOV       DPL,A
   \   000002   E9           MOV       A,R1
   \   000003   34FF         ADDC      A,#-0x1
   \   000005                REQUIRE ??Subroutine149_0
   \   000005                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F9           MOV       R1,A
   \   000004   12....       LCALL     `??AT_ChartoInt::?relay`; Banked call to: AT_ChartoInt
   \   000007   E9           MOV       A,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    830          
    831          /***************************************************************************************************
    832           * @fn      AT_ChartoInt16
    833           *
    834           * @brief   Tool Functions
    835           *          Convert 1-4 character to a word
    836           *
    837           * @param   AT_CmdUnit *cmdUnit - a point to the AT_CmdUnit
    838           *
    839           * @return  uint8
    840           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          uint16 AT_ChartoInt16( AT_CmdUnit *cmdUnit )
   \                     AT_ChartoInt16:
    842          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    843            uint16 result=0;
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
    844            if(cmdUnit->unitLen>0)
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   8582..       MOV       ?V0,DPL
   \   000011   8583..       MOV       ?V1,DPH
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FC           MOV       R4,A
   \   000016   605F         JZ        ??AT_ChartoInt16_0
    845              result |= (uint16) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-1]);
   \   000018   12....       LCALL     ?Subroutine35 & 0xFFFF
    846            if(cmdUnit->unitLen>1)
   \                     ??CrossCallReturnLabel_75:
   \   00001B   4014         JC        ??AT_ChartoInt16_1
    847              result |= ((uint16) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-2]))<<4;
   \   00001D                ; Setup parameters for call to function AT_ChartoInt
   \   00001D   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000020   F5..         MOV       ?V4,A
   \   000022   8F..         MOV       ?V5,R7
   \   000024   7404         MOV       A,#0x4
   \   000026   78..         MOV       R0,#?V4
   \   000028   12....       LCALL     ?S_SHL
   \   00002B   E5..         MOV       A,?V4
   \   00002D   4E           ORL       A,R6
   \   00002E   FE           MOV       R6,A
   \   00002F   AF..         MOV       R7,?V5
    848            if(cmdUnit->unitLen>2)
   \                     ??AT_ChartoInt16_1:
   \   000031   85..82       MOV       DPL,?V0
   \   000034   85..83       MOV       DPH,?V1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   C3           CLR       C
   \   00003A   9403         SUBB      A,#0x3
   \   00003C   4010         JC        ??AT_ChartoInt16_2
    849              result |= ((uint16) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-3]))<<8;
   \   00003E                ; Setup parameters for call to function AT_ChartoInt
   \   00003E   85..82       MOV       DPL,?V2
   \   000041   85..83       MOV       DPH,?V3
   \   000044   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000047   24FD         ADD       A,#-0x3
   \   000049   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00004C   4F           ORL       A,R7
   \   00004D   FF           MOV       R7,A
    850            if(cmdUnit->unitLen>3)
   \                     ??AT_ChartoInt16_2:
   \   00004E   85..82       MOV       DPL,?V0
   \   000051   85..83       MOV       DPH,?V1
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F8           MOV       R0,A
   \   000056   C3           CLR       C
   \   000057   9404         SUBB      A,#0x4
   \   000059   401C         JC        ??AT_ChartoInt16_0
    851              result |= ((uint16) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-4]))<<12;
   \   00005B                ; Setup parameters for call to function AT_ChartoInt
   \   00005B   85..82       MOV       DPL,?V2
   \   00005E   85..83       MOV       DPH,?V3
   \   000061   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000064   24FC         ADD       A,#-0x4
   \   000066   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000069   75..00       MOV       ?V1,#0x0
   \   00006C   740C         MOV       A,#0xc
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?S_SHL
   \   000073   E5..         MOV       A,?V1
   \   000075   4F           ORL       A,R7
   \   000076   FF           MOV       R7,A
    852            return result;
   \                     ??AT_ChartoInt16_0:
   \   000077   EE           MOV       A,R6
   \   000078   FA           MOV       R2,A
   \   000079   EF           MOV       A,R7
   \   00007A   FB           MOV       R3,A
   \   00007B   02....       LJMP      ??Subroutine177_0 & 0xFFFF
    853          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002                REQUIRE ??Subroutine148_0
   \   000002                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   E8           MOV       A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   F5..         MOV       ?V0,A
   \   000005   22           RET
    854          
    855          /***************************************************************************************************
    856           * @fn      AT_ChartoInt32
    857           *
    858           * @brief   Tool Functions
    859           *          Convert 1-8 character to a double word
    860           *
    861           * @param   AT_CmdUnit *cmdUnit - a point to the AT_CmdUnit
    862           *
    863           * @return  uint32
    864           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine147_0
   \   000006                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    865          uint32 AT_ChartoInt32( AT_CmdUnit *cmdUnit )
   \                     AT_ChartoInt32:
    866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
    867            uint32 result=0;
   \   000005   75..00       MOV       ?V4,#0x0
   \   000008   75..00       MOV       ?V5,#0x0
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   75..00       MOV       ?V7,#0x0
    868            if(cmdUnit->unitLen>0)
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   AE82         MOV       R6,DPL
   \   000018   AF83         MOV       R7,DPH
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FC           MOV       R4,A
   \   00001C   7003         JNZ       $+5
   \   00001E   02....       LJMP      ??AT_ChartoInt32_0 & 0xFFFF
    869              result |= (uint32) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-1]);
   \   000021   EA           MOV       A,R2
   \   000022   2402         ADD       A,#0x2
   \   000024   F8           MOV       R0,A
   \   000025   E4           CLR       A
   \   000026   3B           ADDC      A,R3
   \   000027   88..         MOV       ?V0,R0
   \   000029   F5..         MOV       ?V1,A
   \   00002B                ; Setup parameters for call to function AT_ChartoInt
   \   00002B   8882         MOV       DPL,R0
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   2C           ADD       A,R4
   \   000031   12....       LCALL     ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000034   24FF         ADD       A,#-0x1
   \   000036   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000039   F5..         MOV       ?V4,A
    870            if(cmdUnit->unitLen>1)
   \   00003B   8E82         MOV       DPL,R6
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F8           MOV       R0,A
   \   000041   C3           CLR       C
   \   000042   9402         SUBB      A,#0x2
   \   000044   4016         JC        ??AT_ChartoInt32_1
    871              result |= ((uint32) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-2]))<<4;
   \   000046                ; Setup parameters for call to function AT_ChartoInt
   \   000046   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000049   24FE         ADD       A,#-0x2
   \   00004B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00004E   7404         MOV       A,#0x4
   \   000050   78..         MOV       R0,#?V8
   \   000052   12....       LCALL     ?L_SHL
   \   000055   78..         MOV       R0,#?V4
   \   000057   79..         MOV       R1,#?V8
   \   000059   12....       LCALL     ?L_IOR
    872            if(cmdUnit->unitLen>2)
   \                     ??AT_ChartoInt32_1:
   \   00005C   8E82         MOV       DPL,R6
   \   00005E   8F83         MOV       DPH,R7
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F8           MOV       R0,A
   \   000062   C3           CLR       C
   \   000063   9403         SUBB      A,#0x3
   \   000065   4016         JC        ??AT_ChartoInt32_2
    873              result |= ((uint32) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-3]))<<8;
   \   000067                ; Setup parameters for call to function AT_ChartoInt
   \   000067   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00006A   24FD         ADD       A,#-0x3
   \   00006C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00006F   7408         MOV       A,#0x8
   \   000071   78..         MOV       R0,#?V8
   \   000073   12....       LCALL     ?L_SHL
   \   000076   78..         MOV       R0,#?V4
   \   000078   79..         MOV       R1,#?V8
   \   00007A   12....       LCALL     ?L_IOR
    874            if(cmdUnit->unitLen>3)
   \                     ??AT_ChartoInt32_2:
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F8           MOV       R0,A
   \   000083   C3           CLR       C
   \   000084   9404         SUBB      A,#0x4
   \   000086   4016         JC        ??AT_ChartoInt32_3
    875              result |= ((uint32) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-4]))<<12;
   \   000088                ; Setup parameters for call to function AT_ChartoInt
   \   000088   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00008B   24FC         ADD       A,#-0x4
   \   00008D   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000090   740C         MOV       A,#0xc
   \   000092   78..         MOV       R0,#?V8
   \   000094   12....       LCALL     ?L_SHL
   \   000097   78..         MOV       R0,#?V4
   \   000099   79..         MOV       R1,#?V8
   \   00009B   12....       LCALL     ?L_IOR
    876            if(cmdUnit->unitLen>4)
   \                     ??AT_ChartoInt32_3:
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F8           MOV       R0,A
   \   0000A4   C3           CLR       C
   \   0000A5   9405         SUBB      A,#0x5
   \   0000A7   4016         JC        ??AT_ChartoInt32_4
    877              result |= ((uint32) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-5]))<<16;
   \   0000A9                ; Setup parameters for call to function AT_ChartoInt
   \   0000A9   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0000AC   24FB         ADD       A,#-0x5
   \   0000AE   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000B1   7410         MOV       A,#0x10
   \   0000B3   78..         MOV       R0,#?V8
   \   0000B5   12....       LCALL     ?L_SHL
   \   0000B8   78..         MOV       R0,#?V4
   \   0000BA   79..         MOV       R1,#?V8
   \   0000BC   12....       LCALL     ?L_IOR
    878            if(cmdUnit->unitLen>5)
   \                     ??AT_ChartoInt32_4:
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F8           MOV       R0,A
   \   0000C5   C3           CLR       C
   \   0000C6   9406         SUBB      A,#0x6
   \   0000C8   4016         JC        ??AT_ChartoInt32_5
    879              result |= ((uint32) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-6]))<<20;
   \   0000CA                ; Setup parameters for call to function AT_ChartoInt
   \   0000CA   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   0000CD   24FA         ADD       A,#-0x6
   \   0000CF   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000D2   7414         MOV       A,#0x14
   \   0000D4   78..         MOV       R0,#?V8
   \   0000D6   12....       LCALL     ?L_SHL
   \   0000D9   78..         MOV       R0,#?V4
   \   0000DB   79..         MOV       R1,#?V8
   \   0000DD   12....       LCALL     ?L_IOR
    880            if(cmdUnit->unitLen>6)
   \                     ??AT_ChartoInt32_5:
   \   0000E0   8E82         MOV       DPL,R6
   \   0000E2   8F83         MOV       DPH,R7
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   F8           MOV       R0,A
   \   0000E6   C3           CLR       C
   \   0000E7   9407         SUBB      A,#0x7
   \   0000E9   4016         JC        ??AT_ChartoInt32_6
    881              result |= ((uint32) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-7]))<<24;
   \   0000EB                ; Setup parameters for call to function AT_ChartoInt
   \   0000EB   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   0000EE   24F9         ADD       A,#-0x7
   \   0000F0   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000F3   7418         MOV       A,#0x18
   \   0000F5   78..         MOV       R0,#?V8
   \   0000F7   12....       LCALL     ?L_SHL
   \   0000FA   78..         MOV       R0,#?V4
   \   0000FC   79..         MOV       R1,#?V8
   \   0000FE   12....       LCALL     ?L_IOR
    882            if(cmdUnit->unitLen>7)
   \                     ??AT_ChartoInt32_6:
   \   000101   8E82         MOV       DPL,R6
   \   000103   8F83         MOV       DPH,R7
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F8           MOV       R0,A
   \   000107   C3           CLR       C
   \   000108   9408         SUBB      A,#0x8
   \   00010A   401D         JC        ??AT_ChartoInt32_0
    883              result |= ((uint32) AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-8]))<<28;
   \   00010C                ; Setup parameters for call to function AT_ChartoInt
   \   00010C   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00010F   24F8         ADD       A,#-0x8
   \   000111   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000114   E4           CLR       A
   \   000115   F5..         MOV       ?V1,A
   \   000117   F5..         MOV       ?V2,A
   \   000119   F5..         MOV       ?V3,A
   \   00011B   741C         MOV       A,#0x1c
   \   00011D   78..         MOV       R0,#?V0
   \   00011F   12....       LCALL     ?L_SHL
   \   000122   78..         MOV       R0,#?V4
   \   000124   79..         MOV       R1,#?V0
   \   000126   12....       LCALL     ?L_IOR
    884            return result;
   \                     ??AT_ChartoInt32_0:
   \   000129   AA..         MOV       R2,?V4
   \   00012B   AB..         MOV       R3,?V5
   \   00012D   AC..         MOV       R4,?V6
   \   00012F   AD..         MOV       R5,?V7
   \   000131                REQUIRE ?Subroutine6
   \   000131                ; // Fall through to label ?Subroutine6
    885          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   F5..         MOV       ?V8,A
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V9,A
   \   000008   F5..         MOV       ?V10,A
   \   00000A   F5..         MOV       ?V11,A
   \   00000C   22           RET
    886          
    887          /***************************************************************************************************
    888           * @fn      AT_ChartoIntx
    889           *
    890           * @brief   Tool Function
    891           *
    892           * @param   AT_CmdUnit *cmdUnit - a point to the AT_CmdUnit
    893           * @param   uint8 *pHex - a point to the Intx
    894           * @param   x - the bit length of the destination
    895           *
    896           * @return  uint32
    897           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    898          void AT_ChartoIntx( AT_CmdUnit *cmdUnit,uint8 *pHex, uint8 x )
   \                     AT_ChartoIntx:
    899          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   FF           MOV       R7,A
   \   000007   8C..         MOV       ?V8,R4
   \   000009   8D..         MOV       ?V9,R5
    900            uint8 len = x/8;
   \   00000B   E9           MOV       A,R1
   \   00000C   13           RRC       A
   \   00000D   13           RRC       A
   \   00000E   13           RRC       A
   \   00000F   541F         ANL       A,#0x1f
   \   000011   F5..         MOV       ?V4,A
    901            uint8 i;
    902            for ( i = 0; i < len; i++) {
   \   000013   75..00       MOV       ?V10,#0x0
   \   000016   6018         JZ        ??AT_ChartoIntx_0
    903              pHex[i] = 0;
   \   000018   F8           MOV       R0,A
   \   000019   7900         MOV       R1,#0x0
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \                     ??AT_ChartoIntx_1:
   \   00001F   E4           CLR       A
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   E8           MOV       A,R0
   \   000023   24FF         ADD       A,#-0x1
   \   000025   18           DEC       R0
   \   000026   E9           MOV       A,R1
   \   000027   34FF         ADDC      A,#-0x1
   \   000029   F9           MOV       R1,A
   \   00002A   48           ORL       A,R0
   \   00002B   70F2         JNZ       ??AT_ChartoIntx_1
    904            }
   \   00002D   75..01       MOV       ?V10,#0x1
    905            for ( i = 0; i < len; i++ ) {
   \                     ??AT_ChartoIntx_0:
   \   000030   75..00       MOV       ?V10,#0x0
   \   000033   EA           MOV       A,R2
   \   000034   2402         ADD       A,#0x2
   \   000036   F5..         MOV       ?V6,A
   \   000038   E4           CLR       A
   \   000039   3F           ADDC      A,R7
   \   00003A   F5..         MOV       ?V7,A
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   A3           INC       DPTR
   \   000041   8582..       MOV       ?V0,DPL
   \   000044   8583..       MOV       ?V1,DPH
   \   000047   8016         SJMP      ??AT_ChartoIntx_2
    906              if(cmdUnit->unitLen>2*i)
    907                pHex[i] |= AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-1-2*i]);
    908              else
    909                break;
    910              if(cmdUnit->unitLen>2*i+1)
    911                pHex[i] |= AT_ChartoInt(cmdUnit->unit[cmdUnit->unitLen-2-2*i])<<(1*4);
   \                     ??AT_ChartoIntx_3:
   \   000049                ; Setup parameters for call to function AT_ChartoInt
   \   000049   E8           MOV       A,R0
   \   00004A   24FE         ADD       A,#-0x2
   \   00004C   F8           MOV       R0,A
   \   00004D   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000050   C4           SWAP      A
   \   000051   54F0         ANL       A,#0xf0
   \   000053   F8           MOV       R0,A
   \   000054   85..82       MOV       DPL,?V2
   \   000057   85..83       MOV       DPH,?V3
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   48           ORL       A,R0
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   05..         INC       ?V10
   \                     ??AT_ChartoIntx_2:
   \   00005F   E5..         MOV       A,?V10
   \   000061   C3           CLR       C
   \   000062   95..         SUBB      A,?V4
   \   000064   504F         JNC       ??AT_ChartoIntx_4
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F8           MOV       R0,A
   \   00006E   E5..         MOV       A,?V10
   \   000070   F5..         MOV       ?V2,A
   \   000072   25E0         ADD       A,0xE0 /* A   */
   \   000074   FE           MOV       R6,A
   \   000075   E4           CLR       A
   \   000076   33           RLC       A
   \   000077   FF           MOV       R7,A
   \   000078   EE           MOV       A,R6
   \   000079   98           SUBB      A,R0
   \   00007A   EF           MOV       A,R7
   \   00007B   9400         SUBB      A,#0x0
   \   00007D   C3           CLR       C
   \   00007E   65D0         XRL       A,PSW
   \   000080   33           RLC       A
   \   000081   5032         JNC       ??AT_ChartoIntx_4
   \   000083                ; Setup parameters for call to function AT_ChartoInt
   \   000083   E8           MOV       A,R0
   \   000084   24FF         ADD       A,#-0x1
   \   000086   18           DEC       R0
   \   000087   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00008A   F8           MOV       R0,A
   \   00008B   E5..         MOV       A,?V8
   \   00008D   25..         ADD       A,?V2
   \   00008F   F5..         MOV       ?V2,A
   \   000091   E4           CLR       A
   \   000092   35..         ADDC      A,?V9
   \   000094   F5..         MOV       ?V3,A
   \   000096   85..82       MOV       DPL,?V2
   \   000099   F583         MOV       DPH,A
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   48           ORL       A,R0
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F8           MOV       R0,A
   \   0000A6   EE           MOV       A,R6
   \   0000A7   2401         ADD       A,#0x1
   \   0000A9   FA           MOV       R2,A
   \   0000AA   E4           CLR       A
   \   0000AB   3F           ADDC      A,R7
   \   0000AC   FB           MOV       R3,A
   \   0000AD   EA           MOV       A,R2
   \   0000AE   98           SUBB      A,R0
   \   0000AF   EB           MOV       A,R3
   \   0000B0   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   0000B3   4094         JC        ??AT_ChartoIntx_3
    912              else
    913                break;
    914            }
    915          }
   \                     ??AT_ChartoIntx_4:
   \   0000B5                REQUIRE ?Subroutine7
   \   0000B5                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F0B         MOV       R7,#0xb
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E4           CLR       A
   \   000001   34FF         ADDC      A,#-0x1
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   C3           CLR       C
   \   000006   9E           SUBB      A,R6
   \   000007   F8           MOV       R0,A
   \   000008   E9           MOV       A,R1
   \   000009   9F           SUBB      A,R7
   \   00000A   F9           MOV       R1,A
   \   00000B   85..82       MOV       DPL,?V6
   \   00000E   85..83       MOV       DPH,?V7
   \   000011   E0           MOVX      A,@DPTR
   \   000012   28           ADD       A,R0
   \   000013   FA           MOV       R2,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   39           ADDC      A,R1
   \   000017   8A82         MOV       DPL,R2
   \   000019   12....       LCALL     ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   00001C   22           RET
    916          
    917          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    918          /*********************************************************************
    919           * @fn      AT_AttrData_ChartoInt
    920           *
    921           * @brief   Tool Function. Convert different types of Attributes' Data
    922           *
    923           * @param   dataType - data types defined in zcl.h
    924           * @param   attrData - pointer to the attribute data
    925           *
    926           * @return  none
    927           *********************************************************************/
    928          static uint8* AT_AttrData_ChartoInt( uint8 dataType, AT_CmdUnit *cmdUnit )
    929          {
    930            uint8 *pStr = NULL;
    931          
    932            switch ( dataType )
    933            {
    934              case ZCL_DATATYPE_DATA8:
    935              case ZCL_DATATYPE_BOOLEAN:
    936              case ZCL_DATATYPE_BITMAP8:
    937              case ZCL_DATATYPE_INT8:
    938              case ZCL_DATATYPE_UINT8:
    939              case ZCL_DATATYPE_ENUM8:
    940                pStr = zcl_mem_alloc( 1 );
    941                AT_ChartoIntx(cmdUnit, pStr, 8);
    942                break;
    943          
    944              case ZCL_DATATYPE_DATA16:
    945              case ZCL_DATATYPE_BITMAP16:
    946              case ZCL_DATATYPE_UINT16:
    947              case ZCL_DATATYPE_INT16:
    948              case ZCL_DATATYPE_ENUM16:
    949              case ZCL_DATATYPE_SEMI_PREC:
    950              case ZCL_DATATYPE_CLUSTER_ID:
    951              case ZCL_DATATYPE_ATTR_ID:
    952                pStr = zcl_mem_alloc( 2 );
    953                AT_ChartoIntx(cmdUnit, pStr, 16);
    954                break;
    955          
    956              case ZCL_DATATYPE_DATA24:
    957              case ZCL_DATATYPE_BITMAP24:
    958              case ZCL_DATATYPE_UINT24:
    959              case ZCL_DATATYPE_INT24:
    960                pStr = zcl_mem_alloc( 3 );
    961                AT_ChartoIntx(cmdUnit, pStr, 24);
    962                break;
    963          
    964              case ZCL_DATATYPE_DATA32:
    965              case ZCL_DATATYPE_BITMAP32:
    966              case ZCL_DATATYPE_UINT32:
    967              case ZCL_DATATYPE_INT32:
    968              case ZCL_DATATYPE_SINGLE_PREC:
    969              case ZCL_DATATYPE_TOD:
    970              case ZCL_DATATYPE_DATE:
    971              case ZCL_DATATYPE_UTC:
    972              case ZCL_DATATYPE_BAC_OID:
    973                pStr = zcl_mem_alloc( 4 );
    974                AT_ChartoIntx(cmdUnit, pStr, 32);
    975                break;
    976          
    977              case ZCL_DATATYPE_UINT40:
    978              case ZCL_DATATYPE_INT40:
    979                pStr = zcl_mem_alloc( 5 );
    980                AT_ChartoIntx(cmdUnit, pStr, 40);
    981                break;
    982          
    983              case ZCL_DATATYPE_UINT48:
    984              case ZCL_DATATYPE_INT48:
    985                pStr = zcl_mem_alloc( 6 );
    986                AT_ChartoIntx(cmdUnit, pStr, 48);
    987                break;
    988          
    989              case ZCL_DATATYPE_UINT56:
    990              case ZCL_DATATYPE_INT56:
    991                pStr = zcl_mem_alloc( 7 );
    992                AT_ChartoIntx(cmdUnit, pStr, 56);
    993                break;
    994          
    995              case ZCL_DATATYPE_DOUBLE_PREC:
    996              case ZCL_DATATYPE_IEEE_ADDR:
    997              case ZCL_DATATYPE_UINT64:
    998              case ZCL_DATATYPE_INT64:
    999                pStr = zcl_mem_alloc( 8 );
   1000                AT_ChartoIntx(cmdUnit, pStr, 64);
   1001                break;
   1002          
   1003              case ZCL_DATATYPE_CHAR_STR:
   1004              case ZCL_DATATYPE_OCTET_STR:
   1005                pStr = zcl_mem_alloc( 1+(cmdUnit->unitLen) );
   1006                *pStr = cmdUnit->unitLen;
   1007                zcl_memcpy( pStr+1, cmdUnit->unit, cmdUnit->unitLen );
   1008                break;
   1009          
   1010              case ZCL_DATATYPE_LONG_CHAR_STR:
   1011              case ZCL_DATATYPE_LONG_OCTET_STR:
   1012                // cmdUnit don't support
   1013                // pStr = zcl_mem_alloc( 1+(cmdUnit->unitLen) );
   1014                // *pStr = cmdUnit->unitLen;
   1015                // zcl_memcpy( pStr+1, cmdUnit->unit, cmdUnit->unitLen );
   1016                break;
   1017          
   1018              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   1019                pStr = zcl_mem_alloc( SEC_KEY_LEN );
   1020                AT_ChartoIntx(cmdUnit, pStr, 128);
   1021                break;
   1022          
   1023              case ZCL_DATATYPE_NO_DATA:
   1024              case ZCL_DATATYPE_UNKNOWN:
   1025                // Fall through
   1026          
   1027              default:
   1028                break;
   1029            }
   1030          
   1031            return ( pStr );
   1032          }
   1033          #endif
   1034          
   1035          #if AT_CMD_PATTERN_CHECK
   1036          static uint8 AT_Pattern_Check( char* pattern, AT_CmdUnit* cmdUnitArr );
   1037          /***************************************************************************************************
   1038           * @fn      AT_Pattern_Check
   1039           *
   1040           * @brief   Check the command pattern
   1041           *
   1042           * @param   char* pattern  - the pattern to be checked
   1043           * @param   AT_CmdUnit* cmdUnitArr - the command unit
   1044           *
   1045           * @return  uint8
   1046           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047          uint8 AT_Pattern_Check( char* pattern, AT_CmdUnit* cmdUnitArr )
   \                     AT_Pattern_Check:
   1048          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1049            uint8 i=0;
   \   000005   7900         MOV       R1,#0x0
   \   000007   8005         SJMP      ??AT_Pattern_Check_0
   1050            for(;pattern[i+1]!='\0';i++) {
   1051              if(pattern[i] != cmdUnitArr[i].symbol){
   \                     ??AT_Pattern_Check_1:
   \   000009   E8           MOV       A,R0
   \   00000A   6E           XRL       A,R6
   \   00000B   703C         JNZ       ??AT_Pattern_Check_2
   1052                if(cmdUnitArr[i].symbol =='\0') return AT_LACK_OPERATOR;
   1053                else if(cmdUnitArr[i].symbol =='\r') return AT_LACK_PARA;
   1054                else return AT_INVALID_PARA;
   1055              }
   1056            }
   \   00000D   09           INC       R1
   \                     ??AT_Pattern_Check_0:
   \   00000E   E9           MOV       A,R1
   \   00000F   FE           MOV       R6,A
   \   000010   F5..         MOV       ?V0,A
   \   000012   75..00       MOV       ?V1,#0x0
   \   000015   7402         MOV       A,#0x2
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?S_SHL
   \   00001C   EC           MOV       A,R4
   \   00001D   25..         ADD       A,?V0
   \   00001F   F582         MOV       DPL,A
   \   000021   ED           MOV       A,R5
   \   000022   35..         ADDC      A,?V1
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   EA           MOV       A,R2
   \   000029   2E           ADD       A,R6
   \   00002A   F582         MOV       DPL,A
   \   00002C   E4           CLR       A
   \   00002D   3B           ADDC      A,R3
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   FE           MOV       R6,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   70D3         JNZ       ??AT_Pattern_Check_1
   1057            if(pattern[i]=='\r') {
   \   000036   740D         MOV       A,#0xd
   \   000038   6E           XRL       A,R6
   \   000039   700A         JNZ       ??AT_Pattern_Check_3
   1058              if(cmdUnitArr[i].symbol!='\r') return AT_INVALID_PARA;
   \   00003B   740D         MOV       A,#0xd
   \   00003D   68           XRL       A,R0
   \   00003E   7019         JNZ       ??AT_Pattern_Check_4
   1059            }
   1060            else{
   1061              if(pattern[i] != cmdUnitArr[i].symbol){
   1062                if(cmdUnitArr[i].symbol =='\0') return AT_LACK_OPERATOR;
   1063                else if(cmdUnitArr[i].symbol =='\r') return AT_LACK_PARA;
   1064                else return AT_INVALID_PARA;
   1065              }
   1066            }
   1067            return AT_NO_ERROR;
   \                     ??AT_Pattern_Check_5:
   \   000040   7900         MOV       R1,#0x0
   \                     ??AT_Pattern_Check_6:
   \   000042   02....       LJMP      ??Subroutine162_0 & 0xFFFF
   \                     ??AT_Pattern_Check_3:
   \   000045   E8           MOV       A,R0
   \   000046   6E           XRL       A,R6
   \   000047   60F7         JZ        ??AT_Pattern_Check_5
   \                     ??AT_Pattern_Check_2:
   \   000049   E8           MOV       A,R0
   \   00004A   7004         JNZ       ??AT_Pattern_Check_7
   \   00004C   7922         MOV       R1,#0x22
   \   00004E   80F2         SJMP      ??AT_Pattern_Check_6
   \                     ??AT_Pattern_Check_7:
   \   000050   740D         MOV       A,#0xd
   \   000052   68           XRL       A,R0
   \   000053   7004         JNZ       ??AT_Pattern_Check_4
   \   000055   7924         MOV       R1,#0x24
   \   000057   80E9         SJMP      ??AT_Pattern_Check_6
   \                     ??AT_Pattern_Check_4:
   \   000059   7905         MOV       R1,#0x5
   \   00005B   80E5         SJMP      ??AT_Pattern_Check_6
   1068          }
   1069          #endif
   1070          
   1071          /***************************************************************************************************
   1072           * @fn      AT_Cmd_ATI
   1073           *
   1074           * @brief   Display the product Identification Information
   1075           *
   1076           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1077           * @param   uint8* msg_ptr - the message pointer
   1078           *
   1079           * @return  None
   1080           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1081          void AT_Cmd_ATI( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_ATI:
   1082          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1083            AT_CmdUnit cmdUnitArr[1];
   1084            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   EA           MOV       A,R2
   \   00000B   FC           MOV       R4,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FD           MOV       R5,A
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP101_8
   \   000013   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   1085            AT_PARSE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   \   000016                ; Setup parameters for call to function AT_Pattern_Check
   \   000016   7402         MOV       A,#0x2
   \   000018   12....       LCALL     ?XSTACK_DISP102_8
   \   00001B   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   00001D   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   00001F   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000022   6007         JZ        ??AT_Cmd_ATI_0
   \   000024                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000024   7A01         MOV       R2,#0x1
   \   000026   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000029   804F         SJMP      ??AT_Cmd_ATI_1
   1086          
   1087            uint8 str[17];
   1088            uint8 version[2];
   1089            AT_GetIEEEAddrStr(NLME_GetExtAddr(), str);
   \                     ??AT_Cmd_ATI_0:
   \   00002B                ; Setup parameters for call to function NLME_GetExtAddr
   \   00002B   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00002E                ; Setup parameters for call to function AT_GetIEEEAddrStr
   \   00002E   7406         MOV       A,#0x6
   \   000030   12....       LCALL     ?XSTACK_DISP102_8
   \   000033   12....       LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
   1090            AT_Int8toChar(_NIB.nwkProtocolVersion, version);
   \   000036                ; Setup parameters for call to function AT_Int8toChar
   \   000036   AA..         MOV       R2,?XSP + 0
   \   000038   AB..         MOV       R3,?XSP + 1
   \   00003A   90....       MOV       DPTR,#_NIB + 17
   \   00003D   12....       LCALL     ?Subroutine51 & 0xFFFF
   1091          
   1092            AT_NEW_LINE();
   \                     ??CrossCallReturnLabel_105:
   \   000040   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000042   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000044   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1093            //AT_RESP("AT-Command Project 1.0", sizeof("AT-Command Project 1.0"));
   1094            //AT_NEXT_LINE();
   1095          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1096            AT_RESP("COORDINATOR", sizeof("COORDINATOR"));
   1097          #elif ( ZG_BUILD_RTR_TYPE )
   1098            AT_RESP("ROUTER", sizeof("ROUTER"));
   1099          #elif ( ZG_BUILD_ENDDEVICE_TYPE )
   1100            AT_RESP("ENDDEVICE", sizeof("ENDDEVICE"));
   \   000047                ; Setup parameters for call to function AT_Uart0_Send
   \   000047   7C0A         MOV       R4,#0xa
   \   000049   7D00         MOV       R5,#0x0
   \   00004B   7A..         MOV       R2,#`?<Constant "ENDDEVICE">` & 0xff
   \   00004D   7B..         MOV       R3,#(`?<Constant "ENDDEVICE">` >> 8) & 0xff
   \   00004F   12....       LCALL     ?Subroutine74 & 0xFFFF
   1101          #else
   1102            AT_RESP("<unknow error>", sizeof("<unknow error>"));
   1103          #endif
   1104            AT_NEXT_LINE();
   1105            printf(FWReversion);
   \                     ??CrossCallReturnLabel_144:
   \   000052                ; Setup parameters for call to function printf
   \   000052   7A..         MOV       R2,#FWReversion & 0xff
   \   000054   7B..         MOV       R3,#(FWReversion >> 8) & 0xff
   \   000056   12....       LCALL     `??printf::?relay`; Banked call to: printf
   1106            AT_NEXT_LINE();
   \   000059                ; Setup parameters for call to function AT_Uart0_Send
   \   000059   12....       LCALL     ?Subroutine75 & 0xFFFF
   1107            AT_RESP("EUI64:", sizeof("EUI64:"));
   \                     ??CrossCallReturnLabel_276:
   \   00005C   7A..         MOV       R2,#`?<Constant "EUI64:">` & 0xff
   \   00005E   7B..         MOV       R3,#(`?<Constant "EUI64:">` >> 8) & 0xff
   \   000060   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1108            AT_RESP(str, 16);
   \   000063                ; Setup parameters for call to function AT_Uart0_Send
   \   000063   7C10         MOV       R4,#0x10
   \   000065   7D00         MOV       R5,#0x0
   \   000067   7406         MOV       A,#0x6
   \   000069   12....       LCALL     ?XSTACK_DISP101_8
   \   00006C   12....       LCALL     ?Subroutine71 & 0xFFFF
   1109            AT_NEXT_LINE();
   1110            AT_OK();
   1111            AT_NEW_LINE();
   \                     ??CrossCallReturnLabel_523:
   \   00006F                ; Setup parameters for call to function AT_Uart0_Send
   \   00006F   7C02         MOV       R4,#0x2
   \   000071   7D00         MOV       R5,#0x0
   \   000073   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000075   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000077   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1112          }
   \                     ??AT_Cmd_ATI_1:
   \   00007A   7417         MOV       A,#0x17
   \   00007C   02....       LJMP      ??Subroutine165_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   7C02         MOV       R4,#0x2
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine150_0
   \   000008                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C07         MOV       R4,#0x7
   \   000005   7D00         MOV       R5,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C02         MOV       R4,#0x2
   \   000005   7D00         MOV       R5,#0x0
   \   000007   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000009   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??AT_Int8toChar::?relay`; Banked call to: AT_Int8toChar
   \   000005                ; Setup parameters for call to function AT_Uart0_Send
   \   000005                ; Setup parameters for call to function AT_Uart0_Send
   \   000005                ; Setup parameters for call to function AT_Uart0_Send
   \   000005                ; Setup parameters for call to function AT_Uart0_Send
   \   000005   7C02         MOV       R4,#0x2
   \   000007   7D00         MOV       R5,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine166_0
   \   000003                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   12....       LCALL     `??AT_Pattern_Check::?relay`; Banked call to: AT_Pattern_Check
   \   000003   E9           MOV       A,R1
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                REQUIRE ??Subroutine195_0
   \   000003                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   7C02         MOV       R4,#0x2
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine196_0
   \   000008                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C06         MOV       R4,#0x6
   \   000005   7D00         MOV       R5,#0x0
   \   000007   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000009   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00000B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000E   22           RET
   1113          
   1114          /***************************************************************************************************
   1115           * @fn      AT_Cmd_ATZ
   1116           *
   1117           * @brief   ATZ - Software Reset
   1118           *
   1119           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1120           * @param   uint8* msg_ptr - the message pointer
   1121           *
   1122           * @return  None
   1123           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void AT_Cmd_ATZ( uint8 cmd_ptr, uint8* msg )
   \                     AT_Cmd_ATZ:
   1125          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1126            AT_CmdUnit cmdUnitArr[1];
   1127            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
   1128            AT_PARSE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   \                     ??CrossCallReturnLabel_121:
   \   00000D   6007         JZ        ??AT_Cmd_ATZ_0
   \   00000F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000014   8017         SJMP      ??AT_Cmd_ATZ_1
   1129            AT_OK();
   \                     ??AT_Cmd_ATZ_0:
   \   000016                ; Setup parameters for call to function AT_Uart0_Send
   \   000016   7C06         MOV       R4,#0x6
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   00001C   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00001E   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1130          
   1131            osal_start_timerEx( AT_UART_TaskID, AT_RESET_EVENT, 50 ); //set timer ensure OK response from AT command is sent
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   90....       MOV       DPTR,#__Constant_32
   \   000024   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000027   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00002A   12....       LCALL     ?DEALLOC_XSTACK8
   1132          }
   \                     ??AT_Cmd_ATZ_1:
   \   00002D   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   7A10         MOV       R2,#0x10
   \   000002                REQUIRE ??Subroutine151_0
   \   000002                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#AT_UART_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00000A   7404         MOV       A,#0x4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine156_0
   \   000002                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   AA..         MOV       R2,?XSP + 0
   \   000006   AB..         MOV       R3,?XSP + 1
   \   000008   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   \   00000B                ; Setup parameters for call to function AT_Pattern_Check
   \   00000B                ; Setup parameters for call to function AT_Pattern_Check
   \   00000B                ; Setup parameters for call to function AT_Pattern_Check
   \   00000B                ; Setup parameters for call to function AT_Pattern_Check
   \   00000B                ; Setup parameters for call to function AT_Pattern_Check
   \   00000B                ; Setup parameters for call to function AT_Pattern_Check
   \   00000B                ; Setup parameters for call to function AT_Pattern_Check
   \   00000B   AC..         MOV       R4,?XSP + 0
   \   00000D   AD..         MOV       R5,?XSP + 1
   \   00000F   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   000011   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   000013   12....       LCALL     `??AT_Pattern_Check::?relay`; Banked call to: AT_Pattern_Check
   \   000016   E9           MOV       A,R1
   \   000017   F9           MOV       R1,A
   \   000018   22           RET
   1133          
   1134          /***************************************************************************************************
   1135           * @fn      AT_Cmd_ATF
   1136           *
   1137           * @brief   AT&F - Restore Local Device's Factory Defaults
   1138           *           Note: Module performs a factory reset.
   1139           *                 All non-volatile S Registers are updated with their factory
   1140           *                 defaults and the node leaves the currently joined network
   1141           *
   1142           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1143           * @param   uint8* msg_ptr - the message pointer
   1144           *
   1145           * @return  None
   1146           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1147          void AT_Cmd_ATF( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_ATF:
   1148          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine69 & 0xFFFF
   1149            uint8 status;
   1150            AT_CmdUnit cmdUnitArr[3];
   1151            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   1152          
   1153            if(cmdUnitArr[0].symbol == '\r') {
   \                     ??CrossCallReturnLabel_283:
   \   00000D   75....       MOV       ?V2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000010   75....       MOV       ?V3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   640D         XRL       A,#0xd
   \   00001C   7013         JNZ       ??AT_Cmd_ATF_0
   1154              AT_PARSE_CMD_PATTERN_ERROR("\r",cmdUnitArr);
   \   00001E                ; Setup parameters for call to function AT_Pattern_Check
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   000024   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   000026   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000029   7027         JNZ       ??AT_Cmd_ATF_1
   \   00002B                ; Setup parameters for call to function AT_UARTWriteErrMsg
   1155          
   1156              // AT_clear_AT_SYSTEM_NVs(); if Application use NV, we need to define this function
   1157              bdb_resetLocalAction();
   \   00002B                ; Setup parameters for call to function bdb_resetLocalAction
   \   00002B   12....       LCALL     `??bdb_resetLocalAction::?relay`; Banked call to: bdb_resetLocalAction
   1158              AT_OK();
   \   00002E                ; Setup parameters for call to function AT_Uart0_Send
   \   00002E   02....       LJMP      ??AT_Cmd_ATF_2 & 0xFFFF
   1159            } else {
   1160              for (int i = 1; i < 3; i++) {
   1161                cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_ATF_0:
   \   000031                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000031   EE           MOV       A,R6
   \   000032   FC           MOV       R4,A
   \   000033   EF           MOV       A,R7
   \   000034   FD           MOV       R5,A
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   AA82         MOV       R2,DPL
   \   00003C   AB83         MOV       R3,DPH
   \   00003E   12....       LCALL     ?Subroutine68 & 0xFFFF
   1162              }
   \                     ??CrossCallReturnLabel_142:
   \   000041   7408         MOV       A,#0x8
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   AA82         MOV       R2,DPL
   \   000048   AB83         MOV       R3,DPH
   \   00004A   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   1163          	  AT_PARSE_CMD_PATTERN_ERROR(":,\r",cmdUnitArr);
   \   00004D                ; Setup parameters for call to function AT_Pattern_Check
   \   00004D   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000050   6005         JZ        ??AT_Cmd_ATF_3
   \   000052                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_ATF_1:
   \   000052   7A01         MOV       R2,#0x1
   \   000054   02....       LJMP      ??AT_Cmd_ATF_4 & 0xFFFF
   1164          
   1165              uint16 addr = AT_ChartoInt16(&cmdUnitArr[0]);
   \                     ??AT_Cmd_ATF_3:
   \   000057                ; Setup parameters for call to function AT_ChartoInt16
   \   000057   AA..         MOV       R2,?XSP + 0
   \   000059   AB..         MOV       R3,?XSP + 1
   \   00005B   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   1166              uint8  ep   = AT_ChartoInt8(&cmdUnitArr[1]);
   \                     ??CrossCallReturnLabel_290:
   \   00005E                ; Setup parameters for call to function AT_ChartoInt8
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   AA82         MOV       R2,DPL
   \   000065   AB83         MOV       R3,DPH
   \   000067   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   1167          
   1168              // build destination address
   1169              afAddrType_t dstAddr;
   1170              dstAddr.endPoint = ep;
   \   00006A   7415         MOV       A,#0x15
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E9           MOV       A,R1
   \   000070   F0           MOVX      @DPTR,A
   1171              dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000071   7414         MOV       A,#0x14
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   7402         MOV       A,#0x2
   \   000078   F0           MOVX      @DPTR,A
   1172              dstAddr.addr.shortAddr = addr;
   \   000079   740C         MOV       A,#0xc
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine25 & 0xFFFF
   1173          
   1174              status = zclGeneral_SendBasicResetFactoryDefaults( ZCL_CONTROLLER_ENDPOINT, &dstAddr,
   1175                                  TRUE, bdb_getZCLFrameCounter() );
   \                     ??CrossCallReturnLabel_37:
   \   000081                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000081   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   000084   E9           MOV       A,R1
   \   000085   F9           MOV       R1,A
   \   000086                ; Setup parameters for call to function zcl_SendCommand
   \   000086   E4           CLR       A
   \   000087   F5..         MOV       ?V4,A
   \   000089   F5..         MOV       ?V5,A
   \   00008B   78..         MOV       R0,#?V4
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   E9           MOV       A,R1
   \   000096   F5..         MOV       ?V1,A
   \   000098   78..         MOV       R0,#?V1
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009D   78..         MOV       R0,#?V4
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A2   75..01       MOV       ?V1,#0x1
   \   0000A5   78..         MOV       R0,#?V1
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AA   75..00       MOV       ?V1,#0x0
   \   0000AD   78..         MOV       R0,#?V1
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B2   75..01       MOV       ?V1,#0x1
   \   0000B5   78..         MOV       R0,#?V1
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BA   75..00       MOV       ?V1,#0x0
   \   0000BD   78..         MOV       R0,#?V1
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   7C00         MOV       R4,#0x0
   \   0000C4   7D00         MOV       R5,#0x0
   \   0000C6   7417         MOV       A,#0x17
   \   0000C8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CB   7964         MOV       R1,#0x64
   \   0000CD   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D0   740B         MOV       A,#0xb
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV       A,R1
   \   0000D6   F9           MOV       R1,A
   1176              if(status != afStatus_SUCCESS) {
   \   0000D7   6007         JZ        ??AT_Cmd_ATF_2
   1177                AT_SEND_ERROR(status);
   \   0000D9                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000D9   7A02         MOV       R2,#0x2
   \                     ??AT_Cmd_ATF_4:
   \   0000DB   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   0000DE   800B         SJMP      ??AT_Cmd_ATF_5
   1178              }
   1179              else AT_OK();
   \                     ??AT_Cmd_ATF_2:
   \   0000E0                ; Setup parameters for call to function AT_Uart0_Send
   \   0000E0   7C06         MOV       R4,#0x6
   \   0000E2   7D00         MOV       R5,#0x0
   \   0000E4   AA..         MOV       R2,?V2
   \   0000E6   AB..         MOV       R3,?V3
   \   0000E8   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1180            }
   1181          
   1182          }
   \                     ??AT_Cmd_ATF_5:
   \   0000EB   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000004                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000004   EA           MOV       A,R2
   \   000005   FC           MOV       R4,A
   \   000006   EB           MOV       A,R3
   \   000007   FD           MOV       R5,A
   \   000008   AA..         MOV       R2,?XSP + 0
   \   00000A   AB..         MOV       R3,?XSP + 1
   \   00000C                REQUIRE ??Subroutine152_0
   \   00000C                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000003   F5..         MOV       ?V0,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E5..         MOV       A,?V4
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V5
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   \   000003   E9           MOV       A,R1
   \   000004   F5..         MOV       ?V0,A
   \   000006                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000006                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000006                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000006                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000006   EE           MOV       A,R6
   \   000007   FC           MOV       R4,A
   \   000008   EF           MOV       A,R7
   \   000009   FD           MOV       R5,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7418         MOV       A,#0x18
   \   000002                REQUIRE ??Subroutine176_0
   \   000002                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine177_0
   \   000003                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   AC..         MOV       R4,?XSP + 0
   \   000002   AD..         MOV       R5,?XSP + 1
   \   000004                REQUIRE ??Subroutine179_0
   \   000004                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   7A..         MOV       R2,#`?<Constant ":,\\r">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant ":,\\r">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine180_0
   \   000004                ; // Fall through to label ??Subroutine180_0
   1183          
   1184          /*******************************************************************************
   1185           * @fn      AT_Cmd_BLoad
   1186           *
   1187           * @brief   AT+BLOAD - Enter The Boot Loader Menu
   1188           *
   1189           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1190           * @param   uint8* msg_ptr - the message pointer
   1191           *
   1192           * @return  None
   1193           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1194          void AT_Cmd_BLoad( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_BLoad:
   1195          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1196            AT_CmdUnit cmdUnitArr[1];
   1197            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
   1198            AT_PARSE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   \                     ??CrossCallReturnLabel_122:
   \   00000D   6007         JZ        ??AT_Cmd_BLoad_0
   \   00000F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000014   8022         SJMP      ??CrossCallReturnLabel_146
   1199          
   1200            osal_start_timerEx( AT_UART_TaskID, AT_RESET_EVENT, 100 ); //set timer ensure OK response from AT command is sent
   \                     ??AT_Cmd_BLoad_0:
   \   000016                ; Setup parameters for call to function osal_start_timerEx
   \   000016   90....       MOV       DPTR,#__Constant_64
   \   000019   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001C   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   1201          
   1202            AT_OK();
   \   000022                ; Setup parameters for call to function AT_Uart0_Send
   \   000022   7C06         MOV       R4,#0x6
   \   000024   7D00         MOV       R5,#0x0
   \   000026   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000028   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00002A   12....       LCALL     ?Subroutine74 & 0xFFFF
   1203            AT_NEW_LINE();
   1204            AT_RESP("Enter BootLoader", sizeof("Enter BootLoader")-1);
   \                     ??CrossCallReturnLabel_145:
   \   00002D                ; Setup parameters for call to function AT_Uart0_Send
   \   00002D   7C10         MOV       R4,#0x10
   \   00002F   7D00         MOV       R5,#0x0
   \   000031   7A..         MOV       R2,#`?<Constant "Enter BootLoader">` & 0xff
   \   000033   7B..         MOV       R3,#(`?<Constant "Enter BootLoader">` >> 8) & 0xff
   \   000035   12....       LCALL     ?Subroutine74 & 0xFFFF
   1205            AT_NEW_LINE();
   1206          }
   \                     ??CrossCallReturnLabel_146:
   \   000038   02....       LJMP      ?Subroutine0 & 0xFFFF
   1207          
   1208          /*******************************************************************************
   1209           * @fn      AT_Cmd_Time
   1210           *
   1211           * @brief   AT+Time - Get or Set Local Time
   1212           *
   1213           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1214           * @param   uint8* msg_ptr - the message pointer
   1215           *
   1216           * @return  None
   1217           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1218          void AT_Cmd_Time( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_Time:
   1219          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   1220            UTCTime time_c;
   1221            uint8 str[8];
   1222            AT_CmdUnit cmdUnitArr[2];
   1223            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000E                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000E   AC..         MOV       R4,?V0
   \   000010   AD..         MOV       R5,?V1
   \   000012   12....       LCALL     ?Subroutine64 & 0xFFFF
   1224          
   1225            AT_NEW_LINE();
   \                     ??CrossCallReturnLabel_466:
   \   000015                ; Setup parameters for call to function AT_Uart0_Send
   \   000015   7C02         MOV       R4,#0x2
   \   000017   7D00         MOV       R5,#0x0
   \   000019   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00001B   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00001D   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1226            if(cmdUnitArr[0].symbol == '\r') {
   \   000020   85..82       MOV       DPL,?XSP + 0
   \   000023   85..83       MOV       DPH,?XSP + 1
   \   000026   E0           MOVX      A,@DPTR
   \   000027   640D         XRL       A,#0xd
   \   000029   702F         JNZ       ??AT_Cmd_Time_0
   1227              AT_PARSE_CMD_PATTERN_ERROR("\r",cmdUnitArr);
   \   00002B                ; Setup parameters for call to function AT_Pattern_Check
   \   00002B   AC..         MOV       R4,?XSP + 0
   \   00002D   AD..         MOV       R5,?XSP + 1
   \   00002F   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   000031   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   000033   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000036   7032         JNZ       ??AT_Cmd_Time_1
   \   000038                ; Setup parameters for call to function AT_UARTWriteErrMsg
   1228          
   1229              time_c = osal_getClock();
   \   000038                ; Setup parameters for call to function osal_getClock
   \   000038   12....       LCALL     `??osal_getClock::?relay`; Banked call to: osal_getClock
   1230              AT_Int32toChar( time_c, str );
   \   00003B                ; Setup parameters for call to function AT_Int32toChar
   \   00003B   7408         MOV       A,#0x8
   \   00003D   12....       LCALL     ?XSTACK_DISP100_8
   \   000040   88..         MOV       ?V0,R0
   \   000042   89..         MOV       ?V1,R1
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   12....       LCALL     `??AT_Int32toChar::?relay`; Banked call to: AT_Int32toChar
   \   00004C   7402         MOV       A,#0x2
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   1231              AT_RESP("TIME:", 5);
   \   000051                ; Setup parameters for call to function AT_Uart0_Send
   \   000051   12....       LCALL     ?Subroutine72 & 0xFFFF
   1232              AT_RESP(str, 8);
   1233            } else {
   \                     ??CrossCallReturnLabel_508:
   \   000054   EC           MOV       A,R4
   \   000055   12....       LCALL     ?XSTACK_DISP101_8
   \   000058   802C         SJMP      ??CrossCallReturnLabel_313
   1234              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[1], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_Time_0:
   \   00005A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00005A   AC..         MOV       R4,?V0
   \   00005C   AD..         MOV       R5,?V1
   \   00005E   A9..         MOV       R1,?V2
   \   000060   7404         MOV       A,#0x4
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   12....       LCALL     ?Subroutine61 & 0xFFFF
   1235          	  AT_PARSE_CMD_PATTERN_ERROR(":\r",cmdUnitArr);
   \                     ??CrossCallReturnLabel_128:
   \   000068   6007         JZ        ??AT_Cmd_Time_2
   \   00006A                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_Time_1:
   \   00006A   7A01         MOV       R2,#0x1
   \   00006C   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   00006F   8018         SJMP      ??CrossCallReturnLabel_529
   1236          
   1237              time_c = AT_ChartoInt32(&cmdUnitArr[0]);
   \                     ??AT_Cmd_Time_2:
   \   000071                ; Setup parameters for call to function AT_ChartoInt32
   \   000071   AA..         MOV       R2,?XSP + 0
   \   000073   AB..         MOV       R3,?XSP + 1
   \   000075   12....       LCALL     `??AT_ChartoInt32::?relay`; Banked call to: AT_ChartoInt32
   1238              osal_setClock(time_c);
   \   000078                ; Setup parameters for call to function osal_setClock
   \   000078   12....       LCALL     `??osal_setClock::?relay`; Banked call to: osal_setClock
   1239              AT_RESP("TIME:", 5);
   \   00007B                ; Setup parameters for call to function AT_Uart0_Send
   \   00007B   12....       LCALL     ?Subroutine72 & 0xFFFF
   1240              AT_RESP(cmdUnitArr[0].unit, 8);
   1241            }
   \                     ??CrossCallReturnLabel_509:
   \   00007E   7402         MOV       A,#0x2
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000086   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   1242            AT_OK();
   1243          }
   \                     ??CrossCallReturnLabel_529:
   \   000089   7410         MOV       A,#0x10
   \   00008B   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine163_0
   \   000003                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   \   000007                ; Setup parameters for call to function AT_Pattern_Check
   \   000007                ; Setup parameters for call to function AT_Pattern_Check
   \   000007                ; Setup parameters for call to function AT_Pattern_Check
   \   000007                ; Setup parameters for call to function AT_Pattern_Check
   \   000007   AC..         MOV       R4,?XSP + 0
   \   000009   AD..         MOV       R5,?XSP + 1
   \   00000B   7A..         MOV       R2,#`?<Constant ":\\r">` & 0xff
   \   00000D   7B..         MOV       R3,#(`?<Constant ":\\r">` >> 8) & 0xff
   \   00000F   12....       LCALL     `??AT_Pattern_Check::?relay`; Banked call to: AT_Pattern_Check
   \   000012   E9           MOV       A,R1
   \   000013   F9           MOV       R1,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   AA..         MOV       R2,?XSP + 0
   \   000002   AB..         MOV       R3,?XSP + 1
   \   000004                REQUIRE ??Subroutine185_0
   \   000004                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   000003   F5..         MOV       ?V2,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   7C05         MOV       R4,#0x5
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "TIME:">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "TIME:">` >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine193_0
   \   000008                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C08         MOV       R4,#0x8
   \   000005   7D00         MOV       R5,#0x0
   \   000007   22           RET
   1244          
   1245          /*******************************************************************************
   1246           * @fn      AT_Cmd_RawZCL
   1247           *
   1248           * @brief   AT+RAWZCL - Send A Raw ZCL Message With Specified ProfileID
   1249           *                      And Source Endpoint
   1250           *          Format: AT+RAWZCL:<NodeID>,<DstEP>,[SrcEP],[ProfileID],
   1251           *                             <ClusterID>,<data>
   1252           *                  <NodeID> - 16 bit hexadecimal number, network address of
   1253           *                             a remote device.
   1254           *                  <DstEp>  - 8 bit hexadecimal number, destination endpoint
   1255           *                             of a remote device.
   1256           *                  [SrcEP]  - 8 bit hexadecimal number, source endpoint of
   1257           *                             a local device. If it is omitted, source
   1258           *                             endpoint is set to 0x64
   1259           *                  [ProfileID] - 16 bit hexadecimal number which represents
   1260           *                                profile ID. E.g. 0x0104 for ZigBee home
   1261           *                                automation profile. If it is omitted, profile
   1262           *                                ID is set to 0x0104
   1263           *                  <ClusterID> - 16 bit hexadecimal number which represents
   1264           *                                cluster ID
   1265           *                  <data>   - a constructed ZCL command in hexadecimal format
   1266           *                          (please check ZigBee Cluster Library for references)
   1267           *
   1268           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1269           * @param   uint8* msg_ptr - the message pointer
   1270           *
   1271           * @return  None
   1272           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1273          void AT_Cmd_RawZCL( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_RawZCL:
   1274          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV       A,#-0x2c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   1275            uint8 i;
   1276            uint8 status;
   1277            uint16 dataLen;
   1278            uint8 *buf;
   1279            uint8 *pBuf;
   1280            // uint16 tempdata;
   1281            AT_CmdUnit cmdUnitArr[7];
   1282          
   1283            for ( i = 0; i < 7; i++) {
   \   000010   75..00       MOV       ?V0,#0x0
   1284              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_RawZCL_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V1
   \   000019   E5..         MOV       A,?V0
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine87 & 0xFFFF
   1285            }
   \                     ??CrossCallReturnLabel_169:
   \   00002F   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000032   F5..         MOV       ?V1,A
   \   000034   05..         INC       ?V0
   \   000036   E5..         MOV       A,?V0
   \   000038   C3           CLR       C
   \   000039   9407         SUBB      A,#0x7
   \   00003B   40D6         JC        ??AT_Cmd_RawZCL_0
   1286            AT_PARSE_CMD_PATTERN_ERROR(":,,,,,\r",cmdUnitArr);
   \   00003D                ; Setup parameters for call to function AT_Pattern_Check
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?XSTACK_DISP102_8
   \   000042   7A..         MOV       R2,#`?<Constant ":,,,,,\\r">` & 0xff
   \   000044   7B..         MOV       R3,#(`?<Constant ":,,,,,\\r">` >> 8) & 0xff
   \   000046   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000049   6005         JZ        ??AT_Cmd_RawZCL_1
   \   00004B                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00004B   7A01         MOV       R2,#0x1
   \   00004D   02....       LJMP      ??AT_Cmd_RawZCL_2 & 0xFFFF
   1287          
   1288            uint16 addr = AT_ChartoInt16(&cmdUnitArr[0]);
   \                     ??AT_Cmd_RawZCL_1:
   \   000050                ; Setup parameters for call to function AT_ChartoInt16
   \   000050   7404         MOV       A,#0x4
   \   000052   12....       LCALL     ?XSTACK_DISP101_8
   \   000055   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000058   8A..         MOV       ?V14,R2
   \   00005A   8B..         MOV       ?V15,R3
   1289            uint8 dstEP = AT_ChartoInt8(&cmdUnitArr[1]);
   \   00005C                ; Setup parameters for call to function AT_ChartoInt8
   \   00005C   7408         MOV       A,#0x8
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000064   F5..         MOV       ?V10,A
   1290            uint8 srcEP;
   1291            if (cmdUnitArr[2].unitLen != 0) {
   \   000066   740D         MOV       A,#0xd
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   600A         JZ        ??AT_Cmd_RawZCL_3
   1292              srcEP = AT_ChartoInt8(&cmdUnitArr[2]);
   \   00006E                ; Setup parameters for call to function AT_ChartoInt8
   \   00006E   740C         MOV       A,#0xc
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   12....       LCALL     ?Subroutine106 & 0xFFFF
   1293            } else {
   \                     ??CrossCallReturnLabel_197:
   \   000076   8003         SJMP      ??AT_Cmd_RawZCL_4
   1294              srcEP = ZCL_CONTROLLER_ENDPOINT;
   \                     ??AT_Cmd_RawZCL_3:
   \   000078   75..64       MOV       ?V0,#0x64
   1295            }
   1296            // uint16 profileID;
   1297            // if (cmdUnitArr[3].unitLen != 0) {
   1298            //   uint16 profileID = AT_ChartoInt8(&cmdUnitArr[3]);
   1299            // } else {
   1300            //   uint16 profileID = 0x0104;
   1301            // }
   1302            uint16 cID = AT_ChartoInt16(&cmdUnitArr[4]);
   \                     ??AT_Cmd_RawZCL_4:
   \   00007B                ; Setup parameters for call to function AT_ChartoInt16
   \   00007B   7414         MOV       A,#0x14
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?Subroutine93 & 0xFFFF
   1303            // set a temp unit to store cmd
   1304            AT_CmdUnit tempUnit;
   1305            tempUnit.unitLen = 2;
   \                     ??CrossCallReturnLabel_286:
   \   000083   7401         MOV       A,#0x1
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   7402         MOV       A,#0x2
   \   00008A   F0           MOVX      @DPTR,A
   1306            tempUnit.unit = cmdUnitArr[5].unit;
   \   00008B   741A         MOV       A,#0x1a
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine13 & 0xFFFF
   1307            uint8 fc = AT_ChartoInt8(&tempUnit);
   \                     ??CrossCallReturnLabel_0:
   \   00009B   F5..         MOV       ?V11,A
   1308            cmdUnitArr[5].unitLen -= 2;
   \   00009D   7419         MOV       A,#0x19
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?Subroutine52 & 0xFFFF
   1309            cmdUnitArr[5].unit += 2;
   \                     ??CrossCallReturnLabel_107:
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?Subroutine15 & 0xFFFF
   1310            tempUnit.unit = cmdUnitArr[5].unit;
   \                     ??CrossCallReturnLabel_7:
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL     ?Subroutine13 & 0xFFFF
   1311            uint8 seqNum = AT_ChartoInt8(&tempUnit);
   \                     ??CrossCallReturnLabel_1:
   \   0000B7   F5..         MOV       ?V9,A
   1312            cmdUnitArr[5].unitLen -= 2;
   \   0000B9   7419         MOV       A,#0x19
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ?Subroutine52 & 0xFFFF
   1313            cmdUnitArr[5].unit += 2;
   \                     ??CrossCallReturnLabel_108:
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL     ?Subroutine15 & 0xFFFF
   1314            tempUnit.unit = cmdUnitArr[5].unit;
   \                     ??CrossCallReturnLabel_8:
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   12....       LCALL     ?Subroutine13 & 0xFFFF
   1315            uint8 cmd = AT_ChartoInt8(&tempUnit);
   \                     ??CrossCallReturnLabel_2:
   \   0000D3   F5..         MOV       ?V8,A
   1316            cmdUnitArr[5].unitLen -= 2;
   \   0000D5   7419         MOV       A,#0x19
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL     ?Subroutine52 & 0xFFFF
   1317            cmdUnitArr[5].unit += 2;
   \                     ??CrossCallReturnLabel_109:
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   12....       LCALL     ?Subroutine15 & 0xFFFF
   1318            tempUnit.unit = cmdUnitArr[5].unit;
   \                     ??CrossCallReturnLabel_9:
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL     ?Subroutine17 & 0xFFFF
   1319          
   1320            dataLen = cmdUnitArr[5].unitLen;
   \                     ??CrossCallReturnLabel_13:
   \   0000EF   7419         MOV       A,#0x19
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   1321            if (dataLen%2 != 0) {
   \   0000F5   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000F7   5007         JNC       ??AT_Cmd_RawZCL_5
   1322              AT_ERROR(AT_OPERATION_INVALID);
   \   0000F9                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000F9   7A01         MOV       R2,#0x1
   \   0000FB   7970         MOV       R1,#0x70
   \   0000FD   02....       LJMP      ??AT_Cmd_RawZCL_2 & 0xFFFF
   1323              return;
   1324            }
   1325            dataLen = dataLen / 2;
   \                     ??AT_Cmd_RawZCL_5:
   \   000100   C3           CLR       C
   \   000101   13           RRC       A
   \   000102   FE           MOV       R6,A
   \   000103   7F00         MOV       R7,#0x0
   1326            buf = zcl_mem_alloc( dataLen );
   \   000105                ; Setup parameters for call to function osal_mem_alloc
   \   000105   FA           MOV       R2,A
   \   000106   7B00         MOV       R3,#0x0
   \   000108   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00010B   8A..         MOV       ?V2,R2
   \   00010D   8B..         MOV       ?V3,R3
   \   00010F   8A..         MOV       ?V6,R2
   \   000111   8B..         MOV       ?V7,R3
   1327            if ( buf != NULL )
   \   000113   EA           MOV       A,R2
   \   000114   4B           ORL       A,R3
   \   000115   7003         JNZ       $+5
   \   000117   02....       LJMP      ??AT_Cmd_RawZCL_6 & 0xFFFF
   1328            {
   1329              uint8 i;
   1330          
   1331              // Load the buffer - serially
   1332              pBuf = buf;
   1333              // tempUnit.unitLen = 4;
   1334              for (i = 0; i < dataLen; i++)
   \   00011A   75..00       MOV       ?V12,#0x0
   \   00011D   802B         SJMP      ??AT_Cmd_RawZCL_7
   1335              {
   1336                *pBuf++ = AT_ChartoInt8(&tempUnit);
   \                     ??AT_Cmd_RawZCL_8:
   \   00011F                ; Setup parameters for call to function AT_ChartoInt8
   \   00011F   AA..         MOV       R2,?XSP + 0
   \   000121   AB..         MOV       R3,?XSP + 1
   \   000123   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000126   85..82       MOV       DPL,?V2
   \   000129   85..83       MOV       DPH,?V3
   \   00012C   F0           MOVX      @DPTR,A
   \   00012D   A3           INC       DPTR
   \   00012E   8582..       MOV       ?V2,DPL
   \   000131   8583..       MOV       ?V3,DPH
   1337                cmdUnitArr[5].unit += 2;
   \   000134   741A         MOV       A,#0x1a
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   12....       LCALL     ?Subroutine37 & 0xFFFF
   1338                // tempdata = AT_ChartoInt16(&tempUnit);
   1339                // *pBuf++ = LO_UINT16(tempdata);
   1340                // *pBuf++ = HI_UINT16(tempdata);
   1341                // cmdUnitArr[5].unit += 4;
   1342                tempUnit.unit = cmdUnitArr[5].unit;
   1343              }
   \                     ??CrossCallReturnLabel_82:
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000148   05..         INC       ?V12
   \                     ??AT_Cmd_RawZCL_7:
   \   00014A   C3           CLR       C
   \   00014B   E5..         MOV       A,?V12
   \   00014D   9E           SUBB      A,R6
   \   00014E   95E0         SUBB      A,0xE0 /* A   */
   \   000150   40CD         JC        ??AT_Cmd_RawZCL_8
   1344          
   1345              // build destination address
   1346              afAddrType_t dstAddr;
   1347              dstAddr.endPoint = dstEP;
   \   000152   7429         MOV       A,#0x29
   \   000154   12....       LCALL     ?XSTACK_DISP0_8
   \   000157   E5..         MOV       A,?V10
   \   000159   F0           MOVX      @DPTR,A
   1348              dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00015A   7428         MOV       A,#0x28
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   7402         MOV       A,#0x2
   \   000161   F0           MOVX      @DPTR,A
   1349              dstAddr.addr.shortAddr = addr;
   \   000162   7420         MOV       A,#0x20
   \   000164   12....       LCALL     ?XSTACK_DISP0_8
   \   000167   E5..         MOV       A,?V14
   \   000169   F0           MOVX      @DPTR,A
   \   00016A   A3           INC       DPTR
   \   00016B   E5..         MOV       A,?V15
   \   00016D   F0           MOVX      @DPTR,A
   1350          
   1351              if(fc == ZCL_FRAME_TYPE_SPECIFIC_CMD)
   \   00016E   7401         MOV       A,#0x1
   \   000170   65..         XRL       A,?V11
   \   000172   78..         MOV       R0,#?V6
   \   000174   702C         JNZ       ??AT_Cmd_RawZCL_9
   1352              {
   1353                status = zcl_SendCommand( srcEP, &dstAddr, cID, cmd, TRUE,
   1354                                       ZCL_FRAME_CLIENT_SERVER_DIR,
   1355                                       0, 0, seqNum,
   1356                                       dataLen, buf );
   \   000176                ; Setup parameters for call to function zcl_SendCommand
   \   000176   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000179   8E..         MOV       ?V2,R6
   \   00017B   8F..         MOV       ?V3,R7
   \   00017D   78..         MOV       R0,#?V2
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000182   E5..         MOV       A,?V9
   \   000184   F5..         MOV       ?V2,A
   \   000186   78..         MOV       R0,#?V2
   \   000188   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018B   E4           CLR       A
   \   00018C   F5..         MOV       ?V2,A
   \   00018E   78..         MOV       R0,#?V2
   \   000190   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000193   78..         MOV       R0,#?V2
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000198   78..         MOV       R0,#?V2
   \   00019A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019D   75..01       MOV       ?V2,#0x1
   \   0001A0   8027         SJMP      ??AT_Cmd_RawZCL_10
   1357              } else {
   1358                status = zcl_SendCommand( srcEP, &dstAddr, cID, cmd, FALSE,
   1359                                       ZCL_FRAME_CLIENT_SERVER_DIR,
   1360                                       0, 0, seqNum,
   1361                                       dataLen, buf );
   \                     ??AT_Cmd_RawZCL_9:
   \   0001A2                ; Setup parameters for call to function zcl_SendCommand
   \   0001A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A5   8E..         MOV       ?V2,R6
   \   0001A7   8F..         MOV       ?V3,R7
   \   0001A9   78..         MOV       R0,#?V2
   \   0001AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AE   E5..         MOV       A,?V9
   \   0001B0   F5..         MOV       ?V2,A
   \   0001B2   78..         MOV       R0,#?V2
   \   0001B4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B7   E4           CLR       A
   \   0001B8   F5..         MOV       ?V2,A
   \   0001BA   78..         MOV       R0,#?V2
   \   0001BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BF   78..         MOV       R0,#?V2
   \   0001C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C4   78..         MOV       R0,#?V2
   \   0001C6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \                     ??AT_Cmd_RawZCL_10:
   \   0001C9   78..         MOV       R0,#?V2
   \   0001CB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CE   E5..         MOV       A,?V8
   \   0001D0   F5..         MOV       ?V2,A
   \   0001D2   78..         MOV       R0,#?V2
   \   0001D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D7   AC..         MOV       R4,?V4
   \   0001D9   AD..         MOV       R5,?V5
   \   0001DB   742B         MOV       A,#0x2b
   \   0001DD   12....       LCALL     ?XSTACK_DISP101_8
   \   0001E0   A9..         MOV       R1,?V0
   \   0001E2   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001E5   740B         MOV       A,#0xb
   \   0001E7   12....       LCALL     ?DEALLOC_XSTACK8
   1362              }
   1363          
   1364          
   1365              zcl_mem_free( buf );
   1366            }
   \   0001EA   12....       LCALL     ?Subroutine115 & 0xFFFF
   1367            else
   1368            {
   1369              status = ZMemError;
   1370            }
   1371          
   1372            if(status != afStatus_SUCCESS && status != ZMemError)
   \                     ??CrossCallReturnLabel_366:
   \   0001ED   6014         JZ        ??AT_Cmd_RawZCL_11
   \   0001EF   7410         MOV       A,#0x10
   \   0001F1   6E           XRL       A,R6
   \   0001F2   6006         JZ        ??AT_Cmd_RawZCL_6
   1373              AT_SEND_ERROR(status);
   \   0001F4                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0001F4   7A02         MOV       R2,#0x2
   \   0001F6   EE           MOV       A,R6
   \   0001F7   F9           MOV       R1,A
   \   0001F8   8004         SJMP      ??AT_Cmd_RawZCL_2
   1374            else if (status == ZMemError) {
   1375              AT_ZDO_ERROR(status);
   \                     ??AT_Cmd_RawZCL_6:
   \   0001FA                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0001FA   7A03         MOV       R2,#0x3
   \   0001FC   7910         MOV       R1,#0x10
   \                     ??AT_Cmd_RawZCL_2:
   \   0001FE   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000201   800B         SJMP      ??AT_Cmd_RawZCL_12
   1376            } else {
   1377              AT_OK();
   \                     ??AT_Cmd_RawZCL_11:
   \   000203                ; Setup parameters for call to function AT_Uart0_Send
   \   000203   7C06         MOV       R4,#0x6
   \   000205   7D00         MOV       R5,#0x0
   \   000207   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000209   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00020B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1378            }
   1379          
   1380          }
   \                     ??AT_Cmd_RawZCL_12:
   \   00020E   742C         MOV       A,#0x2c
   \   000210   12....       LCALL     ?DEALLOC_XSTACK8
   \   000213   7F10         MOV       R7,#0x10
   \   000215   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine153_0
   \   000004                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   24FE         ADD       A,#-0x2
   \   000003   F0           MOVX      @DPTR,A
   \   000004   741A         MOV       A,#0x1a
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   741A         MOV       A,#0x1a
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000007   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7402         MOV       A,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   E582         MOV       A,DPL
   \   000002   25..         ADD       A,?V2
   \   000004   FA           MOV       R2,A
   \   000005   E583         MOV       A,DPH
   \   000007   35..         ADDC      A,?V3
   \   000009   FB           MOV       R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                REQUIRE ??Subroutine173_0
   \   000002                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   AA..         MOV       R2,?V6
   \   000002   AB..         MOV       R3,?V7
   \   000004                REQUIRE ??Subroutine174_0
   \   000004                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000007   E9           MOV       A,R1
   \   000008   F5..         MOV       ?V0,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine183_0
   \   000004                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000003   E9           MOV       A,R1
   \   000004   22           RET
   1381          
   1382          /*******************************************************************************
   1383           * @fn      AT_Cmd_RawZDO
   1384           *
   1385           * @brief   AT+RAWZDO - Construct A Raw ZDO Message And Send To Target
   1386           *          Format: AT+RAWZDO:<NodeID>,<ClusterID>,<data>
   1387           *                  <NodeID> - 16 bit hexadecimal number, network address of
   1388           *                             a remote device.
   1389           *                  <ClusterID> - ZDO Command ID, see ZigBeeSpecification [4] for
   1390           *                             more information.
   1391           *                  <data>   - a constructed ZCL command in hexadecimal format
   1392           *                          (please check ZigBee Cluster Library for references)
   1393           *
   1394           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1395           * @param   uint8* msg_ptr - the message pointer
   1396           *
   1397           * @return  None
   1398           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1399          void AT_Cmd_RawZDO( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_RawZDO:
   1400          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 49
   \   000005   74CF         MOV       A,#-0x31
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   1401            uint8 i;
   1402            uint8 status;
   1403            uint16 dataLen;
   1404            uint8 *buf;
   1405            uint8 *pBuf;
   1406            AT_CmdUnit cmdUnitArr[4];
   1407          
   1408            for ( i = 0; i < 4; i++) {
   \   000010   75..00       MOV       ?V3,#0x0
   1409              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_RawZDO_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V2
   \   000019   E5..         MOV       A,?V3
   \   00001B   F5..         MOV       ?V0,A
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?S_SHL
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E582         MOV       A,DPL
   \   00002E   25..         ADD       A,?V0
   \   000030   FA           MOV       R2,A
   \   000031   E583         MOV       A,DPH
   \   000033   35..         ADDC      A,?V1
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     ??Subroutine185_0 & 0xFFFF
   1410            }
   \                     ??CrossCallReturnLabel_468:
   \   000039   05..         INC       ?V3
   \   00003B   E5..         MOV       A,?V3
   \   00003D   C3           CLR       C
   \   00003E   9404         SUBB      A,#0x4
   \   000040   40D1         JC        ??AT_Cmd_RawZDO_0
   1411            AT_PARSE_CMD_PATTERN_ERROR(":,,\r",cmdUnitArr);
   \   000042                ; Setup parameters for call to function AT_Pattern_Check
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?XSTACK_DISP102_8
   \   000047   7A..         MOV       R2,#`?<Constant ":,,\\r">` & 0xff
   \   000049   7B..         MOV       R3,#(`?<Constant ":,,\\r">` >> 8) & 0xff
   \   00004B   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   00004E   6005         JZ        ??AT_Cmd_RawZDO_1
   \   000050                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000050   7A01         MOV       R2,#0x1
   \   000052   02....       LJMP      ??AT_Cmd_RawZDO_2 & 0xFFFF
   1412          
   1413            uint16 addr = AT_ChartoInt16(&cmdUnitArr[0]);
   \                     ??AT_Cmd_RawZDO_1:
   \   000055                ; Setup parameters for call to function AT_ChartoInt16
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?XSTACK_DISP101_8
   \   00005A   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   1414            uint16 cmd = AT_ChartoInt16(&cmdUnitArr[1]);
   \                     ??CrossCallReturnLabel_291:
   \   00005D                ; Setup parameters for call to function AT_ChartoInt16
   \   00005D   7408         MOV       A,#0x8
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine136 & 0xFFFF
   1415            uint8 str[20];
   1416            osal_memcpy(str, cmdUnitArr[2].unit, cmdUnitArr[2].unitLen);
   \                     ??CrossCallReturnLabel_292:
   \   000065                ; Setup parameters for call to function osal_memcpy
   \   000065   740E         MOV       A,#0xe
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F5..         MOV       ?V0,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   85....       MOV       ?V12,?V0
   \   000072   F5..         MOV       ?V13,A
   \   000074   75..00       MOV       ?V14,#0x0
   \   000077   78..         MOV       R0,#?V12
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007C   7410         MOV       A,#0x10
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FC           MOV       R4,A
   \   000083   7D00         MOV       R5,#0x0
   \   000085   7420         MOV       A,#0x20
   \   000087   12....       LCALL     ?XSTACK_DISP101_8
   \   00008A   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   1417            dataLen = cmdUnitArr[2].unitLen / 2;
   \   000090   740D         MOV       A,#0xd
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   E0           MOVX      A,@DPTR
   \   000096   C3           CLR       C
   \   000097   13           RRC       A
   \   000098   FE           MOV       R6,A
   1418            buf = zcl_mem_alloc( dataLen );
   \   000099                ; Setup parameters for call to function osal_mem_alloc
   \   000099   FA           MOV       R2,A
   \   00009A   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   00009D   8A..         MOV       ?V6,R2
   \   00009F   8B..         MOV       ?V7,R3
   1419            if ( buf != NULL )
   \   0000A1   EA           MOV       A,R2
   \   0000A2   4B           ORL       A,R3
   \   0000A3   7003         JNZ       $+5
   \   0000A5   02....       LJMP      ??AT_Cmd_RawZDO_3 & 0xFFFF
   1420            {
   1421              // Load the buffer - serially
   1422              pBuf = buf;
   1423              AT_CmdUnit tempUnit;
   1424              tempUnit.unit = cmdUnitArr[2].unit;
   \   0000A8   740E         MOV       A,#0xe
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000B0   7402         MOV       A,#0x2
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL     ?Subroutine17 & 0xFFFF
   1425              tempUnit.unitLen = 2;
   \                     ??CrossCallReturnLabel_15:
   \   0000B8   7401         MOV       A,#0x1
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   7402         MOV       A,#0x2
   \   0000BF   F0           MOVX      @DPTR,A
   1426              for (i = 0; i < dataLen; i++)
   \   0000C0   75..00       MOV       ?V3,#0x0
   \   0000C3   802D         SJMP      ??AT_Cmd_RawZDO_4
   1427              {
   1428                *pBuf++ = AT_ChartoInt8(&tempUnit);
   \                     ??AT_Cmd_RawZDO_5:
   \   0000C5                ; Setup parameters for call to function AT_ChartoInt8
   \   0000C5   AA..         MOV       R2,?XSP + 0
   \   0000C7   AB..         MOV       R3,?XSP + 1
   \   0000C9   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0000CC   85..82       MOV       DPL,?V0
   \   0000CF   85..83       MOV       DPH,?V1
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   8582..       MOV       ?V0,DPL
   \   0000D7   8583..       MOV       ?V1,DPH
   1429                cmdUnitArr[2].unit += 2;
   \   0000DA   740E         MOV       A,#0xe
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL     ?Subroutine126 & 0xFFFF
   1430                tempUnit.unit = cmdUnitArr[2].unit;
   1431              }
   \                     ??CrossCallReturnLabel_230:
   \   0000E2   740E         MOV       A,#0xe
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000F0   05..         INC       ?V3
   \                     ??AT_Cmd_RawZDO_4:
   \   0000F2   C3           CLR       C
   \   0000F3   E5..         MOV       A,?V3
   \   0000F5   9E           SUBB      A,R6
   \   0000F6   95E0         SUBB      A,0xE0 /* A   */
   \   0000F8   40CB         JC        ??AT_Cmd_RawZDO_5
   1432          
   1433              // build destination address
   1434              zAddrType_t dstAddr;
   1435              dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000FA   741C         MOV       A,#0x1c
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   7402         MOV       A,#0x2
   \   000101   F0           MOVX      @DPTR,A
   1436              dstAddr.addr.shortAddr = addr;
   \   000102   7414         MOV       A,#0x14
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   12....       LCALL     ?Subroutine25 & 0xFFFF
   1437          
   1438              status = ZDP_SendData( &ZDP_TransID, &dstAddr, cmd,
   1439                                     dataLen, buf, TRUE );
   \                     ??CrossCallReturnLabel_38:
   \   00010A                ; Setup parameters for call to function ZDP_SendData
   \   00010A   75..01       MOV       ?V0,#0x1
   \   00010D   78..         MOV       R0,#?V0
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   78..         MOV       R0,#?V6
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000117   78..         MOV       R0,#?V8
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011C   EE           MOV       A,R6
   \   00011D   F9           MOV       R1,A
   \   00011E   7419         MOV       A,#0x19
   \   000120   12....       LCALL     ?XSTACK_DISP102_8
   \   000123   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000125   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000127   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00012A   7405         MOV       A,#0x5
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012F   E9           MOV       A,R1
   \   000130   F5..         MOV       ?V0,A
   1440              zcl_mem_free( buf );
   \   000132                ; Setup parameters for call to function osal_mem_free
   \   000132   AA..         MOV       R2,?V6
   \   000134   AB..         MOV       R3,?V7
   \   000136   12....       LCALL     ??Subroutine170_0 & 0xFFFF
   1441            }
   1442            else
   1443            {
   1444              status = ZMemError;
   1445            }
   1446          
   1447            if(status != afStatus_SUCCESS && status != ZMemError)
   \                     ??CrossCallReturnLabel_356:
   \   000139   6015         JZ        ??AT_Cmd_RawZDO_6
   \   00013B   7410         MOV       A,#0x10
   \   00013D   65..         XRL       A,?V0
   \   00013F   6006         JZ        ??AT_Cmd_RawZDO_3
   1448              AT_SEND_ERROR(status);
   \   000141                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000141   7A02         MOV       R2,#0x2
   \   000143   A9..         MOV       R1,?V0
   \   000145   8004         SJMP      ??AT_Cmd_RawZDO_2
   1449            else if (status == ZMemError) {
   1450              AT_ZDO_ERROR(status);
   \                     ??AT_Cmd_RawZDO_3:
   \   000147                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000147   7A03         MOV       R2,#0x3
   \   000149   7910         MOV       R1,#0x10
   \                     ??AT_Cmd_RawZDO_2:
   \   00014B   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   00014E   8049         SJMP      ??CrossCallReturnLabel_147
   1451            } else {
   1452              AT_OK();
   \                     ??AT_Cmd_RawZDO_6:
   \   000150                ; Setup parameters for call to function AT_Uart0_Send
   \   000150   7C06         MOV       R4,#0x6
   \   000152   7D00         MOV       R5,#0x0
   \   000154   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000156   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000158   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1453          	AT_RESP("CMD:", 4);
   \   00015B                ; Setup parameters for call to function AT_Uart0_Send
   \   00015B   7C04         MOV       R4,#0x4
   \   00015D   7D00         MOV       R5,#0x0
   \   00015F   7A..         MOV       R2,#`?<Constant "CMD:">` & 0xff
   \   000161   7B..         MOV       R3,#(`?<Constant "CMD:">` >> 8) & 0xff
   \   000163   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1454          	AT_RESP(cmdUnitArr[1].unit, cmdUnitArr[1].unitLen);
   \   000166                ; Setup parameters for call to function AT_Uart0_Send
   \   000166   7409         MOV       A,#0x9
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   FC           MOV       R4,A
   \   00016D   7D00         MOV       R5,#0x0
   \   00016F   740A         MOV       A,#0xa
   \   000171   12....       LCALL     ?XSTACK_DISP0_8
   \   000174   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000177   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1455          	AT_RESP(",", 1);
   \   00017A                ; Setup parameters for call to function AT_Uart0_Send
   \   00017A   7C01         MOV       R4,#0x1
   \   00017C   7D00         MOV       R5,#0x0
   \   00017E   7A..         MOV       R2,#`?<Constant ",">` & 0xff
   \   000180   7B..         MOV       R3,#(`?<Constant ",">` >> 8) & 0xff
   \   000182   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   1456          	AT_RESP("PAYLOAD:", 8);
   \                     ??CrossCallReturnLabel_510:
   \   000185   7A..         MOV       R2,#`?<Constant "PAYLOAD:">` & 0xff
   \   000187   7B..         MOV       R3,#(`?<Constant "PAYLOAD:">` >> 8) & 0xff
   \   000189   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1457          	AT_RESP(str, dataLen*2);
   \   00018C                ; Setup parameters for call to function AT_Uart0_Send
   \   00018C   EE           MOV       A,R6
   \   00018D   2E           ADD       A,R6
   \   00018E   FC           MOV       R4,A
   \   00018F   7D00         MOV       R5,#0x0
   \   000191   741D         MOV       A,#0x1d
   \   000193   12....       LCALL     ?XSTACK_DISP101_8
   \   000196   12....       LCALL     ?Subroutine74 & 0xFFFF
   1458          	AT_NEW_LINE();
   1459            }
   1460          
   1461          }
   \                     ??CrossCallReturnLabel_147:
   \   000199   7431         MOV       A,#0x31
   \   00019B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019E   7F0F         MOV       R7,#0xf
   \   0001A0   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine154_0
   \   000004                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000003   8A..         MOV       ?V8,R2
   \   000005   8B..         MOV       ?V9,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000003   E5..         MOV       A,?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   22           RET
   1462          
   1463          /*******************************************************************************
   1464           * @fn      AT_Cmd_InterPAN
   1465           *
   1466           * @brief   AT+INTERPAN - Send an Interpan Command
   1467           *          Format: AT+INTERPAN:<AddressMode>,<DstAddress>,<DstPAN>,
   1468           *                  <DstChannel>,<ProfileID>,<ClusterID>,<Payload>
   1469           *                  <DstAddress> - 16 bit hexadecimal number if the user uses
   1470           *                                 Node ID or Group ID.
   1471           *                  <DstPAN> - 16 bit hexadecimal number representing
   1472           *                             destination PAN ID
   1473           *                  <ProfileID> - 16 bit hexadecimal number representing profile
   1474           *                                ID. e.g. 0x0104 for Home automation. 0xC05E
   1475           *                                for ZigBee Light Link.
   1476           *                  <ClusterID> - 16 bit hex number representing Cluster ID.
   1477           *                  <Payload> - Command payload, please input ASCII hex data.
   1478           *
   1479           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1480           * @param   uint8* msg_ptr - the message pointer
   1481           *
   1482           * @return  None
   1483           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1484          void AT_Cmd_InterPAN( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_InterPAN:
   1485          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   1486            uint8 i;
   1487            uint8 status;
   1488            uint8 addrType;
   1489            uint16 addr;
   1490            uint16 dstPan;
   1491            uint8 dstCh;
   1492            uint16 cID;
   1493            uint8 dataLen;
   1494            uint8 *pBuf;
   1495            AT_CmdUnit cmdUnitArr[7];
   1496          
   1497            for ( i = 0; i < 7; i++) {
   \   000010   75..00       MOV       ?V1,#0x0
   1498              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_InterPAN_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   E5..         MOV       A,?V1
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   740C         MOV       A,#0xc
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine65 & 0xFFFF
   1499            }
   \                     ??CrossCallReturnLabel_136:
   \   00002F   40E2         JC        ??AT_Cmd_InterPAN_0
   1500            AT_PARSE_CMD_PATTERN_ERROR(":,,,,,\r", cmdUnitArr);
   \   000031                ; Setup parameters for call to function AT_Pattern_Check
   \   000031   740C         MOV       A,#0xc
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   7A..         MOV       R2,#`?<Constant ":,,,,,\\r">` & 0xff
   \   000038   7B..         MOV       R3,#(`?<Constant ":,,,,,\\r">` >> 8) & 0xff
   \   00003A   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   00003D   6005         JZ        ??AT_Cmd_InterPAN_1
   \   00003F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00003F   7A01         MOV       R2,#0x1
   \   000041   02....       LJMP      ??AT_Cmd_InterPAN_2 & 0xFFFF
   1501          
   1502            addrType = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_InterPAN_1:
   \   000044                ; Setup parameters for call to function AT_ChartoInt8
   \   000044   740C         MOV       A,#0xc
   \   000046   12....       LCALL     ?XSTACK_DISP101_8
   \   000049   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   00004C   FF           MOV       R7,A
   1503            addr = AT_ChartoInt16(&cmdUnitArr[1]);
   \   00004D                ; Setup parameters for call to function AT_ChartoInt16
   \   00004D   7410         MOV       A,#0x10
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine98 & 0xFFFF
   1504            dstPan = AT_ChartoInt16(&cmdUnitArr[2]);
   \                     ??CrossCallReturnLabel_295:
   \   000055                ; Setup parameters for call to function AT_ChartoInt16
   \   000055   7414         MOV       A,#0x14
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?Subroutine93 & 0xFFFF
   1505            dstCh = AT_ChartoInt8(&cmdUnitArr[3]);
   \                     ??CrossCallReturnLabel_287:
   \   00005D                ; Setup parameters for call to function AT_ChartoInt8
   \   00005D   7418         MOV       A,#0x18
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine102 & 0xFFFF
   1506            cID = AT_ChartoInt16(&cmdUnitArr[5]);
   \                     ??CrossCallReturnLabel_375:
   \   000065                ; Setup parameters for call to function AT_ChartoInt16
   \   000065   7420         MOV       A,#0x20
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   AA82         MOV       R2,DPL
   \   00006C   AB83         MOV       R3,DPH
   \   00006E   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000071   8A..         MOV       ?V6,R2
   \   000073   8B..         MOV       ?V7,R3
   \   000075   AC..         MOV       R4,?V6
   \   000077   AD..         MOV       R5,?V7
   1507            dataLen = cmdUnitArr[6].unitLen;
   \   000079   7425         MOV       A,#0x25
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F9           MOV       R1,A
   1508            pBuf = cmdUnitArr[6].unit;
   \   000080   7426         MOV       A,#0x26
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F5..         MOV       ?V6,A
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F5..         MOV       ?V7,A
   1509          
   1510            // Build address
   1511            afAddrType_t dstAddr;
   1512            dstAddr.endPoint = STUBAPS_INTER_PAN_EP;
   \   00008C   7409         MOV       A,#0x9
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   74FE         MOV       A,#-0x2
   \   000093   F0           MOVX      @DPTR,A
   1513            dstAddr.panId    = dstPan;
   \   000094   740A         MOV       A,#0xa
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   12....       LCALL     ?Subroutine25 & 0xFFFF
   1514            if (addrType == 1) {
   \                     ??CrossCallReturnLabel_39:
   \   00009C   7401         MOV       A,#0x1
   \   00009E   6F           XRL       A,R7
   \   00009F   7009         JNZ       ??AT_Cmd_InterPAN_3
   1515              dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000A1   7408         MOV       A,#0x8
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   8007         SJMP      ??AT_Cmd_InterPAN_4
   1516            } else {
   1517              dstAddr.addrMode = (afAddrMode_t)AddrGroup;
   \                     ??AT_Cmd_InterPAN_3:
   \   0000AA   7408         MOV       A,#0x8
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   7401         MOV       A,#0x1
   1518            }
   \                     ??AT_Cmd_InterPAN_4:
   \   0000B1   12....       LCALL     ?Subroutine20 & 0xFFFF
   1519            dstAddr.addr.shortAddr = addr;
   \                     ??CrossCallReturnLabel_27:
   \   0000B4   E5..         MOV       A,?V2
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E5..         MOV       A,?V3
   \   0000BA   F0           MOVX      @DPTR,A
   1520          
   1521            status = InterPAN_Send( &dstAddr, dstCh, cID, dataLen, pBuf);
   \   0000BB                ; Setup parameters for call to function InterPAN_Send
   \   0000BB   78..         MOV       R0,#?V6
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C0   E9           MOV       A,R1
   \   0000C1   F5..         MOV       ?V1,A
   \   0000C3   78..         MOV       R0,#?V1
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C8   EE           MOV       A,R6
   \   0000C9   F9           MOV       R1,A
   \   0000CA   7403         MOV       A,#0x3
   \   0000CC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CF   12....       LCALL     `??InterPAN_Send::?relay`; Banked call to: InterPAN_Send
   \   0000D2   7403         MOV       A,#0x3
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV       A,R1
   \   0000D8   F9           MOV       R1,A
   1522          
   1523            if(status != afStatus_SUCCESS)
   \   0000D9   6007         JZ        ??AT_Cmd_InterPAN_5
   1524              AT_SEND_ERROR(status);
   \   0000DB                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000DB   7A02         MOV       R2,#0x2
   \                     ??AT_Cmd_InterPAN_2:
   \   0000DD   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   0000E0   800B         SJMP      ??AT_Cmd_InterPAN_6
   1525            else
   1526              AT_OK();
   \                     ??AT_Cmd_InterPAN_5:
   \   0000E2                ; Setup parameters for call to function AT_Uart0_Send
   \   0000E2   7C06         MOV       R4,#0x6
   \   0000E4   7D00         MOV       R5,#0x0
   \   0000E6   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0000E8   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0000EA   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1527          }
   \                     ??AT_Cmd_InterPAN_6:
   \   0000ED   7428         MOV       A,#0x28
   \   0000EF   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine155_0
   \   000004                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine178_0
   \   000004                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000003   FE           MOV       R6,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000003   9407         SUBB      A,#0x7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000003   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   \   000006   E9           MOV       A,R1
   \   000007   F5..         MOV       ?V0,A
   \   000009   05..         INC       ?V1
   \   00000B   E5..         MOV       A,?V1
   \   00000D   C3           CLR       C
   \   00000E   22           RET
   1528          
   1529          /*******************************************************************************
   1530           * @fn      AT_Cmd_Scan
   1531           *
   1532           * @brief   AT+SCAN - Scan The Energy Of All Channels or Scan For Active PANs
   1533           *          Format: AT+SCAN:<ScanType>
   1534           *                  <ScanType> -  one digit boolean type. The user may input 0
   1535           *                                to initiate energy scan. Alternatively the
   1536           *                                user may input 1 to initiate an PAN scan
   1537           *
   1538           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1539           * @param   uint8* msg_ptr - the message pointer
   1540           *
   1541           * @return  None
   1542           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1543          void AT_Cmd_Scan( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_Scan:
   1544          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1545            notdoSCANCmd = FALSE;
   \   00000E   90....       MOV       DPTR,#notdoSCANCmd
   \   000011   E4           CLR       A
   \   000012   F0           MOVX      @DPTR,A
   1546          
   1547            uint8 status;
   1548            uint8 i;
   1549            AT_CmdUnit cmdUnitArr[2];
   1550          
   1551            for ( i = 0; i < 2; i++) {
   1552              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EA           MOV       A,R2
   \   000014   FC           MOV       R4,A
   \   000015   EB           MOV       A,R3
   \   000016   FD           MOV       R5,A
   \   000017   7407         MOV       A,#0x7
   \   000019   12....       LCALL     ?XSTACK_DISP101_8
   \   00001C   12....       LCALL     ?Subroutine68 & 0xFFFF
   1553            }
   \                     ??CrossCallReturnLabel_143:
   \   00001F   740B         MOV       A,#0xb
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   AA82         MOV       R2,DPL
   \   000026   AB83         MOV       R3,DPH
   \   000028   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   1554            AT_PARSE_CMD_PATTERN_ERROR(":\r",cmdUnitArr);
   \   00002B                ; Setup parameters for call to function AT_Pattern_Check
   \   00002B   7407         MOV       A,#0x7
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   7A..         MOV       R2,#`?<Constant ":\\r">` & 0xff
   \   000032   7B..         MOV       R3,#(`?<Constant ":\\r">` >> 8) & 0xff
   \   000034   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000037   6005         JZ        ??AT_Cmd_Scan_0
   \   000039                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000039   7A01         MOV       R2,#0x1
   \   00003B   02....       LJMP      ??AT_Cmd_Scan_1 & 0xFFFF
   1555          
   1556            uint8 type = AT_ChartoInt8(&cmdUnitArr[0]);
   1557            if (type == 0) {
   \                     ??AT_Cmd_Scan_0:
   \   00003E                ; Setup parameters for call to function AT_ChartoInt8
   \   00003E   7407         MOV       A,#0x7
   \   000040   12....       LCALL     ?XSTACK_DISP101_8
   \   000043   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000046   7046         JNZ       ??AT_Cmd_Scan_2
   1558              NLME_ScanFields_t fields;
   1559              fields.channels = MAX_CHANNELS_24GHZ;
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   E4           CLR       A
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   74F8         MOV       A,#-0x8
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   74FF         MOV       A,#-0x1
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   7407         MOV       A,#0x7
   \   00005B   F0           MOVX      @DPTR,A
   1560              fields.duration = BEACON_ORDER_1_SECOND;
   \   00005C   7404         MOV       A,#0x4
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   7406         MOV       A,#0x6
   \   000063   F0           MOVX      @DPTR,A
   1561              fields.scanType = ZMAC_ED_SCAN;
   \   000064   14           DEC       A
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E4           CLR       A
   \   000069   F0           MOVX      @DPTR,A
   1562              fields.scanApp  = NLME_ED_SCAN;
   \   00006A   7406         MOV       A,#0x6
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E4           CLR       A
   \   000070   F0           MOVX      @DPTR,A
   1563          
   1564              //change the the call back function address of energe scan in NWK_layer.
   1565              pZDNwkMgr_EDScanConfirmCB = AT_Cmd_ESCAN_CB;
   \   000071   90....       MOV       DPTR,#pZDNwkMgr_EDScanConfirmCB
   \   000074   74..         MOV       A,#`??AT_Cmd_ESCAN_CB::?relay` & 0xff
   \   000076   F0           MOVX      @DPTR,A
   \   000077   A3           INC       DPTR
   \   000078   74..         MOV       A,#(`??AT_Cmd_ESCAN_CB::?relay` >> 8) & 0xff
   \   00007A   12....       LCALL     ?Subroutine122 & 0xFFFF
   1566          
   1567              if ((status=NLME_NwkDiscReq2(&fields)) == ZSuccess) {
   \                     ??CrossCallReturnLabel_478:
   \   00007D   12....       LCALL     `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000080   E9           MOV       A,R1
   \   000081   F9           MOV       R1,A
   \   000082   603F         JZ        ??AT_Cmd_Scan_3
   1568                //AT_OK();
   1569                AT_DEBUG("\n\rPlease waitting...\n\r",sizeof("\n\rPlease waitting...\n\r")-1);
   1570              } else {
   1571                AT_ZDO_ERROR(status);
   \   000084                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000084   7A03         MOV       R2,#0x3
   \   000086   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   1572                NLME_NwkDiscTerm();
   \   000089                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000089   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   \   00008C   8035         SJMP      ??AT_Cmd_Scan_3
   1573              }
   1574            } else {
   1575              zAddrType_t dstAddr;
   1576              dstAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??AT_Cmd_Scan_2:
   \   00008E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008E   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000091   740F         MOV       A,#0xf
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   1577              dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_496:
   \   000099   7417         MOV       A,#0x17
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   7402         MOV       A,#0x2
   \   0000A0   F0           MOVX      @DPTR,A
   1578          
   1579              status = ZDP_MgmtNwkDiscReq( &dstAddr, MAX_CHANNELS_24GHZ, BEACON_ORDER_120_MSEC,
   1580                                           0, 1 );
   \   0000A1                ; Setup parameters for call to function ZDP_MgmtNwkDiscReq
   \   0000A1   90....       MOV       DPTR,#__Constant_7fff800
   \   0000A4   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A7   7D01         MOV       R5,#0x1
   \   0000A9   7C00         MOV       R4,#0x0
   \   0000AB   7903         MOV       R1,#0x3
   \   0000AD   7413         MOV       A,#0x13
   \   0000AF   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B2   12....       LCALL     `??ZDP_MgmtNwkDiscReq::?relay`; Banked call to: ZDP_MgmtNwkDiscReq
   \   0000B5   7404         MOV       A,#0x4
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV       A,R1
   \   0000BB   F9           MOV       R1,A
   1581              if(status != afStatus_SUCCESS)
   \   0000BC   6005         JZ        ??AT_Cmd_Scan_3
   1582                AT_SEND_ERROR(status);
   \   0000BE                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000BE   7A02         MOV       R2,#0x2
   \                     ??AT_Cmd_Scan_1:
   \   0000C0   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   1583              else
   1584                //AT_OK();
   1585                AT_DEBUG("\n\rPlease waitting...\n\r",sizeof("\n\rPlease waitting...\n\r")-1);
   1586            }
   1587          
   1588            //osal_start_timerEx( AT_UART_TaskID, AT_RESTORE_CMDDO_FLAG, 10000 );
   1589          }
   \                     ??AT_Cmd_Scan_3:
   \   0000C3   7418         MOV       A,#0x18
   \   0000C5   80..         SJMP      ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1590          
   1591          /*******************************************************************************
   1592           * @fn      AT_Cmd_FN
   1593           *
   1594           * @brief   AT+FN - Establish Network
   1595           *          Format: AT+FN:<NWKType>,[<Ch>],[<Power>],[<PANID>]
   1596           *                  <NWKType> - 1 digit Boolean type, the user can use 0 to form
   1597           *                              a Centralized network, and use 1 to form a
   1598           *                              distribute network
   1599           *                  <Ch> - 2 digit decimal number which represents channel number.
   1600           *                         Range from 11 to 26
   1601           *                  <Power>
   1602           *                  <PANID> - 16-bit decimal number which represents short PANID
   1603           *                            of ZigBee network
   1604           *          Use on: Coordinator and Router which are not part of a PAN
   1605           *          Note: This command can only be executed if the local node is
   1606           *                not part of a PAN already.
   1607           *
   1608           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1609           * @param   uint8* msg_ptr - the message pointer
   1610           *
   1611           * @return  None
   1612           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1613          void AT_Cmd_FN( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_FN:
   1614          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   1615            notdoFNCmd = FALSE;
   \   000010   90....       MOV       DPTR,#notdoFNCmd
   \   000013   12....       LCALL     ?Subroutine28 & 0xFFFF
   1616          
   1617            uint8 i;
   1618            // uint8 nt;
   1619            // bool nwktype;
   1620            uint32 channel = 1;
   1621            uint16 PANID;
   1622            AT_CmdUnit cmdUnitArr[5];
   1623          
   1624            osal_nv_read(ZCD_NV_BDBNODEISONANETWORK, 0,
   1625                         sizeof(bdbAttributes.bdbNodeIsOnANetwork),
   1626                         &bdbAttributes.bdbNodeIsOnANetwork);
   \                     ??CrossCallReturnLabel_41:
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV       ?V2,#0x1
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
   1627            if (bdbAttributes.bdbNodeIsOnANetwork == TRUE) {
   \   00002A   90....       MOV       DPTR,#bdbAttributes + 14
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6401         XRL       A,#0x1
   \   000030   7007         JNZ       ??AT_Cmd_FN_0
   1628              AT_ERROR(AT_OPERATION_INVALID);
   \   000032                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000032   7A01         MOV       R2,#0x1
   \   000034   7970         MOV       R1,#0x70
   \   000036   02....       LJMP      ??AT_Cmd_FN_1 & 0xFFFF
   1629              return;
   1630            }
   1631          
   1632            for ( i = 0; i < 5; i++) {
   \                     ??AT_Cmd_FN_0:
   \   000039   75..00       MOV       ?V1,#0x0
   1633              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_FN_2:
   \   00003C                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00003C   EE           MOV       A,R6
   \   00003D   FC           MOV       R4,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FD           MOV       R5,A
   \   000040   A9..         MOV       R1,?V0
   \   000042   E5..         MOV       A,?V1
   \   000044   F5..         MOV       ?V2,A
   \   000046   75..00       MOV       ?V3,#0x0
   \   000049   7402         MOV       A,#0x2
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?S_SHL
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   12....       LCALL     ?Subroutine87 & 0xFFFF
   1634            }
   \                     ??CrossCallReturnLabel_170:
   \   000059   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00005C   05..         INC       ?V1
   \   00005E   E5..         MOV       A,?V1
   \   000060   C3           CLR       C
   \   000061   9405         SUBB      A,#0x5
   \   000063   40D7         JC        ??AT_Cmd_FN_2
   1635            AT_PARSE_CMD_PATTERN_ERROR(":,,,\r",cmdUnitArr);
   \   000065                ; Setup parameters for call to function AT_Pattern_Check
   \   000065   AC..         MOV       R4,?XSP + 0
   \   000067   AD..         MOV       R5,?XSP + 1
   \   000069   7A..         MOV       R2,#`?<Constant ":,,,\\r">` & 0xff
   \   00006B   7B..         MOV       R3,#(`?<Constant ":,,,\\r">` >> 8) & 0xff
   \   00006D   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000070   6005         JZ        ??AT_Cmd_FN_3
   \   000072                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000072   7A01         MOV       R2,#0x1
   \   000074   02....       LJMP      ??AT_Cmd_FN_1 & 0xFFFF
   1636          
   1637            // nt = AT_ChartoInt8(&cmdUnitArr[0]);
   1638            // if (nt == 1) {
   1639            //   nwktype = true; // distribute network
   1640            // } else {
   1641            //   nwktype = false; // Centralized network
   1642            // }
   1643            if (cmdUnitArr[1].unitLen == 0) {
   \                     ??AT_Cmd_FN_3:
   \   000077   7405         MOV       A,#0x5
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   700E         JNZ       ??AT_Cmd_FN_4
   1644              channel = MAX_CHANNELS_24GHZ;
   \   00007F   75..00       MOV       ?V4,#0x0
   \   000082   75..F8       MOV       ?V5,#-0x8
   \   000085   75..FF       MOV       ?V6,#-0x1
   \   000088   75..07       MOV       ?V7,#0x7
   \   00008B   801B         SJMP      ??AT_Cmd_FN_5
   1645            } else {
   1646              channel = ((uint32) 1) << (AT_ChartoInt8(&cmdUnitArr[1])/16*10+AT_ChartoInt8(&cmdUnitArr[1])%16);
   \                     ??AT_Cmd_FN_4:
   \   00008D                ; Setup parameters for call to function AT_ChartoInt8
   \   00008D   7404         MOV       A,#0x4
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   AA82         MOV       R2,DPL
   \   000094   AB83         MOV       R3,DPH
   \   000096   12....       LCALL     ?Subroutine100 & 0xFFFF
   1647            }
   \                     ??CrossCallReturnLabel_189:
   \   000099                ; Setup parameters for call to function AT_ChartoInt8
   \   000099   7404         MOV       A,#0x4
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   AA82         MOV       R2,DPL
   \   0000A0   AB83         MOV       R3,DPH
   \   0000A2   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0000A5   12....       LCALL     ?L_SHL
   1648            // AT_ChartoIntx(&cmdUnitArr[3],ZDO_UseExtendedPANID, 64);
   1649            if(cmdUnitArr[3].unitLen==0){
   \                     ??AT_Cmd_FN_5:
   \   0000A8   740D         MOV       A,#0xd
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   7006         JNZ       ??AT_Cmd_FN_6
   1650              PANID = 0xFFFF;
   \   0000B0   7EFF         MOV       R6,#-0x1
   \   0000B2   7FFF         MOV       R7,#-0x1
   \   0000B4   8008         SJMP      ??CrossCallReturnLabel_299
   1651            } else {
   1652              PANID = AT_ChartoInt16(&cmdUnitArr[3]);
   \                     ??AT_Cmd_FN_6:
   \   0000B6                ; Setup parameters for call to function AT_ChartoInt16
   \   0000B6   740C         MOV       A,#0xc
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine94 & 0xFFFF
   1653            }
   1654          
   1655            // set BDB channel attribute
   1656            bdb_setChannelAttribute( TRUE, channel );
   \                     ??CrossCallReturnLabel_299:
   \   0000BE                ; Setup parameters for call to function bdb_setChannelAttribute
   \   0000BE   12....       LCALL     ?Subroutine18 & 0xFFFF
   1657            bdb_setChannelAttribute( FALSE, channel );
   1658          
   1659            zgConfigPANID = PANID;
   1660            uint8 status = osal_nv_item_init( ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID );
   1661            if ( status == ZSUCCESS ) {
   \                     ??CrossCallReturnLabel_22:
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C4   7C02         MOV       R4,#0x2
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   7A83         MOV       R2,#-0x7d
   \   0000CA   7B00         MOV       R3,#0x0
   \   0000CC   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000CF   7402         MOV       A,#0x2
   \   0000D1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D4   E9           MOV       A,R1
   \   0000D5   7035         JNZ       ??AT_Cmd_FN_7
   1662              osal_nv_write( ZCD_NV_PANID, 0, sizeof(zgConfigPANID), &zgConfigPANID );
   \   0000D7                ; Setup parameters for call to function osal_nv_write
   \   0000D7   78..         MOV       R0,#?V2
   \   0000D9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DC   75..02       MOV       ?V2,#0x2
   \   0000DF   75..00       MOV       ?V3,#0x0
   \   0000E2   78..         MOV       R0,#?V2
   \   0000E4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E7   7C00         MOV       R4,#0x0
   \   0000E9   7D00         MOV       R5,#0x0
   \   0000EB   7A83         MOV       R2,#-0x7d
   \   0000ED   7B00         MOV       R3,#0x0
   \   0000EF   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000F2   7404         MOV       A,#0x4
   \   0000F4   12....       LCALL     ?DEALLOC_XSTACK8
   1663            } else {
   1664              AT_ERROR(AT_FORM_NWK_FAIL);
   1665              return;
   1666            }
   1667          
   1668            bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING);
   \   0000F7                ; Setup parameters for call to function bdb_StartCommissioning
   \   0000F7   790C         MOV       R1,#0xc
   \   0000F9   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   1669          
   1670            osal_start_timerEx( AT_UART_TaskID, AT_RESTORE_CMDDO_FLAG, 5000 );
   \   0000FC                ; Setup parameters for call to function osal_start_timerEx
   \   0000FC   90....       MOV       DPTR,#__Constant_1388
   \   0000FF   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000102   7A40         MOV       R2,#0x40
   \   000104   12....       LCALL     ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000107   12....       LCALL     ?DEALLOC_XSTACK8
   1671            //AT_OK();
   1672          
   1673            /*// set channel and save it in Nv
   1674            bdb_setChannel(channel);
   1675            zgConfigPANID = PANID;
   1676            if (ZG_BUILD_COORDINATOR_TYPE) {
   1677              startMode = MODE_HARD;
   1678            } else {
   1679              startMode = MODE_JOIN;
   1680            }
   1681          
   1682            // Initialize apps and start the network
   1683            ZDApp_ChangeState( DEV_INIT );
   1684          
   1685            ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, startMode,
   1686                             BEACON_ORDER_NO_BEACONS, BEACON_ORDER_NO_BEACONS );
   1687            */
   1688          }
   \   00010A   8007         SJMP      ??AT_Cmd_FN_8
   \                     ??AT_Cmd_FN_7:
   \   00010C                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00010C   7A01         MOV       R2,#0x1
   \   00010E   7925         MOV       R1,#0x25
   \                     ??AT_Cmd_FN_1:
   \   000110   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \                     ??AT_Cmd_FN_8:
   \   000113   7414         MOV       A,#0x14
   \   000115   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine158_0
   \   000004                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   AE..         MOV       R6,?V2
   \   000005   AF..         MOV       R7,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000003   FE           MOV       R6,A
   \   000004   75..01       MOV       ?V4,#0x1
   \   000007   75..00       MOV       ?V5,#0x0
   \   00000A   75..00       MOV       ?V6,#0x0
   \   00000D   75..00       MOV       ?V7,#0x0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   EE           MOV       A,R6
   \   000004   C4           SWAP      A
   \   000005   540F         ANL       A,#0xf
   \   000007   A4           MUL       AB
   \   000008   28           ADD       A,R0
   \   000009   78..         MOV       R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002                ; Setup parameters for call to function osal_nv_read
   \   000002                ; Setup parameters for call to function osal_nv_read
   \   000002   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   000005   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000008   78..         MOV       R0,#?V2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   AA..         MOV       R2,?V4
   \   000002   AB..         MOV       R3,?V5
   \   000004   AC..         MOV       R4,?V6
   \   000006   AD..         MOV       R5,?V7
   \   000008   7901         MOV       R1,#0x1
   \   00000A   12....       LCALL     `??bdb_setChannelAttribute::?relay`; Banked call to: bdb_setChannelAttribute
   \   00000D                ; Setup parameters for call to function bdb_setChannelAttribute
   \   00000D                ; Setup parameters for call to function bdb_setChannelAttribute
   \   00000D   AA..         MOV       R2,?V4
   \   00000F   AB..         MOV       R3,?V5
   \   000011   AC..         MOV       R4,?V6
   \   000013   AD..         MOV       R5,?V7
   \   000015   7900         MOV       R1,#0x0
   \   000017   12....       LCALL     `??bdb_setChannelAttribute::?relay`; Banked call to: bdb_setChannelAttribute
   \   00001A   90....       MOV       DPTR,#zgConfigPANID
   \   00001D   EE           MOV       A,R6
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   EF           MOV       A,R7
   \   000021   F0           MOVX      @DPTR,A
   \   000022                ; Setup parameters for call to function osal_nv_item_init
   \   000022                ; Setup parameters for call to function osal_nv_item_init
   \   000022   75....       MOV       ?V2,#zgConfigPANID & 0xff
   \   000025   75....       MOV       ?V3,#(zgConfigPANID >> 8) & 0xff
   \   000028   78..         MOV       R0,#?V2
   \   00002A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A55         MOV       R2,#0x55
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00000B   7404         MOV       A,#0x4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000003   E9           MOV       A,R1
   \   000004   540F         ANL       A,#0xf
   \   000006   F8           MOV       R0,A
   \   000007   75F00A       MOV       B,#0xa
   \   00000A   22           RET
   1689          
   1690          /*******************************************************************************
   1691           * @fn      AT_Cmd_JN
   1692           *
   1693           * @brief   AT+JN - Join Network
   1694           *          Format: AT+JN[:<channel>],[<PANID>],[<EPANID>]
   1695           *                  <Ch> - 2 digit decimal number which represents channel number.
   1696           *                         Range from 11 to 26
   1697           *                  <PANID> - 16-bit decimal number which represents short PANID
   1698           *                            of ZigBee network
   1699           *                  <EPANID> - 64-bit hexadecimal number which represents
   1700           *                             extended PAN ID of ZigBee network
   1701           *          Use on: Joinable devices which are not part of a PAN
   1702           *          Note: This command can only be executed if the local node is
   1703           *                not part of a PAN already.
   1704           *
   1705           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1706           * @param   uint8* msg_ptr - the message pointer
   1707           *
   1708           * @return  None
   1709           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1710          void AT_Cmd_JN( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_JN:
   1711          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   1712            notdoJNCmd = FALSE;   // set in process flag
   \   000010   90....       MOV       DPTR,#notdoJNCmd
   \   000013   12....       LCALL     ?Subroutine28 & 0xFFFF
   1713          
   1714            uint8 i;
   1715            uint32 channel = 1;
   1716            uint16 PANID;
   1717            AT_CmdUnit cmdUnitArr[4];
   1718          
   1719            osal_nv_read(ZCD_NV_BDBNODEISONANETWORK, 0,
   1720                         sizeof(bdbAttributes.bdbNodeIsOnANetwork),
   1721                         &bdbAttributes.bdbNodeIsOnANetwork);
   \                     ??CrossCallReturnLabel_42:
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV       ?V2,#0x1
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
   1722            if (bdbAttributes.bdbNodeIsOnANetwork == TRUE) {
   \   00002A   90....       MOV       DPTR,#bdbAttributes + 14
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6401         XRL       A,#0x1
   \   000030   7007         JNZ       ??AT_Cmd_JN_0
   1723              AT_ERROR(AT_OPERATION_INVALID);
   \   000032                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000032   7A01         MOV       R2,#0x1
   \   000034   7970         MOV       R1,#0x70
   \   000036   02....       LJMP      ??AT_Cmd_JN_1 & 0xFFFF
   1724              return;
   1725            }
   1726          
   1727            for ( i = 0; i < 4; i++ )
   \                     ??AT_Cmd_JN_0:
   \   000039   75..00       MOV       ?V1,#0x0
   1728              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_JN_2:
   \   00003C                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00003C   EE           MOV       A,R6
   \   00003D   FC           MOV       R4,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FD           MOV       R5,A
   \   000040   A9..         MOV       R1,?V0
   \   000042   E5..         MOV       A,?V1
   \   000044   F5..         MOV       ?V2,A
   \   000046   75..00       MOV       ?V3,#0x0
   \   000049   7402         MOV       A,#0x2
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?S_SHL
   \   000050   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000053   40E7         JC        ??AT_Cmd_JN_2
   1729            if (cmdUnitArr[0].symbol == '\r') {
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   640D         XRL       A,#0xd
   \   00005E   AC..         MOV       R4,?XSP + 0
   \   000060   AD..         MOV       R5,?XSP + 1
   \   000062   7006         JNZ       ??AT_Cmd_JN_3
   1730              AT_PARSE_CMD_PATTERN_ERROR("\r",cmdUnitArr);
   \   000064                ; Setup parameters for call to function AT_Pattern_Check
   \   000064   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   000066   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   000068   8004         SJMP      ??AT_Cmd_JN_4
   1731            } else {
   1732              AT_PARSE_CMD_PATTERN_ERROR(":,,\r",cmdUnitArr);
   \                     ??AT_Cmd_JN_3:
   \   00006A                ; Setup parameters for call to function AT_Pattern_Check
   \   00006A   7A..         MOV       R2,#`?<Constant ":,,\\r">` & 0xff
   \   00006C   7B..         MOV       R3,#(`?<Constant ":,,\\r">` >> 8) & 0xff
   \                     ??AT_Cmd_JN_4:
   \   00006E   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000071   6005         JZ        ??AT_Cmd_JN_5
   \   000073                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000073   7A01         MOV       R2,#0x1
   \   000075   02....       LJMP      ??AT_Cmd_JN_1 & 0xFFFF
   1733            }
   1734          
   1735          
   1736            if (cmdUnitArr[0].unitLen == 0) {
   \                     ??AT_Cmd_JN_5:
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   700E         JNZ       ??AT_Cmd_JN_6
   1737              channel = MAX_CHANNELS_24GHZ;
   \   000080   75..00       MOV       ?V4,#0x0
   \   000083   75..F8       MOV       ?V5,#-0x8
   \   000086   75..FF       MOV       ?V6,#-0x1
   \   000089   75..07       MOV       ?V7,#0x7
   \   00008C   8011         SJMP      ??AT_Cmd_JN_7
   1738            } else {
   1739              channel = ((uint32) 1) << (AT_ChartoInt8(&cmdUnitArr[0])/16*10+AT_ChartoInt8(&cmdUnitArr[0])%16);
   \                     ??AT_Cmd_JN_6:
   \   00008E                ; Setup parameters for call to function AT_ChartoInt8
   \   00008E   AA..         MOV       R2,?XSP + 0
   \   000090   AB..         MOV       R3,?XSP + 1
   \   000092   12....       LCALL     ?Subroutine100 & 0xFFFF
   1740            }
   \                     ??CrossCallReturnLabel_190:
   \   000095                ; Setup parameters for call to function AT_ChartoInt8
   \   000095   AA..         MOV       R2,?XSP + 0
   \   000097   AB..         MOV       R3,?XSP + 1
   \   000099   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00009C   12....       LCALL     ?L_SHL
   1741            if (cmdUnitArr[1].unitLen == 0) {
   \                     ??AT_Cmd_JN_7:
   \   00009F   7405         MOV       A,#0x5
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   7006         JNZ       ??AT_Cmd_JN_8
   1742              PANID = 0xFFFF;
   \   0000A7   7EFF         MOV       R6,#-0x1
   \   0000A9   7FFF         MOV       R7,#-0x1
   \   0000AB   8008         SJMP      ??CrossCallReturnLabel_300
   1743            } else {
   1744              PANID = AT_ChartoInt16(&cmdUnitArr[1]);
   \                     ??AT_Cmd_JN_8:
   \   0000AD                ; Setup parameters for call to function AT_ChartoInt16
   \   0000AD   7404         MOV       A,#0x4
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ?Subroutine94 & 0xFFFF
   1745            }
   1746            if (cmdUnitArr[2].unitLen == 0) {
   \                     ??CrossCallReturnLabel_300:
   \   0000B5   7409         MOV       A,#0x9
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   701E         JNZ       ??AT_Cmd_JN_9
   1747              // invalid address enable the device allow all the ExtPANid
   1748              osal_memcpy( ZDO_UseExtendedPANID, "\0\0\0\0\0\0\0\0", 8);
   \   0000BD                ; Setup parameters for call to function osal_memcpy
   \   0000BD   75....       MOV       ?V8,#`?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">` & 0xff
   \   0000C0   75....       MOV       ?V9,#(`?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">` >> 8) & 0xff
   \   0000C3   75..00       MOV       ?V10,#0x0
   \   0000C6   78..         MOV       R0,#?V8
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CB   7C08         MOV       R4,#0x8
   \   0000CD   7D00         MOV       R5,#0x0
   \   0000CF   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0000D1   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0000D3   12....       LCALL     ?Subroutine112 & 0xFFFF
   1749            } else {
   \                     ??CrossCallReturnLabel_208:
   \   0000D6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D9   8012         SJMP      ??AT_Cmd_JN_10
   1750              AT_ChartoIntx(&cmdUnitArr[2], ZDO_UseExtendedPANID, 64);
   \                     ??AT_Cmd_JN_9:
   \   0000DB                ; Setup parameters for call to function AT_ChartoIntx
   \   0000DB   7940         MOV       R1,#0x40
   \   0000DD   7C..         MOV       R4,#ZDO_UseExtendedPANID & 0xff
   \   0000DF   7D..         MOV       R5,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0000E1   7408         MOV       A,#0x8
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   AA82         MOV       R2,DPL
   \   0000E8   AB83         MOV       R3,DPH
   \   0000EA   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   1751            }
   1752          
   1753            // set BDB channel attribute
   1754            bdb_setChannelAttribute( TRUE, channel );
   \                     ??AT_Cmd_JN_10:
   \   0000ED                ; Setup parameters for call to function bdb_setChannelAttribute
   \   0000ED   12....       LCALL     ?Subroutine18 & 0xFFFF
   1755            bdb_setChannelAttribute( FALSE, channel );
   1756          
   1757            zgConfigPANID = PANID;
   1758            uint8 status = osal_nv_item_init( ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID );
   1759            if ( status == ZSUCCESS ) {
   \                     ??CrossCallReturnLabel_23:
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F3   7C02         MOV       R4,#0x2
   \   0000F5   7D00         MOV       R5,#0x0
   \   0000F7   7A83         MOV       R2,#-0x7d
   \   0000F9   7B00         MOV       R3,#0x0
   \   0000FB   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000FE   7402         MOV       A,#0x2
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
   \   000103   E9           MOV       A,R1
   \   000104   703E         JNZ       ??AT_Cmd_JN_11
   1760              osal_nv_write( ZCD_NV_PANID, 0, sizeof(zgConfigPANID), &zgConfigPANID );
   \   000106                ; Setup parameters for call to function osal_nv_write
   \   000106   78..         MOV       R0,#?V2
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010B   75..02       MOV       ?V2,#0x2
   \   00010E   75..00       MOV       ?V3,#0x0
   \   000111   78..         MOV       R0,#?V2
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000116   7C00         MOV       R4,#0x0
   \   000118   7D00         MOV       R5,#0x0
   \   00011A   7A83         MOV       R2,#-0x7d
   \   00011C   7B00         MOV       R3,#0x0
   \   00011E   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000121   7404         MOV       A,#0x4
   \   000123   12....       LCALL     ?DEALLOC_XSTACK8
   1761            } else {
   1762              AT_ERROR(AT_FORM_NWK_FAIL);
   1763              return;
   1764            }
   1765          
   1766            /*// set channel and save it in Nv
   1767            bdb_setChannel(channel);
   1768            zgConfigPANID = PANID;
   1769            if (ZG_BUILD_JOINING_TYPE) {
   1770              startMode = MODE_REJOIN;
   1771            } else {
   1772              AT_ERROR(AT_OPERATION_INVALID);
   1773              return;
   1774            }*/
   1775          
   1776            //register the ZDO call back functio to receive the join confirm
   1777            ZDO_RegisterForZdoCB(ZDO_JOIN_CNF_CBID, AT_ZDO_ProcessJOIN_CNF_CB);
   \   000126                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000126   7A..         MOV       R2,#`??AT_ZDO_ProcessJOIN_CNF_CB::?relay` & 0xff
   \   000128   7B..         MOV       R3,#(`??AT_ZDO_ProcessJOIN_CNF_CB::?relay` >> 8) & 0xff
   \   00012A   7904         MOV       R1,#0x4
   \   00012C   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1778          
   1779            bdb_StartCommissioning( BDB_COMMISSIONING_MODE_NWK_STEERING );
   \   00012F                ; Setup parameters for call to function bdb_StartCommissioning
   \   00012F   7902         MOV       R1,#0x2
   \   000131   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   1780          
   1781            osal_start_timerEx( AT_UART_TaskID, AT_RESTORE_CMDDO_FLAG, 5000 );
   \   000134                ; Setup parameters for call to function osal_start_timerEx
   \   000134   90....       MOV       DPTR,#__Constant_1388
   \   000137   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00013A   7A40         MOV       R2,#0x40
   \   00013C   12....       LCALL     ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00013F   12....       LCALL     ?DEALLOC_XSTACK8
   1782            /*// Initialize apps and start the network
   1783            ZDApp_ChangeState( DEV_INIT );
   1784          
   1785            ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, startMode,
   1786                             BEACON_ORDER_NO_BEACONS, BEACON_ORDER_NO_BEACONS );
   1787            */
   1788          }
   \   000142   8007         SJMP      ??AT_Cmd_JN_12
   \                     ??AT_Cmd_JN_11:
   \   000144                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000144   7A01         MOV       R2,#0x1
   \   000146   7925         MOV       R1,#0x25
   \                     ??AT_Cmd_JN_1:
   \   000148   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \                     ??AT_Cmd_JN_12:
   \   00014B   7410         MOV       A,#0x10
   \   00014D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000150   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine159_0
   \   000006                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000003   9404         SUBB      A,#0x4
   \   000005   22           RET
   1789          
   1790          /*******************************************************************************
   1791           * @fn      AT_Cmd_LN
   1792           *
   1793           * @brief   AT+LN - Make Local Device Leave PAN
   1794           *          Format: AT+LN
   1795           *          Use on: All Device
   1796           *          Note: Use with care on a Coordinator. It will not be able to re-join
   1797           *                the PAN
   1798           *
   1799           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1800           * @param   uint8* msg_ptr - the message pointer
   1801           *
   1802           * @return  None
   1803           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1804          void AT_Cmd_LN( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_LN:
   1805          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1806            uint8 status;
   1807            AT_CmdUnit cmdUnitArr[1];
   1808            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0],cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
   1809            AT_PARSE_CMD_PATTERN_ERROR("\r",cmdUnitArr);
   \                     ??CrossCallReturnLabel_123:
   \   00000D   6004         JZ        ??AT_Cmd_LN_0
   \   00000F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   806B         SJMP      ??AT_Cmd_LN_1
   1810          
   1811            osal_nv_read(ZCD_NV_BDBNODEISONANETWORK, 0,
   1812                         sizeof(bdbAttributes.bdbNodeIsOnANetwork),
   1813                         &bdbAttributes.bdbNodeIsOnANetwork);
   \                     ??AT_Cmd_LN_0:
   \   000013                ; Setup parameters for call to function osal_nv_read
   \   000013   75....       MOV       ?V0,#(bdbAttributes + 14) & 0xff
   \   000016   75....       MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   75..01       MOV       ?V0,#0x1
   \   000021   75..00       MOV       ?V1,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   1814            if (bdbAttributes.bdbNodeIsOnANetwork == FALSE) {
   \   00002F   90....       MOV       DPTR,#bdbAttributes + 14
   \   000032   E0           MOVX      A,@DPTR
   \   000033   7006         JNZ       ??AT_Cmd_LN_2
   1815              AT_ERROR(AT_OPERATION_INVALID);
   \   000035                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000035   7A01         MOV       R2,#0x1
   \   000037   7970         MOV       R1,#0x70
   \   000039   8043         SJMP      ??AT_Cmd_LN_1
   1816              return;
   1817            }
   1818          
   1819            zAddrType_t dstAddr;
   1820            dstAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??AT_Cmd_LN_2:
   \   00003B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003B   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   1821            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_497:
   \   000046   740C         MOV       A,#0xc
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   7402         MOV       A,#0x2
   \   00004D   F0           MOVX      @DPTR,A
   1822          
   1823            status = ZDP_MgmtLeaveReq( &dstAddr, NLME_GetExtAddr(), FALSE, FALSE, TRUE );
   \   00004E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00004E   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000051   8A..         MOV       ?V0,R2
   \   000053   8B..         MOV       ?V1,R3
   \   000055   AC..         MOV       R4,?V0
   \   000057   AD..         MOV       R5,?V1
   \   000059                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   000059   75..01       MOV       ?V0,#0x1
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   75..00       MOV       ?V0,#0x0
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   7900         MOV       R1,#0x0
   \   00006B   7406         MOV       A,#0x6
   \   00006D   12....       LCALL     ?XSTACK_DISP101_8
   \   000070   12....       LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
   \   000073   7402         MOV       A,#0x2
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   \   000078   E9           MOV       A,R1
   \   000079   F9           MOV       R1,A
   1824            if(status != afStatus_SUCCESS)
   \   00007A   6007         JZ        ??AT_Cmd_LN_3
   1825              AT_SEND_ERROR(status);
   \   00007C                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00007C   7A02         MOV       R2,#0x2
   \                     ??AT_Cmd_LN_1:
   \   00007E   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000081   800B         SJMP      ??AT_Cmd_LN_4
   1826            else
   1827              AT_OK();
   \                     ??AT_Cmd_LN_3:
   \   000083                ; Setup parameters for call to function AT_Uart0_Send
   \   000083   7C06         MOV       R4,#0x6
   \   000085   7D00         MOV       R5,#0x0
   \   000087   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000089   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00008B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1828          }
   \                     ??AT_Cmd_LN_4:
   \   00008E   740D         MOV       A,#0xd
   \   000090   02....       LJMP      ?Subroutine1 & 0xFFFF
   1829          
   1830          /*******************************************************************************
   1831           * @fn      AT_Cmd_N
   1832           *
   1833           * @brief   AT+N - Display Network Information
   1834           *          Format: AT+N
   1835           *          Use on: All Device
   1836           *          Response: +N=<devicetype>,<channel>,<power>,<PANID>,<EPANID>
   1837           *                    or +N=NoPAN
   1838           *                    followed by OK
   1839           *
   1840           *                   <devicetype> -  represents the node's functionality
   1841           *                                   in the PAN (FFD,COO,ZED,SED,MED)
   1842           *                   <channel> - the IEEE 802.15.4 radio channel (11-26)
   1843           *                   <power> - the node's output power in dBm
   1844           *                   <PANID> - the node's PAN ID
   1845           *                   <EPANID> - the node's extended PAN ID.
   1846           *
   1847           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1848           * @param   uint8* msg_ptr - the message pointer
   1849           *
   1850           * @return  None
   1851           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1852          void AT_Cmd_N( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_N:
   1853          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1854            uint8 txPower;
   1855            AT_CmdUnit cmdUnitArr[1];
   1856            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
   1857            AT_PARSE_CMD_PATTERN_ERROR("\r",cmdUnitArr);
   \                     ??CrossCallReturnLabel_124:
   \   00000D   6008         JZ        ??AT_Cmd_N_0
   \   00000F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000014   02....       LJMP      ??AT_Cmd_N_1 & 0xFFFF
   1858          
   1859            osal_nv_read(ZCD_NV_BDBNODEISONANETWORK, 0,
   1860                         sizeof(bdbAttributes.bdbNodeIsOnANetwork),
   1861                         &bdbAttributes.bdbNodeIsOnANetwork);
   \                     ??AT_Cmd_N_0:
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   75....       MOV       ?V0,#(bdbAttributes + 14) & 0xff
   \   00001A   75....       MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   75..01       MOV       ?V0,#0x1
   \   000025   75..00       MOV       ?V1,#0x0
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1862            if (bdbAttributes.bdbNodeIsOnANetwork == FALSE) {
   \   000033   75....       MOV       ?V6,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000036   75....       MOV       ?V7,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000039   90....       MOV       DPTR,#bdbAttributes + 14
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   7C02         MOV       R4,#0x2
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000043   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000045   700A         JNZ       ??AT_Cmd_N_2
   1863              AT_NEW_LINE();
   \   000047                ; Setup parameters for call to function AT_Uart0_Send
   \   000047   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   1864              AT_RESP("+N=NoPAN", 8);
   1865              AT_NEW_LINE();
   1866              AT_OK();
   1867              return;
   1868            }
   \                     ??CrossCallReturnLabel_511:
   \   00004A   7A..         MOV       R2,#`?<Constant "+N=NoPAN">` & 0xff
   \   00004C   7B..         MOV       R3,#(`?<Constant "+N=NoPAN">` >> 8) & 0xff
   \   00004E   02....       LJMP      ??AT_Cmd_N_3 & 0xFFFF
   1869          
   1870            char str[20];
   1871            AT_NEW_LINE();
   \                     ??AT_Cmd_N_2:
   \   000051                ; Setup parameters for call to function AT_Uart0_Send
   \   000051   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   1872            AT_RESP("+N=", 3);
   \                     ??CrossCallReturnLabel_507:
   \   000054   7A..         MOV       R2,#`?<Constant "+N=">` & 0xff
   \   000056   7B..         MOV       R3,#(`?<Constant "+N=">` >> 8) & 0xff
   \   000058   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1873            switch (ZDO_Config_Node_Descriptor.LogicalType) {
   \   00005B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   5407         ANL       A,#0x7
   \   000061   6008         JZ        ??AT_Cmd_N_4
   \   000063   14           DEC       A
   \   000064   600F         JZ        ??AT_Cmd_N_5
   \   000066   14           DEC       A
   \   000067   6016         JZ        ??AT_Cmd_N_6
   \   000069   801F         SJMP      ??AT_Cmd_N_7
   1874              case NODETYPE_COORDINATOR:
   1875                AT_RESP("COO", 3);
   \                     ??AT_Cmd_N_4:
   \   00006B                ; Setup parameters for call to function AT_Uart0_Send
   \   00006B   7C03         MOV       R4,#0x3
   \   00006D   7D00         MOV       R5,#0x0
   \   00006F   7A..         MOV       R2,#`?<Constant "COO">` & 0xff
   \   000071   7B..         MOV       R3,#(`?<Constant "COO">` >> 8) & 0xff
   \   000073   8012         SJMP      ??AT_Cmd_N_8
   1876              break;
   1877              case NODETYPE_ROUTER:
   1878                AT_RESP("ROUTER", 6);
   \                     ??AT_Cmd_N_5:
   \   000075                ; Setup parameters for call to function AT_Uart0_Send
   \   000075   7C06         MOV       R4,#0x6
   \   000077   7D00         MOV       R5,#0x0
   \   000079   7A..         MOV       R2,#`?<Constant "ROUTER">` & 0xff
   \   00007B   7B..         MOV       R3,#(`?<Constant "ROUTER">` >> 8) & 0xff
   \   00007D   8008         SJMP      ??AT_Cmd_N_8
   1879              break;
   1880              case NODETYPE_DEVICE:
   1881                AT_RESP("ZED", 3);
   \                     ??AT_Cmd_N_6:
   \   00007F                ; Setup parameters for call to function AT_Uart0_Send
   \   00007F   7C03         MOV       R4,#0x3
   \   000081   7D00         MOV       R5,#0x0
   \   000083   7A..         MOV       R2,#`?<Constant "ZED">` & 0xff
   \   000085   7B..         MOV       R3,#(`?<Constant "ZED">` >> 8) & 0xff
   \                     ??AT_Cmd_N_8:
   \   000087   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1882              break;
   1883            }
   1884            AT_RESP(",", 1);
   \                     ??AT_Cmd_N_7:
   \   00008A   75....       MOV       ?V0,#`?<Constant ",">` & 0xff
   \   00008D   75....       MOV       ?V1,#(`?<Constant ",">` >> 8) & 0xff
   \   000090                ; Setup parameters for call to function AT_Uart0_Send
   \   000090   7C01         MOV       R4,#0x1
   \   000092   7D00         MOV       R5,#0x0
   \   000094   AA..         MOV       R2,?V0
   \   000096   AB..         MOV       R3,?V1
   \   000098   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1885            printf("%02d\n", _NIB.nwkLogicalChannel);
   \   00009B                ; Setup parameters for call to function printf
   \   00009B   90....       MOV       DPTR,#_NIB + 22
   \   00009E   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   7A..         MOV       R2,#`?<Constant "%02d\\n">` & 0xff
   \   0000A6   7B..         MOV       R3,#(`?<Constant "%02d\\n">` >> 8) & 0xff
   \   0000A8   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   1886            AT_RESP(",", 1);
   \   0000AE                ; Setup parameters for call to function AT_Uart0_Send
   \   0000AE   7C01         MOV       R4,#0x1
   \   0000B0   7D00         MOV       R5,#0x0
   \   0000B2   AA..         MOV       R2,?V0
   \   0000B4   AB..         MOV       R3,?V1
   \   0000B6   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1887          #if defined MAC_RUNTIME_CC2591 || defined MAC_RUNTIME_CC2590 || \
   1888            defined MAC_RUNTIME_CC2592
   1889            const uint8 CODE *pTable = macRadioDefsTxPwrTables[macRadioDefsRefTableId >> 4];
   1890          #elif defined HAL_PA_LNA || defined HAL_PA_LNA_CC2590 || \
   1891            defined HAL_PA_LNA_CC2592
   1892            const uint8 CODE *pTable = macRadioDefsTxPwrTables[0];
   1893          #else
   1894            const uint8 CODE *pTable = macRadioDefsTxPwrBare;
   1895          #endif
   1896            txPower = pMacPib->phyTransmitPower;
   \   0000B9   90....       MOV       DPTR,#macPib + 47
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F5..         MOV       ?V2,A
   1897            /* if the selected dBm is out of range, use the closest available */
   1898            if ((int8)txPower > (int8)pTable[MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY])
   \   0000BF   90....       MOV       DPTR,#macRadioDefsTxPwrBare
   \   0000C2   E4           CLR       A
   \   0000C3   93           MOVC      A,@A+DPTR
   \   0000C4   C3           CLR       C
   \   0000C5   95..         SUBB      A,?V2
   \   0000C7   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000C9   65D0         XRL       A,PSW
   \   0000CB   33           RLC       A
   \   0000CC   5006         JNC       ??AT_Cmd_N_9
   1899            {
   1900              /* greater than base value -- out of table range */
   1901              txPower = pTable[MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY];
   \   0000CE   E4           CLR       A
   \   0000CF   93           MOVC      A,@A+DPTR
   \   0000D0   F5..         MOV       ?V2,A
   \   0000D2   8011         SJMP      ??AT_Cmd_N_10
   1902            }
   1903            else if ((int8)txPower < (int8)pTable[MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY])
   \                     ??AT_Cmd_N_9:
   \   0000D4   A3           INC       DPTR
   \   0000D5   E4           CLR       A
   \   0000D6   93           MOVC      A,@A+DPTR
   \   0000D7   F8           MOV       R0,A
   \   0000D8   E5..         MOV       A,?V2
   \   0000DA   C3           CLR       C
   \   0000DB   98           SUBB      A,R0
   \   0000DC   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000DE   65D0         XRL       A,PSW
   \   0000E0   33           RLC       A
   \   0000E1   5002         JNC       ??AT_Cmd_N_10
   1904            {
   1905              /* smaller than the lowest power level -- out of table range */
   1906              txPower = pTable[MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY];
   \   0000E3   88..         MOV       ?V2,R0
   1907            }
   1908            if ((int8)txPower >= 0) {
   \                     ??AT_Cmd_N_10:
   \   0000E5   75....       MOV       ?V4,#`?<Constant "%02d,">` & 0xff
   \   0000E8   75....       MOV       ?V5,#(`?<Constant "%02d,">` >> 8) & 0xff
   \   0000EB   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   0000EE   7C01         MOV       R4,#0x1
   \   0000F0   7D00         MOV       R5,#0x0
   \   0000F2   4010         JC        ??AT_Cmd_N_11
   1909              AT_RESP("+", 1);
   \   0000F4                ; Setup parameters for call to function AT_Uart0_Send
   \   0000F4   7A..         MOV       R2,#`?<Constant "+">` & 0xff
   \   0000F6   7B..         MOV       R3,#(`?<Constant "+">` >> 8) & 0xff
   \   0000F8   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1910              printf("%02d,", txPower);
   \   0000FB                ; Setup parameters for call to function printf
   \   0000FB   E5..         MOV       A,?V2
   \   0000FD   F5..         MOV       ?V8,A
   \   0000FF   75..00       MOV       ?V9,#0x0
   \   000102   8017         SJMP      ??AT_Cmd_N_12
   1911            } else {
   1912              AT_RESP("-", 1);
   \                     ??AT_Cmd_N_11:
   \   000104                ; Setup parameters for call to function AT_Uart0_Send
   \   000104   7A..         MOV       R2,#`?<Constant "-">` & 0xff
   \   000106   7B..         MOV       R3,#(`?<Constant "-">` >> 8) & 0xff
   \   000108   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1913              printf("%02d,", ((int8)txPower)*-1);
   \   00010B                ; Setup parameters for call to function printf
   \   00010B   E5..         MOV       A,?V2
   \   00010D   F8           MOV       R0,A
   \   00010E   33           RLC       A
   \   00010F   95E0         SUBB      A,0xE0 /* A   */
   \   000111   F9           MOV       R1,A
   \   000112   C3           CLR       C
   \   000113   E4           CLR       A
   \   000114   98           SUBB      A,R0
   \   000115   F5..         MOV       ?V8,A
   \   000117   E4           CLR       A
   \   000118   99           SUBB      A,R1
   \   000119   F5..         MOV       ?V9,A
   \                     ??AT_Cmd_N_12:
   \   00011B   78..         MOV       R0,#?V8
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   AA..         MOV       R2,?V4
   \   000122   AB..         MOV       R3,?V5
   1914            }
   \   000124   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000127   12....       LCALL     ?DEALLOC_XSTACK8
   1915            AT_Int16toChar(_NIB.nwkPanId, (uint8 *)str);
   \   00012A                ; Setup parameters for call to function AT_Int16toChar
   \   00012A   7404         MOV       A,#0x4
   \   00012C   12....       LCALL     ?XSTACK_DISP102_8
   \   00012F   90....       MOV       DPTR,#_NIB + 33
   \   000132   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000135   12....       LCALL     `??AT_Int16toChar::?relay`; Banked call to: AT_Int16toChar
   1916            AT_RESP(str, 4);
   \   000138                ; Setup parameters for call to function AT_Uart0_Send
   \   000138   7C04         MOV       R4,#0x4
   \   00013A   7D00         MOV       R5,#0x0
   \   00013C   EC           MOV       A,R4
   \   00013D   12....       LCALL     ?XSTACK_DISP101_8
   \   000140   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1917            AT_RESP(",", 1);
   \   000143                ; Setup parameters for call to function AT_Uart0_Send
   \   000143   7C01         MOV       R4,#0x1
   \   000145   7D00         MOV       R5,#0x0
   \   000147   AA..         MOV       R2,?V0
   \   000149   AB..         MOV       R3,?V1
   \   00014B   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1918            AT_GetIEEEAddrStr(_NIB.extendedPANID, (uint8 *)str);
   \   00014E                ; Setup parameters for call to function AT_GetIEEEAddrStr
   \   00014E   7404         MOV       A,#0x4
   \   000150   12....       LCALL     ?XSTACK_DISP102_8
   \   000153   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000155   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000157   12....       LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
   1919            AT_RESP(str, 16);
   \   00015A                ; Setup parameters for call to function AT_Uart0_Send
   \   00015A   7C10         MOV       R4,#0x10
   \   00015C   7D00         MOV       R5,#0x0
   \   00015E   7404         MOV       A,#0x4
   \   000160   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??AT_Cmd_N_3:
   \   000163   12....       LCALL     ?Subroutine74 & 0xFFFF
   1920            AT_NEW_LINE();
   1921            AT_OK();
   \                     ??CrossCallReturnLabel_148:
   \   000166                ; Setup parameters for call to function AT_Uart0_Send
   \   000166   7C06         MOV       R4,#0x6
   \   000168   7D00         MOV       R5,#0x0
   \   00016A   AA..         MOV       R2,?V6
   \   00016C   AB..         MOV       R3,?V7
   \   00016E   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1922          }
   \                     ??AT_Cmd_N_1:
   \   000171   7418         MOV       A,#0x18
   \   000173   02....       LJMP      ??Subroutine187_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E5..         MOV       A,?V2
   \   000002   C3           CLR       C
   \   000003                REQUIRE ??Subroutine160_0
   \   000003                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   75..00       MOV       ?V5,#0x0
   \   000006   78..         MOV       R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV       R7,#0xa
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003   7C03         MOV       R4,#0x3
   \   000005   7D00         MOV       R5,#0x0
   \   000007   22           RET
   1923          
   1924          /*******************************************************************************
   1925           * @fn      AT_Cmd_PJ
   1926           *
   1927           * @brief   AT+PJ - Permit joining
   1928           *          Format: AT+PJ[:<sec>,<NodeID>]
   1929           *          Use on: Coordinator or router
   1930           *          Response: OK
   1931           *                    or
   1932           *                    ERROR:<errorcode>
   1933           *
   1934           *                   <sec> - 8 bit hexadecimal number which represents
   1935           *                           the length of time in seconds during which
   1936           *                           the ZigBee coordinator or router will
   1937           *                           allow associations
   1938           *                   <NodeID> - 16 bit hexadecimal number, network address of
   1939           *                              a target device. If FFFC is used, the
   1940           *                              constructed command will be sent as a broadcast
   1941           *
   1942           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1943           * @param   uint8* msg_ptr - the message pointer
   1944           *
   1945           * @return  None
   1946           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1947          void AT_Cmd_PJ( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_PJ:
   1948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   1949            uint8 i;
   1950            uint8 status;
   1951            AT_CmdUnit cmdUnitArr[3];
   1952          
   1953            for( i = 0; i < 3; i++ )
   \   000010   75..00       MOV       ?V1,#0x0
   1954              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_PJ_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   E5..         MOV       A,?V1
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   7409         MOV       A,#0x9
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   00002F   40E2         JC        ??AT_Cmd_PJ_0
   1955            if (cmdUnitArr[0].symbol == '\r') {
   \   000031   7409         MOV       A,#0x9
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   640D         XRL       A,#0xd
   \   000039   7031         JNZ       ??AT_Cmd_PJ_1
   1956              AT_PARSE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   \   00003B                ; Setup parameters for call to function AT_Pattern_Check
   \   00003B   7409         MOV       A,#0x9
   \   00003D   12....       LCALL     ?XSTACK_DISP102_8
   \   000040   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   000042   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   000044   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000047   702D         JNZ       ??AT_Cmd_PJ_2
   \   000049                ; Setup parameters for call to function AT_UARTWriteErrMsg
   1957              zAddrType_t addr = {
   1958                {_NIB.nwkDevAddress},
   1959                (afAddrMode_t)Addr16Bit
   1960              };
   \   000049   90....       MOV       DPTR,#`?<Constant {{0}, 2}>`
   \   00004C   AC..         MOV       R4,?XSP + 0
   \   00004E   AD..         MOV       R5,?XSP + 1
   \   000050   7409         MOV       A,#0x9
   \   000052   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000055   90....       MOV       DPTR,#_NIB + 20
   \   000058   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00005B   85..82       MOV       DPL,?XSP + 0
   \   00005E   85..83       MOV       DPH,?XSP + 1
   \   000061   12....       LCALL     ?Subroutine17 & 0xFFFF
   1961              status = ZDP_MgmtPermitJoinReq(&addr, 60, true, 1);
   \                     ??CrossCallReturnLabel_17:
   \   000064                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   000064   7D01         MOV       R5,#0x1
   \   000066   7C01         MOV       R4,#0x1
   \   000068   793C         MOV       R1,#0x3c
   \   00006A   8052         SJMP      ??AT_Cmd_PJ_3
   1962            } else {
   1963              AT_PARSE_CMD_PATTERN_ERROR(":,\r", cmdUnitArr);
   \                     ??AT_Cmd_PJ_1:
   \   00006C                ; Setup parameters for call to function AT_Pattern_Check
   \   00006C   7409         MOV       A,#0x9
   \   00006E   12....       LCALL     ?XSTACK_DISP102_8
   \   000071   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000074   6004         JZ        ??AT_Cmd_PJ_4
   \   000076                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_PJ_2:
   \   000076   7A01         MOV       R2,#0x1
   \   000078   8052         SJMP      ??AT_Cmd_PJ_5
   1964              //build broadcast address
   1965              zAddrType_t addr;
   1966              uint16 address = AT_ChartoInt16(&cmdUnitArr[1]);
   \                     ??AT_Cmd_PJ_4:
   \   00007A                ; Setup parameters for call to function AT_ChartoInt16
   \   00007A   740D         MOV       A,#0xd
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000082   A8..         MOV       R0,?V2
   \   000084   A9..         MOV       R1,?V3
   1967              if (address == NWK_BROADCAST_SHORTADDR_DEVZCZR) {
   \   000086   74FC         MOV       A,#-0x4
   \   000088   68           XRL       A,R0
   \   000089   7003         JNZ       ??AT_Cmd_PJ_6
   \   00008B   74FF         MOV       A,#-0x1
   \   00008D   69           XRL       A,R1
   \                     ??AT_Cmd_PJ_6:
   \   00008E   85..82       MOV       DPL,?XSP + 0
   \   000091   85..83       MOV       DPH,?XSP + 1
   \   000094   7010         JNZ       ??AT_Cmd_PJ_7
   1968                addr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000096   74FC         MOV       A,#-0x4
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   74FF         MOV       A,#-0x1
   \   00009C   F0           MOVX      @DPTR,A
   1969                addr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00009D   7408         MOV       A,#0x8
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   740F         MOV       A,#0xf
   \   0000A4   800A         SJMP      ??AT_Cmd_PJ_8
   1970              } else {
   1971                addr.addr.shortAddr = address;
   \                     ??AT_Cmd_PJ_7:
   \   0000A6   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   1972                addr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_498:
   \   0000A9   7408         MOV       A,#0x8
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   7402         MOV       A,#0x2
   \                     ??AT_Cmd_PJ_8:
   \   0000B0   F0           MOVX      @DPTR,A
   1973              }
   1974              uint8 duration = AT_ChartoInt8(&cmdUnitArr[0]);
   \   0000B1                ; Setup parameters for call to function AT_ChartoInt8
   \   0000B1   7409         MOV       A,#0x9
   \   0000B3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B6   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   0000B9   F9           MOV       R1,A
   1975              status = ZDP_MgmtPermitJoinReq(&addr, duration, true, 1);
   \   0000BA                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   0000BA   7D01         MOV       R5,#0x1
   \   0000BC   7C01         MOV       R4,#0x1
   \                     ??AT_Cmd_PJ_3:
   \   0000BE   AA..         MOV       R2,?XSP + 0
   \   0000C0   AB..         MOV       R3,?XSP + 1
   \   0000C2   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   \   0000C5   E9           MOV       A,R1
   \   0000C6   F9           MOV       R1,A
   1976            }
   1977          
   1978            if (status != afStatus_SUCCESS) {
   \   0000C7   E9           MOV       A,R1
   \   0000C8   6007         JZ        ??AT_Cmd_PJ_9
   1979              AT_SEND_ERROR(status);
   \   0000CA                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000CA   7A02         MOV       R2,#0x2
   \                     ??AT_Cmd_PJ_5:
   \   0000CC   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   0000CF   800B         SJMP      ??AT_Cmd_PJ_10
   1980            } else {
   1981              AT_OK();
   \                     ??AT_Cmd_PJ_9:
   \   0000D1                ; Setup parameters for call to function AT_Uart0_Send
   \   0000D1   7C06         MOV       R4,#0x6
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0000D7   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0000D9   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   1982            }
   1983          }
   \                     ??AT_Cmd_PJ_10:
   \   0000DC   7415         MOV       A,#0x15
   \   0000DE   02....       LJMP      ??Subroutine165_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000003   9403         SUBB      A,#0x3
   \   000005   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}, 2}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   02           DB 2
   1984          
   1985          /*******************************************************************************
   1986           * @fn      AT_Cmd_RJ
   1987           *
   1988           * @brief   AT+RJ - Rejoin the network
   1989           *          Format: AT+RJ:b
   1990           *                  b - If b is set to 0 join without the known network key
   1991           *                      (unencrypted) and if b is set to 1 join encrypted
   1992           *          Use on: not Coordinator
   1993           *
   1994           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   1995           * @param   uint8* msg_ptr - the message pointer
   1996           *
   1997           * @return  None
   1998           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1999          void AT_Cmd_RJ( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_RJ:
   2000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   2001            uint8 i;
   2002            // uint8 status;
   2003            // uint8 joinType;
   2004            AT_CmdUnit cmdUnitArr[2];
   2005          
   2006            for( i = 0; i < 2; i++ )
   2007              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \   00000E                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000E   AC..         MOV       R4,?V0
   \   000010   AD..         MOV       R5,?V1
   \   000012   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000015   FE           MOV       R6,A
   \   000016                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000016   AC..         MOV       R4,?V0
   \   000018   AD..         MOV       R5,?V1
   \   00001A   7404         MOV       A,#0x4
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   12....       LCALL     ?Subroutine61 & 0xFFFF
   2008            AT_PARSE_CMD_PATTERN_ERROR(":\r", cmdUnitArr);
   \                     ??CrossCallReturnLabel_129:
   \   000022   6007         JZ        ??AT_Cmd_RJ_0
   \   000024                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000024   7A01         MOV       R2,#0x1
   \   000026   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000029   8079         SJMP      ??AT_Cmd_RJ_1
   2009          
   2010            // Set NWK task to stop
   2011            nwk_setStateIdle( FALSE );
   \                     ??AT_Cmd_RJ_0:
   \   00002B                ; Setup parameters for call to function nwk_setStateIdle
   \   00002B   7900         MOV       R1,#0x0
   \   00002D   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   2012          
   2013            // Use the new network paramters
   2014            zgConfigPANID = _NIB.nwkPanId;
   \   000030   90....       MOV       DPTR,#_NIB + 33
   \   000033   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000036   90....       MOV       DPTR,#zgConfigPANID
   \   000039   12....       LCALL     ?Subroutine17 & 0xFFFF
   2015            zgDefaultChannelList = _NIB.channelList;
   \                     ??CrossCallReturnLabel_18:
   \   00003C   90....       MOV       DPTR,#_NIB + 36
   \   00003F   12....       LCALL     ?XLOAD_R0123
   \   000042   90....       MOV       DPTR,#zgDefaultChannelList
   \   000045   12....       LCALL     ?XSTORE_R0123
   2016            osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000048                ; Setup parameters for call to function sAddrExtCpy
   \   000048   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   00004A   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   00004C   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00004E   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000050   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2017          
   2018            // set runtimeChannel to MAX_CHANNELS_24GHZ
   2019            bdb_setChannel( MAX_CHANNELS_24GHZ );
   \   000053                ; Setup parameters for call to function bdb_setChannel
   \   000053   90....       MOV       DPTR,#__Constant_7fff800
   \   000056   12....       LCALL     ?XLOAD_R2345
   \   000059   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   2020          
   2021            _NIB.nwkState = NWK_INIT;
   \   00005C   90....       MOV       DPTR,#_NIB + 35
   \   00005F   E4           CLR       A
   \   000060   F0           MOVX      @DPTR,A
   2022            _tmpRejoinState = TRUE;
   \   000061   90....       MOV       DPTR,#_tmpRejoinState
   \   000064   04           INC       A
   \   000065   F0           MOVX      @DPTR,A
   2023            devStartMode = MODE_REJOIN;
   \   000066   90....       MOV       DPTR,#devStartMode
   \   000069   7403         MOV       A,#0x3
   \   00006B   F0           MOVX      @DPTR,A
   2024          
   2025            //register the ZDO call back functio to receive the join confirm
   2026            ZDO_RegisterForZdoCB(ZDO_JOIN_CNF_CBID, AT_ZDO_ProcessJOIN_CNF_CB);
   \   00006C                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00006C   7A..         MOV       R2,#`??AT_ZDO_ProcessJOIN_CNF_CB::?relay` & 0xff
   \   00006E   7B..         MOV       R3,#(`??AT_ZDO_ProcessJOIN_CNF_CB::?relay` >> 8) & 0xff
   \   000070   7904         MOV       R1,#0x4
   \   000072   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   2027          
   2028            // Start the network joining process
   2029            osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000075                ; Setup parameters for call to function osal_set_event
   \   000075   7A01         MOV       R2,#0x1
   \   000077   7B00         MOV       R3,#0x0
   \   000079   90....       MOV       DPTR,#ZDAppTaskID
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F9           MOV       R1,A
   \   00007E   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   2030          
   2031            AT_NEW_LINE();
   \   000081   75....       MOV       ?V0,#`?<Constant "\\r\\n">` & 0xff
   \   000084   75....       MOV       ?V1,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000087                ; Setup parameters for call to function AT_Uart0_Send
   \   000087   7C02         MOV       R4,#0x2
   \   000089   7D00         MOV       R5,#0x0
   \   00008B   AA..         MOV       R2,?V0
   \   00008D   AB..         MOV       R3,?V1
   \   00008F   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   2032            AT_RESP("LOSTPAN", 7);
   \                     ??CrossCallReturnLabel_278:
   \   000092   7A..         MOV       R2,#`?<Constant "LOSTPAN">` & 0xff
   \   000094   7B..         MOV       R3,#(`?<Constant "LOSTPAN">` >> 8) & 0xff
   \   000096   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2033            AT_NEW_LINE();
   \   000099                ; Setup parameters for call to function AT_Uart0_Send
   \   000099   7C02         MOV       R4,#0x2
   \   00009B   7D00         MOV       R5,#0x0
   \   00009D   AA..         MOV       R2,?V0
   \   00009F   AB..         MOV       R3,?V1
   \   0000A1   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2034          }
   \                     ??AT_Cmd_RJ_1:
   \   0000A4   7408         MOV       A,#0x8
   \   0000A6                REQUIRE ?Subroutine1
   \   0000A6                ; // Fall through to label ?Subroutine1
   2035          
   2036          /*******************************************************************************
   2037           * @fn      AT_Cmd_KeyTab
   2038           *
   2039           * @brief   AT+KEYTAB - Print Local Key And Link Key Table
   2040           *          Format: AT+KEYTAB
   2041           *          Use on: All Device
   2042           *
   2043           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2044           * @param   uint8* msg_ptr - the message pointer
   2045           *
   2046           * @return  None
   2047           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine161_0
   \   000002                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2048          void AT_Cmd_KeyTab( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_KeyTab:
   2049          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 46
   \   000005   74D2         MOV       A,#-0x2e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2050            uint8  i;
   2051            uint16 index;
   2052            uint8  retValue;
   2053            uint8  *pKey;
   2054            nwkActiveKeyItems keyItems;
   2055            // APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2056            // uint16 apsLinkKeyNvId;
   2057            uint8 str[8];
   2058            AT_CmdUnit cmdUnitArr[1];
   2059          
   2060            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   EA           MOV       A,R2
   \   00000B   FC           MOV       R4,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FD           MOV       R5,A
   \   00000E   7408         MOV       A,#0x8
   \   000010   12....       LCALL     ?XSTACK_DISP101_8
   \   000013   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   2061            AT_PARSE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   \   000016                ; Setup parameters for call to function AT_Pattern_Check
   \   000016   7408         MOV       A,#0x8
   \   000018   12....       LCALL     ?XSTACK_DISP102_8
   \   00001B   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   00001D   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   00001F   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000022   6005         JZ        ??AT_Cmd_KeyTab_0
   \   000024                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000024   7A01         MOV       R2,#0x1
   \   000026   02....       LJMP      ??AT_Cmd_KeyTab_1 & 0xFFFF
   2062          
   2063            AT_NEW_LINE();
   \                     ??AT_Cmd_KeyTab_0:
   \   000029                ; Setup parameters for call to function AT_Uart0_Send
   \   000029   7C02         MOV       R4,#0x2
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00002F   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000031   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2064            // show Network Key
   2065            SSP_ReadNwkActiveKey( &keyItems );
   \   000034                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   000034   7419         MOV       A,#0x19
   \   000036   12....       LCALL     ?XSTACK_DISP101_8
   \   000039   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   2066            AT_RESP("NWK:", 4);
   \   00003C                ; Setup parameters for call to function AT_Uart0_Send
   \   00003C   7C04         MOV       R4,#0x4
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7A..         MOV       R2,#`?<Constant "NWK:">` & 0xff
   \   000042   7B..         MOV       R3,#(`?<Constant "NWK:">` >> 8) & 0xff
   \   000044   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2067            pKey = keyItems.active.key;
   2068            for ( i = 0; i < SEC_KEY_LEN; i++ ) {
   \   000047   75..00       MOV       ?V2,#0x0
   2069              AT_Int8toChar(pKey[i], str);
   \                     ??AT_Cmd_KeyTab_2:
   \   00004A                ; Setup parameters for call to function AT_Int8toChar
   \   00004A   AA..         MOV       R2,?XSP + 0
   \   00004C   AB..         MOV       R3,?XSP + 1
   \   00004E   A8..         MOV       R0,?V2
   \   000050   7419         MOV       A,#0x19
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine40 & 0xFFFF
   2070              AT_RESP(str, 2);
   2071            }
   \                     ??CrossCallReturnLabel_85:
   \   000058   40F0         JC        ??AT_Cmd_KeyTab_2
   2072            AT_RESP(",", 1);
   \   00005A   75....       MOV       ?V4,#`?<Constant ",">` & 0xff
   \   00005D   75....       MOV       ?V5,#(`?<Constant ",">` >> 8) & 0xff
   \   000060                ; Setup parameters for call to function AT_Uart0_Send
   \   000060   7C01         MOV       R4,#0x1
   \   000062   7D00         MOV       R5,#0x0
   \   000064   AA..         MOV       R2,?V4
   \   000066   AB..         MOV       R3,?V5
   \   000068   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2073            printf("%08X", keyItems.frameCounter);
   \   00006B                ; Setup parameters for call to function printf
   \   00006B   742A         MOV       A,#0x2a
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000073   7A..         MOV       R2,#`?<Constant "%08X">` & 0xff
   \   000075   7B..         MOV       R3,#(`?<Constant "%08X">` >> 8) & 0xff
   \   000077   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   00007A   7404         MOV       A,#0x4
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   2074          
   2075            // show default TC_Link_Key
   2076            retValue = ZDSecMgrReadKeyFromNv( ZCD_NV_TCLK_DEFAULT, pKey );
   \   00007F                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   00007F   741A         MOV       A,#0x1a
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   AC82         MOV       R4,DPL
   \   000086   AD83         MOV       R5,DPH
   \   000088   7A03         MOV       R2,#0x3
   \   00008A   7B01         MOV       R3,#0x1
   \   00008C   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   00008F   E9           MOV       A,R1
   \   000090   F5..         MOV       ?V0,A
   2077            if (retValue != ZSuccess) {
   \   000092   6003         JZ        $+5
   \   000094   02....       LJMP      ??AT_Cmd_KeyTab_3 & 0xFFFF
   2078              AT_ZDO_ERROR(retValue);
   2079          	  return;
   2080            }
   2081            AT_NEXT_LINE();
   \   000097                ; Setup parameters for call to function AT_Uart0_Send
   \   000097   12....       LCALL     ?Subroutine75 & 0xFFFF
   2082            AT_RESP("LINKFF:", 7);
   \                     ??CrossCallReturnLabel_277:
   \   00009A   7A..         MOV       R2,#`?<Constant "LINKFF:">` & 0xff
   \   00009C   7B..         MOV       R3,#(`?<Constant "LINKFF:">` >> 8) & 0xff
   \   00009E   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2083            for ( i = 0; i < SEC_KEY_LEN; i++ ) {
   \   0000A1   75..00       MOV       ?V2,#0x0
   2084              AT_Int8toChar(pKey[i], str);
   \                     ??AT_Cmd_KeyTab_4:
   \   0000A4                ; Setup parameters for call to function AT_Int8toChar
   \   0000A4   AA..         MOV       R2,?XSP + 0
   \   0000A6   AB..         MOV       R3,?XSP + 1
   \   0000A8   A8..         MOV       R0,?V2
   \   0000AA   7419         MOV       A,#0x19
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?Subroutine40 & 0xFFFF
   2085              AT_RESP(str, 2);
   2086            }
   \                     ??CrossCallReturnLabel_86:
   \   0000B2   40F0         JC        ??AT_Cmd_KeyTab_4
   2087          
   2088            // show TC_Link_Key in the Key Table
   2089            AddrMgrEntry_t addrEntry;
   2090            if ( ZDSecMgrEntries != NULL )
   \   0000B4   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000B7   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   0000BA   7003         JNZ       $+5
   \   0000BC   02....       LJMP      ??AT_Cmd_KeyTab_5 & 0xFFFF
   2091            {
   2092              // TODO: the numbers of entrys in defined by ZDSECMGR_ENTRY_MAX
   2093              // here I set it to 3 [define in ZDSecMgr.c]
   2094              for ( index = 0; index < 3 ; index++ )
   \   0000BF   75..00       MOV       ?V6,#0x0
   \   0000C2   75..00       MOV       ?V7,#0x0
   2095              {
   2096                addrEntry.user  = ADDRMGR_USER_SECURITY;
   \                     ??AT_Cmd_KeyTab_6:
   \   0000C5   740C         MOV       A,#0xc
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   7402         MOV       A,#0x2
   \   0000CC   F0           MOVX      @DPTR,A
   2097                addrEntry.index = ZDSecMgrEntries[index].ami;
   \   0000CD   85....       MOV       ?V2,?V6
   \   0000D0   85....       MOV       ?V3,?V7
   \   0000D3   E5..         MOV       A,?V2
   \   0000D5   75F005       MOV       B,#0x5
   \   0000D8   A4           MUL       AB
   \   0000D9   F5..         MOV       ?V2,A
   \   0000DB   A8F0         MOV       R0,B
   \   0000DD   75F005       MOV       B,#0x5
   \   0000E0   E5..         MOV       A,?V3
   \   0000E2   A4           MUL       AB
   \   0000E3   28           ADD       A,R0
   \   0000E4   F5..         MOV       ?V3,A
   \   0000E6   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000E9   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000EC   7417         MOV       A,#0x17
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL     ?Subroutine17 & 0xFFFF
   2098                if (AddrMgrEntryGet( &addrEntry ) == TRUE) {
   \                     ??CrossCallReturnLabel_19:
   \   0000F4                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000F4   740C         MOV       A,#0xc
   \   0000F6   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F9   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   0000FC   E9           MOV       A,R1
   \   0000FD   6401         XRL       A,#0x1
   \   0000FF   6003         JZ        $+5
   \   000101   02....       LJMP      ??AT_Cmd_KeyTab_7 & 0xFFFF
   2099                  // Fetch the key NV ID
   2100                  retValue = ZDSecMgrReadKeyFromNv(ZDSecMgrEntries[index].keyNvId, pKey);
   \   000104                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000104   741A         MOV       A,#0x1a
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   AC82         MOV       R4,DPL
   \   00010B   AD83         MOV       R5,DPH
   \   00010D   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000110   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000113   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   000116   E9           MOV       A,R1
   \   000117   F5..         MOV       ?V0,A
   2101                  if (retValue != ZSuccess) {
   \   000119   6007         JZ        ??AT_Cmd_KeyTab_8
   2102                    AT_ZDO_ERROR(retValue);
   \                     ??AT_Cmd_KeyTab_3:
   \   00011B                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00011B   7A03         MOV       R2,#0x3
   \   00011D   A9..         MOV       R1,?V0
   \   00011F   02....       LJMP      ??AT_Cmd_KeyTab_1 & 0xFFFF
   2103                	  return;
   2104                  }
   2105                  AT_NEXT_LINE();
   \                     ??AT_Cmd_KeyTab_8:
   \   000122                ; Setup parameters for call to function AT_Uart0_Send
   \   000122   7C02         MOV       R4,#0x2
   \   000124   7D00         MOV       R5,#0x0
   \   000126   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000128   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00012A   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2106                  printf("LINK%02X:", index);
   \   00012D                ; Setup parameters for call to function printf
   \   00012D   78..         MOV       R0,#?V6
   \   00012F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000132   7A..         MOV       R2,#`?<Constant "LINK%02X:">` & 0xff
   \   000134   7B..         MOV       R3,#(`?<Constant "LINK%02X:">` >> 8) & 0xff
   \   000136   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000139   12....       LCALL     ?DEALLOC_XSTACK8
   2107                  for ( i = SEC_KEY_LEN-1; ((int8)i) >= 0; i-- ) {
   \   00013C   75..0F       MOV       ?V2,#0xf
   2108                    AT_Int8toChar(pKey[i], str);
   \                     ??AT_Cmd_KeyTab_9:
   \   00013F                ; Setup parameters for call to function AT_Int8toChar
   \   00013F   AA..         MOV       R2,?XSP + 0
   \   000141   AB..         MOV       R3,?XSP + 1
   \   000143   A8..         MOV       R0,?V2
   \   000145   7419         MOV       A,#0x19
   \   000147   12....       LCALL     ?XSTACK_DISP0_8
   \   00014A   12....       LCALL     ?Subroutine128 & 0xFFFF
   2109                    AT_RESP(str, 2);
   2110                  }
   \                     ??CrossCallReturnLabel_234:
   \   00014D   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000150   AA..         MOV       R2,?XSP + 0
   \   000152   AB..         MOV       R3,?XSP + 1
   \   000154   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000157   15..         DEC       ?V2
   \   000159   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   00015C   50E1         JNC       ??AT_Cmd_KeyTab_9
   2111                  AT_RESP(",", 1);
   \   00015E                ; Setup parameters for call to function AT_Uart0_Send
   \   00015E   7C01         MOV       R4,#0x1
   \   000160   7D00         MOV       R5,#0x0
   \   000162   AA..         MOV       R2,?V4
   \   000164   AB..         MOV       R3,?V5
   \   000166   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2112                  AT_GetIEEEAddrStr(addrEntry.extAddr, (uint8 *)str);
   \   000169                ; Setup parameters for call to function AT_GetIEEEAddrStr
   \   000169   AC..         MOV       R4,?XSP + 0
   \   00016B   AD..         MOV       R5,?XSP + 1
   \   00016D   740F         MOV       A,#0xf
   \   00016F   12....       LCALL     ?XSTACK_DISP0_8
   \   000172   AA82         MOV       R2,DPL
   \   000174   AB83         MOV       R3,DPH
   \   000176   12....       LCALL     `??AT_GetIEEEAddrStr::?relay`; Banked call to: AT_GetIEEEAddrStr
   2113                  AT_RESP(str, 16);
   \   000179                ; Setup parameters for call to function AT_Uart0_Send
   \   000179   7C10         MOV       R4,#0x10
   \   00017B   7D00         MOV       R5,#0x0
   \   00017D   AA..         MOV       R2,?XSP + 0
   \   00017F   AB..         MOV       R3,?XSP + 1
   \   000181   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2114                }
   2115              }
   \                     ??AT_Cmd_KeyTab_7:
   \   000184   05..         INC       ?V6
   \   000186   E5..         MOV       A,?V6
   \   000188   7002         JNZ       ??AT_Cmd_KeyTab_10
   \   00018A   05..         INC       ?V7
   \                     ??AT_Cmd_KeyTab_10:
   \   00018C   C3           CLR       C
   \   00018D   9403         SUBB      A,#0x3
   \   00018F   E5..         MOV       A,?V7
   \   000191   9400         SUBB      A,#0x0
   \   000193   5003         JNC       $+5
   \   000195   02....       LJMP      ??AT_Cmd_KeyTab_6 & 0xFFFF
   2116            }
   2117            // AddrMgrEntry_t addrEntry;
   2118            // for ( addrEntry.index = 0; addrEntry.index < NWK_MAX_ADDRESSES; addrEntry.index++ ) {
   2119            //   if (AddrMgrEntryGet( &addrEntry )) {
   2120            //     pExtAddr = addrEntry.extAddr;
   2121            //     // Fetch the key NV ID
   2122            //     retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   2123            //
   2124            //     if (retValue == ZSuccess)
   2125            //     {
   2126            //       // retrieve key from NV
   2127            //       if (osal_nv_read( apsLinkKeyNvId, 0,
   2128            //                   sizeof(APSME_LinkKeyData_t), pApsLinkKey) == SUCCESS)
   2129            //       {
   2130            //         AT_NEXT_LINE();
   2131            //         printf("LINK%02X:", addrEntry.index);
   2132            //         pKey = pApsLinkKey->key;
   2133            //         for ( i = 0; i < SEC_KEY_LEN; i++ ) {
   2134            //           AT_Int8toChar(pKey[i], str);
   2135            //           AT_RESP(str, 2);
   2136            //         }
   2137            //         AT_RESP(",", 1);
   2138            //         printf("%04X%04X%04X%04X", pExtAddr[3], pExtAddr[2], pExtAddr[1], pExtAddr[0]);
   2139            //       } else {
   2140            //         retValue = AT_NWK_UNKNOWN_DEV;
   2141            //         break;
   2142            //       }
   2143            //     }
   2144            //   }
   2145            // }
   2146            AT_NEW_LINE();
   \                     ??AT_Cmd_KeyTab_5:
   \   000198                ; Setup parameters for call to function AT_Uart0_Send
   \   000198   7C02         MOV       R4,#0x2
   \   00019A   7D00         MOV       R5,#0x0
   \   00019C   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00019E   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0001A0   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2147          
   2148            if (retValue != ZSuccess) {
   \   0001A3   E5..         MOV       A,?V0
   \   0001A5   6008         JZ        ??AT_Cmd_KeyTab_11
   2149              AT_ERROR(retValue);
   \   0001A7                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0001A7   7A01         MOV       R2,#0x1
   \   0001A9   F9           MOV       R1,A
   \                     ??AT_Cmd_KeyTab_1:
   \   0001AA   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   2150          	  return;
   \   0001AD   800B         SJMP      ??AT_Cmd_KeyTab_12
   2151            } else {
   2152              AT_OK();
   \                     ??AT_Cmd_KeyTab_11:
   \   0001AF                ; Setup parameters for call to function AT_Uart0_Send
   \   0001AF   7C06         MOV       R4,#0x6
   \   0001B1   7D00         MOV       R5,#0x0
   \   0001B3   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0001B5   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0001B7   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2153            }
   2154          }
   \                     ??AT_Cmd_KeyTab_12:
   \   0001BA   742E         MOV       A,#0x2e
   \   0001BC                REQUIRE ?Subroutine4
   \   0001BC                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000003   E0           MOVX      A,@DPTR
   \   000004   25..         ADD       A,?V2
   \   000006   F8           MOV       R0,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   35..         ADDC      A,?V3
   \   00000B   8882         MOV       DPL,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000006   AA..         MOV       R2,?XSP + 0
   \   000008   AB..         MOV       R3,?XSP + 1
   \   00000A   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000D   05..         INC       ?V2
   \   00000F   E5..         MOV       A,?V2
   \   000011   C3           CLR       C
   \   000012   9410         SUBB      A,#0x10
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3583         ADDC      A,DPH
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET
   2155          
   2156          /*******************************************************************************
   2157           * @fn      AT_Cmd_AddKey
   2158           *
   2159           * @brief   AT+ADDKEY - Add a key entry to local key table (used on trust centre)
   2160           *          Format: AT+ADDKEY:<EUI>[,<InstallCode>]
   2161           *          Use on: Forming device to allow other devices to join
   2162           *
   2163           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2164           * @param   uint8* msg_ptr - the message pointer
   2165           *
   2166           * @return  None
   2167           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2168          void AT_Cmd_AddKey( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_AddKey:
   2169          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2170            uint8 i;
   2171            uint8 status;
   2172            uint8 removefn;
   2173            uint8 InstallCode[INSTALL_CODE_LEN+INSTALL_CODE_CRC_LEN];
   2174            uint16 shortAddr;
   2175            uint8 pExtAddr[Z_EXTADDR_LEN];
   2176            AT_CmdUnit cmdUnitArr[3];
   2177          
   2178            for( i = 0; i < 3; i++ )
   \   000010   75..00       MOV       ?V1,#0x0
   2179              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_AddKey_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   E5..         MOV       A,?V1
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   00002F   40E2         JC        ??AT_Cmd_AddKey_0
   2180            if (cmdUnitArr[1].unitLen == 0) {
   \   000031   7407         MOV       A,#0x7
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   700B         JNZ       ??AT_Cmd_AddKey_1
   2181              AT_PARSE_CMD_PATTERN_ERROR(":\r", cmdUnitArr);
   \   000039                ; Setup parameters for call to function AT_Pattern_Check
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?XSTACK_DISP102_8
   \   00003E   7A..         MOV       R2,#`?<Constant ":\\r">` & 0xff
   \   000040   7B..         MOV       R3,#(`?<Constant ":\\r">` >> 8) & 0xff
   \   000042   8009         SJMP      ??AT_Cmd_AddKey_2
   2182            } else {
   2183              AT_PARSE_CMD_PATTERN_ERROR(":,\r", cmdUnitArr);
   \                     ??AT_Cmd_AddKey_1:
   \   000044                ; Setup parameters for call to function AT_Pattern_Check
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP102_8
   \   000049   7A..         MOV       R2,#`?<Constant ":,\\r">` & 0xff
   \   00004B   7B..         MOV       R3,#(`?<Constant ":,\\r">` >> 8) & 0xff
   \                     ??AT_Cmd_AddKey_2:
   \   00004D   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000050   6004         JZ        ??AT_Cmd_AddKey_3
   \   000052                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000052   7A01         MOV       R2,#0x1
   \   000054   8026         SJMP      ??AT_Cmd_AddKey_4
   2184            }
   2185          
   2186            AT_ChartoIntx(&cmdUnitArr[0], pExtAddr, 64);
   \                     ??AT_Cmd_AddKey_3:
   \   000056                ; Setup parameters for call to function AT_ChartoIntx
   \   000056   7940         MOV       R1,#0x40
   \   000058   740E         MOV       A,#0xe
   \   00005A   12....       LCALL     ?XSTACK_DISP102_8
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?XSTACK_DISP101_8
   \   000062   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   2187            if (cmdUnitArr[1].unitLen == 0) {
   \   000065   7407         MOV       A,#0x7
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   7014         JNZ       ??AT_Cmd_AddKey_5
   2188              removefn = TRUE;
   2189            } else {
   2190              removefn = FALSE;
   2191              AT_ChartoIntx(&cmdUnitArr[1], InstallCode, 128);
   2192            }
   2193          
   2194            if (!removefn) {
   2195            	if(AddrMgrNwkAddrLookup(pExtAddr, &shortAddr))
   2196              {
   2197                status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, InstallCode );
   2198              } else {
   2199                status = AT_NWK_UNKNOWN_DEV;
   2200              }
   2201          
   2202              /*uint16 crc = bdb_GenerateInstallCodeCRC(InstallCode);
   2203              InstallCode[INSTALL_CODE_LEN] = crc & 0xFF;
   2204              InstallCode[INSTALL_CODE_LEN + 1] = crc >> 8;
   2205          
   2206              #if (ZG_BUILD_COORDINATOR_TYPE)
   2207              if (ZG_DEVICE_COORDINATOR_TYPE)
   2208              {
   2209                status = bdb_addInstallCode(InstallCode, pExtAddr);
   2210              }
   2211              else
   2212              {
   2213                status = bdb_setActiveCentralizedLinkKey(FALSE, InstallCode);
   2214              }
   2215              #else
   2216              status = bdb_setActiveCentralizedLinkKey(FALSE, InstallCode);
   2217              #endif*/
   2218            } else {
   2219              if( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ))
   2220              {
   2221                uint16 tempIndex;
   2222                APSME_TCLKDevEntry_t TCLKDevEntry;
   2223                uint8 found;
   2224          
   2225                tempIndex = APSME_SearchTCLinkKeyEntry(pExtAddr,&found, &TCLKDevEntry);
   2226          
   2227                if(found)
   2228                {
   2229                  uint16 i;
   2230          
   2231                  i = tempIndex - ZCD_NV_TCLK_TABLE_START;
   2232                  //Reset the frame counter associated to this device  TCLinkKeyFrmCntr
   2233                  TCLinkKeyFrmCntr[i].txFrmCntr = 0;
   2234                  TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
   2235          
   2236                  if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
   2237                  {
   2238                    APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
   2239                  }
   2240          
   2241                  osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   2242                  osal_nv_write( ( tempIndex), 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   2243                  status = ZSuccess;
   2244                }
   2245              }
   2246              else
   2247              {
   2248                status = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   \   00006D                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   00006D   740E         MOV       A,#0xe
   \   00006F   12....       LCALL     ?XSTACK_DISP101_8
   \   000072   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   \                     ??AT_Cmd_AddKey_6:
   \   000075   E9           MOV       A,R1
   \   000076   F9           MOV       R1,A
   2249              }
   2250            }
   2251          
   2252            if (status != ZSuccess) {
   \   000077   E9           MOV       A,R1
   \   000078   6052         JZ        ??AT_Cmd_AddKey_7
   2253              AT_ZDO_ERROR(status);
   \                     ??AT_Cmd_AddKey_8:
   \   00007A                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00007A   7A03         MOV       R2,#0x3
   \                     ??AT_Cmd_AddKey_4:
   \   00007C   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   00007F   8056         SJMP      ??AT_Cmd_AddKey_9
   2254            } else {
   \                     ??AT_Cmd_AddKey_5:
   \   000081                ; Setup parameters for call to function AT_ChartoIntx
   \   000081   7980         MOV       R1,#-0x80
   \   000083   7416         MOV       A,#0x16
   \   000085   12....       LCALL     ?XSTACK_DISP102_8
   \   000088   7406         MOV       A,#0x6
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   AA82         MOV       R2,DPL
   \   00008F   AB83         MOV       R3,DPH
   \   000091   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   \   000094                ; Setup parameters for call to function AddrMgrNwkAddrLookup
   \   000094   AC..         MOV       R4,?XSP + 0
   \   000096   AD..         MOV       R5,?XSP + 1
   \   000098   740E         MOV       A,#0xe
   \   00009A   12....       LCALL     ?XSTACK_DISP101_8
   \   00009D   12....       LCALL     `??AddrMgrNwkAddrLookup::?relay`; Banked call to: AddrMgrNwkAddrLookup
   \   0000A0   E9           MOV       A,R1
   \   0000A1   6025         JZ        ??AT_Cmd_AddKey_10
   \   0000A3                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   0000A3   7416         MOV       A,#0x16
   \   0000A5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A8   88..         MOV       ?V2,R0
   \   0000AA   89..         MOV       ?V3,R1
   \   0000AC   78..         MOV       R0,#?V2
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   7410         MOV       A,#0x10
   \   0000B3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   0000BE   12....       LCALL     `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   80AD         SJMP      ??AT_Cmd_AddKey_6
   \                     ??AT_Cmd_AddKey_10:
   \   0000C8   79C8         MOV       R1,#-0x38
   \   0000CA   80AE         SJMP      ??AT_Cmd_AddKey_8
   2255              AT_OK();
   \                     ??AT_Cmd_AddKey_7:
   \   0000CC                ; Setup parameters for call to function AT_Uart0_Send
   \   0000CC   7C06         MOV       R4,#0x6
   \   0000CE   7D00         MOV       R5,#0x0
   \   0000D0   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0000D2   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0000D4   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2256            }
   2257          }
   \                     ??AT_Cmd_AddKey_9:
   \   0000D7   7428         MOV       A,#0x28
   \   0000D9   02....       LJMP      ??Subroutine165_0 & 0xFFFF
   2258          
   2259          /*******************************************************************************
   2260           * @fn      AT_Cmd_IDREQ
   2261           *
   2262           * @brief   +IDREQ - Request Node's NodeID (ZDO)
   2263           *          Format: AT+IDREQ:<Address>[,XX]
   2264           *          Response: OK or ERROR:<errorcode>
   2265           *          Prompt: AddrResp:<errorcode>[,<NodeID>,<EUI64>] [nn. <NodeID>]
   2266           *          Use on: All Devices
   2267           *          Note: Where <Address> can be a node's EUI64, or address table entry
   2268           *                and XX is an optional index number. When an index number is
   2269           *                provided, an extended response is requested asking the remote
   2270           *                device to list its associated devices (ie children).
   2271           *                It then sends a broadcast to obtain the specified Device's
   2272           *                NodeID and optionally also elements of its associated devices
   2273           *                list.
   2274           *
   2275           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2276           * @param   uint8* msg_ptr - the message pointer
   2277           *
   2278           * @return  None
   2279           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2280          void AT_Cmd_IDREQ( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_IDREQ:
   2281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2282            AT_CmdUnit cmdUnitArr[3];
   2283            uint8 i;
   2284            for(i = 0; i < 3; i++)
   \   000010   75..00       MOV       ?V1,#0x0
   2285              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_IDREQ_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   E5..         MOV       A,?V1
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   00002A   40E7         JC        ??AT_Cmd_IDREQ_0
   2286          
   2287            uint8 ext[8];
   2288            AddrMgrEntry_t entry;
   2289            if (cmdUnitArr[0].unitLen > 10) { // <Address> is EUI64
   \   00002C   7401         MOV       A,#0x1
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E0           MOVX      A,@DPTR
   \   000032   C3           CLR       C
   \   000033   940B         SUBB      A,#0xb
   \   000035   4010         JC        ??AT_Cmd_IDREQ_1
   2290              AT_ChartoIntx(&cmdUnitArr[0], ext, 64);
   \   000037                ; Setup parameters for call to function AT_ChartoIntx
   \   000037   7940         MOV       R1,#0x40
   \   000039   740C         MOV       A,#0xc
   \   00003B   12....       LCALL     ?XSTACK_DISP102_8
   \   00003E   AA..         MOV       R2,?XSP + 0
   \   000040   AB..         MOV       R3,?XSP + 1
   \   000042   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   \   000045   803C         SJMP      ??AT_Cmd_IDREQ_2
   2291            } else { // <Address> is address table entry
   2292              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_IDREQ_1:
   \   000047                ; Setup parameters for call to function AT_ChartoInt8
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   00004E   741F         MOV       A,#0x1f
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E9           MOV       A,R1
   \   000054   12....       LCALL     ??Subroutine184_0 & 0xFFFF
   2293              // entry.user = ADDRMGR_USER_DEFAULT;
   2294              AddrMgrEntryGet(&entry);
   \                     ??CrossCallReturnLabel_462:
   \   000057                ; Setup parameters for call to function AddrMgrEntryGet
   \   000057   7414         MOV       A,#0x14
   \   000059   12....       LCALL     ?XSTACK_DISP101_8
   \   00005C   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   2295              osal_memcpy(ext, entry.extAddr, Z_EXTADDR_LEN);
   \   00005F                ; Setup parameters for call to function osal_memcpy
   \   00005F   7417         MOV       A,#0x17
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   A982         MOV       R1,DPL
   \   000066   AA83         MOV       R2,DPH
   \   000068   89..         MOV       ?V4,R1
   \   00006A   8A..         MOV       ?V5,R2
   \   00006C   75..00       MOV       ?V6,#0x0
   \   00006F   78..         MOV       R0,#?V4
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000074   7C08         MOV       R4,#0x8
   \   000076   7D00         MOV       R5,#0x0
   \   000078   740F         MOV       A,#0xf
   \   00007A   12....       LCALL     ?XSTACK_DISP101_8
   \   00007D   12....       LCALL     ?Subroutine112 & 0xFFFF
   2296            }
   \                     ??CrossCallReturnLabel_209:
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   2297            if (cmdUnitArr[1].symbol == ',' ) {
   \                     ??AT_Cmd_IDREQ_2:
   \   000083   7404         MOV       A,#0x4
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E0           MOVX      A,@DPTR
   \   000089   642C         XRL       A,#0x2c
   \   00008B   AC..         MOV       R4,?XSP + 0
   \   00008D   AD..         MOV       R5,?XSP + 1
   \   00008F   7014         JNZ       ??AT_Cmd_IDREQ_3
   2298              AT_PARSE_CMD_PATTERN_ERROR(":,\r", cmdUnitArr);
   \   000091                ; Setup parameters for call to function AT_Pattern_Check
   \   000091   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000094   7018         JNZ       ??AT_Cmd_IDREQ_4
   \   000096                ; Setup parameters for call to function AT_UARTWriteErrMsg
   2299              uint8 status;
   2300              status = ZDP_NwkAddrReq( ext, ZDP_ADDR_REQTYPE_EXTENDED,
   2301                                        AT_ChartoInt8(&cmdUnitArr[1]), TRUE );
   \   000096                ; Setup parameters for call to function AT_ChartoInt8
   \   000096   7404         MOV       A,#0x4
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   12....       LCALL     ?Subroutine108 & 0xFFFF
   2302              if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   2303            } else {
   \                     ??CrossCallReturnLabel_433:
   \   00009E   FC           MOV       R4,A
   \   00009F                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00009F   7D01         MOV       R5,#0x1
   \   0000A1   7901         MOV       R1,#0x1
   \   0000A3   8016         SJMP      ??AT_Cmd_IDREQ_5
   2304              AT_PARSE_CMD_PATTERN_ERROR(":\r",cmdUnitArr);
   \                     ??AT_Cmd_IDREQ_3:
   \   0000A5                ; Setup parameters for call to function AT_Pattern_Check
   \   0000A5   7A..         MOV       R2,#`?<Constant ":\\r">` & 0xff
   \   0000A7   7B..         MOV       R3,#(`?<Constant ":\\r">` >> 8) & 0xff
   \   0000A9   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   0000AC   6007         JZ        ??AT_Cmd_IDREQ_6
   \   0000AE                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_IDREQ_4:
   \   0000AE   7A01         MOV       R2,#0x1
   \   0000B0   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   0000B3   8022         SJMP      ??AT_Cmd_IDREQ_7
   2305              uint8 status;
   2306              status = ZDP_NwkAddrReq( ext, ZDP_ADDR_REQTYPE_SINGLE,
   2307                                    0xFF, TRUE );
   \                     ??AT_Cmd_IDREQ_6:
   \   0000B5                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0000B5   7D01         MOV       R5,#0x1
   \   0000B7   7CFF         MOV       R4,#-0x1
   \   0000B9   7900         MOV       R1,#0x0
   \                     ??AT_Cmd_IDREQ_5:
   \   0000BB   740C         MOV       A,#0xc
   \   0000BD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C0   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   0000C3   E9           MOV       A,R1
   \   0000C4   F9           MOV       R1,A
   2308              if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   \   0000C5   6005         JZ        ??AT_Cmd_IDREQ_8
   \   0000C7                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000C7   7A02         MOV       R2,#0x2
   \   0000C9   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   2309            }
   2310            AT_OK();
   \                     ??AT_Cmd_IDREQ_8:
   \   0000CC                ; Setup parameters for call to function AT_Uart0_Send
   \   0000CC   7C06         MOV       R4,#0x6
   \   0000CE   7D00         MOV       R5,#0x0
   \   0000D0   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0000D2   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0000D4   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2311          }
   \                     ??AT_Cmd_IDREQ_7:
   \   0000D7   7421         MOV       A,#0x21
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DC   7F07         MOV       R7,#0x7
   \   0000DE   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine194_0
   \   000006                ; // Fall through to label ??Subroutine194_0
   2312          
   2313          /*******************************************************************************
   2314           * @fn      AT_Cmd_EUIREQ
   2315           *
   2316           * @brief   +EUIREQ - Request Node's EUI64 (ZDO)
   2317           *          Format: AT+EUIREQ:<Address>,<NodeID>[,XX]
   2318           *          Response: OK or ERROR:<errorcode>
   2319           *          Prompt: AddrResp:<errorcode>[,<NodeID>,<EUI64>]
   2320           *          Use on: All Devices
   2321           *          Note: Where <Address> is Node ID or address table entry
   2322           *                of the node which is to be interrogated about the node with
   2323           *                the Node ID specified in <NodeID>. XX is an optional index number.
   2324           *                In case an index number is provided, an extended response is
   2325           *                requested asking the remote device to list its associated
   2326           *                devices (i.e. children).
   2327           *
   2328           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2329           * @param   uint8* msg_ptr - the message pointer
   2330           *
   2331           * @return  None
   2332           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2333          void AT_Cmd_EUIREQ( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_EUIREQ:
   2334          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2335            notdoEUIREQcmd = FALSE;
   \   000010   90....       MOV       DPTR,#notdoEUIREQcmd
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   2336            AT_CmdUnit cmdUnitArr[4];
   2337            uint8 i;
   2338            for(i = 0; i < 4; i++)
   \   000015   75..00       MOV       ?V1,#0x0
   2339              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_EUIREQ_0:
   \   000018                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000018   EE           MOV       A,R6
   \   000019   FC           MOV       R4,A
   \   00001A   EF           MOV       A,R7
   \   00001B   FD           MOV       R5,A
   \   00001C   A9..         MOV       R1,?V0
   \   00001E   E5..         MOV       A,?V1
   \   000020   F5..         MOV       ?V2,A
   \   000022   75..00       MOV       ?V3,#0x0
   \   000025   7402         MOV       A,#0x2
   \   000027   78..         MOV       R0,#?V2
   \   000029   12....       LCALL     ?S_SHL
   \   00002C   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00002F   40E7         JC        ??AT_Cmd_EUIREQ_0
   2340          
   2341            uint16 dstaddr;
   2342            AddrMgrEntry_t entry;
   2343            if (cmdUnitArr[0].unitLen > 2) { // <Address> is NodeID
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   12....       LCALL     ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   00003A   4005         JC        ??AT_Cmd_EUIREQ_1
   2344              dstaddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \   00003C                ; Setup parameters for call to function AT_ChartoInt16
   \   00003C   12....       LCALL     ??Subroutine158_0 & 0xFFFF
   2345            } else { // <Address> is address table entry
   \                     ??CrossCallReturnLabel_301:
   \   00003F   801B         SJMP      ??AT_Cmd_EUIREQ_2
   2346              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_EUIREQ_1:
   \   000041                ; Setup parameters for call to function AT_ChartoInt8
   \   000041   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000044   741B         MOV       A,#0x1b
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ?Subroutine22 & 0xFFFF
   2347              // entry.user = ADDRMGR_USER_DEFAULT;
   2348              AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_31:
   \   00004C   12....       LCALL     ?XSTACK_DISP101_8
   \   00004F   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   2349              dstaddr = entry.nwkAddr;
   \   000052   7411         MOV       A,#0x11
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E0           MOVX      A,@DPTR
   \   000058   FE           MOV       R6,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FF           MOV       R7,A
   2350            }
   2351            if (cmdUnitArr[2].symbol == ',') {
   \                     ??AT_Cmd_EUIREQ_2:
   \   00005C   7408         MOV       A,#0x8
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   E0           MOVX      A,@DPTR
   \   000062   642C         XRL       A,#0x2c
   \   000064   AC..         MOV       R4,?XSP + 0
   \   000066   AD..         MOV       R5,?XSP + 1
   \   000068   702A         JNZ       ??AT_Cmd_EUIREQ_3
   2352              AT_PARSE_CMD_PATTERN_ERROR(":,,\r", cmdUnitArr);
   \   00006A                ; Setup parameters for call to function AT_Pattern_Check
   \   00006A   7A..         MOV       R2,#`?<Constant ":,,\\r">` & 0xff
   \   00006C   7B..         MOV       R3,#(`?<Constant ":,,\\r">` >> 8) & 0xff
   \   00006E   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000071   7026         JNZ       ??AT_Cmd_EUIREQ_4
   \   000073                ; Setup parameters for call to function AT_UARTWriteErrMsg
   2353              uint8 status;
   2354              status = ZDP_IEEEAddrReq( dstaddr, AT_ChartoInt16(&cmdUnitArr[1]), ZDP_ADDR_REQTYPE_EXTENDED,
   2355                                      AT_ChartoInt8(&cmdUnitArr[2]), TRUE );
   \   000073                ; Setup parameters for call to function AT_ChartoInt8
   \   000073   7408         MOV       A,#0x8
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine101 & 0xFFFF
   2356              if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   2357            } else {
   \                     ??CrossCallReturnLabel_319:
   \   00007B                ; Setup parameters for call to function AT_ChartoInt16
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000083                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000083   75..01       MOV       ?V2,#0x1
   \   000086   78..         MOV       R0,#?V2
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008B   78..         MOV       R0,#?V1
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000090   7901         MOV       R1,#0x1
   \   000092   8026         SJMP      ??AT_Cmd_EUIREQ_5
   2358              AT_PARSE_CMD_PATTERN_ERROR(":,\r", cmdUnitArr);
   \                     ??AT_Cmd_EUIREQ_3:
   \   000094                ; Setup parameters for call to function AT_Pattern_Check
   \   000094   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000097   6007         JZ        ??AT_Cmd_EUIREQ_6
   \   000099                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_EUIREQ_4:
   \   000099   7A01         MOV       R2,#0x1
   \   00009B   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   00009E   803E         SJMP      ??CrossCallReturnLabel_47
   2359              uint8 status;
   2360              status = ZDP_IEEEAddrReq( dstaddr, AT_ChartoInt16(&cmdUnitArr[1]), ZDP_ADDR_REQTYPE_SINGLE,
   2361                                      0xFF, TRUE );
   \                     ??AT_Cmd_EUIREQ_6:
   \   0000A0                ; Setup parameters for call to function AT_ChartoInt16
   \   0000A0   7404         MOV       A,#0x4
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000A8                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000A8   75..01       MOV       ?V1,#0x1
   \   0000AB   78..         MOV       R0,#?V1
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   75..FF       MOV       ?V1,#-0x1
   \   0000B3   78..         MOV       R0,#?V1
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   7900         MOV       R1,#0x0
   \                     ??AT_Cmd_EUIREQ_5:
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FA           MOV       R2,A
   \   0000BC   EF           MOV       A,R7
   \   0000BD   FB           MOV       R3,A
   \   0000BE   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   E9           MOV       A,R1
   \   0000C7   F9           MOV       R1,A
   2362              if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   \   0000C8   6005         JZ        ??AT_Cmd_EUIREQ_7
   \   0000CA                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000CA   7A02         MOV       R2,#0x2
   \   0000CC   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   2363            }
   2364            AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_EUIREQ_7:
   \   0000CF                ; Setup parameters for call to function printf
   \   0000CF   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   2365            AT_SEQ_STROE(ZDP_TransID);
   \   0000DB                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   0000DB   12....       LCALL     ?Subroutine31 & 0xFFFF
   2366            AT_OK();
   2367          }
   \                     ??CrossCallReturnLabel_47:
   \   0000DE   741D         MOV       A,#0x1d
   \   0000E0   80..         SJMP      ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine164_0
   \   000004                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000003   F5..         MOV       ?V1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000007   AC..         MOV       R4,?V2
   \   000009   AD..         MOV       R5,?V3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   7A..         MOV       R2,#`?<Constant "\\r\\nSEQ:%02X\\r\\n">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "\\r\\nSEQ:%02X\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine168_0
   \   000004                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   C3           CLR       C
   \   000001   9403         SUBB      A,#0x3
   \   000003   AA..         MOV       R2,?XSP + 0
   \   000005   AB..         MOV       R3,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV       DPTR,#ZDP_TransID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   14           DEC       A
   \   000005   F9           MOV       R1,A
   \   000006   12....       LCALL     `??StoreSeqNumInBuffer::?relay`; Banked call to: StoreSeqNumInBuffer
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009                ; Setup parameters for call to function AT_Uart0_Send
   \   000009   7C06         MOV       R4,#0x6
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   00000F   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000011   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E9           MOV       A,R1
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005   7410         MOV       A,#0x10
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV       DPTR,#ZDP_TransID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   24FF         ADD       A,#-0x1
   \   000006   F5..         MOV       ?V2,A
   \   000008   E4           CLR       A
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   F5..         MOV       ?V3,A
   \   00000D   78..         MOV       R0,#?V2
   \   00000F   22           RET
   2368          
   2369          /*******************************************************************************
   2370           * @fn      AT_Cmd_NODEDESC
   2371           *
   2372           * @brief   +NODEDESC - Request Node's Descriptor (ZDO)
   2373           *          Format: AT+NODEDESC:<Address>,<NodeID>
   2374           *                  Where <Address> is the EUI64, NodeID or Address table entry
   2375           *                  of the node which is to be interrogated about the node with
   2376           *                  the NodeID specified in <NodeID>.
   2377           *          Use on: All Devices
   2378           *          Note: Sends a unicast to obtain the specified device's node descriptor.
   2379           *
   2380           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2381           * @param   uint8* msg_ptr - the message pointer
   2382           *
   2383           * @return  None
   2384           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2385          void AT_Cmd_NODEDESC( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_NODEDESC:
   2386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2387            notdoNODEDESEcmd = FALSE;
   \   000010   90....       MOV       DPTR,#notdoNODEDESEcmd
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   2388            uint8 status;
   2389            AT_CmdUnit cmdUnitArr[3];
   2390            uint8 i;
   2391            for (i = 0; i < 3; i++)
   \   000015   75..00       MOV       ?V0,#0x0
   2392              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_NODEDESC_0:
   \   000018                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000018   EE           MOV       A,R6
   \   000019   FC           MOV       R4,A
   \   00001A   EF           MOV       A,R7
   \   00001B   FD           MOV       R5,A
   \   00001C   A9..         MOV       R1,?V2
   \   00001E   E5..         MOV       A,?V0
   \   000020   F5..         MOV       ?V4,A
   \   000022   75..00       MOV       ?V5,#0x0
   \   000025   7402         MOV       A,#0x2
   \   000027   78..         MOV       R0,#?V4
   \   000029   12....       LCALL     ?S_SHL
   \   00002C   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00002F   40E7         JC        ??AT_Cmd_NODEDESC_0
   2393            AT_PARSE_CMD_PATTERN_ERROR(":,\r",cmdUnitArr);
   \   000031                ; Setup parameters for call to function AT_Pattern_Check
   \   000031   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000034   6004         JZ        ??AT_Cmd_NODEDESC_1
   \   000036                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000036   7A01         MOV       R2,#0x1
   \   000038   8058         SJMP      ??AT_Cmd_NODEDESC_2
   2394          
   2395            AddrMgrEntry_t entry;
   2396            zAddrType_t *dstAddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   \                     ??AT_Cmd_NODEDESC_1:
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   12....       LCALL     ?Subroutine109 & 0xFFFF
   2397            if (cmdUnitArr[0].unitLen > 10) { // <Address> is EUI64
   \                     ??CrossCallReturnLabel_202:
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000043   4005         JC        ??AT_Cmd_NODEDESC_3
   2398              AT_ChartoIntx(&cmdUnitArr[0], dstAddr->addr.extAddr, 64);
   \   000045                ; Setup parameters for call to function AT_ChartoIntx
   \   000045   12....       LCALL     ?Subroutine116 & 0xFFFF
   2399              dstAddr->addrMode = (afAddrMode_t)Addr64Bit;
   2400            } else if (cmdUnitArr[0].unitLen > 2) { // <Address> is NodeID
   \                     ??CrossCallReturnLabel_324:
   \   000048   8026         SJMP      ??CrossCallReturnLabel_3
   \                     ??AT_Cmd_NODEDESC_3:
   \   00004A   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   00004D   4005         JC        ??AT_Cmd_NODEDESC_4
   2401              dstAddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \   00004F                ; Setup parameters for call to function AT_ChartoInt16
   \   00004F   12....       LCALL     ?Subroutine92 & 0xFFFF
   2402              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2403            } else { // <Address> is address table entry
   \                     ??CrossCallReturnLabel_177:
   \   000052   8019         SJMP      ??CrossCallReturnLabel_62
   2404              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_NODEDESC_4:
   \   000054                ; Setup parameters for call to function AT_ChartoInt8
   \   000054   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000057   7417         MOV       A,#0x17
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ?Subroutine23 & 0xFFFF
   2405              // entry.user = ADDRMGR_USER_DEFAULT;
   2406              AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_34:
   \   00005F   12....       LCALL     ?XSTACK_DISP101_8
   \   000062   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   2407              dstAddr->addr.shortAddr = entry.nwkAddr;
   \   000065   740D         MOV       A,#0xd
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ?Subroutine33 & 0xFFFF
   2408              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2409            }
   \                     ??CrossCallReturnLabel_62:
   \   00006D   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000070   F0           MOVX      @DPTR,A
   2410          
   2411            status = ZDP_NodeDescReq(dstAddr, AT_ChartoInt16(&cmdUnitArr[1]), TRUE);
   \   000071                ; Setup parameters for call to function AT_ChartoInt16
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007C   7902         MOV       R1,#0x2
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   FB           MOV       R3,A
   \   000082   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000085   7401         MOV       A,#0x1
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008A   12....       LCALL     ?Subroutine110 & 0xFFFF
   2412            osal_mem_free(dstAddr);
   2413            if (status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   \                     ??CrossCallReturnLabel_350:
   \   00008D   6008         JZ        ??AT_Cmd_NODEDESC_5
   \   00008F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00008F   7A02         MOV       R2,#0x2
   \   000091   F9           MOV       R1,A
   \                     ??AT_Cmd_NODEDESC_2:
   \   000092   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000095   800F         SJMP      ??CrossCallReturnLabel_48
   2414            else {
   2415              AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_NODEDESC_5:
   \   000097                ; Setup parameters for call to function printf
   \   000097   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
   2416              AT_SEQ_STROE(ZDP_TransID);
   \   0000A3                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   0000A3   12....       LCALL     ?Subroutine31 & 0xFFFF
   2417              AT_OK();
   2418            }
   2419          }
   \                     ??CrossCallReturnLabel_48:
   \   0000A6                REQUIRE ?Subroutine10
   \   0000A6                ; // Fall through to label ?Subroutine10

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7419         MOV       A,#0x19
   \   000002   02....       LJMP      ??Subroutine176_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   7940         MOV       R1,#0x40
   \   000002   EA           MOV       A,R2
   \   000003   FC           MOV       R4,A
   \   000004   EB           MOV       A,R3
   \   000005                REQUIRE ??Subroutine167_0
   \   000005                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   FD           MOV       R5,A
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   \   000008   85..82       MOV       DPL,?V0
   \   00000B   85..83       MOV       DPH,?V1
   \   00000E   7403         MOV       A,#0x3
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine169_0
   \   000006                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000003   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000006   F5..         MOV       ?V2,A
   \   000008   05..         INC       ?V0
   \   00000A   E5..         MOV       A,?V0
   \   00000C   C3           CLR       C
   \   00000D   9403         SUBB      A,#0x3
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   EA           MOV       A,R2
   \   000003   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   2408         ADD       A,#0x8
   \   000002   F5..         MOV       ?V0,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F5..         MOV       ?V1,A
   \   000008   E8           MOV       A,R0
   \   000009   C3           CLR       C
   \   00000A   940B         SUBB      A,#0xb
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E9           MOV       A,R1
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005   740C         MOV       A,#0xc
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E9           MOV       A,R1
   \   000001   F5..         MOV       ?V0,A
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003   EE           MOV       A,R6
   \   000004   FA           MOV       R2,A
   \   000005   EF           MOV       A,R7
   \   000006   FB           MOV       R3,A
   \   000007                REQUIRE ??Subroutine170_0
   \   000007                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000003   75..01       MOV       ?V0,#0x1
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine171_0
   \   000001                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   AE..         MOV       R6,?V0
   \   000005   AF..         MOV       R7,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   7A09         MOV       R2,#0x9
   \   000002                REQUIRE ??Subroutine172_0
   \   000002                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV       DPTR,#ZDP_TransID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   24FF         ADD       A,#-0x1
   \   000006   F5..         MOV       ?V0,A
   \   000008   E4           CLR       A
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   F5..         MOV       ?V1,A
   \   00000D   78..         MOV       R0,#?V0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   E8           MOV       A,R0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   E582         MOV       A,DPL
   \   000002   25..         ADD       A,?V4
   \   000004   FA           MOV       R2,A
   \   000005   E583         MOV       A,DPH
   \   000007   35..         ADDC      A,?V5
   \   000009   FB           MOV       R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   AC..         MOV       R4,?V0
   \   00000D   AD..         MOV       R5,?V1
   \   00000F   22           RET
   2420          
   2421          /*******************************************************************************
   2422           * @fn      AT_Cmd_POWERDESC
   2423           *
   2424           * @brief   +POWERDESC - Request Node's Power Descriptor (ZDO)
   2425           *          Format: AT+POWERDESC:<Address>,<NodeID>
   2426           *                  Where <Address> is the EUI64, NodeID or Address table entry
   2427           *                  of the node which is to be interrogated about the node with
   2428           *                  the NodeID specified in <NodeID>.
   2429           *          Use on: All Devices
   2430           *          Prompt: PowerDesc:<NodeID>,<errorcode>[,<PowerDescriptor>]
   2431           *          Note: Sends a unicast to obtain the specified device's node descriptor.
   2432           *
   2433           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2434           * @param   uint8* msg_ptr - the message pointer
   2435           *
   2436           * @return  None
   2437           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2438          void AT_Cmd_POWERDESC( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_POWERDESC:
   2439          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2440            uint8 status;
   2441            uint8 i;
   2442            AT_CmdUnit cmdUnitArr[3];
   2443            for (i = 0; i < 3; i++)
   \   000010   75..00       MOV       ?V0,#0x0
   2444              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_POWERDESC_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V2
   \   000019   E5..         MOV       A,?V0
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   75..00       MOV       ?V5,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?S_SHL
   \   000027   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00002A   40E7         JC        ??AT_Cmd_POWERDESC_0
   2445            AT_PARSE_CMD_PATTERN_ERROR(":,\r",cmdUnitArr);
   \   00002C                ; Setup parameters for call to function AT_Pattern_Check
   \   00002C   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   00002F   6004         JZ        ??AT_Cmd_POWERDESC_1
   \   000031                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000031   7A01         MOV       R2,#0x1
   \   000033   8058         SJMP      ??AT_Cmd_POWERDESC_2
   2446          
   2447            AddrMgrEntry_t entry;
   2448            zAddrType_t *dstAddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   \                     ??AT_Cmd_POWERDESC_1:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   12....       LCALL     ?Subroutine109 & 0xFFFF
   2449            if (cmdUnitArr[0].unitLen > 10) { // <Address> is EUI64
   \                     ??CrossCallReturnLabel_203:
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00003E   4005         JC        ??AT_Cmd_POWERDESC_3
   2450              AT_ChartoIntx(&cmdUnitArr[0], dstAddr->addr.extAddr, 64);
   \   000040                ; Setup parameters for call to function AT_ChartoIntx
   \   000040   12....       LCALL     ?Subroutine116 & 0xFFFF
   2451              dstAddr->addrMode = (afAddrMode_t)Addr64Bit;
   2452            } else if (cmdUnitArr[0].unitLen > 2) { // <Address> is NodeID
   \                     ??CrossCallReturnLabel_325:
   \   000043   8026         SJMP      ??CrossCallReturnLabel_4
   \                     ??AT_Cmd_POWERDESC_3:
   \   000045   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000048   4005         JC        ??AT_Cmd_POWERDESC_4
   2453              dstAddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \   00004A                ; Setup parameters for call to function AT_ChartoInt16
   \   00004A   12....       LCALL     ?Subroutine92 & 0xFFFF
   2454              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2455            } else { // <Address> is address table entry
   \                     ??CrossCallReturnLabel_178:
   \   00004D   8019         SJMP      ??CrossCallReturnLabel_63
   2456              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_POWERDESC_4:
   \   00004F                ; Setup parameters for call to function AT_ChartoInt8
   \   00004F   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000052   7417         MOV       A,#0x17
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine23 & 0xFFFF
   2457              // entry.user = ADDRMGR_USER_DEFAULT;
   2458              AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_35:
   \   00005A   12....       LCALL     ?XSTACK_DISP101_8
   \   00005D   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   2459              dstAddr->addr.shortAddr = entry.nwkAddr;
   \   000060   740D         MOV       A,#0xd
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   12....       LCALL     ?Subroutine33 & 0xFFFF
   2460              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2461            }
   \                     ??CrossCallReturnLabel_63:
   \   000068   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00006B   F0           MOVX      @DPTR,A
   2462          
   2463            status = ZDP_PowerDescReq(dstAddr,AT_ChartoInt16(&cmdUnitArr[1]), TRUE);
   \   00006C                ; Setup parameters for call to function AT_ChartoInt16
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   7903         MOV       R1,#0x3
   \   000079   EE           MOV       A,R6
   \   00007A   FA           MOV       R2,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FB           MOV       R3,A
   \   00007D   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000080   7401         MOV       A,#0x1
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   12....       LCALL     ?Subroutine110 & 0xFFFF
   2464            osal_mem_free(dstAddr);
   2465            if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   \                     ??CrossCallReturnLabel_351:
   \   000088   6008         JZ        ??AT_Cmd_POWERDESC_5
   \   00008A                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00008A   7A02         MOV       R2,#0x2
   \   00008C   F9           MOV       R1,A
   \                     ??AT_Cmd_POWERDESC_2:
   \   00008D   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000090   800F         SJMP      ??CrossCallReturnLabel_49
   2466            else {
   2467              AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_POWERDESC_5:
   \   000092                ; Setup parameters for call to function printf
   \   000092   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   2468              AT_SEQ_STROE(ZDP_TransID);
   \   00009E                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   00009E   12....       LCALL     ?Subroutine31 & 0xFFFF
   2469              AT_OK();
   2470            }
   2471          }
   \                     ??CrossCallReturnLabel_49:
   \   0000A1   02....       LJMP      ?Subroutine10 & 0xFFFF
   2472          
   2473          /*******************************************************************************
   2474           * @fn      AT_Cmd_ACTEPDESC
   2475           *
   2476           * @brief   +ACTEPDESC - Request Node's Active Endpoint List (ZDO)
   2477           *          Format: AT+ACTEPDESC:<Address>,<NodeID>
   2478           *                  Where <Address> is the EUI64, NodeID or Address table entry
   2479           *                  of the node which is to be interrogated about the node with
   2480           *                  the NodeID specified in <NodeID>.
   2481           *          Use on: All Devices
   2482           *          Prompt: ActEpDesc:<NodeID>,<errorcode>[,XX,...]
   2483           *          Note: Sends a unicast to obtain the specified device's node descriptor.
   2484           *
   2485           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2486           * @param   uint8* msg_ptr - the message pointer
   2487           *
   2488           * @return  None
   2489           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2490          void AT_Cmd_ACTEPDESC( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_ACTEPDESC:
   2491          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2492            uint8 status;
   2493            uint8 i;
   2494            AT_CmdUnit cmdUnitArr[3];
   2495            for (i = 0; i < 3; i++)
   \   000010   75..00       MOV       ?V0,#0x0
   2496              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_ACTEPDESC_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V2
   \   000019   E5..         MOV       A,?V0
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   75..00       MOV       ?V5,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?S_SHL
   \   000027   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   00002A   40E7         JC        ??AT_Cmd_ACTEPDESC_0
   2497            AT_PARSE_CMD_PATTERN_ERROR(":,\r",cmdUnitArr);
   \   00002C                ; Setup parameters for call to function AT_Pattern_Check
   \   00002C   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   00002F   6004         JZ        ??AT_Cmd_ACTEPDESC_1
   \   000031                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000031   7A01         MOV       R2,#0x1
   \   000033   8058         SJMP      ??AT_Cmd_ACTEPDESC_2
   2498          
   2499            AddrMgrEntry_t entry;
   2500            zAddrType_t *dstAddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   \                     ??AT_Cmd_ACTEPDESC_1:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   12....       LCALL     ?Subroutine109 & 0xFFFF
   2501            if (cmdUnitArr[0].unitLen > 10) { // <Address> is EUI64
   \                     ??CrossCallReturnLabel_204:
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00003E   4005         JC        ??AT_Cmd_ACTEPDESC_3
   2502              AT_ChartoIntx(&cmdUnitArr[0], dstAddr->addr.extAddr, 64);
   \   000040                ; Setup parameters for call to function AT_ChartoIntx
   \   000040   12....       LCALL     ?Subroutine116 & 0xFFFF
   2503              dstAddr->addrMode = (afAddrMode_t)Addr64Bit;
   2504            } else if (cmdUnitArr[0].unitLen > 2) { // <Address> is NodeID
   \                     ??CrossCallReturnLabel_326:
   \   000043   8026         SJMP      ??CrossCallReturnLabel_5
   \                     ??AT_Cmd_ACTEPDESC_3:
   \   000045   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000048   4005         JC        ??AT_Cmd_ACTEPDESC_4
   2505              dstAddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \   00004A                ; Setup parameters for call to function AT_ChartoInt16
   \   00004A   12....       LCALL     ?Subroutine92 & 0xFFFF
   2506              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2507            } else { // <Address> is address table entry
   \                     ??CrossCallReturnLabel_179:
   \   00004D   8019         SJMP      ??CrossCallReturnLabel_64
   2508              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_ACTEPDESC_4:
   \   00004F                ; Setup parameters for call to function AT_ChartoInt8
   \   00004F   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000052   7417         MOV       A,#0x17
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine23 & 0xFFFF
   2509              // entry.user = ADDRMGR_USER_DEFAULT;
   2510              AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_36:
   \   00005A   12....       LCALL     ?XSTACK_DISP101_8
   \   00005D   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   2511              dstAddr->addr.shortAddr = entry.nwkAddr;
   \   000060   740D         MOV       A,#0xd
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   12....       LCALL     ?Subroutine33 & 0xFFFF
   2512              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2513            }
   \                     ??CrossCallReturnLabel_64:
   \   000068   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00006B   F0           MOVX      @DPTR,A
   2514          
   2515            status = ZDP_ActiveEPReq(dstAddr, AT_ChartoInt16(&cmdUnitArr[1]), TRUE);
   \   00006C                ; Setup parameters for call to function AT_ChartoInt16
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   7905         MOV       R1,#0x5
   \   000079   EE           MOV       A,R6
   \   00007A   FA           MOV       R2,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FB           MOV       R3,A
   \   00007D   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000080   7401         MOV       A,#0x1
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   12....       LCALL     ?Subroutine110 & 0xFFFF
   2516            osal_mem_free(dstAddr);
   2517            if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   \                     ??CrossCallReturnLabel_352:
   \   000088   6008         JZ        ??AT_Cmd_ACTEPDESC_5
   \   00008A                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00008A   7A02         MOV       R2,#0x2
   \   00008C   F9           MOV       R1,A
   \                     ??AT_Cmd_ACTEPDESC_2:
   \   00008D   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000090   800F         SJMP      ??CrossCallReturnLabel_50
   2518            else {
   2519              AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_ACTEPDESC_5:
   \   000092                ; Setup parameters for call to function printf
   \   000092   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   2520              AT_SEQ_STROE(ZDP_TransID);
   \   00009E                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   00009E   12....       LCALL     ?Subroutine31 & 0xFFFF
   2521              AT_OK();
   2522            }
   2523          }
   \                     ??CrossCallReturnLabel_50:
   \   0000A1   02....       LJMP      ?Subroutine10 & 0xFFFF
   2524          
   2525          /*******************************************************************************
   2526           * @fn      AT_Cmd_SIMPLEDESC
   2527           *
   2528           * @brief   +SIMPLEDESC - Request Endpoint's Simple Descriptor (ZDO)
   2529           *          Format: AT+SIMPLEDESC:<Address>,<NodeID>,<XX>
   2530           *                  Where <Address> is the EUI64, NodeID or Address table entry
   2531           *                  of the node which is to be interrogated about the node with
   2532           *                  the NodeID specified in <NodeID> and XX is the number of the
   2533           *                  endpoint, which simple descriptor is to be read. XX should
   2534           *                  be hexadecimal number.
   2535           *          Use on: All Devices
   2536           *          Note: Sends a unicast to obtain the specified device's node descriptor.
   2537           *
   2538           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2539           * @param   uint8* msg_ptr - the message pointer
   2540           *
   2541           * @return  None
   2542           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2543          void AT_Cmd_SIMPLEDESC( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_SIMPLEDESC:
   2544          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2545            notdoSIMPLEDESCcmd = FALSE;
   \   000010   90....       MOV       DPTR,#notdoSIMPLEDESCcmd
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   2546            uint8 status;
   2547            uint8 i;
   2548            AT_CmdUnit cmdUnitArr[4];
   2549            for (i = 0; i < 4; i++)
   \   000015   75..00       MOV       ?V0,#0x0
   2550              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_SIMPLEDESC_0:
   \   000018                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000018   EE           MOV       A,R6
   \   000019   FC           MOV       R4,A
   \   00001A   EF           MOV       A,R7
   \   00001B   FD           MOV       R5,A
   \   00001C   A9..         MOV       R1,?V2
   \   00001E   E5..         MOV       A,?V0
   \   000020   F5..         MOV       ?V4,A
   \   000022   75..00       MOV       ?V5,#0x0
   \   000025   7402         MOV       A,#0x2
   \   000027   78..         MOV       R0,#?V4
   \   000029   12....       LCALL     ?S_SHL
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000035   12....       LCALL     ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000038   05..         INC       ?V0
   \   00003A   E5..         MOV       A,?V0
   \   00003C   C3           CLR       C
   \   00003D   9404         SUBB      A,#0x4
   \   00003F   40D7         JC        ??AT_Cmd_SIMPLEDESC_0
   2551            AT_PARSE_CMD_PATTERN_ERROR(":,,\r",cmdUnitArr);
   \   000041                ; Setup parameters for call to function AT_Pattern_Check
   \   000041   AC..         MOV       R4,?XSP + 0
   \   000043   AD..         MOV       R5,?XSP + 1
   \   000045   7A..         MOV       R2,#`?<Constant ":,,\\r">` & 0xff
   \   000047   7B..         MOV       R3,#(`?<Constant ":,,\\r">` >> 8) & 0xff
   \   000049   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   00004C   6004         JZ        ??AT_Cmd_SIMPLEDESC_1
   \   00004E                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00004E   7A01         MOV       R2,#0x1
   \   000050   806C         SJMP      ??AT_Cmd_SIMPLEDESC_2
   2552          
   2553            AddrMgrEntry_t entry;
   2554            zAddrType_t *dstAddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   \                     ??AT_Cmd_SIMPLEDESC_1:
   \   000052                ; Setup parameters for call to function osal_mem_alloc
   \   000052   12....       LCALL     ?Subroutine139 & 0xFFFF
   2555            uint8 XX = AT_ChartoInt8(&cmdUnitArr[2]);
   \                     ??CrossCallReturnLabel_248:
   \   000055                ; Setup parameters for call to function AT_ChartoInt8
   \   000055   7408         MOV       A,#0x8
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   00005D   F5..         MOV       ?V3,A
   2556            if (cmdUnitArr[0].unitLen > 10) { // <Address> is EUI64
   \   00005F   7401         MOV       A,#0x1
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   EE           MOV       A,R6
   \   000067   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00006A   400A         JC        ??AT_Cmd_SIMPLEDESC_3
   2557              AT_ChartoIntx(&cmdUnitArr[0], dstAddr->addr.extAddr, 64);
   \   00006C                ; Setup parameters for call to function AT_ChartoIntx
   \   00006C   7940         MOV       R1,#0x40
   \   00006E   EE           MOV       A,R6
   \   00006F   FC           MOV       R4,A
   \   000070   EF           MOV       A,R7
   \   000071   12....       LCALL     ??Subroutine167_0 & 0xFFFF
   2558              dstAddr->addrMode = (afAddrMode_t)Addr64Bit;
   2559            } else if (cmdUnitArr[0].unitLen > 2) { // <Address> is NodeID
   \                     ??CrossCallReturnLabel_327:
   \   000074   8026         SJMP      ??CrossCallReturnLabel_6
   \                     ??AT_Cmd_SIMPLEDESC_3:
   \   000076   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000079   4005         JC        ??AT_Cmd_SIMPLEDESC_4
   2560              dstAddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \   00007B                ; Setup parameters for call to function AT_ChartoInt16
   \   00007B   12....       LCALL     ?Subroutine92 & 0xFFFF
   2561              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2562            } else { // <Address> is address table entry
   \                     ??CrossCallReturnLabel_180:
   \   00007E   8019         SJMP      ??CrossCallReturnLabel_65
   2563              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_SIMPLEDESC_4:
   \   000080                ; Setup parameters for call to function AT_ChartoInt8
   \   000080   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000083   741B         MOV       A,#0x1b
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   12....       LCALL     ?Subroutine22 & 0xFFFF
   2564              // entry.user = ADDRMGR_USER_DEFAULT;
   2565              AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_32:
   \   00008B   12....       LCALL     ?XSTACK_DISP101_8
   \   00008E   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   2566              dstAddr->addr.shortAddr = entry.nwkAddr;
   \   000091   7411         MOV       A,#0x11
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ?Subroutine33 & 0xFFFF
   2567              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2568            }
   \                     ??CrossCallReturnLabel_65:
   \   000099   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00009C   F0           MOVX      @DPTR,A
   2569          
   2570            status = ZDP_SimpleDescReq( dstAddr, AT_ChartoInt16(&cmdUnitArr[1]), XX, TRUE );
   \   00009D                ; Setup parameters for call to function AT_ChartoInt16
   \   00009D   7404         MOV       A,#0x4
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   A9..         MOV       R1,?V3
   \   0000AA   EE           MOV       A,R6
   \   0000AB   FA           MOV       R2,A
   \   0000AC   EF           MOV       A,R7
   \   0000AD   FB           MOV       R3,A
   \   0000AE   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   0000B1   7401         MOV       A,#0x1
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   12....       LCALL     ?Subroutine110 & 0xFFFF
   2571            osal_mem_free(dstAddr);
   2572            if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   \                     ??CrossCallReturnLabel_353:
   \   0000B9   6008         JZ        ??AT_Cmd_SIMPLEDESC_5
   \   0000BB                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000BB   7A02         MOV       R2,#0x2
   \   0000BD   F9           MOV       R1,A
   \                     ??AT_Cmd_SIMPLEDESC_2:
   \   0000BE   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   0000C1   800F         SJMP      ??CrossCallReturnLabel_51
   2573            else {
   2574              AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_SIMPLEDESC_5:
   \   0000C3                ; Setup parameters for call to function printf
   \   0000C3   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C9   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
   2575              AT_SEQ_STROE(ZDP_TransID);
   \   0000CF                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   0000CF   12....       LCALL     ?Subroutine31 & 0xFFFF
   2576              AT_OK();
   2577            }
   2578          }
   \                     ??CrossCallReturnLabel_51:
   \   0000D2                REQUIRE ?Subroutine11
   \   0000D2                ; // Fall through to label ?Subroutine11

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   741D         MOV       A,#0x1d
   \   000002   02....       LJMP      ??Subroutine176_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000003   22           RET
   2579          
   2580          /*******************************************************************************
   2581           * @fn      AT_Cmd_MATCHREQ
   2582           *
   2583           * @brief   +MATCHREQ - Find Nodes which Match a Specific Descriptor (ZDO)
   2584           *          Format: AT+MATCHREQ:<ProfileID>,<NumInClusters>[,<InClusterList>],
   2585           *                              <NumOutClusters>[,<OutClusterList>]
   2586           *                  Where <ProfileID> Required profile ID of the device being
   2587           *                  searched for followed by a specification of required input
   2588           *                  and output clusters. If a remote node has a matching
   2589           *                  ProfileID and matches at least one of the specified clusters
   2590           *                  it will respond to this broadcast listing the matching endpoint(s).
   2591           *          Use on: All Devices
   2592           *          Note: <NumInClusters> and <NumOutClusters> must be 2 hexadecimal digits
   2593           *
   2594           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2595           * @param   uint8* msg_ptr - the message pointer
   2596           *
   2597           * @return  None
   2598           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2599          void AT_Cmd_MATCHREQ( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_MATCHREQ:
   2600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine69 & 0xFFFF
   2601            AT_CmdUnit cmdUnitArr[1];
   2602            uint8 i;
   2603            uint8 status;
   2604            uint16 ProfileID;
   2605            uint8 NumInClusters;
   2606            uint8 NumOutClusters;
   2607            uint16 *InClusterList;
   2608            uint16 *OutClusterList;
   2609          
   2610            // ProfileID
   2611            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   2612            AT_PARSE_SINGLE_CMD_PATTERN_ERROR(":", cmdUnitArr);
   \                     ??CrossCallReturnLabel_284:
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   E0           MOVX      A,@DPTR
   \   000014   643A         XRL       A,#0x3a
   \   000016   6003         JZ        $+5
   \   000018   02....       LJMP      ??AT_Cmd_MATCHREQ_0 & 0xFFFF
   2613            ProfileID= AT_ChartoInt16(&cmdUnitArr[0]);
   \   00001B                ; Setup parameters for call to function AT_ChartoInt16
   \   00001B   AA..         MOV       R2,?XSP + 0
   \   00001D   AB..         MOV       R3,?XSP + 1
   \   00001F   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   2614          
   2615            // NumInClusters
   2616            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \                     ??CrossCallReturnLabel_294:
   \   000022                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000022   EE           MOV       A,R6
   \   000023   FC           MOV       R4,A
   \   000024   EF           MOV       A,R7
   \   000025   FD           MOV       R5,A
   \   000026   A9..         MOV       R1,?V0
   \   000028   AA..         MOV       R2,?XSP + 0
   \   00002A   AB..         MOV       R3,?XSP + 1
   \   00002C   12....       LCALL     ?Subroutine62 & 0xFFFF
   2617            AT_PARSE_SINGLE_CMD_PATTERN_ERROR(",", cmdUnitArr);
   \                     ??CrossCallReturnLabel_132:
   \   00002F   6003         JZ        $+5
   \   000031   02....       LJMP      ??AT_Cmd_MATCHREQ_0 & 0xFFFF
   2618            NumInClusters = AT_ChartoInt8(&cmdUnitArr[0]);
   \   000034                ; Setup parameters for call to function AT_ChartoInt8
   \   000034   AA..         MOV       R2,?XSP + 0
   \   000036   AB..         MOV       R3,?XSP + 1
   \   000038   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   2619          
   2620            // InClusterList
   2621            InClusterList = (uint16*)osal_mem_alloc(NumInClusters*2);
   \                     ??CrossCallReturnLabel_322:
   \   00003B                ; Setup parameters for call to function osal_mem_alloc
   \   00003B   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00003E   8A..         MOV       ?V6,R2
   \   000040   8B..         MOV       ?V7,R3
   2622            if(InClusterList == NULL) {
   \   000042   EA           MOV       A,R2
   \   000043   4B           ORL       A,R3
   \   000044   6048         JZ        ??AT_Cmd_MATCHREQ_1
   2623              AT_ZDO_ERROR(ZMemError);
   \   000046                ; Setup parameters for call to function AT_UARTWriteErrMsg
   2624              return;
   2625            }
   2626            for (i = 0; i < NumInClusters; i++) {
   \   000046   75..00       MOV       ?V2,#0x0
   \   000049   8012         SJMP      ??CrossCallReturnLabel_372
   2627              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_MATCHREQ_2:
   \   00004B                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00004B   12....       LCALL     ?Subroutine62 & 0xFFFF
   2628              AT_PARSE_SINGLE_CMD_PATTERN_ERROR(",", cmdUnitArr);
   \                     ??CrossCallReturnLabel_133:
   \   00004E   707B         JNZ       ??AT_Cmd_MATCHREQ_0
   2629              InClusterList[i] = AT_ChartoInt16(&cmdUnitArr[0]);
   \   000050                ; Setup parameters for call to function AT_ChartoInt16
   \   000050   12....       LCALL     ?Subroutine99 & 0xFFFF
   2630            }
   \                     ??CrossCallReturnLabel_187:
   \   000053   E5..         MOV       A,?V6
   \   000055   28           ADD       A,R0
   \   000056   F582         MOV       DPL,A
   \   000058   E5..         MOV       A,?V7
   \   00005A   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   00005D   E5..         MOV       A,?V2
   \   00005F   C3           CLR       C
   \   000060   95..         SUBB      A,?V1
   \   000062   EE           MOV       A,R6
   \   000063   FC           MOV       R4,A
   \   000064   EF           MOV       A,R7
   \   000065   FD           MOV       R5,A
   \   000066   A9..         MOV       R1,?V0
   \   000068   AA..         MOV       R2,?XSP + 0
   \   00006A   AB..         MOV       R3,?XSP + 1
   \   00006C   40DD         JC        ??AT_Cmd_MATCHREQ_2
   2631          
   2632            // NumOutClusters
   2633            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00006E                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00006E   12....       LCALL     ?Subroutine62 & 0xFFFF
   2634            AT_PARSE_SINGLE_CMD_PATTERN_ERROR(",", cmdUnitArr);
   \                     ??CrossCallReturnLabel_134:
   \   000071   7058         JNZ       ??AT_Cmd_MATCHREQ_0
   2635            NumOutClusters = AT_ChartoInt8(&cmdUnitArr[0]);
   \   000073                ; Setup parameters for call to function AT_ChartoInt8
   \   000073   AA..         MOV       R2,?XSP + 0
   \   000075   AB..         MOV       R3,?XSP + 1
   \   000077   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   00007A   F5..         MOV       ?V3,A
   2636          
   2637            //OutClusterList
   2638            OutClusterList = (uint16*)osal_mem_alloc(NumOutClusters*2);
   \   00007C                ; Setup parameters for call to function osal_mem_alloc
   \   00007C   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   00007F   8A..         MOV       ?V4,R2
   \   000081   8B..         MOV       ?V5,R3
   2639            if (OutClusterList == NULL) {
   \   000083   EA           MOV       A,R2
   \   000084   4B           ORL       A,R3
   \   000085   700E         JNZ       ??AT_Cmd_MATCHREQ_3
   2640              osal_mem_free(InClusterList);
   \   000087                ; Setup parameters for call to function osal_mem_free
   \   000087   AA..         MOV       R2,?V6
   \   000089   AB..         MOV       R3,?V7
   \   00008B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2641              AT_ZDO_ERROR(ZMemError);
   \   00008E                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_MATCHREQ_1:
   \   00008E   7A03         MOV       R2,#0x3
   \   000090   7910         MOV       R1,#0x10
   \   000092   02....       LJMP      ??AT_Cmd_MATCHREQ_4 & 0xFFFF
   2642              return;
   2643            }
   2644            for (i = 0; i < NumOutClusters; i++) {
   \                     ??AT_Cmd_MATCHREQ_3:
   \   000095   75..00       MOV       ?V2,#0x0
   \   000098   8012         SJMP      ??CrossCallReturnLabel_373
   2645              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_MATCHREQ_5:
   \   00009A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00009A   12....       LCALL     ?Subroutine62 & 0xFFFF
   2646              AT_PARSE_SINGLE_CMD_PATTERN_ERROR(",", cmdUnitArr);
   \                     ??CrossCallReturnLabel_135:
   \   00009D   702C         JNZ       ??AT_Cmd_MATCHREQ_0
   2647              OutClusterList[i] = AT_ChartoInt16(&cmdUnitArr[0]);
   \   00009F                ; Setup parameters for call to function AT_ChartoInt16
   \   00009F   12....       LCALL     ?Subroutine99 & 0xFFFF
   2648            }
   \                     ??CrossCallReturnLabel_188:
   \   0000A2   E5..         MOV       A,?V4
   \   0000A4   28           ADD       A,R0
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   E5..         MOV       A,?V5
   \   0000A9   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   0000AC   E5..         MOV       A,?V2
   \   0000AE   C3           CLR       C
   \   0000AF   95..         SUBB      A,?V3
   \   0000B1   EE           MOV       A,R6
   \   0000B2   FC           MOV       R4,A
   \   0000B3   EF           MOV       A,R7
   \   0000B4   FD           MOV       R5,A
   \   0000B5   A9..         MOV       R1,?V0
   \   0000B7   AA..         MOV       R2,?XSP + 0
   \   0000B9   AB..         MOV       R3,?XSP + 1
   \   0000BB   40DD         JC        ??AT_Cmd_MATCHREQ_5
   2649          
   2650            //check the end of the command
   2651            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   0000BD                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   0000BD   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   2652            AT_PARSE_SINGLE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   \   0000C0   85..82       MOV       DPL,?XSP + 0
   \   0000C3   85..83       MOV       DPH,?XSP + 1
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   640D         XRL       A,#0xd
   \   0000C9   6006         JZ        ??AT_Cmd_MATCHREQ_6
   \                     ??AT_Cmd_MATCHREQ_0:
   \   0000CB                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000CB   7A01         MOV       R2,#0x1
   \   0000CD   7905         MOV       R1,#0x5
   \   0000CF   8051         SJMP      ??AT_Cmd_MATCHREQ_4
   2653          
   2654            //build broadcast address
   2655            zAddrType_t broad_addr={
   2656              {NWK_BROADCAST_SHORTADDR_DEVZCZR},   //addr
   2657              (afAddrMode_t)AddrBroadcast,         //addr mode
   2658            };
   \                     ??AT_Cmd_MATCHREQ_6:
   \   0000D1   90....       MOV       DPTR,#`?<Constant {{65532}, 15}>`
   \   0000D4   7404         MOV       A,#0x4
   \   0000D6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D9   7409         MOV       A,#0x9
   \   0000DB   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2659          
   2660            status = ZDP_MatchDescReq( &broad_addr, 0xFFFF, ProfileID,
   2661                                     NumInClusters, InClusterList,
   2662                                     NumOutClusters, OutClusterList, TRUE);
   \   0000DE                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000DE   75..01       MOV       ?V2,#0x1
   \   0000E1   78..         MOV       R0,#?V2
   \   0000E3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E6   78..         MOV       R0,#?V4
   \   0000E8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EB   E5..         MOV       A,?V3
   \   0000ED   F5..         MOV       ?V2,A
   \   0000EF   78..         MOV       R0,#?V2
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F4   78..         MOV       R0,#?V6
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F9   78..         MOV       R0,#?V8
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FE   A9..         MOV       R1,?V1
   \   000100   7CFF         MOV       R4,#-0x1
   \   000102   7DFF         MOV       R5,#-0x1
   \   000104   740C         MOV       A,#0xc
   \   000106   12....       LCALL     ?XSTACK_DISP101_8
   \   000109   12....       LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   00010C   7408         MOV       A,#0x8
   \   00010E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000111   E9           MOV       A,R1
   \   000112   FE           MOV       R6,A
   2663            osal_mem_free(OutClusterList);
   \   000113                ; Setup parameters for call to function osal_mem_free
   \   000113   AA..         MOV       R2,?V4
   \   000115   AB..         MOV       R3,?V5
   \   000117   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2664            osal_mem_free(InClusterList);
   \   00011A                ; Setup parameters for call to function osal_mem_free
   \   00011A   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   2665          
   2666            if(status != afStatus_SUCCESS)  AT_SEND_ERROR(status);
   \                     ??CrossCallReturnLabel_368:
   \   00011D   6008         JZ        ??AT_Cmd_MATCHREQ_7
   \   00011F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00011F   7A02         MOV       R2,#0x2
   \   000121   F9           MOV       R1,A
   \                     ??AT_Cmd_MATCHREQ_4:
   \   000122   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000125   800B         SJMP      ??AT_Cmd_MATCHREQ_8
   2667            else AT_OK();
   \                     ??AT_Cmd_MATCHREQ_7:
   \   000127                ; Setup parameters for call to function AT_Uart0_Send
   \   000127   7C06         MOV       R4,#0x6
   \   000129   7D00         MOV       R5,#0x0
   \   00012B   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   00012D   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   00012F   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2668          }
   \                     ??AT_Cmd_MATCHREQ_8:
   \   000132   740D         MOV       A,#0xd
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
   \   000137   02....       LJMP      ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   AA..         MOV       R2,?XSP + 0
   \   000002   AB..         MOV       R3,?XSP + 1
   \   000004   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000007   A8..         MOV       R0,?V2
   \   000009   E8           MOV       A,R0
   \   00000A   28           ADD       A,R0
   \   00000B   F8           MOV       R0,A
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   29           ADD       A,R1
   \   000001   FA           MOV       R2,A
   \   000002   E4           CLR       A
   \   000003   33           RLC       A
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000003   F5..         MOV       ?V0,A
   \   000005   85..82       MOV       DPL,?XSP + 0
   \   000008   85..83       MOV       DPH,?XSP + 1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   642C         XRL       A,#0x2c
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003                REQUIRE ??Subroutine175_0
   \   000003                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   05..         INC       ?V2
   \   000007   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{65532}, 15}>`:
   \   000000   FCFF         DW 65532
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   0F           DB 15
   2669          
   2670          /*******************************************************************************
   2671           * @fn      AT_Cmd_ANNCE
   2672           *
   2673           * @brief   +ANNCE - Announce Local Device In The Network (ZDO)
   2674           *          Format: AT+ANNCE
   2675           *          Use on: All Devices
   2676           *          Note: Send a ZigBee device announcement.
   2677           *                Broadcast announcing the local node on the network.
   2678           *          CapabilityFlags Bitmap values:
   2679           *                CAPINFO_ALTPANCOORD           0x01
   2680           *                CAPINFO_DEVICETYPE_FFD        0x02
   2681           *                CAPINFO_DEVICETYPE_RFD        0x00
   2682           *                CAPINFO_POWER_AC              0x04
   2683           *                CAPINFO_RCVR_ON_IDLE          0x08
   2684           *                CAPINFO_SECURITY_CAPABLE      0x40
   2685           *                CAPINFO_ALLOC_ADDR            0x80
   2686           *
   2687           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2688           * @param   uint8* msg_ptr - the message pointer
   2689           *
   2690           * @return  None
   2691           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2692          void AT_Cmd_ANNCE( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_ANNCE:
   2693          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2694            uint8 status;
   2695            AT_CmdUnit cmdUnitArr[1];
   2696            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
   2697            AT_PARSE_CMD_PATTERN_ERROR("\r",cmdUnitArr);
   \                     ??CrossCallReturnLabel_125:
   \   00000D   6004         JZ        ??AT_Cmd_ANNCE_0
   \   00000F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   8029         SJMP      ??AT_Cmd_ANNCE_1
   2698          
   2699            status = ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(), _NIB.CapabilityFlags, 0 );
   \                     ??AT_Cmd_ANNCE_0:
   \   000013                ; Setup parameters for call to function NLME_GetExtAddr
   \   000013   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000016   8A..         MOV       ?V2,R2
   \   000018   8B..         MOV       ?V3,R3
   \   00001A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001A   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001D                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   78..         MOV       R0,#?V1
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000025   90....       MOV       DPTR,#_NIB + 14
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   AC..         MOV       R4,?V2
   \   00002C   AD..         MOV       R5,?V3
   \   00002E   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   \   000036   E9           MOV       A,R1
   \   000037   F9           MOV       R1,A
   2700            if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   \   000038   6007         JZ        ??AT_Cmd_ANNCE_2
   \   00003A                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00003A   7A02         MOV       R2,#0x2
   \                     ??AT_Cmd_ANNCE_1:
   \   00003C   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   00003F   800B         SJMP      ??AT_Cmd_ANNCE_3
   2701            else AT_OK();
   \                     ??AT_Cmd_ANNCE_2:
   \   000041                ; Setup parameters for call to function AT_Uart0_Send
   \   000041   7C06         MOV       R4,#0x6
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000047   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000049   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   2702          }
   \                     ??AT_Cmd_ANNCE_3:
   \   00004C   7404         MOV       A,#0x4
   \   00004E   02....       LJMP      ??Subroutine165_0 & 0xFFFF
   2703          
   2704          #if ( ZG_BUILD_RTR_TYPE )
   2705          /*******************************************************************************
   2706           * @fn      AT_Cmd_PANNCE
   2707           *
   2708           * @brief   +PANNCE - Send A Parent Announce In The Network (ZDO)
   2709           *          Format: AT+PANNCE
   2710           *          Use on: FFD Devices
   2711           *          Note: Send a ZigBee parent device announce command.
   2712           *                The user can use Unicast and Broadcast announcing on the network.
   2713           *
   2714           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2715           * @param   uint8* msg_ptr - the message pointer
   2716           *
   2717           * @return  None
   2718           ******************************************************************************/
   2719          void AT_Cmd_PANNCE( uint8 cmd_ptr, uint8* msg_ptr )
   2720          {
   2721            // Make sure used by FFD devices
   2722            if (!ZG_BUILD_RTR_TYPE) {
   2723              AT_ERROR(AT_OPERATION_INVALID);
   2724            }
   2725            uint8 i;
   2726            uint8 status;
   2727            uint16 address;
   2728            uint8 NumOfChildren;
   2729            ZDO_ChildInfo_t* ChildList;
   2730            AT_CmdUnit cmdUnitArr[1];
   2731          
   2732            // Address
   2733            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   2734            AT_PARSE_SINGLE_CMD_PATTERN_ERROR(":", cmdUnitArr);
   2735            address = AT_ChartoInt16(&cmdUnitArr[0]);
   2736            //build broadcast address
   2737            zAddrType_t dstAddr;
   2738            if (address == NWK_BROADCAST_SHORTADDR_DEVZCZR) {
   2739              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   2740              dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   2741            } else {
   2742              dstAddr.addr.shortAddr = address;
   2743              dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   2744            }
   2745          
   2746            // NumOfChildren
   2747            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   2748            AT_PARSE_SINGLE_CMD_PATTERN_ERROR(",", cmdUnitArr);
   2749            NumOfChildren = AT_ChartoInt8(&cmdUnitArr[0]);
   2750          
   2751            // EUIOfChild
   2752            ChildList = (ZDO_ChildInfo_t*)osal_mem_alloc(NumOfChildren*sizeof(ZDO_ChildInfo_t));
   2753            if(ChildList == NULL) {
   2754              AT_ZDO_ERROR(ZMemError);
   2755              return;
   2756            }
   2757            for (i = 0; i < NumOfChildren; i++) {
   2758              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   2759              AT_PARSE_SINGLE_CMD_PATTERN_ERROR(",", cmdUnitArr);
   2760              AT_ChartoIntx(&cmdUnitArr[0], (uint8*)(&(ChildList[i].extAddr)), 64);
   2761            }
   2762          
   2763            status = ZDP_ParentAnnceReq( dstAddr, NumOfChildren, (uint8*)ChildList, TRUE );
   2764            osal_mem_free(ChildList);
   2765          
   2766            if(status != afStatus_SUCCESS)
   2767              AT_SEND_ERROR(status);
   2768            else
   2769              AT_OK();
   2770          }
   2771          
   2772          /*******************************************************************************
   2773           * @fn      AT_Cmd_NTABLE
   2774           *
   2775           * @brief   +NTABLE - Display Neighbour Table
   2776           *          Format: AT+NTABLE:XX,<address>
   2777           *                  XX - The start index of the remote LQI table
   2778           *                  <address> - the remote node's EUI64 or NodeID or address
   2779           *                              table entry
   2780           *          Use on: FFD,COO Devices
   2781           *          Note: This command requests the target node to respond by
   2782           *                listing its neighbour table starting from the requested
   2783           *                index. Can be used to find the identity of all ZigBee
   2784           *                devices in the network.
   2785           *
   2786           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2787           * @param   uint8* msg_ptr - the message pointer
   2788           *
   2789           * @return  None
   2790           ******************************************************************************/
   2791          void AT_Cmd_NTABLE( uint8 cmd_ptr, uint8* msg_ptr )
   2792          {
   2793            // Make sure used by FFD devices
   2794            if (!ZG_DEVICE_RTR_TYPE) {
   2795              AT_ERROR(AT_OPERATION_INVALID);
   2796              return;
   2797            }
   2798            uint8 i;
   2799            uint8 status;
   2800            AT_CmdUnit cmdUnitArr[3];
   2801          
   2802            for ( i = 0; i < 3; i++)
   2803              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   2804            AT_PARSE_CMD_PATTERN_ERROR(":,\r",cmdUnitArr);
   2805          
   2806            AddrMgrEntry_t entry;
   2807            zAddrType_t *dstAddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   2808            uint8 startIndex = AT_ChartoInt8(&cmdUnitArr[0]);
   2809            if (cmdUnitArr[1].unitLen > 10) { // <Address> is EUI64
   2810              AT_ChartoIntx(&cmdUnitArr[1], dstAddr->addr.extAddr, 64);
   2811              dstAddr->addrMode = (afAddrMode_t)Addr64Bit;
   2812            } else if (cmdUnitArr[1].unitLen > 2) { // <Address> is NodeID
   2813              dstAddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[1]);
   2814              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2815            } else if (cmdUnitArr[1].unitLen > 0) { // <Address> is address table entry
   2816              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   2817              // entry.user = ADDRMGR_USER_DEFAULT;
   2818              AddrMgrEntryGet( &entry );
   2819              dstAddr->addr.shortAddr = entry.nwkAddr;
   2820              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2821            } else {
   2822              AT_ERROR(AT_LACK_PARA);
   2823              return;
   2824            }
   2825          
   2826            status = ZDP_MgmtLqiReq( dstAddr, startIndex, 0 );
   2827            osal_mem_free(dstAddr);
   2828            if(status != afStatus_SUCCESS) AT_SEND_ERROR(status);
   2829            else AT_OK();
   2830          }
   2831          
   2832          /*******************************************************************************
   2833           * @fn      AT_Cmd_RTABLE
   2834           *
   2835           * @brief   AT+RTABLE:XX,<address>
   2836           *          Format: AT+RTABLE:XX,<address>
   2837           *                  XX - The start index of the remote LQI table
   2838           *                  <address> - the remote node's EUI64 or NodeID
   2839           *          Use on: FFD,COO Devices
   2840           *          Note: This command requests the target node to respond by
   2841           *                listing its routing table starting from the requested index.
   2842           *
   2843           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2844           * @param   uint8* msg_ptr - the message pointer
   2845           *
   2846           * @return  None
   2847           ******************************************************************************/
   2848          void AT_Cmd_RTABLE( uint8 cmd_ptr, uint8* msg_ptr )
   2849          {
   2850            uint8 i;
   2851            uint8 status;
   2852            AT_CmdUnit cmdUnitArr[3];
   2853          
   2854            for (i = 0; i < 3; i++)
   2855              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   2856            AT_PARSE_CMD_PATTERN_ERROR(":,\r", cmdUnitArr);
   2857          
   2858            AddrMgrEntry_t entry;
   2859            zAddrType_t *dstAddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   2860            uint8 startIndex = AT_ChartoInt8(&cmdUnitArr[0]);
   2861            if (cmdUnitArr[1].unitLen > 10) { // <Address> is EUI64
   2862              AT_ChartoIntx(&cmdUnitArr[1], dstAddr->addr.extAddr, 64);
   2863              dstAddr->addrMode = (afAddrMode_t)Addr64Bit;
   2864            } else if (cmdUnitArr[1].unitLen > 2) { // <Address> is NodeID
   2865              dstAddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[1]);
   2866              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2867            } else if (cmdUnitArr[1].unitLen > 0) { // <Address> is address table entry
   2868              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   2869              // entry.user = ADDRMGR_USER_DEFAULT;
   2870              AddrMgrEntryGet( &entry );
   2871              dstAddr->addr.shortAddr = entry.nwkAddr;
   2872              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2873            } else {
   2874              AT_ERROR(AT_LACK_PARA);
   2875              return;
   2876            }
   2877          
   2878            status = ZDP_MgmtRtgReq( dstAddr, startIndex, 0 );
   2879            osal_mem_free(dstAddr);
   2880            if(status != afStatus_SUCCESS)
   2881              AT_SEND_ERROR(status);
   2882            else {
   2883              AT_SEQ(ZDP_TransID);
   2884              AT_SEQ_STROE(ZDP_TransID);
   2885              AT_OK();
   2886            }
   2887          }
   2888          #endif // ZG_BUILD_RTR_TYPE
   2889          
   2890          #if defined ( REFLECTOR )
   2891          #if defined ( ZDO_MGMT_BIND_RESPONSE )
   2892          /*******************************************************************************
   2893           * @fn      AT_Cmd_BTABLE
   2894           *
   2895           * @brief   AT+BTABLE:XX,<address>
   2896           *          Format: AT+BTABLE:XX,<address>
   2897           *                  XX - The start index of the remote LQI table
   2898           *                  <address> - the remote node's EUI64 or NodeID
   2899           *          Use on: All Devices
   2900           *          Note: This command requests the target node to respond by
   2901           *                listing its binding table starting from the requested index.
   2902           *
   2903           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2904           * @param   uint8* msg_ptr - the message pointer
   2905           *
   2906           * @return  None
   2907           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2908          void AT_Cmd_BTABLE( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_BTABLE:
   2909          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV       A,#-0x1a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2910            uint8 i;
   2911            uint8 status;
   2912            uint8 index;
   2913            AT_CmdUnit cmdUnitArr[3];
   2914          
   2915            for (i = 0; i < 3; i++)
   \   000010   75..00       MOV       ?V0,#0x0
   2916              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_BTABLE_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V2
   \   000019   E5..         MOV       A,?V0
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   75..00       MOV       ?V5,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?S_SHL
   \   000027   04           INC       A
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00002E   40E3         JC        ??AT_Cmd_BTABLE_0
   2917            AT_PARSE_CMD_PATTERN_ERROR(":,\r",cmdUnitArr);
   \   000030                ; Setup parameters for call to function AT_Pattern_Check
   \   000030   7401         MOV       A,#0x1
   \   000032   12....       LCALL     ?XSTACK_DISP102_8
   \   000035   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000038   6005         JZ        ??AT_Cmd_BTABLE_1
   \   00003A                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00003A   7A01         MOV       R2,#0x1
   \   00003C   02....       LJMP      ??AT_Cmd_BTABLE_2 & 0xFFFF
   2918          
   2919            AddrMgrEntry_t entry;
   2920            zAddrType_t *dstAddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   \                     ??AT_Cmd_BTABLE_1:
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   12....       LCALL     ?Subroutine113 & 0xFFFF
   2921            uint8 startIndex = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??CrossCallReturnLabel_212:
   \   000042   12....       LCALL     ?XSTACK_DISP101_8
   \   000045   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   F0           MOVX      @DPTR,A
   2922            if (cmdUnitArr[1].unitLen > 10) { // <Address> is EUI64
   \   00004F   7406         MOV       A,#0x6
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F8           MOV       R0,A
   \   000056   E5..         MOV       A,?V0
   \   000058   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00005B   C3           CLR       C
   \   00005C   940B         SUBB      A,#0xb
   \   00005E   4056         JC        ??AT_Cmd_BTABLE_3
   2923              AT_ChartoIntx(&cmdUnitArr[1], dstAddr->addr.extAddr, 64);
   \   000060                ; Setup parameters for call to function AT_ChartoIntx
   \   000060   7940         MOV       R1,#0x40
   \   000062   AC..         MOV       R4,?V0
   \   000064   AD..         MOV       R5,?V1
   \   000066   7405         MOV       A,#0x5
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   AA82         MOV       R2,DPL
   \   00006D   AB83         MOV       R3,DPH
   \   00006F   12....       LCALL     ?Subroutine118 & 0xFFFF
   2924              dstAddr->addrMode = (afAddrMode_t)Addr64Bit;
   2925            } else if (cmdUnitArr[1].unitLen > 2) { // <Address> is NodeID
   \                     ??CrossCallReturnLabel_220:
   \   000072   F0           MOVX      @DPTR,A
   2926              dstAddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[1]);
   2927              dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2928            } else if (cmdUnitArr[1].unitLen > 0) { // <Address> is address table entry
   2929              index = AT_ChartoInt8(&cmdUnitArr[0]);
   2930              if (index != 0xFF) {
   2931                entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   2932                // entry.user = ADDRMGR_USER_DEFAULT;
   2933                AddrMgrEntryGet( &entry );
   2934                dstAddr->addr.shortAddr = entry.nwkAddr;
   2935                dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2936              } else {
   2937                dstAddr->addr.shortAddr = NLME_GetShortAddr();
   2938                dstAddr->addrMode = (afAddrMode_t)Addr16Bit;
   2939              }
   2940            } else {
   2941              AT_ERROR(AT_LACK_PARA);
   2942              return;
   2943            }
   2944          
   2945            status = ZDP_MgmtBindReq( dstAddr, startIndex, 0 );
   \   000073                ; Setup parameters for call to function ZDP_SendData
   \   000073   75..00       MOV       ?V3,#0x0
   \   000076   78..         MOV       R0,#?V3
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007B   7401         MOV       A,#0x1
   \   00007D   12....       LCALL     ?XSTACK_DISP100_8
   \   000080   88..         MOV       ?V4,R0
   \   000082   89..         MOV       ?V5,R1
   \   000084   78..         MOV       R0,#?V4
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000089   75..33       MOV       ?V4,#0x33
   \   00008C   75..00       MOV       ?V5,#0x0
   \   00008F   78..         MOV       R0,#?V4
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000094   7901         MOV       R1,#0x1
   \   000096   AC..         MOV       R4,?V0
   \   000098   AD..         MOV       R5,?V1
   \   00009A   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00009C   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00009E   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000A1   7405         MOV       A,#0x5
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV       A,R1
   \   0000A7   FE           MOV       R6,A
   2946            osal_mem_free(dstAddr);
   \   0000A8                ; Setup parameters for call to function osal_mem_free
   \   0000A8   AA..         MOV       R2,?V0
   \   0000AA   AB..         MOV       R3,?V1
   \   0000AC   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   2947            if(status != afStatus_SUCCESS)
   \                     ??CrossCallReturnLabel_369:
   \   0000AF   6069         JZ        ??AT_Cmd_BTABLE_4
   2948              AT_SEND_ERROR(status);
   \   0000B1                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000B1   7A02         MOV       R2,#0x2
   \   0000B3   F9           MOV       R1,A
   \   0000B4   805F         SJMP      ??AT_Cmd_BTABLE_2
   \                     ??AT_Cmd_BTABLE_3:
   \   0000B6   E8           MOV       A,R0
   \   0000B7   C3           CLR       C
   \   0000B8   9403         SUBB      A,#0x3
   \   0000BA   401F         JC        ??AT_Cmd_BTABLE_5
   \   0000BC                ; Setup parameters for call to function AT_ChartoInt16
   \   0000BC   7405         MOV       A,#0x5
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   AA82         MOV       R2,DPL
   \   0000C3   AB83         MOV       R3,DPH
   \   0000C5   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \                     ??AT_Cmd_BTABLE_6:
   \   0000C8   85..82       MOV       DPL,?V0
   \   0000CB   85..83       MOV       DPH,?V1
   \   0000CE   EA           MOV       A,R2
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   A3           INC       DPTR
   \   0000D1   EB           MOV       A,R3
   \                     ??AT_Cmd_BTABLE_7:
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   8E82         MOV       DPL,R6
   \   0000D5   8F83         MOV       DPH,R7
   \   0000D7   7402         MOV       A,#0x2
   \   0000D9   8097         SJMP      ??CrossCallReturnLabel_220
   \                     ??AT_Cmd_BTABLE_5:
   \   0000DB   E8           MOV       A,R0
   \   0000DC   6033         JZ        ??AT_Cmd_BTABLE_8
   \   0000DE                ; Setup parameters for call to function AT_ChartoInt8
   \   0000DE   7401         MOV       A,#0x1
   \   0000E0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E3   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   0000E6   F4           CPL       A
   \   0000E7   6023         JZ        ??AT_Cmd_BTABLE_9
   \   0000E9                ; Setup parameters for call to function AT_ChartoInt8
   \   0000E9   7401         MOV       A,#0x1
   \   0000EB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EE   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   0000F1   7418         MOV       A,#0x18
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   E9           MOV       A,R1
   \   0000F7   12....       LCALL     ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   0000FA                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000FA   740D         MOV       A,#0xd
   \   0000FC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FF   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000102   740E         MOV       A,#0xe
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00010A   80C6         SJMP      ??AT_Cmd_BTABLE_7
   \                     ??AT_Cmd_BTABLE_9:
   \   00010C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00010C   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00010F   80B7         SJMP      ??AT_Cmd_BTABLE_6
   \                     ??AT_Cmd_BTABLE_8:
   \   000111                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000111   7A01         MOV       R2,#0x1
   \   000113   7924         MOV       R1,#0x24
   \                     ??AT_Cmd_BTABLE_2:
   \   000115   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000118   800F         SJMP      ??CrossCallReturnLabel_52
   2949            else {
   2950              AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_BTABLE_4:
   \   00011A                ; Setup parameters for call to function printf
   \   00011A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000123   12....       LCALL     ?DEALLOC_XSTACK8
   2951              AT_SEQ_STROE(ZDP_TransID);
   \   000126                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   000126   12....       LCALL     ?Subroutine31 & 0xFFFF
   2952              AT_OK();
   2953            }
   2954          }
   \                     ??CrossCallReturnLabel_52:
   \   000129   741A         MOV       A,#0x1a
   \   00012B   80..         SJMP      ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   2408         ADD       A,#0x8
   \   000002   FE           MOV       R6,A
   \   000003   E4           CLR       A
   \   000004   35..         ADDC      A,?V1
   \   000006   FF           MOV       R7,A
   \   000007   E8           MOV       A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   7403         MOV       A,#0x3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003                ; Setup parameters for call to function AT_ChartoInt8
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   E8           MOV       A,R0
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   E9           MOV       A,R1
   \   00000D   22           RET
   2955          #endif // ZDO_MGMT_BIND_RESPONSE
   2956          
   2957          /*******************************************************************************
   2958           * @fn      AT_Cmd_BSET
   2959           *
   2960           * @brief   +BSET - Set Local Binding Table Entry
   2961           *          Format: AT+BSET:<type>,<LocalEP>,<ClusterID>,<DstAddress>[,<DstEP>]
   2962           *                  <Type> - the type of binding:
   2963           *                    1 = Unicast Binding with EUI64 and remote EP specified
   2964           *                    2 = Many to one Binding with EUI64 and remote EP Specified
   2965           *                    3 = Multicast Binding with Multicast ID Specified
   2966           *                  <LocalEP> - the local endpoint
   2967           *                  <ClusterID> - the t cluster ID, Address is either the EUI64
   2968           *                                of the target device, or a multicast ID
   2969           *                  <DstEP> - the remote endpoint which is not specified in case
   2970           *                            of a multicast binding.
   2971           *          Use on: All Devices
   2972           *          Note: The new binding is created in the next available free binding
   2973           *                table entry.
   2974           *
   2975           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   2976           * @param   uint8* msg_ptr - the message pointer
   2977           *
   2978           * @return  None
   2979           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2980          void AT_Cmd_BSET( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_BSET:
   2981          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 35
   \   000005   74DD         MOV       A,#-0x23
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2982            uint8 i;
   2983            uint8 dstEP = 0;
   \   000010   75..00       MOV       ?V0,#0x0
   2984            AT_CmdUnit cmdUnitArr[6];
   2985          
   2986            for ( i = 0; i < 6; i++) {
   \   000013   75..00       MOV       ?V2,#0x0
   2987              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_BSET_0:
   \   000016                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000016   EE           MOV       A,R6
   \   000017   FC           MOV       R4,A
   \   000018   EF           MOV       A,R7
   \   000019   FD           MOV       R5,A
   \   00001A   A9..         MOV       R1,?V1
   \   00001C   E5..         MOV       A,?V2
   \   00001E   F5..         MOV       ?V4,A
   \   000020   75..00       MOV       ?V5,#0x0
   \   000023   7402         MOV       A,#0x2
   \   000025   78..         MOV       R0,#?V4
   \   000027   12....       LCALL     ?S_SHL
   \   00002A   740B         MOV       A,#0xb
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine120 & 0xFFFF
   2988            }
   \                     ??CrossCallReturnLabel_225:
   \   000032   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000035   F5..         MOV       ?V1,A
   \   000037   05..         INC       ?V2
   \   000039   E5..         MOV       A,?V2
   \   00003B   C3           CLR       C
   \   00003C   9406         SUBB      A,#0x6
   \   00003E   40D6         JC        ??AT_Cmd_BSET_0
   2989          
   2990            uint8  type    = AT_ChartoInt8(&cmdUnitArr[0]);
   \   000040                ; Setup parameters for call to function AT_ChartoInt8
   \   000040   740B         MOV       A,#0xb
   \   000042   12....       LCALL     ?XSTACK_DISP101_8
   \   000045   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000048   FF           MOV       R7,A
   2991            uint8  localEP = AT_ChartoInt8(&cmdUnitArr[1]);
   \   000049                ; Setup parameters for call to function AT_ChartoInt8
   \   000049   740F         MOV       A,#0xf
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   12....       LCALL     ?Subroutine102 & 0xFFFF
   2992            uint16 cID     = AT_ChartoInt16(&cmdUnitArr[2]);
   \                     ??CrossCallReturnLabel_376:
   \   000051                ; Setup parameters for call to function AT_ChartoInt16
   \   000051   7413         MOV       A,#0x13
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine27 & 0xFFFF
   2993          
   2994            zAddrType_t dstAddr;
   2995            if (type == 1 || type == 2) {
   \                     ??CrossCallReturnLabel_493:
   \   000059   7401         MOV       A,#0x1
   \   00005B   6F           XRL       A,R7
   \   00005C   6005         JZ        ??AT_Cmd_BSET_1
   \   00005E   7402         MOV       A,#0x2
   \   000060   6F           XRL       A,R7
   \   000061   7071         JNZ       ??AT_Cmd_BSET_2
   2996              AT_PARSE_CMD_PATTERN_ERROR(":,,,,\r", cmdUnitArr);
   \                     ??AT_Cmd_BSET_1:
   \   000063                ; Setup parameters for call to function AT_Pattern_Check
   \   000063   740B         MOV       A,#0xb
   \   000065   12....       LCALL     ?XSTACK_DISP102_8
   \   000068   7A..         MOV       R2,#`?<Constant ":,,,,\\r">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant ":,,,,\\r">` >> 8) & 0xff
   \   00006C   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   00006F   7076         JNZ       ??AT_Cmd_BSET_3
   \   000071                ; Setup parameters for call to function AT_UARTWriteErrMsg
   2997              dstEP = AT_ChartoInt8(&cmdUnitArr[4]);
   \   000071                ; Setup parameters for call to function AT_ChartoInt8
   \   000071   741B         MOV       A,#0x1b
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ?Subroutine106 & 0xFFFF
   2998              dstAddr.addrMode = Addr64Bit;
   \                     ??CrossCallReturnLabel_198:
   \   000079   740A         MOV       A,#0xa
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   7403         MOV       A,#0x3
   \   000080   F0           MOVX      @DPTR,A
   2999              AT_ChartoIntx(&cmdUnitArr[3], dstAddr.addr.extAddr, 64);
   \   000081                ; Setup parameters for call to function AT_ChartoIntx
   \   000081   7940         MOV       R1,#0x40
   \   000083   14           DEC       A
   \   000084   12....       LCALL     ?XSTACK_DISP102_8
   \   000087   7417         MOV       A,#0x17
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   AA82         MOV       R2,DPL
   \   00008E   AB83         MOV       R3,DPH
   \   000090   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   3000            } else if (type == 3) {
   3001              AT_PARSE_CMD_PATTERN_ERROR(":,,,\r", cmdUnitArr);
   3002              dstEP = 0;
   3003              dstAddr.addrMode = AddrGroup;
   3004              dstAddr.addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[3]);
   3005            } else {
   3006              AT_ERROR(AT_INVALID_PARA);
   3007          	  return;
   3008            }
   3009          
   3010            if ( pbindAddEntry ) {
   \                     ??AT_Cmd_BSET_4:
   \   000093   90....       MOV       DPTR,#pbindAddEntry
   \   000096   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000099   6074         JZ        ??AT_Cmd_BSET_5
   3011              // Add the entry into the binding table
   3012              if (!pbindAddEntry( localEP, &dstAddr, dstEP, 1, &cID )) {
   \   00009B                ; Setup parameters for indirect call
   \   00009B   A8..         MOV       R0,?XSP + 0
   \   00009D   A9..         MOV       R1,?XSP + 1
   \   00009F   88..         MOV       ?V2,R0
   \   0000A1   89..         MOV       ?V3,R1
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   7D01         MOV       R5,#0x1
   \   0000AA   AC..         MOV       R4,?V0
   \   0000AC   7404         MOV       A,#0x4
   \   0000AE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B1   EE           MOV       A,R6
   \   0000B2   F9           MOV       R1,A
   \   0000B3   90....       MOV       DPTR,#pbindAddEntry
   \   0000B6   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   0000B9   12....       LCALL     ?CALL_IND
   \   0000BC   7402         MOV       A,#0x2
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C1   EA           MOV       A,R2
   \   0000C2   4B           ORL       A,R3
   \   0000C3   604A         JZ        ??AT_Cmd_BSET_5
   3013                AT_ERROR(AT_FATAL_ERROR);
   3014              } else {
   3015                AT_OK();
   \   0000C5                ; Setup parameters for call to function AT_Uart0_Send
   \   0000C5   12....       LCALL     ?Subroutine44 & 0xFFFF
   3016                if ( pBindWriteNV ) {
   \                     ??CrossCallReturnLabel_419:
   \   0000C8   604C         JZ        ??AT_Cmd_BSET_6
   3017                  pBindWriteNV();
   \   0000CA                ; Setup parameters for indirect call
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F583         MOV       DPH,A
   \   0000CD   8882         MOV       DPL,R0
   \   0000CF   12....       LCALL     ?CALL_IND
   \   0000D2   8042         SJMP      ??AT_Cmd_BSET_6
   3018                }
   3019              }
   3020            } else {
   \                     ??AT_Cmd_BSET_2:
   \   0000D4   7403         MOV       A,#0x3
   \   0000D6   6F           XRL       A,R7
   \   0000D7   7030         JNZ       ??AT_Cmd_BSET_7
   \   0000D9                ; Setup parameters for call to function AT_Pattern_Check
   \   0000D9   740B         MOV       A,#0xb
   \   0000DB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000DE   7A..         MOV       R2,#`?<Constant ":,,,\\r">` & 0xff
   \   0000E0   7B..         MOV       R3,#(`?<Constant ":,,,\\r">` >> 8) & 0xff
   \   0000E2   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   0000E5   6004         JZ        ??AT_Cmd_BSET_8
   \   0000E7                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_BSET_3:
   \   0000E7   7A01         MOV       R2,#0x1
   \   0000E9   8028         SJMP      ??AT_Cmd_BSET_9
   \                     ??AT_Cmd_BSET_8:
   \   0000EB   740A         MOV       A,#0xa
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   7401         MOV       A,#0x1
   \   0000F2   F0           MOVX      @DPTR,A
   \   0000F3                ; Setup parameters for call to function AT_ChartoInt16
   \   0000F3   7417         MOV       A,#0x17
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   AA82         MOV       R2,DPL
   \   0000FA   AB83         MOV       R3,DPH
   \   0000FC   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   0000FF   7402         MOV       A,#0x2
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000107   808A         SJMP      ??AT_Cmd_BSET_4
   \                     ??AT_Cmd_BSET_7:
   \   000109                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000109   7A01         MOV       R2,#0x1
   \   00010B   7905         MOV       R1,#0x5
   \   00010D   8004         SJMP      ??AT_Cmd_BSET_9
   3021              AT_ERROR(AT_FATAL_ERROR);
   \                     ??AT_Cmd_BSET_5:
   \   00010F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00010F   7A01         MOV       R2,#0x1
   \   000111   7901         MOV       R1,#0x1
   \                     ??AT_Cmd_BSET_9:
   \   000113   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   3022            }
   3023          }
   \                     ??AT_Cmd_BSET_6:
   \   000116   7423         MOV       A,#0x23
   \   000118   02....       LJMP      ??Subroutine176_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   7C06         MOV       R4,#0x6
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000008   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000B   90....       MOV       DPTR,#pBindWriteNV
   \   00000E                REQUIRE ??Subroutine181_0
   \   00000E                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   000007                REQUIRE ??Subroutine189_0
   \   000007                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine190_0
   \   000006                ; // Fall through to label ??Subroutine190_0
   3024          
   3025          /*******************************************************************************
   3026           * @fn      AT_Cmd_BCLR
   3027           *
   3028           * @brief   +BCLR - Clear local Binding Table Entry
   3029           *          Format: AT+BCLR:XX
   3030           *                  XX - The entry number of the binding table which is to be
   3031           *                       cleared
   3032           *          Use on: All Devices
   3033           *
   3034           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3035           * @param   uint8* msg_ptr - the message pointer
   3036           *
   3037           * @return  None
   3038           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3039          void AT_Cmd_BCLR( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_BCLR:
   3040          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine67 & 0xFFFF
   3041            uint8 i;
   3042            AT_CmdUnit cmdUnitArr[2];
   3043          
   3044            for ( i = 0; i < 2; i++) {
   3045              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??CrossCallReturnLabel_140:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ?Subroutine61 & 0xFFFF
   3046            }
   3047            AT_PARSE_CMD_PATTERN_ERROR(":\r", cmdUnitArr);
   \                     ??CrossCallReturnLabel_130:
   \   000013   6004         JZ        ??AT_Cmd_BCLR_0
   \   000015                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000015   7A01         MOV       R2,#0x1
   \   000017   802F         SJMP      ??AT_Cmd_BCLR_1
   3048          
   3049            uint8 x = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_BCLR_0:
   \   000019                ; Setup parameters for call to function AT_ChartoInt8
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   3050            if (bindRemoveEntry( &BindingTable[x] )) {
   \                     ??CrossCallReturnLabel_448:
   \   000020                ; Setup parameters for call to function bindRemoveEntry
   \   000020   75F00E       MOV       B,#0xe
   \   000023   A4           MUL       AB
   \   000024   F8           MOV       R0,A
   \   000025   A9F0         MOV       R1,B
   \   000027   74..         MOV       A,#BindingTable & 0xff
   \   000029   28           ADD       A,R0
   \   00002A   FA           MOV       R2,A
   \   00002B   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   000032   E9           MOV       A,R1
   \   000033   600F         JZ        ??AT_Cmd_BCLR_2
   3051              AT_OK();
   \   000035                ; Setup parameters for call to function AT_Uart0_Send
   \   000035   12....       LCALL     ?Subroutine44 & 0xFFFF
   3052              if ( pBindWriteNV ) {
   \                     ??CrossCallReturnLabel_420:
   \   000038   6011         JZ        ??AT_Cmd_BCLR_3
   3053                pBindWriteNV();
   \   00003A                ; Setup parameters for indirect call
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F583         MOV       DPH,A
   \   00003D   8882         MOV       DPL,R0
   \   00003F   12....       LCALL     ?CALL_IND
   \   000042   8007         SJMP      ??AT_Cmd_BCLR_3
   3054              }
   3055            } else {
   3056              AT_ERROR(AT_FATAL_ERROR);
   \                     ??AT_Cmd_BCLR_2:
   \   000044                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000044   7A01         MOV       R2,#0x1
   \   000046   7901         MOV       R1,#0x1
   \                     ??AT_Cmd_BCLR_1:
   \   000048   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   3057            }
   3058          }
   \                     ??AT_Cmd_BCLR_3:
   \   00004B   7408         MOV       A,#0x8
   \   00004D   02....       LJMP      ??Subroutine156_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000004                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000004   EA           MOV       A,R2
   \   000005   FC           MOV       R4,A
   \   000006   EB           MOV       A,R3
   \   000007   FD           MOV       R5,A
   \   000008   AA..         MOV       R2,?XSP + 0
   \   00000A   AB..         MOV       R3,?XSP + 1
   \   00000C   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00000F   7404         MOV       A,#0x4
   \   000011   22           RET
   3059          
   3060          /*******************************************************************************
   3061           * @fn      AT_Cmd_BIND
   3062           *
   3063           * @brief   +BIND - Create Binding on Remote Device (ZDO)
   3064           *          Format: AT+BIND:<address>,<type>,<SrcAddress>,<SrcEP>,<ClusterID>,<DstAddress>[,<DstEP>]
   3065           *
   3066           *                  AT+BIND:<address>,1,<SrcAddress>,<SrcEP>,<ClusterID>,<DstAddress>
   3067           *                  AT+BIND:<address>,2,<SrcAddress>,<SrcEP>,<ClusterID>,<DstAddress>[,<DstEP>]
   3068           *
   3069           *                  <address> - the target Node's EUI64, NodeID or Address Table Entry
   3070           *                  <type> - the Address mode shown as blow
   3071           *                    1 = Multicast Binding with Multicast ID Specified
   3072           *                    2 = Unicast Binding with EUI64 and remote EP specified
   3073           *                  <SrcAddress> - The EUI64 of the source
   3074           *                  <SrcEP> - The source endpoint
   3075           *                  <ClusterID> - The Cluster ID on the source device
   3076           *                  <DstAddress> - The EUI64 or 16-bit multicast ID, depending
   3077           *                                  on <type>
   3078           *                  <DstEP> - Only in Mode 2
   3079           *          Use on: All Devices
   3080           *
   3081           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3082           * @param   uint8* msg_ptr - the message pointer
   3083           *
   3084           * @return  None
   3085           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3086          void AT_Cmd_BIND( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_BIND:
   3087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 62
   \   000005   74C2         MOV       A,#-0x3e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   3088            uint8 i;
   3089            uint8 status;
   3090            AT_CmdUnit cmdUnitArr[8];
   3091            for ( i = 0; i < 8; i++) {
   \   000010   75..00       MOV       ?V0,#0x0
   3092              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_BIND_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V1
   \   000019   E5..         MOV       A,?V0
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   7411         MOV       A,#0x11
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine66 & 0xFFFF
   3093            }
   \                     ??CrossCallReturnLabel_138:
   \   00002F   40E2         JC        ??AT_Cmd_BIND_0
   3094          
   3095            zAddrType_t  *Saddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   12....       LCALL     ?Subroutine111 & 0xFFFF
   3096            uint8  type    = AT_ChartoInt8(&cmdUnitArr[1]);
   \                     ??CrossCallReturnLabel_205:
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ?Subroutine104 & 0xFFFF
   3097            uint8  SourceAddr[Z_EXTADDR_LEN];
   3098            uint8  srcEP   = AT_ChartoInt8(&cmdUnitArr[3]);
   \                     ??CrossCallReturnLabel_193:
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine107 & 0xFFFF
   3099            uint16 cID     = AT_ChartoInt16(&cmdUnitArr[4]);
   \                     ??CrossCallReturnLabel_200:
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine96 & 0xFFFF
   3100            zAddrType_t  dstAddr;
   3101            uint8 dstEP;
   3102          
   3103            if (type == 2) {
   \                     ??CrossCallReturnLabel_183:
   \   000046   7028         JNZ       ??AT_Cmd_BIND_1
   3104              AT_PARSE_CMD_PATTERN_ERROR(":,,,,,,\r", cmdUnitArr);
   \   000048                ; Setup parameters for call to function AT_Pattern_Check
   \   000048   7411         MOV       A,#0x11
   \   00004A   12....       LCALL     ?XSTACK_DISP102_8
   \   00004D   7A..         MOV       R2,#`?<Constant ":,,,,,,\\r">` & 0xff
   \   00004F   7B..         MOV       R3,#(`?<Constant ":,,,,,,\\r">` >> 8) & 0xff
   \   000051   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000054   7028         JNZ       ??AT_Cmd_BIND_2
   \   000056                ; Setup parameters for call to function AT_UARTWriteErrMsg
   3105              dstEP = AT_ChartoInt8(&cmdUnitArr[6]);
   \   000056                ; Setup parameters for call to function AT_ChartoInt8
   \   000056   7429         MOV       A,#0x29
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine105 & 0xFFFF
   3106              dstAddr.addrMode = Addr64Bit;
   3107              AT_ChartoIntx(&cmdUnitArr[5], dstAddr.addr.extAddr, 64);
   3108            } else {
   \                     ??CrossCallReturnLabel_195:
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   AA82         MOV       R2,DPL
   \   000069   AB83         MOV       R3,DPH
   \   00006B   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   \   00006E   8026         SJMP      ??CrossCallReturnLabel_494
   3109              AT_PARSE_CMD_PATTERN_ERROR(":,,,,,\r", cmdUnitArr);
   \                     ??AT_Cmd_BIND_1:
   \   000070                ; Setup parameters for call to function AT_Pattern_Check
   \   000070   7411         MOV       A,#0x11
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7A..         MOV       R2,#`?<Constant ":,,,,,\\r">` & 0xff
   \   000077   7B..         MOV       R3,#(`?<Constant ":,,,,,\\r">` >> 8) & 0xff
   \   000079   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00007C   6005         JZ        ??AT_Cmd_BIND_3
   \   00007E                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_BIND_2:
   \   00007E   7A01         MOV       R2,#0x1
   \   000080   02....       LJMP      ??AT_Cmd_BIND_4 & 0xFFFF
   3110              dstEP = 0;
   \                     ??AT_Cmd_BIND_3:
   \   000083   75..00       MOV       ?V0,#0x0
   3111              dstAddr.addrMode = AddrGroup;
   \   000086   7408         MOV       A,#0x8
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   7401         MOV       A,#0x1
   \   00008D   F0           MOVX      @DPTR,A
   3112              dstAddr.addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[5]);
   \   00008E                ; Setup parameters for call to function AT_ChartoInt16
   \   00008E   7425         MOV       A,#0x25
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   12....       LCALL     ?Subroutine27 & 0xFFFF
   3113            }
   3114          
   3115            AddrMgrEntry_t entry;
   3116            if (cmdUnitArr[0].unitLen == 0) {  // <address>
   \                     ??CrossCallReturnLabel_494:
   \   000096   7412         MOV       A,#0x12
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00009E   7005         JNZ       ??AT_Cmd_BIND_5
   3117              Saddr->addr.shortAddr = NLME_GetShortAddr();
   \   0000A0                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000A0   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000A3   8023         SJMP      ??AT_Cmd_BIND_6
   3118              Saddr->addrMode = Addr16Bit;
   3119            } else if (cmdUnitArr[0].unitLen > 10) { // <Address> is EUI64
   \                     ??AT_Cmd_BIND_5:
   \   0000A5   C3           CLR       C
   \   0000A6   940B         SUBB      A,#0xb
   \   0000A8   4010         JC        ??AT_Cmd_BIND_7
   3120              AT_ChartoIntx(&cmdUnitArr[0], Saddr->addr.extAddr, 64);
   \   0000AA                ; Setup parameters for call to function AT_ChartoIntx
   \   0000AA   7940         MOV       R1,#0x40
   \   0000AC   EE           MOV       A,R6
   \   0000AD   FC           MOV       R4,A
   \   0000AE   EF           MOV       A,R7
   \   0000AF   FD           MOV       R5,A
   \   0000B0   7411         MOV       A,#0x11
   \   0000B2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B5   12....       LCALL     ?Subroutine117 & 0xFFFF
   3121              Saddr->addrMode = Addr64Bit;
   3122            } else if (cmdUnitArr[0].unitLen > 2) { // <Address> is NodeID
   \                     ??CrossCallReturnLabel_218:
   \   0000B8   803A         SJMP      ??CrossCallReturnLabel_45
   \                     ??AT_Cmd_BIND_7:
   \   0000BA   E8           MOV       A,R0
   \   0000BB   C3           CLR       C
   \   0000BC   9403         SUBB      A,#0x3
   \   0000BE   7411         MOV       A,#0x11
   \   0000C0   4010         JC        ??AT_Cmd_BIND_8
   3123              Saddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \   0000C2                ; Setup parameters for call to function AT_ChartoInt16
   \   0000C2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C5   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \                     ??AT_Cmd_BIND_6:
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   EA           MOV       A,R2
   \   0000CD   F0           MOVX      @DPTR,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   EB           MOV       A,R3
   \   0000D0   801F         SJMP      ??CrossCallReturnLabel_66
   3124              Saddr->addrMode = Addr16Bit;
   3125            } else { // <Address> is address table entry
   3126              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_BIND_8:
   \   0000D2                ; Setup parameters for call to function AT_ChartoInt8
   \   0000D2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D5   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   0000D8   743C         MOV       A,#0x3c
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   E9           MOV       A,R1
   \   0000DE   12....       LCALL     ??Subroutine184_0 & 0xFFFF
   3127              // entry.user = ADDRMGR_USER_DEFAULT;
   3128              AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_464:
   \   0000E1                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000E1   7431         MOV       A,#0x31
   \   0000E3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E6   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   3129              Saddr->addr.shortAddr = entry.nwkAddr;
   \   0000E9   7432         MOV       A,#0x32
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL     ?Subroutine33 & 0xFFFF
   3130              Saddr->addrMode = (afAddrMode_t)Addr16Bit;
   3131            }
   \                     ??CrossCallReturnLabel_66:
   \   0000F1   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000F4   F0           MOVX      @DPTR,A
   3132          
   3133            if (cmdUnitArr[2].unitLen == 0) {
   \   0000F5   741A         MOV       A,#0x1a
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   7017         JNZ       ??AT_Cmd_BIND_9
   3134              osal_memcpy(SourceAddr, NLME_GetExtAddr(), 8);
   \   0000FD                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000FD   12....       LCALL     ?Subroutine90 & 0xFFFF
   3135            } else {
   \                     ??CrossCallReturnLabel_171:
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000103   7C08         MOV       R4,#0x8
   \   000105   7D00         MOV       R5,#0x0
   \   000107   740C         MOV       A,#0xc
   \   000109   12....       LCALL     ?XSTACK_DISP101_8
   \   00010C   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   8013         SJMP      ??AT_Cmd_BIND_10
   3136              AT_ChartoIntx(&cmdUnitArr[2], SourceAddr, 64);
   \                     ??AT_Cmd_BIND_9:
   \   000114                ; Setup parameters for call to function AT_ChartoIntx
   \   000114   7940         MOV       R1,#0x40
   \   000116   7409         MOV       A,#0x9
   \   000118   12....       LCALL     ?XSTACK_DISP102_8
   \   00011B   7419         MOV       A,#0x19
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   AA82         MOV       R2,DPL
   \   000122   AB83         MOV       R3,DPH
   \   000124   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   3137            }
   3138          
   3139            status = ZDP_BindReq( Saddr, SourceAddr, srcEP, cID, &dstAddr, dstEP, TRUE);
   \                     ??AT_Cmd_BIND_10:
   \   000127                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000127   75..01       MOV       ?V2,#0x1
   \   00012A   78..         MOV       R0,#?V2
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012F   78..         MOV       R0,#?V0
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000134   7402         MOV       A,#0x2
   \   000136   12....       LCALL     ?XSTACK_DISP100_8
   \   000139   88..         MOV       ?V2,R0
   \   00013B   89..         MOV       ?V3,R1
   \   00013D   78..         MOV       R0,#?V2
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000142   78..         MOV       R0,#?V8
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000147   740F         MOV       A,#0xf
   \   000149   12....       LCALL     ?XSTACK_DISP100_8
   \   00014C   88..         MOV       ?V2,R0
   \   00014E   89..         MOV       ?V3,R1
   \   000150   78..         MOV       R0,#?V2
   \   000152   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000155   A9..         MOV       R1,?V7
   \   000157   EE           MOV       A,R6
   \   000158   FC           MOV       R4,A
   \   000159   EF           MOV       A,R7
   \   00015A   FD           MOV       R5,A
   \   00015B   7A21         MOV       R2,#0x21
   \   00015D   7B00         MOV       R3,#0x0
   \   00015F   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000162   7408         MOV       A,#0x8
   \   000164   12....       LCALL     ?DEALLOC_XSTACK8
   \   000167   12....       LCALL     ?Subroutine110 & 0xFFFF
   3140            osal_mem_free(Saddr);
   3141          
   3142            if (status != afStatus_SUCCESS) {
   \                     ??CrossCallReturnLabel_354:
   \   00016A   6008         JZ        ??AT_Cmd_BIND_11
   3143              AT_SEND_ERROR(status);
   \   00016C                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00016C   7A02         MOV       R2,#0x2
   \   00016E   F9           MOV       R1,A
   \                     ??AT_Cmd_BIND_4:
   \   00016F   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000172   800F         SJMP      ??CrossCallReturnLabel_53
   3144            } else {
   3145              AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_BIND_11:
   \   000174                ; Setup parameters for call to function printf
   \   000174   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017A   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   00017D   12....       LCALL     ?DEALLOC_XSTACK8
   3146              AT_SEQ_STROE(ZDP_TransID);
   \   000180                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   000180   12....       LCALL     ?Subroutine31 & 0xFFFF
   3147              AT_OK();
   3148            }
   3149          }
   \                     ??CrossCallReturnLabel_53:
   \   000183   02....       LJMP      ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   7A09         MOV       R2,#0x9
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8A..         MOV       ?V2,R2
   \   000009   8B..         MOV       ?V3,R3
   \   00000B   AE..         MOV       R6,?V2
   \   00000D   AF..         MOV       R7,?V3
   \   00000F                ; Setup parameters for call to function AT_ChartoInt8
   \   00000F                ; Setup parameters for call to function AT_ChartoInt8
   \   00000F   7415         MOV       A,#0x15
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000007   F5..         MOV       ?V7,A
   \   000009                ; Setup parameters for call to function AT_ChartoInt16
   \   000009                ; Setup parameters for call to function AT_ChartoInt16
   \   000009   7421         MOV       A,#0x21
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   7408         MOV       A,#0x8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003                ; Setup parameters for call to function AT_ChartoInt8
   \   000003                ; Setup parameters for call to function AT_ChartoInt8
   \   000003   741D         MOV       A,#0x1d
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   7402         MOV       A,#0x2
   \   000005   65..         XRL       A,?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007                ; Setup parameters for call to function osal_memcpy
   \   000007                ; Setup parameters for call to function osal_memcpy
   \   000007   75..00       MOV       ?V6,#0x0
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000006   F5..         MOV       ?V1,A
   \   000008   05..         INC       ?V0
   \   00000A   E5..         MOV       A,?V0
   \   00000C   C3           CLR       C
   \   00000D   9408         SUBB      A,#0x8
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   EE           MOV       A,R6
   \   000003   2408         ADD       A,#0x8
   \   000005   F5..         MOV       ?V2,A
   \   000007   E4           CLR       A
   \   000008   3F           ADDC      A,R7
   \   000009   F5..         MOV       ?V3,A
   \   00000B   E8           MOV       A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   7403         MOV       A,#0x3
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function AT_ChartoIntx
   \   000003                ; Setup parameters for call to function AT_ChartoIntx
   \   000003   7940         MOV       R1,#0x40
   \   000005   AC..         MOV       R4,?XSP + 0
   \   000007   AD..         MOV       R5,?XSP + 1
   \   000009   7425         MOV       A,#0x25
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   743E         MOV       A,#0x3e
   \   000002                REQUIRE ??Subroutine187_0
   \   000002                ; // Fall through to label ??Subroutine187_0
   3150          
   3151          /*******************************************************************************
   3152           * @fn      AT_Cmd_UNBIND
   3153           *
   3154           * @brief   +UNBIND - Delete Binding on Remote Device (ZDO)
   3155           *          Format: AT+UNBIND:<address>,<SrcAddress>,<SrcEP>,<ClusterID>,
   3156           *                          <DstAddress>[,<DstEP>]
   3157           *                  <address> - the target Node's EUI64, NodeID
   3158           *                  <type> - the Address mode shown as blow
   3159           *                    1 = Multicast Binding with Multicast ID Specified
   3160           *                    2 = Unicast Binding with EUI64 and remote EP specified
   3161           *                  <SrcAddress> - The EUI64 of the source
   3162           *                  <SrcEP> - The source endpoint
   3163           *                  <ClusterID> - The Cluster ID on the source device
   3164           *                  <DstAddress> - The EUI64 or 16-bit multicast ID, depending
   3165           *                                  on <type>
   3166           *                  <DstEP> - Only in Mode 2
   3167           *          Use on: All Devices
   3168           *
   3169           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3170           * @param   uint8* msg_ptr - the message pointer
   3171           *
   3172           * @return  None
   3173           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3174          void AT_Cmd_UNBIND( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_UNBIND:
   3175          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 62
   \   000005   74C2         MOV       A,#-0x3e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   3176            uint8 i;
   3177            uint8 status;
   3178            AT_CmdUnit cmdUnitArr[8];
   3179            for ( i = 0; i < 8; i++) {
   \   000010   75..00       MOV       ?V0,#0x0
   3180              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_UNBIND_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V1
   \   000019   E5..         MOV       A,?V0
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   7411         MOV       A,#0x11
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine66 & 0xFFFF
   3181            }
   \                     ??CrossCallReturnLabel_139:
   \   00002F   40E2         JC        ??AT_Cmd_UNBIND_0
   3182          
   3183            zAddrType_t *Saddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   12....       LCALL     ?Subroutine111 & 0xFFFF
   3184            uint8  type    = AT_ChartoInt8(&cmdUnitArr[1]);
   \                     ??CrossCallReturnLabel_206:
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ?Subroutine104 & 0xFFFF
   3185            uint8  SourceAddr[Z_EXTADDR_LEN];
   3186            uint8  srcEP   = AT_ChartoInt8(&cmdUnitArr[3]);
   \                     ??CrossCallReturnLabel_194:
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine107 & 0xFFFF
   3187            uint16 cID     = AT_ChartoInt16(&cmdUnitArr[4]);
   \                     ??CrossCallReturnLabel_201:
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine96 & 0xFFFF
   3188            zAddrType_t  dstAddr;
   3189            uint8 dstEP;
   3190          
   3191            if (type == 2) {
   \                     ??CrossCallReturnLabel_184:
   \   000046   7028         JNZ       ??AT_Cmd_UNBIND_1
   3192              AT_PARSE_CMD_PATTERN_ERROR(":,,,,,,\r", cmdUnitArr);
   \   000048                ; Setup parameters for call to function AT_Pattern_Check
   \   000048   7411         MOV       A,#0x11
   \   00004A   12....       LCALL     ?XSTACK_DISP102_8
   \   00004D   7A..         MOV       R2,#`?<Constant ":,,,,,,\\r">` & 0xff
   \   00004F   7B..         MOV       R3,#(`?<Constant ":,,,,,,\\r">` >> 8) & 0xff
   \   000051   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000054   7028         JNZ       ??AT_Cmd_UNBIND_2
   \   000056                ; Setup parameters for call to function AT_UARTWriteErrMsg
   3193              dstEP = AT_ChartoInt8(&cmdUnitArr[6]);
   \   000056                ; Setup parameters for call to function AT_ChartoInt8
   \   000056   7429         MOV       A,#0x29
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine105 & 0xFFFF
   3194              dstAddr.addrMode = Addr64Bit;
   3195              AT_ChartoIntx(&cmdUnitArr[5], dstAddr.addr.extAddr, 64);
   3196            } else {
   \                     ??CrossCallReturnLabel_196:
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   AA82         MOV       R2,DPL
   \   000069   AB83         MOV       R3,DPH
   \   00006B   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   \   00006E   8026         SJMP      ??CrossCallReturnLabel_495
   3197              AT_PARSE_CMD_PATTERN_ERROR(":,,,,,\r", cmdUnitArr);
   \                     ??AT_Cmd_UNBIND_1:
   \   000070                ; Setup parameters for call to function AT_Pattern_Check
   \   000070   7411         MOV       A,#0x11
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7A..         MOV       R2,#`?<Constant ":,,,,,\\r">` & 0xff
   \   000077   7B..         MOV       R3,#(`?<Constant ":,,,,,\\r">` >> 8) & 0xff
   \   000079   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   00007C   6005         JZ        ??AT_Cmd_UNBIND_3
   \   00007E                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_UNBIND_2:
   \   00007E   7A01         MOV       R2,#0x1
   \   000080   02....       LJMP      ??AT_Cmd_UNBIND_4 & 0xFFFF
   3198              dstEP = 0;
   \                     ??AT_Cmd_UNBIND_3:
   \   000083   75..00       MOV       ?V0,#0x0
   3199              dstAddr.addrMode = AddrGroup;
   \   000086   7408         MOV       A,#0x8
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   7401         MOV       A,#0x1
   \   00008D   F0           MOVX      @DPTR,A
   3200              dstAddr.addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[5]);
   \   00008E                ; Setup parameters for call to function AT_ChartoInt16
   \   00008E   7425         MOV       A,#0x25
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   12....       LCALL     ?Subroutine27 & 0xFFFF
   3201            }
   3202          
   3203            AddrMgrEntry_t entry;
   3204            if (cmdUnitArr[0].unitLen == 0) {  // <address>
   \                     ??CrossCallReturnLabel_495:
   \   000096   7412         MOV       A,#0x12
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00009E   7005         JNZ       ??AT_Cmd_UNBIND_5
   3205              Saddr->addr.shortAddr = NLME_GetShortAddr();
   \   0000A0                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000A0   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000A3   8023         SJMP      ??AT_Cmd_UNBIND_6
   3206              Saddr->addrMode = Addr16Bit;
   3207            } else if (cmdUnitArr[0].unitLen > 10) { // <Address> is EUI64
   \                     ??AT_Cmd_UNBIND_5:
   \   0000A5   C3           CLR       C
   \   0000A6   940B         SUBB      A,#0xb
   \   0000A8   4010         JC        ??AT_Cmd_UNBIND_7
   3208              AT_ChartoIntx(&cmdUnitArr[0], Saddr->addr.extAddr, 64);
   \   0000AA                ; Setup parameters for call to function AT_ChartoIntx
   \   0000AA   7940         MOV       R1,#0x40
   \   0000AC   EE           MOV       A,R6
   \   0000AD   FC           MOV       R4,A
   \   0000AE   EF           MOV       A,R7
   \   0000AF   FD           MOV       R5,A
   \   0000B0   7411         MOV       A,#0x11
   \   0000B2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B5   12....       LCALL     ?Subroutine117 & 0xFFFF
   3209              Saddr->addrMode = Addr64Bit;
   3210            } else if (cmdUnitArr[0].unitLen > 2) { // <Address> is NodeID
   \                     ??CrossCallReturnLabel_219:
   \   0000B8   803A         SJMP      ??CrossCallReturnLabel_46
   \                     ??AT_Cmd_UNBIND_7:
   \   0000BA   E8           MOV       A,R0
   \   0000BB   C3           CLR       C
   \   0000BC   9403         SUBB      A,#0x3
   \   0000BE   7411         MOV       A,#0x11
   \   0000C0   4010         JC        ??AT_Cmd_UNBIND_8
   3211              Saddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \   0000C2                ; Setup parameters for call to function AT_ChartoInt16
   \   0000C2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C5   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \                     ??AT_Cmd_UNBIND_6:
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   EA           MOV       A,R2
   \   0000CD   F0           MOVX      @DPTR,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   EB           MOV       A,R3
   \   0000D0   801F         SJMP      ??CrossCallReturnLabel_67
   3212              Saddr->addrMode = Addr16Bit;
   3213            } else { // <Address> is address table entry
   3214              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_UNBIND_8:
   \   0000D2                ; Setup parameters for call to function AT_ChartoInt8
   \   0000D2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D5   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   0000D8   743C         MOV       A,#0x3c
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   E9           MOV       A,R1
   \   0000DE   12....       LCALL     ??Subroutine184_0 & 0xFFFF
   3215              // entry.user = ADDRMGR_USER_DEFAULT;
   3216              AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_465:
   \   0000E1                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000E1   7431         MOV       A,#0x31
   \   0000E3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E6   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   3217              Saddr->addr.shortAddr = entry.nwkAddr;
   \   0000E9   7432         MOV       A,#0x32
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL     ?Subroutine33 & 0xFFFF
   3218              Saddr->addrMode = (afAddrMode_t)Addr16Bit;
   3219            }
   \                     ??CrossCallReturnLabel_67:
   \   0000F1   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000F4   F0           MOVX      @DPTR,A
   3220          
   3221            if (cmdUnitArr[2].unitLen == 0) {
   \   0000F5   741A         MOV       A,#0x1a
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   7017         JNZ       ??AT_Cmd_UNBIND_9
   3222              osal_memcpy(SourceAddr, NLME_GetExtAddr(), 8);
   \   0000FD                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000FD   12....       LCALL     ?Subroutine90 & 0xFFFF
   3223            } else {
   \                     ??CrossCallReturnLabel_172:
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000103   7C08         MOV       R4,#0x8
   \   000105   7D00         MOV       R5,#0x0
   \   000107   740C         MOV       A,#0xc
   \   000109   12....       LCALL     ?XSTACK_DISP101_8
   \   00010C   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   8013         SJMP      ??AT_Cmd_UNBIND_10
   3224              AT_ChartoIntx(&cmdUnitArr[2], SourceAddr, 64);
   \                     ??AT_Cmd_UNBIND_9:
   \   000114                ; Setup parameters for call to function AT_ChartoIntx
   \   000114   7940         MOV       R1,#0x40
   \   000116   7409         MOV       A,#0x9
   \   000118   12....       LCALL     ?XSTACK_DISP102_8
   \   00011B   7419         MOV       A,#0x19
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   AA82         MOV       R2,DPL
   \   000122   AB83         MOV       R3,DPH
   \   000124   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   3225            }
   3226          
   3227            status = ZDP_UnbindReq( Saddr, SourceAddr, srcEP, cID, &dstAddr, dstEP, TRUE);
   \                     ??AT_Cmd_UNBIND_10:
   \   000127                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000127   75..01       MOV       ?V2,#0x1
   \   00012A   78..         MOV       R0,#?V2
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012F   78..         MOV       R0,#?V0
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000134   7402         MOV       A,#0x2
   \   000136   12....       LCALL     ?XSTACK_DISP100_8
   \   000139   88..         MOV       ?V2,R0
   \   00013B   89..         MOV       ?V3,R1
   \   00013D   78..         MOV       R0,#?V2
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000142   78..         MOV       R0,#?V8
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000147   740F         MOV       A,#0xf
   \   000149   12....       LCALL     ?XSTACK_DISP100_8
   \   00014C   88..         MOV       ?V2,R0
   \   00014E   89..         MOV       ?V3,R1
   \   000150   78..         MOV       R0,#?V2
   \   000152   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000155   A9..         MOV       R1,?V7
   \   000157   EE           MOV       A,R6
   \   000158   FC           MOV       R4,A
   \   000159   EF           MOV       A,R7
   \   00015A   FD           MOV       R5,A
   \   00015B   7A22         MOV       R2,#0x22
   \   00015D   7B00         MOV       R3,#0x0
   \   00015F   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000162   7408         MOV       A,#0x8
   \   000164   12....       LCALL     ?DEALLOC_XSTACK8
   \   000167   12....       LCALL     ?Subroutine110 & 0xFFFF
   3228            osal_mem_free(Saddr);
   3229          
   3230            if (status != afStatus_SUCCESS) {
   \                     ??CrossCallReturnLabel_355:
   \   00016A   6008         JZ        ??AT_Cmd_UNBIND_11
   3231              AT_SEND_ERROR(status);
   \   00016C                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00016C   7A02         MOV       R2,#0x2
   \   00016E   F9           MOV       R1,A
   \                     ??AT_Cmd_UNBIND_4:
   \   00016F   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000172   800F         SJMP      ??CrossCallReturnLabel_54
   3232            } else {
   3233              AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_UNBIND_11:
   \   000174                ; Setup parameters for call to function printf
   \   000174   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017A   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   00017D   12....       LCALL     ?DEALLOC_XSTACK8
   3234              AT_SEQ_STROE(ZDP_TransID);
   \   000180                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   000180   12....       LCALL     ?Subroutine31 & 0xFFFF
   3235              AT_OK();
   3236            }
   3237          }
   \                     ??CrossCallReturnLabel_54:
   \   000183   02....       LJMP      ?Subroutine8 & 0xFFFF
   3238          
   3239          /*******************************************************************************
   3240           * @fn      AT_Cmd_EBIND
   3241           *
   3242           * @brief   +EBIND - End Device Bind
   3243           *          Format: AT+EBIND:<EP>
   3244           *                  <EP> - Local Endpoint which will initiate end device binding
   3245           *          Use on: Local node
   3246           *
   3247           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3248           * @param   uint8* msg_ptr - the message pointer
   3249           *
   3250           * @return  None
   3251           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7411         MOV       A,#0x11
   \   000002                REQUIRE ??Subroutine165_0
   \   000002                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3252          void AT_Cmd_EBIND( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_EBIND:
   3253          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine67 & 0xFFFF
   3254            uint8 i;
   3255            uint8 status;
   3256            AT_CmdUnit cmdUnitArr[2];
   3257          
   3258            for ( i = 0; i < 2; i++) {
   3259              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??CrossCallReturnLabel_141:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   AA82         MOV       R2,DPL
   \   000012   AB83         MOV       R3,DPH
   \   000014   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   3260            }
   3261            uint8 ep = AT_ChartoInt8(&cmdUnitArr[0]);
   \   000017                ; Setup parameters for call to function AT_ChartoInt8
   \   000017   AA..         MOV       R2,?XSP + 0
   \   000019   AB..         MOV       R3,?XSP + 1
   \   00001B   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   3262            zAddrType_t addr = {
   3263              {0x0000},
   3264              (afAddrMode_t) Addr16Bit
   3265            };
   \                     ??CrossCallReturnLabel_323:
   \   00001E   90....       MOV       DPTR,#`?<Constant {{0}, 2}>_1`
   \   000021   7408         MOV       A,#0x8
   \   000023   12....       LCALL     ?XSTACK_DISP102_8
   \   000026   7409         MOV       A,#0x9
   \   000028   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   3266          
   3267            endPointDesc_t *epDesc = afFindEndPointDesc(ep);
   \   00002B                ; Setup parameters for call to function afFindEndPointDesc
   \   00002B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00002E   8A..         MOV       ?V2,R2
   \   000030   8B..         MOV       ?V3,R3
   \   000032   AE..         MOV       R6,?V2
   \   000034   AF..         MOV       R7,?V3
   3268            if (epDesc) {
   \   000036   EA           MOV       A,R2
   \   000037   4F           ORL       A,R7
   \   000038   7003         JNZ       $+5
   \   00003A   02....       LJMP      ??AT_Cmd_EBIND_0 & 0xFFFF
   3269              status = ZDP_EndDeviceBindReq(&addr, NLME_GetShortAddr(), ep,
   3270                                            epDesc->simpleDesc->AppProfId,
   3271                                            epDesc->simpleDesc->AppNumInClusters,
   3272                                            epDesc->simpleDesc->pAppInClusterList,
   3273                                            epDesc->simpleDesc->AppNumOutClusters,
   3274                                            epDesc->simpleDesc->pAppOutClusterList,
   3275                                            TRUE);
   \   00003D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003D   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000040   8A..         MOV       ?V2,R2
   \   000042   8B..         MOV       ?V3,R3
   \   000044   AC..         MOV       R4,?V2
   \   000046   AD..         MOV       R5,?V3
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000053   E8           MOV       A,R0
   \   000054   FA           MOV       R2,A
   \   000055                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000055   75..01       MOV       ?V2,#0x1
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8983         MOV       DPH,R1
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00006E   8A82         MOV       DPL,R2
   \   000070   8983         MOV       DPH,R1
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F5..         MOV       ?V2,A
   \   00007E   78..         MOV       R0,#?V2
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000083   8A82         MOV       DPL,R2
   \   000085   8983         MOV       DPH,R1
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000091   8A82         MOV       DPL,R2
   \   000093   8983         MOV       DPH,R1
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F5..         MOV       ?V2,A
   \   00009E   78..         MOV       R0,#?V2
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   8A82         MOV       DPL,R2
   \   0000A5   8983         MOV       DPH,R1
   \   0000A7   A3           INC       DPTR
   \   0000A8   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000AB   A9..         MOV       R1,?V1
   \   0000AD   7411         MOV       A,#0x11
   \   0000AF   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B2   12....       LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   0000B5   7409         MOV       A,#0x9
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV       A,R1
   \   0000BB   F9           MOV       R1,A
   3276              if (status != afStatus_SUCCESS) {
   \   0000BC   6004         JZ        ??AT_Cmd_EBIND_1
   3277                AT_SEND_ERROR(status);
   \   0000BE                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000BE   7A02         MOV       R2,#0x2
   \   0000C0   801A         SJMP      ??AT_Cmd_EBIND_2
   3278              } else {
   3279                EBindSeq = ZDP_TransID - 1;
   \                     ??AT_Cmd_EBIND_1:
   \   0000C2   90....       MOV       DPTR,#ZDP_TransID
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   14           DEC       A
   \   0000C7   90....       MOV       DPTR,#EBindSeq
   \   0000CA   F0           MOVX      @DPTR,A
   3280                AT_OK();
   \   0000CB                ; Setup parameters for call to function AT_Uart0_Send
   \   0000CB   7C06         MOV       R4,#0x6
   \   0000CD   7D00         MOV       R5,#0x0
   \   0000CF   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0000D1   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0000D3   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   0000D6   8007         SJMP      ??AT_Cmd_EBIND_3
   3281              }
   3282            } else {
   3283              AT_ERROR(AT_FATAL_ERROR);
   \                     ??AT_Cmd_EBIND_0:
   \   0000D8                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000D8   7A01         MOV       R2,#0x1
   \   0000DA   7901         MOV       R1,#0x1
   \                     ??AT_Cmd_EBIND_2:
   \   0000DC   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   3284            }
   3285          }
   \                     ??AT_Cmd_EBIND_3:
   \   0000DF   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}, 2}>_1`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   02           DB 2
   3286          #endif // REFLECTOR
   3287          
   3288          /*******************************************************************************
   3289           * @fn      AT_Cmd_DASSR
   3290           *
   3291           * @brief   +DASSR - Disassociate Remote Node from PAN
   3292           *          Format: AT+DASSR:<address>
   3293           *                  <address> - a node's EUI64, NodeID
   3294           *          Use on: All Devices
   3295           *
   3296           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3297           * @param   uint8* msg_ptr - the message pointer
   3298           *
   3299           * @return  None
   3300           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3301          void AT_Cmd_DASSR( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_DASSR:
   3302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3303            uint8 i;
   3304            uint8 status;
   3305            AT_CmdUnit cmdUnitArr[2];
   3306          
   3307            for ( i = 0; i < 2; i++) {
   3308              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \   00000E                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000E   EA           MOV       A,R2
   \   00000F   FC           MOV       R4,A
   \   000010   EB           MOV       A,R3
   \   000011   FD           MOV       R5,A
   \   000012   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000015                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000015   EE           MOV       A,R6
   \   000016   FC           MOV       R4,A
   \   000017   EF           MOV       A,R7
   \   000018   FD           MOV       R5,A
   \   000019   7404         MOV       A,#0x4
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ?Subroutine61 & 0xFFFF
   3309            }
   3310            AT_PARSE_CMD_PATTERN_ERROR(":\r", cmdUnitArr);
   \                     ??CrossCallReturnLabel_131:
   \   000021   6005         JZ        ??AT_Cmd_DASSR_0
   \   000023                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000023   7A01         MOV       R2,#0x1
   \   000025   02....       LJMP      ??AT_Cmd_DASSR_1 & 0xFFFF
   3311          
   3312            AddrMgrEntry_t entry;
   3313            zAddrType_t *Saddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   \                     ??AT_Cmd_DASSR_0:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   12....       LCALL     ?Subroutine113 & 0xFFFF
   3314            if (cmdUnitArr[0].unitLen == 0) {  // <address>
   \                     ??CrossCallReturnLabel_213:
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   EA           MOV       A,R2
   \   000031   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000034   7005         JNZ       ??AT_Cmd_DASSR_2
   3315              Saddr->addr.shortAddr = NLME_GetShortAddr();
   \   000036                ; Setup parameters for call to function NLME_GetShortAddr
   \   000036   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000039   801C         SJMP      ??AT_Cmd_DASSR_3
   3316              Saddr->addrMode = Addr16Bit;
   3317            } else if (cmdUnitArr[0].unitLen > 10) { // <Address> is EUI64
   \                     ??AT_Cmd_DASSR_2:
   \   00003B   C3           CLR       C
   \   00003C   940B         SUBB      A,#0xb
   \   00003E   400F         JC        ??AT_Cmd_DASSR_4
   3318              AT_ChartoIntx(&cmdUnitArr[0], Saddr->addr.extAddr, 64);
   \   000040                ; Setup parameters for call to function AT_ChartoIntx
   \   000040   7940         MOV       R1,#0x40
   \   000042   AC..         MOV       R4,?V0
   \   000044   AD..         MOV       R5,?V1
   \   000046   AA..         MOV       R2,?XSP + 0
   \   000048   AB..         MOV       R3,?XSP + 1
   \   00004A   12....       LCALL     ?Subroutine118 & 0xFFFF
   3319              Saddr->addrMode = Addr64Bit;
   3320            } else if (cmdUnitArr[0].unitLen > 2) { // <Address> is NodeID
   \                     ??CrossCallReturnLabel_221:
   \   00004D   8034         SJMP      ??AT_Cmd_DASSR_5
   \                     ??AT_Cmd_DASSR_4:
   \   00004F   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000052   400F         JC        ??AT_Cmd_DASSR_6
   3321              Saddr->addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \   000054                ; Setup parameters for call to function AT_ChartoInt16
   \   000054   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \                     ??AT_Cmd_DASSR_3:
   \   000057   85..82       MOV       DPL,?V0
   \   00005A   85..83       MOV       DPH,?V1
   \   00005D   EA           MOV       A,R2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   EB           MOV       A,R3
   \   000061   8019         SJMP      ??CrossCallReturnLabel_93
   3322              Saddr->addrMode = Addr16Bit;
   3323            } else { // <Address> is address table entry
   3324              entry.index = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_DASSR_6:
   \   000063                ; Setup parameters for call to function AT_ChartoInt8
   \   000063   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000066   741B         MOV       A,#0x1b
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   12....       LCALL     ?Subroutine22 & 0xFFFF
   3325              // entry.user = ADDRMGR_USER_DEFAULT;
   3326              AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_33:
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   3327              Saddr->addr.shortAddr = entry.nwkAddr;
   \   000074   7411         MOV       A,#0x11
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00007C   F0           MOVX      @DPTR,A
   3328              Saddr->addrMode = (afAddrMode_t)Addr16Bit;
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   7402         MOV       A,#0x2
   \                     ??AT_Cmd_DASSR_5:
   \   000083   F0           MOVX      @DPTR,A
   3329            }
   3330            uint8 IEEEAddr[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   \   000084   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`
   \   000087   7408         MOV       A,#0x8
   \   000089   12....       LCALL     ?XSTACK_DISP102_8
   \   00008C   7408         MOV       A,#0x8
   \   00008E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   3331            status = ZDP_MgmtLeaveReq(Saddr, IEEEAddr, FALSE, FALSE, TRUE);
   \   000091                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   000091   75..01       MOV       ?V3,#0x1
   \   000094   78..         MOV       R0,#?V3
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000099   75..00       MOV       ?V3,#0x0
   \   00009C   78..         MOV       R0,#?V3
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A1   7900         MOV       R1,#0x0
   \   0000A3   740A         MOV       A,#0xa
   \   0000A5   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A8   AA..         MOV       R2,?V0
   \   0000AA   AB..         MOV       R3,?V1
   \   0000AC   12....       LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
   \   0000AF   7402         MOV       A,#0x2
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   E9           MOV       A,R1
   \   0000B5   FE           MOV       R6,A
   3332            osal_mem_free(Saddr);
   \   0000B6                ; Setup parameters for call to function osal_mem_free
   \   0000B6   AA..         MOV       R2,?V0
   \   0000B8   AB..         MOV       R3,?V1
   \   0000BA   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   3333          
   3334            if (status != afStatus_SUCCESS) {
   \                     ??CrossCallReturnLabel_370:
   \   0000BD   6008         JZ        ??AT_Cmd_DASSR_7
   3335              AT_SEND_ERROR(status);
   \   0000BF                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000BF   7A02         MOV       R2,#0x2
   \   0000C1   F9           MOV       R1,A
   \                     ??AT_Cmd_DASSR_1:
   \   0000C2   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   0000C5   800F         SJMP      ??CrossCallReturnLabel_55
   3336            } else {
   3337              AT_SEQ(ZDP_TransID);
   \                     ??AT_Cmd_DASSR_7:
   \   0000C7                ; Setup parameters for call to function printf
   \   0000C7   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000CA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CD   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
   3338              AT_SEQ_STROE(ZDP_TransID);
   \   0000D3                ; Setup parameters for call to function StoreSeqNumInBuffer
   \   0000D3   12....       LCALL     ?Subroutine31 & 0xFFFF
   3339              AT_OK();
   3340            }
   3341          }
   \                     ??CrossCallReturnLabel_55:
   \   0000D6   02....       LJMP      ?Subroutine11 & 0xFFFF
   3342          
   3343          #if ( ZG_BUILD_COORDINATOR_TYPE )
   3344          /*******************************************************************************
   3345           * @fn      AT_Cmd_KEYUPD
   3346           *
   3347           * @brief   +KEYUPD - Update the Network Key
   3348           *          Format: AT+KEYUPD
   3349           *          Use on: Trust Centre
   3350           *
   3351           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3352           * @param   uint8* msg_ptr - the message pointer
   3353           *
   3354           * @return  None
   3355           ******************************************************************************/
   3356          void AT_Cmd_KEYUPD( uint8 cmd_ptr, uint8* msg_ptr )
   3357          {
   3358            uint8 i;
   3359            uint16 temp;
   3360            uint8 status;
   3361            AT_CmdUnit cmdUnitArr[1];
   3362          
   3363            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   3364            AT_PARSE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   3365          
   3366            uint8 key[SEC_KEY_LEN];
   3367            keySeqNum++;
   3368          
   3369            for ( i = 0; i < SEC_KEY_LEN; i++) {
   3370              temp = osal_rand();
   3371              key[i++] = LO_UINT16(temp);
   3372              key[i] = HI_UINT16(temp);
   3373            }
   3374          
   3375            status = ZDSecMgrUpdateNwkKey(key, keySeqNum, NWK_BROADCAST_SHORTADDR_DEVALL);
   3376            if (status == ZSuccess) {
   3377              status = ZDSecMgrSwitchNwkKey(keySeqNum, NWK_BROADCAST_SHORTADDR_DEVALL);
   3378            }
   3379            // TODO: maybe we should send switch network key command for more times
   3380            if (status == ZSuccess) {
   3381              AT_RESP("NWKKEYUPDATED", 13);
   3382              AT_OK();
   3383            } else {
   3384              AT_ZDO_ERROR(status);
   3385            }
   3386          }
   3387          
   3388          /*******************************************************************************
   3389           * @fn      AT_Cmd_CCHANGE
   3390           *
   3391           * @brief   +CCHANGE - Change the network's channel
   3392           *          Format: AT+CCHANGE:<channel>
   3393           *          Use on: Network Manager
   3394           *
   3395           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3396           * @param   uint8* msg_ptr - the message pointer
   3397           *
   3398           * @return  None
   3399           ******************************************************************************/
   3400          void AT_Cmd_CCHANGE( uint8 cmd_ptr, uint8* msg_ptr )
   3401          {
   3402            uint8 i;
   3403            uint8 status;
   3404            AT_CmdUnit cmdUnitArr[2];
   3405          
   3406            for ( i = 0; i < 2; i++) {
   3407              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   3408            }
   3409            AT_PARSE_CMD_PATTERN_ERROR(":\r", cmdUnitArr);
   3410          
   3411            gChannel = AT_ChartoInt8(&cmdUnitArr[0])/16*10+AT_ChartoInt8(&cmdUnitArr[0])%16;
   3412            uint32 channelMask = (uint32)1 << gChannel;
   3413            gNwkUpdateId = _NIB.nwkUpdateId + 1;
   3414          
   3415            // Build dstAddress
   3416            zAddrType_t *dstAddr = (zAddrType_t *)osal_mem_alloc(sizeof(zAddrType_t));
   3417            dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   3418            dstAddr->addrMode = (afAddrMode_t)AddrBroadcast;
   3419          
   3420            status = ZDP_MgmtNwkUpdateReq(dstAddr, channelMask, 0xFE, 0, gNwkUpdateId, 0);
   3421            osal_mem_free(dstAddr);
   3422          
   3423            if(status != afStatus_SUCCESS) {
   3424              AT_SEND_ERROR(status);
   3425            } else {
   3426              //send three times ensure network is updated
   3427          	osal_start_timerEx( AT_UART_TaskID, AT_NWKUPDATE_EVENT, ZDNWKMGR_BCAST_DELIVERY_TIME+50 );
   3428            }
   3429          }
   3430          #endif // ZG_BUILD_COORDINATOR_TYPE
   3431          
   3432          /*******************************************************************************
   3433           * @fn      AT_Cmd_RADIOCH
   3434           *
   3435           * @brief   +RADIOCH - Set or get local radio channel
   3436           *          Format: AT+RADIOCH[:<channel>]
   3437           *          Use on: All nodes
   3438           *
   3439           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3440           * @param   uint8* msg_ptr - the message pointer
   3441           *
   3442           * @return  None
   3443           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3444          void AT_Cmd_RADIOCH( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_RADIOCH:
   3445          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3446            uint8 channel;
   3447            uint8 currChannel;
   3448            uint8 rxOnIdle;
   3449            AT_CmdUnit cmdUnitArr[2];
   3450          
   3451            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000E                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000E   EA           MOV       A,R2
   \   00000F   FC           MOV       R4,A
   \   000010   EB           MOV       A,R3
   \   000011   FD           MOV       R5,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP101_8
   \   000017   12....       LCALL     ??Subroutine185_0 & 0xFFFF
   3452            if (cmdUnitArr[0].symbol == '\r') {
   \                     ??CrossCallReturnLabel_470:
   \   00001A   75....       MOV       ?V0,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   00001D   75....       MOV       ?V1,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000020   7403         MOV       A,#0x3
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E0           MOVX      A,@DPTR
   \   000026   640D         XRL       A,#0xd
   \   000028   703B         JNZ       ??AT_Cmd_RADIOCH_0
   3453              AT_PARSE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   \   00002A                ; Setup parameters for call to function AT_Pattern_Check
   \   00002A   7403         MOV       A,#0x3
   \   00002C   12....       LCALL     ?XSTACK_DISP102_8
   \   00002F   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   000031   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   000033   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000036   704B         JNZ       ??AT_Cmd_RADIOCH_1
   \   000038                ; Setup parameters for call to function AT_UARTWriteErrMsg
   3454              ZMacGetReq( ZMacChannel, &currChannel );
   \   000038                ; Setup parameters for call to function ZMacGetReq
   \   000038   7401         MOV       A,#0x1
   \   00003A   12....       LCALL     ?XSTACK_DISP101_8
   \   00003D   79E1         MOV       R1,#-0x1f
   \   00003F   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   3455              AT_NEW_LINE();
   \   000042                ; Setup parameters for call to function AT_Uart0_Send
   \   000042   7C02         MOV       R4,#0x2
   \   000044   7D00         MOV       R5,#0x0
   \   000046   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000048   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00004A   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   3456              printf("channel: %02X", currChannel);
   \   00004D                ; Setup parameters for call to function printf
   \   00004D   7401         MOV       A,#0x1
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   7A..         MOV       R2,#`?<Constant "channel: %02X">` & 0xff
   \   00005A   7B..         MOV       R3,#(`?<Constant "channel: %02X">` >> 8) & 0xff
   \   00005C   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   00005F   12....       LCALL     ?DEALLOC_XSTACK8
   3457              AT_OK();
   \   000062                ; Setup parameters for call to function AT_Uart0_Send
   \   000062   02....       LJMP      ??AT_Cmd_RADIOCH_2 & 0xFFFF
   3458            } else {
   3459              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[1], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_RADIOCH_0:
   \   000065                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000065   EE           MOV       A,R6
   \   000066   FC           MOV       R4,A
   \   000067   EF           MOV       A,R7
   \   000068   FD           MOV       R5,A
   \   000069   7407         MOV       A,#0x7
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   AA82         MOV       R2,DPL
   \   000070   AB83         MOV       R3,DPH
   \   000072   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   3460              AT_PARSE_CMD_PATTERN_ERROR(":\r", cmdUnitArr);
   \   000075                ; Setup parameters for call to function AT_Pattern_Check
   \   000075   7403         MOV       A,#0x3
   \   000077   12....       LCALL     ?XSTACK_DISP102_8
   \   00007A   7A..         MOV       R2,#`?<Constant ":\\r">` & 0xff
   \   00007C   7B..         MOV       R3,#(`?<Constant ":\\r">` >> 8) & 0xff
   \   00007E   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000081   6007         JZ        ??AT_Cmd_RADIOCH_3
   \   000083                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \                     ??AT_Cmd_RADIOCH_1:
   \   000083   7A01         MOV       R2,#0x1
   \   000085   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000088   806D         SJMP      ??AT_Cmd_RADIOCH_4
   3461              channel = AT_ChartoInt8(&cmdUnitArr[0])/16*10+AT_ChartoInt8(&cmdUnitArr[0])%16;;
   \                     ??AT_Cmd_RADIOCH_3:
   \   00008A                ; Setup parameters for call to function AT_ChartoInt8
   \   00008A   7403         MOV       A,#0x3
   \   00008C   12....       LCALL     ?XSTACK_DISP101_8
   \   00008F   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000092                ; Setup parameters for call to function AT_ChartoInt8
   \   000092   7403         MOV       A,#0x3
   \   000094   12....       LCALL     ?XSTACK_DISP101_8
   \   000097   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00009A   EE           MOV       A,R6
   \   00009B   C4           SWAP      A
   \   00009C   540F         ANL       A,#0xf
   \   00009E   A4           MUL       AB
   \   00009F   28           ADD       A,R0
   \   0000A0   C0E0         PUSH      A
   \   0000A2   7402         MOV       A,#0x2
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   D0E0         POP       A
   \   0000A9   F0           MOVX      @DPTR,A
   3462              ZMacGetReq( ZMacChannel, &currChannel );
   \   0000AA                ; Setup parameters for call to function ZMacGetReq
   \   0000AA   7401         MOV       A,#0x1
   \   0000AC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000AF   79E1         MOV       R1,#-0x1f
   \   0000B1   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   3463              if ( currChannel != channel ) {
   \   0000B4   7401         MOV       A,#0x1
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F8           MOV       R0,A
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   68           XRL       A,R0
   \   0000C2   6028         JZ        ??AT_Cmd_RADIOCH_2
   3464                // turn MAC receiver off
   3465                rxOnIdle = false;
   \   0000C4   85..82       MOV       DPL,?XSP + 0
   \   0000C7   85..83       MOV       DPH,?XSP + 1
   \   0000CA   E4           CLR       A
   \   0000CB   12....       LCALL     ?Subroutine19 & 0xFFFF
   3466                ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   3467          
   3468                // set the NIB channel
   3469                ZMacSetReq( ZMacChannel, &channel );
   \                     ??CrossCallReturnLabel_24:
   \   0000CE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D1   79E1         MOV       R1,#-0x1f
   \   0000D3   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   3470          
   3471                // turn MAC receiver back on
   3472                rxOnIdle = true;
   \   0000D6   85..82       MOV       DPL,?XSP + 0
   \   0000D9   85..83       MOV       DPH,?XSP + 1
   \   0000DC   7401         MOV       A,#0x1
   \   0000DE   12....       LCALL     ?Subroutine19 & 0xFFFF
   3473                ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   3474                _NIB.nwkLogicalChannel = channel;
   \                     ??CrossCallReturnLabel_25:
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   90....       MOV       DPTR,#_NIB + 22
   \   0000E8   F0           MOVX      @DPTR,A
   3475                // Our Channel has been changed -- notify to save info into NV
   3476                ZDApp_NwkStateUpdateCB();
   \   0000E9                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   0000E9   12....       LCALL     `??ZDApp_NwkStateUpdateCB::?relay`; Banked call to: ZDApp_NwkStateUpdateCB
   3477              }
   3478              AT_OK();
   \                     ??AT_Cmd_RADIOCH_2:
   \   0000EC                ; Setup parameters for call to function AT_Uart0_Send
   \   0000EC   7C06         MOV       R4,#0x6
   \   0000EE   7D00         MOV       R5,#0x0
   \   0000F0   AA..         MOV       R2,?V0
   \   0000F2   AB..         MOV       R3,?V1
   \   0000F4   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   3479            }
   3480          }
   \                     ??AT_Cmd_RADIOCH_4:
   \   0000F7   740B         MOV       A,#0xb
   \   0000F9   02....       LJMP      ??Subroutine176_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000003   7952         MOV       R1,#0x52
   \   000005   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000008                ; Setup parameters for call to function ZMacSetReq
   \   000008   7402         MOV       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   22           RET
   3481          
   3482          /*******************************************************************************
   3483           * @fn      AT_Cmd_ATABLE
   3484           *
   3485           * @brief   +ATABLE - Display Address Table
   3486           *          Format: AT+ATABLE
   3487           *          Use on: All Devices
   3488           *
   3489           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3490           * @param   uint8* msg_ptr - the message pointer
   3491           *
   3492           * @return  None
   3493           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3494          void AT_Cmd_ATABLE( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_ATABLE:
   3495          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3496            AT_CmdUnit cmdUnitArr[1];
   3497          
   3498            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   EA           MOV       A,R2
   \   00000B   FC           MOV       R4,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FD           MOV       R5,A
   \   00000E   740D         MOV       A,#0xd
   \   000010   12....       LCALL     ?XSTACK_DISP101_8
   \   000013   12....       LCALL     `??AT_get_next_cmdUnit::?relay`; Banked call to: AT_get_next_cmdUnit
   3499            AT_PARSE_CMD_PATTERN_ERROR("\r", cmdUnitArr);
   \   000016                ; Setup parameters for call to function AT_Pattern_Check
   \   000016   740D         MOV       A,#0xd
   \   000018   12....       LCALL     ?XSTACK_DISP102_8
   \   00001B   7A..         MOV       R2,#`?<Constant "\\r">` & 0xff
   \   00001D   7B..         MOV       R3,#(`?<Constant "\\r">` >> 8) & 0xff
   \   00001F   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000022   6008         JZ        ??AT_Cmd_ATABLE_0
   \   000024                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000024   7A01         MOV       R2,#0x1
   \   000026   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000029   02....       LJMP      ??CrossCallReturnLabel_526 & 0xFFFF
   3500          
   3501            AddrMgrEntry_t entry;
   3502            AT_NEW_LINE();
   \                     ??AT_Cmd_ATABLE_0:
   \   00002C                ; Setup parameters for call to function AT_Uart0_Send
   \   00002C   7C02         MOV       R4,#0x2
   \   00002E   7D00         MOV       R5,#0x0
   \   000030   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000032   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000034   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   3503            printf("No. | Active |  ID  | EUI");
   \   000037                ; Setup parameters for call to function printf
   \   000037   7A..         MOV       R2,#`?<Constant "No. | Active |  ID  |...">` & 0xff
   \   000039   7B..         MOV       R3,#(`?<Constant "No. | Active |  ID  |...">` >> 8) & 0xff
   \   00003B   12....       LCALL     `??printf::?relay`; Banked call to: printf
   3504            for ( entry.index = 0; entry.index < NWK_MAX_ADDRESSES; entry.index++) {
   \   00003E   740B         MOV       A,#0xb
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   E4           CLR       A
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   F0           MOVX      @DPTR,A
   3505              entry.user = ADDRMGR_USER_DEFAULT;
   \                     ??AT_Cmd_ATABLE_1:
   \   000047   85..82       MOV       DPL,?XSP + 0
   \   00004A   85..83       MOV       DPH,?XSP + 1
   \   00004D   E4           CLR       A
   \   00004E   12....       LCALL     ??Subroutine186_0 & 0xFFFF
   3506              if (!AddrMgrEntryGet( &entry )) {
   \                     ??CrossCallReturnLabel_475:
   \   000051   7014         JNZ       ??AT_Cmd_ATABLE_2
   3507                entry.user = ADDRMGR_USER_ASSOC;
   \   000053   12....       LCALL     ?Subroutine12 & 0xFFFF
   3508                if (!AddrMgrEntryGet( &entry )) {
   \                     ??CrossCallReturnLabel_471:
   \   000056   700F         JNZ       ??AT_Cmd_ATABLE_2
   3509                  entry.user = ADDRMGR_USER_ASSOC;
   \   000058   12....       LCALL     ?Subroutine12 & 0xFFFF
   3510                  if (!AddrMgrEntryGet( &entry )) {
   \                     ??CrossCallReturnLabel_472:
   \   00005B   700A         JNZ       ??AT_Cmd_ATABLE_2
   3511                    entry.user = ADDRMGR_USER_ASSOC;
   \   00005D   12....       LCALL     ?Subroutine12 & 0xFFFF
   3512                    if (!AddrMgrEntryGet( &entry )) {
   \                     ??CrossCallReturnLabel_473:
   \   000060   7005         JNZ       ??AT_Cmd_ATABLE_2
   3513                      entry.user = ADDRMGR_USER_ASSOC;
   \   000062   12....       LCALL     ?Subroutine12 & 0xFFFF
   3514                      if (!AddrMgrEntryGet( &entry ))
   3515                        continue;
   3516                    }
   3517                  }
   3518                }
   3519              }
   \                     ??CrossCallReturnLabel_474:
   \   000065   6057         JZ        ??AT_Cmd_ATABLE_3
   3520              AT_NEXT_LINE();
   \                     ??AT_Cmd_ATABLE_2:
   \   000067                ; Setup parameters for call to function AT_Uart0_Send
   \   000067   7C02         MOV       R4,#0x2
   \   000069   7D00         MOV       R5,#0x0
   \   00006B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00006D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00006F   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   3521              uint16* ext= (uint16*) entry.extAddr;
   3522              printf("%02X. |  %02X    | %04X | %04X%04X%04X%04X",
   3523                     entry.index, entry.user, entry.nwkAddr,
   3524                     ext[3],ext[2],ext[1],ext[0]);
   \   000072                ; Setup parameters for call to function printf
   \   000072   7403         MOV       A,#0x3
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00007A   7407         MOV       A,#0x7
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000082   740B         MOV       A,#0xb
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008A   740F         MOV       A,#0xf
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000092   7409         MOV       A,#0x9
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009A   740A         MOV       A,#0xa
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F5..         MOV       ?V2,A
   \   0000A2   75..00       MOV       ?V3,#0x0
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   7417         MOV       A,#0x17
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000B2   7A..         MOV       R2,#`?<Constant "%02X. |  %02X    | %0...">` & 0xff
   \   0000B4   7B..         MOV       R3,#(`?<Constant "%02X. |  %02X    | %0...">` >> 8) & 0xff
   \   0000B6   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000B9   740E         MOV       A,#0xe
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
   3525            }
   \                     ??AT_Cmd_ATABLE_3:
   \   0000BE   740B         MOV       A,#0xb
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   2401         ADD       A,#0x1
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   A3           INC       DPTR
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   3400         ADDC      A,#0x0
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   740B         MOV       A,#0xb
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   C3           CLR       C
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   941A         SUBB      A,#0x1a
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   9400         SUBB      A,#0x0
   \   0000D9   5003         JNC       $+5
   \   0000DB   02....       LJMP      ??AT_Cmd_ATABLE_1 & 0xFFFF
   3526            AT_NEW_LINE();
   \   0000DE                ; Setup parameters for call to function AT_Uart0_Send
   \   0000DE   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   3527            AT_OK();
   3528          }
   \                     ??CrossCallReturnLabel_526:
   \   0000E1   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7401         MOV       A,#0x1
   \   000008                REQUIRE ??Subroutine186_0
   \   000008                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000003   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000006   E9           MOV       A,R1
   \   000007   22           RET
   3529          
   3530          /*******************************************************************************
   3531           * @fn      AT_Cmd_ASET
   3532           *
   3533           * @brief   +ASET - Set Address Table Entry, updata not add entry
   3534           *          Format: AT+ASET:<NodeID>,<EUI64>
   3535           *          Use on: All Devices
   3536           *
   3537           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3538           * @param   uint8* msg_ptr - the message pointer
   3539           *
   3540           * @return  None
   3541           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3542          void AT_Cmd_ASET( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_ASET:
   3543          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   3544            uint8 i;
   3545            uint8 status;
   3546            AddrMgrEntry_t entry;
   3547            uint8 extAddr[Z_EXTADDR_LEN];
   3548            AT_CmdUnit cmdUnitArr[3];
   3549          
   3550            for ( i = 0; i < 3; i++) {
   \   000010   75..00       MOV       ?V1,#0x0
   3551              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_ASET_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   E5..         MOV       A,?V1
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   12....       LCALL     ?Subroutine59 & 0xFFFF
   3552            }
   \                     ??CrossCallReturnLabel_514:
   \   00002A   40E7         JC        ??AT_Cmd_ASET_0
   3553            AT_PARSE_CMD_PATTERN_ERROR(":,\r", cmdUnitArr);
   \   00002C                ; Setup parameters for call to function AT_Pattern_Check
   \   00002C   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   00002F   6005         JZ        ??AT_Cmd_ASET_1
   \   000031                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000031   7A01         MOV       R2,#0x1
   \   000033   02....       LJMP      ??AT_Cmd_ASET_2 & 0xFFFF
   3554          
   3555            uint8 index; // = AT_ChartoInt8(&cmdUnitArr[0]);
   3556            uint16 nodeId = AT_ChartoInt16(&cmdUnitArr[0]);
   \                     ??AT_Cmd_ASET_1:
   \   000036                ; Setup parameters for call to function AT_ChartoInt16
   \   000036   AA..         MOV       R2,?XSP + 0
   \   000038   AB..         MOV       R3,?XSP + 1
   \   00003A   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   3557            AT_ChartoIntx(&cmdUnitArr[1], extAddr, 64);
   \                     ??CrossCallReturnLabel_297:
   \   00003D                ; Setup parameters for call to function AT_ChartoIntx
   \   00003D   7940         MOV       R1,#0x40
   \   00003F   740C         MOV       A,#0xc
   \   000041   12....       LCALL     ?XSTACK_DISP102_8
   \   000044   7404         MOV       A,#0x4
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   AA82         MOV       R2,DPL
   \   00004B   AB83         MOV       R3,DPH
   \   00004D   12....       LCALL     `??AT_ChartoIntx::?relay`; Banked call to: AT_ChartoIntx
   3558          
   3559            // add entry
   3560            entry.user    = ADDRMGR_USER_DEFAULT;
   \   000050   7414         MOV       A,#0x14
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   E4           CLR       A
   \   000056   F0           MOVX      @DPTR,A
   3561            entry.nwkAddr = nodeId;
   \   000057   7415         MOV       A,#0x15
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E5..         MOV       A,?V2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E5..         MOV       A,?V3
   \   000062   F0           MOVX      @DPTR,A
   3562            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000063                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000063   740C         MOV       A,#0xc
   \   000065   12....       LCALL     ?XSTACK_DISP102_8
   \   000068   7417         MOV       A,#0x17
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   AA82         MOV       R2,DPL
   \   00006F   AB83         MOV       R3,DPH
   \   000071   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3563          
   3564            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000074                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000074   7414         MOV       A,#0x14
   \   000076   12....       LCALL     ?XSTACK_DISP101_8
   \   000079   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00007C   E9           MOV       A,R1
   \   00007D   6401         XRL       A,#0x1
   \   00007F   7034         JNZ       ??AT_Cmd_ASET_3
   3565            {
   3566              // return successful results
   3567              index   = entry.index;
   \   000081   741F         MOV       A,#0x1f
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E0           MOVX      A,@DPTR
   \   000087   FE           MOV       R6,A
   3568              status = ZSuccess;
   3569            }
   3570            else
   3571            {
   3572              // return failed results
   3573              index   = entry.index;
   3574              status = ZNwkUnknownDevice;
   3575            }
   3576          
   3577            if (status == ZSuccess) {
   3578              AT_NEW_LINE();
   \   000088                ; Setup parameters for call to function AT_Uart0_Send
   \   000088   7C02         MOV       R4,#0x2
   \   00008A   7D00         MOV       R5,#0x0
   \   00008C   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00008E   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000090   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   3579              printf("EntryStoreIn: %02X", index);
   \   000093                ; Setup parameters for call to function printf
   \   000093   EE           MOV       A,R6
   \   000094   F5..         MOV       ?V2,A
   \   000096   75..00       MOV       ?V3,#0x0
   \   000099   78..         MOV       R0,#?V2
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   7A..         MOV       R2,#`?<Constant "EntryStoreIn: %02X">` & 0xff
   \   0000A0   7B..         MOV       R3,#(`?<Constant "EntryStoreIn: %02X">` >> 8) & 0xff
   \   0000A2   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   0000A5   12....       LCALL     ?DEALLOC_XSTACK8
   3580              AT_OK();
   \   0000A8                ; Setup parameters for call to function AT_Uart0_Send
   \   0000A8   7C06         MOV       R4,#0x6
   \   0000AA   7D00         MOV       R5,#0x0
   \   0000AC   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0000AE   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0000B0   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   0000B3   8007         SJMP      ??AT_Cmd_ASET_4
   3581            } else {
   3582              AT_ZDO_ERROR(status);
   \                     ??AT_Cmd_ASET_3:
   \   0000B5                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000B5   7A03         MOV       R2,#0x3
   \   0000B7   79C8         MOV       R1,#-0x38
   \                     ??AT_Cmd_ASET_2:
   \   0000B9   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   3583            }
   3584          }
   \                     ??AT_Cmd_ASET_4:
   \   0000BC   7421         MOV       A,#0x21
   \   0000BE   02....       LJMP      ??Subroutine165_0 & 0xFFFF
   3585          
   3586          #ifdef ZCL_DISCOVER
   3587          /*******************************************************************************
   3588           * @fn      AT_Cmd_ATRDISC
   3589           *
   3590           * @brief   +ATRDISC - Find Supported Defined Attributes On A Remote Device
   3591           *          Format: AT+ATRDISC:<NodeID>,<EP>,<ClusterID>,<AttributeID>,
   3592           *                  <MaxNumofAttr>[,<ProfileID>]
   3593           *          Use on: All Devices
   3594           *
   3595           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3596           * @param   uint8* msg_ptr - the message pointer
   3597           *
   3598           * @return  None
   3599           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3600          void AT_Cmd_ATRDISC( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_ATRDISC:
   3601          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 43
   \   000005   74D5         MOV       A,#-0x2b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   3602            uint8 i;
   3603            uint8 status;
   3604            uint16 nodeId;
   3605            uint8 ep;
   3606            uint16 cID;
   3607            uint16 startAttrId;
   3608            uint8 numofAttr;
   3609            // uint16 profileID;
   3610            AT_CmdUnit cmdUnitArr[7];
   3611          
   3612            for ( i = 0; i < 7; i++) {
   \   000010   75..00       MOV       ?V1,#0x0
   3613              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_ATRDISC_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   E5..         MOV       A,?V1
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   740F         MOV       A,#0xf
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine65 & 0xFFFF
   3614            }
   \                     ??CrossCallReturnLabel_137:
   \   00002F   40E2         JC        ??AT_Cmd_ATRDISC_0
   3615            if (cmdUnitArr[5].symbol == '\r') {
   \   000031   7423         MOV       A,#0x23
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   640D         XRL       A,#0xd
   \   000039   700B         JNZ       ??AT_Cmd_ATRDISC_1
   3616              AT_PARSE_CMD_PATTERN_ERROR(":,,,,\r", cmdUnitArr);
   \   00003B                ; Setup parameters for call to function AT_Pattern_Check
   \   00003B   740F         MOV       A,#0xf
   \   00003D   12....       LCALL     ?XSTACK_DISP102_8
   \   000040   7A..         MOV       R2,#`?<Constant ":,,,,\\r">` & 0xff
   \   000042   7B..         MOV       R3,#(`?<Constant ":,,,,\\r">` >> 8) & 0xff
   \   000044   8009         SJMP      ??AT_Cmd_ATRDISC_2
   3617            } else {
   3618              AT_PARSE_CMD_PATTERN_ERROR(":,,,,,\r", cmdUnitArr);
   \                     ??AT_Cmd_ATRDISC_1:
   \   000046                ; Setup parameters for call to function AT_Pattern_Check
   \   000046   740F         MOV       A,#0xf
   \   000048   12....       LCALL     ?XSTACK_DISP102_8
   \   00004B   7A..         MOV       R2,#`?<Constant ":,,,,,\\r">` & 0xff
   \   00004D   7B..         MOV       R3,#(`?<Constant ":,,,,,\\r">` >> 8) & 0xff
   \                     ??AT_Cmd_ATRDISC_2:
   \   00004F   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000052   6005         JZ        ??AT_Cmd_ATRDISC_3
   \   000054                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000054   7A01         MOV       R2,#0x1
   \   000056   02....       LJMP      ??AT_Cmd_ATRDISC_4 & 0xFFFF
   3619              // profileID = AT_ChartoInt16(&cmdUnitArr[5]);
   3620            }
   3621          
   3622            nodeId = AT_ChartoInt16(&cmdUnitArr[0]);
   \                     ??AT_Cmd_ATRDISC_3:
   \   000059                ; Setup parameters for call to function AT_ChartoInt16
   \   000059   740F         MOV       A,#0xf
   \   00005B   12....       LCALL     ?XSTACK_DISP101_8
   \   00005E   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   3623            ep = AT_ChartoInt8(&cmdUnitArr[1]);
   \                     ??CrossCallReturnLabel_298:
   \   000061                ; Setup parameters for call to function AT_ChartoInt8
   \   000061   7413         MOV       A,#0x13
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000069   F5..         MOV       ?V6,A
   3624            cID = AT_ChartoInt16(&cmdUnitArr[2]);
   \   00006B                ; Setup parameters for call to function AT_ChartoInt16
   \   00006B   7417         MOV       A,#0x17
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000073   AE..         MOV       R6,?V4
   \   000075   AF..         MOV       R7,?V5
   3625            startAttrId = AT_ChartoInt16(&cmdUnitArr[3]);
   \   000077                ; Setup parameters for call to function AT_ChartoInt16
   \   000077   741B         MOV       A,#0x1b
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   12....       LCALL     ?Subroutine93 & 0xFFFF
   3626            numofAttr = AT_ChartoInt8(&cmdUnitArr[4])/16*10+AT_ChartoInt8(&cmdUnitArr[4])%16;
   \                     ??CrossCallReturnLabel_289:
   \   00007F                ; Setup parameters for call to function AT_ChartoInt8
   \   00007F   741F         MOV       A,#0x1f
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000087                ; Setup parameters for call to function AT_ChartoInt8
   \   000087   741F         MOV       A,#0x1f
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   00008F   F8           MOV       R0,A
   3627          
   3628            //build destination address
   3629            afAddrType_t dstAddr;
   3630            dstAddr.endPoint = ep;
   \   000090   740C         MOV       A,#0xc
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   E5..         MOV       A,?V6
   \   000097   F0           MOVX      @DPTR,A
   3631            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000098   740B         MOV       A,#0xb
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   7402         MOV       A,#0x2
   \   00009F   F0           MOVX      @DPTR,A
   3632            dstAddr.addr.shortAddr = nodeId;
   \   0000A0   04           INC       A
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   E5..         MOV       A,?V2
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E5..         MOV       A,?V3
   \   0000AA   12....       LCALL     ?Subroutine20 & 0xFFFF
   3633          
   3634            zclDiscoverAttrsCmd_t discCmd;
   3635            discCmd.startAttr  = startAttrId;
   \                     ??CrossCallReturnLabel_28:
   \   0000AD   12....       LCALL     ?Subroutine25 & 0xFFFF
   3636            discCmd.maxAttrIDs = numofAttr;
   \                     ??CrossCallReturnLabel_40:
   \   0000B0   740F         MOV       A,#0xf
   \   0000B2   58           ANL       A,R0
   \   0000B3   F8           MOV       R0,A
   \   0000B4   75F00A       MOV       B,#0xa
   \   0000B7   E5..         MOV       A,?V1
   \   0000B9   C4           SWAP      A
   \   0000BA   540F         ANL       A,#0xf
   \   0000BC   A4           MUL       AB
   \   0000BD   28           ADD       A,R0
   \   0000BE   C0E0         PUSH      A
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   D0E0         POP       A
   \   0000C7   F0           MOVX      @DPTR,A
   3637          
   3638            status = zcl_SendDiscoverAttrsCmd( ZCL_CONTROLLER_ENDPOINT, &dstAddr, cID,
   3639                                      &discCmd, ZCL_FRAME_CLIENT_SERVER_DIR, TRUE, bdb_getZCLFrameCounter() );
   \   0000C8                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0000C8   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   0000CB   E9           MOV       A,R1
   \   0000CC                ; Setup parameters for call to function zcl_SendDiscoverAttrsCmd
   \   0000CC   F5..         MOV       ?V1,A
   \   0000CE   78..         MOV       R0,#?V1
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D3   75..01       MOV       ?V1,#0x1
   \   0000D6   78..         MOV       R0,#?V1
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   75..00       MOV       ?V1,#0x0
   \   0000DE   78..         MOV       R0,#?V1
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E3   7403         MOV       A,#0x3
   \   0000E5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E8   88..         MOV       ?V2,R0
   \   0000EA   89..         MOV       ?V3,R1
   \   0000EC   78..         MOV       R0,#?V2
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F1   EE           MOV       A,R6
   \   0000F2   FC           MOV       R4,A
   \   0000F3   EF           MOV       A,R7
   \   0000F4   FD           MOV       R5,A
   \   0000F5   7408         MOV       A,#0x8
   \   0000F7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FA   7964         MOV       R1,#0x64
   \   0000FC   12....       LCALL     `??zcl_SendDiscoverAttrsCmd::?relay`; Banked call to: zcl_SendDiscoverAttrsCmd
   \   0000FF   7405         MOV       A,#0x5
   \   000101   12....       LCALL     ?DEALLOC_XSTACK8
   \   000104   E9           MOV       A,R1
   \   000105   F9           MOV       R1,A
   3640          
   3641            if (status != afStatus_SUCCESS) {
   \   000106   6007         JZ        ??AT_Cmd_ATRDISC_5
   3642              AT_SEND_ERROR(status);
   \   000108                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000108   7A02         MOV       R2,#0x2
   \                     ??AT_Cmd_ATRDISC_4:
   \   00010A   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   00010D   800B         SJMP      ??AT_Cmd_ATRDISC_6
   3643            } else {
   3644              AT_OK();
   \                     ??AT_Cmd_ATRDISC_5:
   \   00010F                ; Setup parameters for call to function AT_Uart0_Send
   \   00010F   7C06         MOV       R4,#0x6
   \   000111   7D00         MOV       R5,#0x0
   \   000113   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   000115   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   000117   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   3645            }
   3646          }
   \                     ??AT_Cmd_ATRDISC_6:
   \   00011A   742B         MOV       A,#0x2b
   \   00011C   80..         SJMP      ??Subroutine187_0
   3647          #endif // ZCL_DISCOVER
   3648          
   3649          #ifdef ZCL_READ
   3650          /*******************************************************************************
   3651           * @fn      AT_Cmd_ReadAttr
   3652           *
   3653           * @brief   AT+READATTR - Read attribute data
   3654           *                    AT+READATTR:<Addr>,<EP>,<SendMode>,<ClusterID>,<AttrID>,...,<AttrID>
   3655           *                            <Addr> - local/remote device's address
   3656           *                            <EP> - 8 bit hexadecimal number Endpoint
   3657           *                            <SendMode> - transmission mode
   3658           *                                          0 - unicast   1 - group addressing
   3659           *                            <ClusterID> - uint16 number represents the cluster id
   3660           *                            <AttrID> - uint16 number represents the attribute id
   3661           *
   3662           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3663           * @param   uint8* msg_ptr - the message pointer
   3664           *
   3665           * @return  None
   3666           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   740D         MOV       A,#0xd
   \   000005                REQUIRE ??Subroutine184_0
   \   000005                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3667          void AT_Cmd_ReadAttr( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_ReadAttr:
   3668          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 113
   \   000005   748F         MOV       A,#-0x71
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   3669            AT_CmdUnit cmdUnitArr[20];
   3670            uint8 i;
   3671          
   3672            uint8 parameterN = 1;
   \   000010   75..01       MOV       ?V4,#0x1
   3673            char pattern[21];
   3674            for(i = 0; i < 20; i++){
   \   000013   75..00       MOV       ?V2,#0x0
   3675              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_ReadAttr_0:
   \   000016   E5..         MOV       A,?V2
   \   000018   F5..         MOV       ?V0,A
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   7402         MOV       A,#0x2
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?S_SHL
   \   000024   7421         MOV       A,#0x21
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   00002C                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00002C   EE           MOV       A,R6
   \   00002D   FC           MOV       R4,A
   \   00002E   EF           MOV       A,R7
   \   00002F   FD           MOV       R5,A
   \   000030   A9..         MOV       R1,?V3
   \   000032   AA..         MOV       R2,?V0
   \   000034   AB..         MOV       R3,?V1
   \   000036   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000039   F5..         MOV       ?V3,A
   3676              if(cmdUnitArr[i].symbol == ',') parameterN++;
   \   00003B   85..82       MOV       DPL,?V0
   \   00003E   85..83       MOV       DPH,?V1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   642C         XRL       A,#0x2c
   \   000044   7002         JNZ       ??AT_Cmd_ReadAttr_1
   \   000046   05..         INC       ?V4
   3677            }
   \                     ??AT_Cmd_ReadAttr_1:
   \   000048   05..         INC       ?V2
   \   00004A   E5..         MOV       A,?V2
   \   00004C   C3           CLR       C
   \   00004D   9414         SUBB      A,#0x14
   \   00004F   40C5         JC        ??AT_Cmd_ReadAttr_0
   3678          
   3679            #if AT_CMD_PATTERN_CHECK
   3680            //built check pattern
   3681            pattern[0] = ':';
   \   000051   740C         MOV       A,#0xc
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   743A         MOV       A,#0x3a
   \   000058   F0           MOVX      @DPTR,A
   3682            for(i = 1; i < 5; i++) pattern[i] = ',';
   \   000059   740D         MOV       A,#0xd
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   742C         MOV       A,#0x2c
   \   000060   7804         MOV       R0,#0x4
   \                     ??AT_Cmd_ReadAttr_2:
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   D8FC         DJNZ      R0,??AT_Cmd_ReadAttr_2
   3683            for(i = 5; i < parameterN; i++) pattern[i] = ',';
   \   000066   75..05       MOV       ?V2,#0x5
   \   000069   74FB         MOV       A,#-0x5
   \   00006B   25..         ADD       A,?V4
   \   00006D   F8           MOV       R0,A
   \   00006E   E5..         MOV       A,?V4
   \   000070   C3           CLR       C
   \   000071   9406         SUBB      A,#0x6
   \   000073   4015         JC        ??AT_Cmd_ReadAttr_3
   \   000075   04           INC       A
   \   000076   FA           MOV       R2,A
   \   000077   7B00         MOV       R3,#0x0
   \   000079   792C         MOV       R1,#0x2c
   \   00007B   7411         MOV       A,#0x11
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \                     ??AT_Cmd_ReadAttr_4:
   \   000080   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000083   70FB         JNZ       ??AT_Cmd_ReadAttr_4
   \   000085   7405         MOV       A,#0x5
   \   000087   28           ADD       A,R0
   \   000088   F5..         MOV       ?V2,A
   3684            pattern[i] = '\r';
   \                     ??AT_Cmd_ReadAttr_3:
   \   00008A   A8..         MOV       R0,?V2
   \   00008C   740C         MOV       A,#0xc
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   12....       LCALL     ?Subroutine24 & 0xFFFF
   3685            pattern[i+1] = '\0';
   3686            #endif
   3687          
   3688            //check pattern
   3689            AT_PARSE_CMD_PATTERN_ERROR(pattern,cmdUnitArr);
   \                     ??CrossCallReturnLabel_457:
   \   000094                ; Setup parameters for call to function AT_Pattern_Check
   \   000094   7421         MOV       A,#0x21
   \   000096   12....       LCALL     ?XSTACK_DISP102_8
   \   000099   740C         MOV       A,#0xc
   \   00009B   12....       LCALL     ?XSTACK_DISP101_8
   \   00009E   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   0000A1   6005         JZ        ??AT_Cmd_ReadAttr_5
   \   0000A3                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000A3   7A01         MOV       R2,#0x1
   \   0000A5   02....       LJMP      ??AT_Cmd_ReadAttr_6 & 0xFFFF
   3690          
   3691            uint8 endpoint = AT_ChartoInt8(&cmdUnitArr[1]);
   \                     ??AT_Cmd_ReadAttr_5:
   \   0000A8                ; Setup parameters for call to function AT_ChartoInt8
   \   0000A8   7425         MOV       A,#0x25
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ?Subroutine102 & 0xFFFF
   3692            uint8 sendmode = AT_ChartoInt8(&cmdUnitArr[2]);
   \                     ??CrossCallReturnLabel_377:
   \   0000B0                ; Setup parameters for call to function AT_ChartoInt8
   \   0000B0   7429         MOV       A,#0x29
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   0000B8   F8           MOV       R0,A
   3693          
   3694            // build destination address
   3695            afAddrType_t dstAddr;
   3696            dstAddr.endPoint = endpoint;
   \   0000B9   7409         MOV       A,#0x9
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   EE           MOV       A,R6
   \   0000BF   F0           MOVX      @DPTR,A
   3697            dstAddr.addrMode = (sendmode == 0 ? (afAddrMode_t)Addr16Bit : (afAddrMode_t) AddrGroup);
   \   0000C0   E9           MOV       A,R1
   \   0000C1   7004         JNZ       ??AT_Cmd_ReadAttr_7
   \   0000C3   7402         MOV       A,#0x2
   \   0000C5   8002         SJMP      ??AT_Cmd_ReadAttr_8
   \                     ??AT_Cmd_ReadAttr_7:
   \   0000C7   7401         MOV       A,#0x1
   \                     ??AT_Cmd_ReadAttr_8:
   \   0000C9   C0E0         PUSH      A
   \   0000CB   7408         MOV       A,#0x8
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   D0E0         POP       A
   \   0000D2   F0           MOVX      @DPTR,A
   3698            if (cmdUnitArr[0].unitLen == 0) {
   \   0000D3   7422         MOV       A,#0x22
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   7005         JNZ       ??AT_Cmd_ReadAttr_9
   3699              dstAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0000DB                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000DB   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000DE   8008         SJMP      ??AT_Cmd_ReadAttr_10
   3700            } else {
   3701              dstAddr.addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \                     ??AT_Cmd_ReadAttr_9:
   \   0000E0                ; Setup parameters for call to function AT_ChartoInt16
   \   0000E0   7421         MOV       A,#0x21
   \   0000E2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E5   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   3702            }
   \                     ??AT_Cmd_ReadAttr_10:
   \   0000E8   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   3703          
   3704            // build ZCL readCmd
   3705            zclReadCmd_t* readCmd = (zclReadCmd_t*) osal_mem_alloc(sizeof(int)+2*(parameterN-4));
   \                     ??CrossCallReturnLabel_502:
   \   0000EB   E5..         MOV       A,?V4
   \   0000ED   F5..         MOV       ?V0,A
   \   0000EF                ; Setup parameters for call to function osal_mem_alloc
   \   0000EF   25E0         ADD       A,0xE0 /* A   */
   \   0000F1   F8           MOV       R0,A
   \   0000F2   E4           CLR       A
   \   0000F3   33           RLC       A
   \   0000F4   F9           MOV       R1,A
   \   0000F5   E8           MOV       A,R0
   \   0000F6   24FA         ADD       A,#-0x6
   \   0000F8   FA           MOV       R2,A
   \   0000F9   E9           MOV       A,R1
   \   0000FA   34FF         ADDC      A,#-0x1
   \   0000FC   FB           MOV       R3,A
   \   0000FD   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000100   8A..         MOV       ?V6,R2
   \   000102   8B..         MOV       ?V7,R3
   3706            readCmd->numAttr = parameterN-4;
   \   000104   74FC         MOV       A,#-0x4
   \   000106   25..         ADD       A,?V4
   \   000108   8A82         MOV       DPL,R2
   \   00010A   8B83         MOV       DPH,R3
   \   00010C   F0           MOVX      @DPTR,A
   3707            for(i = 0; i < parameterN-4; i++)
   \   00010D   75..00       MOV       ?V2,#0x0
   \   000110   8031         SJMP      ??CrossCallReturnLabel_374
   3708                readCmd->attrID[i] = AT_ChartoInt16(&cmdUnitArr[4+i]);
   \                     ??AT_Cmd_ReadAttr_11:
   \   000112                ; Setup parameters for call to function AT_ChartoInt16
   \   000112   8E..         MOV       ?V4,R6
   \   000114   75..00       MOV       ?V5,#0x0
   \   000117   7402         MOV       A,#0x2
   \   000119   78..         MOV       R0,#?V4
   \   00011B   12....       LCALL     ?S_SHL
   \   00011E   7421         MOV       A,#0x21
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000126   2410         ADD       A,#0x10
   \   000128   FA           MOV       R2,A
   \   000129   E4           CLR       A
   \   00012A   39           ADDC      A,R1
   \   00012B   FB           MOV       R3,A
   \   00012C   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   00012F   EE           MOV       A,R6
   \   000130   2E           ADD       A,R6
   \   000131   FE           MOV       R6,A
   \   000132   E4           CLR       A
   \   000133   33           RLC       A
   \   000134   FF           MOV       R7,A
   \   000135   E5..         MOV       A,?V6
   \   000137   2E           ADD       A,R6
   \   000138   F582         MOV       DPL,A
   \   00013A   E5..         MOV       A,?V7
   \   00013C   3F           ADDC      A,R7
   \   00013D   F583         MOV       DPH,A
   \   00013F   A3           INC       DPTR
   \   000140   12....       LCALL     ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000143   AE..         MOV       R6,?V2
   \   000145   E5..         MOV       A,?V0
   \   000147   24FC         ADD       A,#-0x4
   \   000149   F8           MOV       R0,A
   \   00014A   E4           CLR       A
   \   00014B   34FF         ADDC      A,#-0x1
   \   00014D   F9           MOV       R1,A
   \   00014E   C3           CLR       C
   \   00014F   EE           MOV       A,R6
   \   000150   98           SUBB      A,R0
   \   000151   E4           CLR       A
   \   000152   99           SUBB      A,R1
   \   000153   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000155   65D0         XRL       A,PSW
   \   000157   33           RLC       A
   \   000158   40B8         JC        ??AT_Cmd_ReadAttr_11
   3709          
   3710            //send zcl read
   3711            uint8 status;
   3712            status = zcl_SendRead( ZCL_CONTROLLER_ENDPOINT, &dstAddr,
   3713                                         AT_ChartoInt16(&cmdUnitArr[3]), readCmd,
   3714                                         ZCL_FRAME_CLIENT_SERVER_DIR, TRUE, bdb_getZCLFrameCounter() );
   \   00015A                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   00015A   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   00015D   E9           MOV       A,R1
   \   00015E   FE           MOV       R6,A
   \   00015F                ; Setup parameters for call to function AT_ChartoInt16
   \   00015F   742D         MOV       A,#0x2d
   \   000161   12....       LCALL     ?XSTACK_DISP0_8
   \   000164   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00016A   75..01       MOV       ?V0,#0x1
   \   00016D   78..         MOV       R0,#?V0
   \   00016F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000172   75..00       MOV       ?V0,#0x0
   \   000175   78..         MOV       R0,#?V0
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017A   78..         MOV       R0,#?V6
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017F   7405         MOV       A,#0x5
   \   000181   12....       LCALL     ?XSTACK_DISP101_8
   \   000184   7964         MOV       R1,#0x64
   \   000186   12....       LCALL     `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   000189   7405         MOV       A,#0x5
   \   00018B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018E   12....       LCALL     ?Subroutine115 & 0xFFFF
   3715            osal_mem_free(readCmd);
   3716            if(status!=afStatus_SUCCESS)
   \                     ??CrossCallReturnLabel_367:
   \   000191   6008         JZ        ??AT_Cmd_ReadAttr_12
   3717              AT_SEND_ERROR(status);
   \   000193                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000193   7A02         MOV       R2,#0x2
   \   000195   F9           MOV       R1,A
   \                     ??AT_Cmd_ReadAttr_6:
   \   000196   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000199   800B         SJMP      ??AT_Cmd_ReadAttr_13
   3718            else
   3719              AT_OK();
   \                     ??AT_Cmd_ReadAttr_12:
   \   00019B                ; Setup parameters for call to function AT_Uart0_Send
   \   00019B   7C06         MOV       R4,#0x6
   \   00019D   7D00         MOV       R5,#0x0
   \   00019F   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0001A1   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0001A3   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   3720          }
   \                     ??AT_Cmd_ReadAttr_13:
   \   0001A6                REQUIRE ?Subroutine9
   \   0001A6                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7471         MOV       A,#0x71
   \   000002   02....       LJMP      ??Subroutine187_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   E582         MOV       A,DPL
   \   000002   25..         ADD       A,?V4
   \   000004   F8           MOV       R0,A
   \   000005   E583         MOV       A,DPH
   \   000007   35..         ADDC      A,?V5
   \   000009   F9           MOV       R1,A
   \   00000A   E8           MOV       A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003                ; Setup parameters for call to function zcl_SendRead
   \   000003                ; Setup parameters for call to function zcl_SendWriteRequest
   \   000003   EE           MOV       A,R6
   \   000004   F5..         MOV       ?V0,A
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E582         MOV       A,DPL
   \   000002   25..         ADD       A,?V0
   \   000004   F5..         MOV       ?V0,A
   \   000006   E583         MOV       A,DPH
   \   000008   35..         ADDC      A,?V1
   \   00000A   F5..         MOV       ?V1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E9           MOV       A,R1
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EA           MOV       A,R2
   \   000004   24FF         ADD       A,#-0x1
   \   000006   1A           DEC       R2
   \   000007   EB           MOV       A,R3
   \   000008   34FF         ADDC      A,#-0x1
   \   00000A   FB           MOV       R3,A
   \   00000B   4A           ORL       A,R2
   \   00000C   22           RET
   3721          #endif // ZCL_READ
   3722          
   3723          #ifdef ZCL_WRITE
   3724          /*******************************************************************************
   3725           * @fn      AT_Cmd_WriteAttr
   3726           *
   3727           * @brief   AT+WRITEATTR - Write attribute data
   3728           *                    AT+WRITEATTR:<Addr>,[<EP>],<S/C>,[Mcode],<ClusterID>,
   3729           *                     <AttrID>,<DataType>,<Data>,...,<AttrID>,<DataType>,<Data>
   3730           *                            <Addr> - local/remote device's address
   3731           *                            <EP> - 8 bit hexadecimal number Endpoint
   3732           *                            <ClusterID> - uint16 number represents the cluster id
   3733           *                            <AttrID> - uint16 number represents the attribute id
   3734           *                            <DataType> - 8 bit hexadecimal number that represents the type of the
   3735           *                                        data accepted by this Attribute (please check HA specification)
   3736           *                            <Data> - If attribute value has an integer type this field shall contain
   3737           *                                        hexadecimal representation in big-endian format. If attribute
   3738           *                                        value has a string type this field contains sequence of characters.
   3739           *                    Note: This command can be used to write multiple attributes (up to 5 in a cluster)
   3740           *
   3741           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3742           * @param   uint8* msg_ptr - the message pointer
   3743           *
   3744           * @return  None
   3745           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine182_0
   \   000006                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3746          void AT_Cmd_WriteAttr( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_WriteAttr:
   3747          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 113
   \   000005   748F         MOV       A,#-0x71
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   3748            AT_CmdUnit cmdUnitArr[20];
   3749            uint8 i;
   3750            uint16 address;
   3751            uint8 dataType;
   3752            uint8 parameterN = 1;
   \   000010   75..01       MOV       ?V4,#0x1
   3753            char pattern[21];
   3754            for(i = 0; i < 20; i++){
   \   000013   7E00         MOV       R6,#0x0
   3755              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_WriteAttr_0:
   \   000015   EE           MOV       A,R6
   \   000016   F5..         MOV       ?V0,A
   \   000018   75..00       MOV       ?V1,#0x0
   \   00001B   7402         MOV       A,#0x2
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?S_SHL
   \   000022   7421         MOV       A,#0x21
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00002A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00002A   AC..         MOV       R4,?V2
   \   00002C   AD..         MOV       R5,?V3
   \   00002E   EF           MOV       A,R7
   \   00002F   F9           MOV       R1,A
   \   000030   AA..         MOV       R2,?V0
   \   000032   AB..         MOV       R3,?V1
   \   000034   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000037   FF           MOV       R7,A
   3756              if(cmdUnitArr[i].symbol == ',') parameterN++;
   \   000038   85..82       MOV       DPL,?V0
   \   00003B   85..83       MOV       DPH,?V1
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   642C         XRL       A,#0x2c
   \   000041   7002         JNZ       ??AT_Cmd_WriteAttr_1
   \   000043   05..         INC       ?V4
   3757            }
   \                     ??AT_Cmd_WriteAttr_1:
   \   000045   0E           INC       R6
   \   000046   EE           MOV       A,R6
   \   000047   C3           CLR       C
   \   000048   9414         SUBB      A,#0x14
   \   00004A   40C9         JC        ??AT_Cmd_WriteAttr_0
   3758          
   3759            #if AT_CMD_PATTERN_CHECK
   3760            //built check pattern
   3761            pattern[0] = ':';
   \   00004C   740C         MOV       A,#0xc
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   743A         MOV       A,#0x3a
   \   000053   F0           MOVX      @DPTR,A
   3762            for(i = 1; i < parameterN; i++) pattern[i] = ',';
   \   000054   7E01         MOV       R6,#0x1
   \   000056   74FF         MOV       A,#-0x1
   \   000058   25..         ADD       A,?V4
   \   00005A   F8           MOV       R0,A
   \   00005B   04           INC       A
   \   00005C   C3           CLR       C
   \   00005D   9402         SUBB      A,#0x2
   \   00005F   4013         JC        ??AT_Cmd_WriteAttr_2
   \   000061   04           INC       A
   \   000062   FA           MOV       R2,A
   \   000063   7B00         MOV       R3,#0x0
   \   000065   792C         MOV       R1,#0x2c
   \   000067   740D         MOV       A,#0xd
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \                     ??AT_Cmd_WriteAttr_3:
   \   00006C   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00006F   70FB         JNZ       ??AT_Cmd_WriteAttr_3
   \   000071   EE           MOV       A,R6
   \   000072   28           ADD       A,R0
   \   000073   FE           MOV       R6,A
   3763            pattern[i] = '\r';
   \                     ??AT_Cmd_WriteAttr_2:
   \   000074   EE           MOV       A,R6
   \   000075   F8           MOV       R0,A
   \   000076   740C         MOV       A,#0xc
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   12....       LCALL     ?Subroutine24 & 0xFFFF
   3764            pattern[i+1] = '\0';
   3765            if((parameterN-5)%3 != 0) {
   \                     ??CrossCallReturnLabel_458:
   \   00007E   E5..         MOV       A,?V4
   \   000080   24FB         ADD       A,#-0x5
   \   000082   F5..         MOV       ?V0,A
   \   000084   E4           CLR       A
   \   000085   34FF         ADDC      A,#-0x1
   \   000087   F5..         MOV       ?V1,A
   \   000089   A8..         MOV       R0,?V0
   \   00008B   F9           MOV       R1,A
   \   00008C   7A03         MOV       R2,#0x3
   \   00008E   7B00         MOV       R3,#0x0
   \   000090   12....       LCALL     ?S_DIV_MOD
   \   000093   EA           MOV       A,R2
   \   000094   4B           ORL       A,R3
   \   000095   6007         JZ        ??AT_Cmd_WriteAttr_4
   3766              AT_ERROR(AT_LACK_PARA);
   \   000097                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000097   7A01         MOV       R2,#0x1
   \   000099   7924         MOV       R1,#0x24
   \   00009B   02....       LJMP      ??AT_Cmd_WriteAttr_5 & 0xFFFF
   3767              return;
   3768            }
   3769            #endif
   3770          
   3771            //check pattern
   3772            AT_PARSE_CMD_PATTERN_ERROR( pattern, cmdUnitArr );
   \                     ??AT_Cmd_WriteAttr_4:
   \   00009E                ; Setup parameters for call to function AT_Pattern_Check
   \   00009E   7421         MOV       A,#0x21
   \   0000A0   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A3   740C         MOV       A,#0xc
   \   0000A5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A8   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   0000AB   6005         JZ        ??AT_Cmd_WriteAttr_6
   \   0000AD                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000AD   7A01         MOV       R2,#0x1
   \   0000AF   02....       LJMP      ??AT_Cmd_WriteAttr_5 & 0xFFFF
   3773          
   3774            if(cmdUnitArr[0].unitLen==0){
   \                     ??AT_Cmd_WriteAttr_6:
   \   0000B2   7422         MOV       A,#0x22
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   7005         JNZ       ??AT_Cmd_WriteAttr_7
   3775              address = NLME_GetShortAddr();
   \   0000BA                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000BA   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000BD   8008         SJMP      ??AT_Cmd_WriteAttr_8
   3776            }else{
   3777              address = AT_ChartoInt16(&cmdUnitArr[0]);
   \                     ??AT_Cmd_WriteAttr_7:
   \   0000BF                ; Setup parameters for call to function AT_ChartoInt16
   \   0000BF   7421         MOV       A,#0x21
   \   0000C1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C4   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \                     ??AT_Cmd_WriteAttr_8:
   \   0000C7   8A..         MOV       ?V2,R2
   \   0000C9   8B..         MOV       ?V3,R3
   3778            }
   3779            // build destination address
   3780            afAddrType_t dstAddr;
   3781            dstAddr.addr.shortAddr = address;
   \   0000CB   85..82       MOV       DPL,?XSP + 0
   \   0000CE   85..83       MOV       DPH,?XSP + 1
   \   0000D1   E5..         MOV       A,?V2
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   E5..         MOV       A,?V3
   \   0000D7   F0           MOVX      @DPTR,A
   3782            if (cmdUnitArr[1].unitLen != 0) {
   \   0000D8   7426         MOV       A,#0x26
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   6049         JZ        ??AT_Cmd_WriteAttr_9
   3783              dstAddr.endPoint = AT_ChartoInt8(&cmdUnitArr[1]);
   \   0000E0                ; Setup parameters for call to function AT_ChartoInt8
   \   0000E0   7425         MOV       A,#0x25
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   AA82         MOV       R2,DPL
   \   0000E7   AB83         MOV       R3,DPH
   \   0000E9   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   0000EC   7409         MOV       A,#0x9
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   E9           MOV       A,R1
   \   0000F2   F0           MOVX      @DPTR,A
   3784              if ((address == NWK_BROADCAST_SHORTADDR_DEVALL)
   3785                    || (address == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   3786                    || (address == NWK_BROADCAST_SHORTADDR_DEVRXON)) {
   \   0000F3   74FF         MOV       A,#-0x1
   \   0000F5   65..         XRL       A,?V2
   \   0000F7   7004         JNZ       ??AT_Cmd_WriteAttr_10
   \   0000F9   74FF         MOV       A,#-0x1
   \   0000FB   65..         XRL       A,?V3
   \                     ??AT_Cmd_WriteAttr_10:
   \   0000FD   6018         JZ        ??AT_Cmd_WriteAttr_11
   \   0000FF   74FC         MOV       A,#-0x4
   \   000101   65..         XRL       A,?V2
   \   000103   7004         JNZ       ??AT_Cmd_WriteAttr_12
   \   000105   74FF         MOV       A,#-0x1
   \   000107   65..         XRL       A,?V3
   \                     ??AT_Cmd_WriteAttr_12:
   \   000109   600C         JZ        ??AT_Cmd_WriteAttr_11
   \   00010B   74FD         MOV       A,#-0x3
   \   00010D   65..         XRL       A,?V2
   \   00010F   7004         JNZ       ??AT_Cmd_WriteAttr_13
   \   000111   74FF         MOV       A,#-0x1
   \   000113   65..         XRL       A,?V3
   \                     ??AT_Cmd_WriteAttr_13:
   \   000115   7009         JNZ       ??AT_Cmd_WriteAttr_14
   3787                  dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \                     ??AT_Cmd_WriteAttr_11:
   \   000117   7408         MOV       A,#0x8
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   740F         MOV       A,#0xf
   \   00011E   8018         SJMP      ??AT_Cmd_WriteAttr_15
   3788              } else {
   3789                  dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??AT_Cmd_WriteAttr_14:
   \   000120   7408         MOV       A,#0x8
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   7402         MOV       A,#0x2
   \   000127   800F         SJMP      ??AT_Cmd_WriteAttr_15
   3790              }
   3791            } else {
   3792              dstAddr.endPoint = ZCL_CONTROLLER_ENDPOINT;
   \                     ??AT_Cmd_WriteAttr_9:
   \   000129   7409         MOV       A,#0x9
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   7464         MOV       A,#0x64
   \   000130   F0           MOVX      @DPTR,A
   3793              dstAddr.addrMode = (afAddrMode_t)AddrGroup;
   \   000131   7408         MOV       A,#0x8
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   7401         MOV       A,#0x1
   \                     ??AT_Cmd_WriteAttr_15:
   \   000138   F0           MOVX      @DPTR,A
   3794            }
   3795          
   3796            uint8 numAttr = (parameterN-5)/3;
   \   000139   A8..         MOV       R0,?V0
   \   00013B   A9..         MOV       R1,?V1
   \   00013D   7A03         MOV       R2,#0x3
   \   00013F   7B00         MOV       R3,#0x0
   \   000141   12....       LCALL     ?S_DIV_MOD
   \   000144   E8           MOV       A,R0
   \   000145   F5..         MOV       ?V6,A
   3797          
   3798            //build ZCL writeCmd
   3799            zclWriteCmd_t* writeCmd;
   3800            writeCmd = (zclWriteCmd_t*)osal_mem_alloc( sizeof(zclWriteCmd_t) + sizeof(zclWriteRec_t)*numAttr );
   \   000147                ; Setup parameters for call to function osal_mem_alloc
   \   000147   75F005       MOV       B,#0x5
   \   00014A   A4           MUL       AB
   \   00014B   A9F0         MOV       R1,B
   \   00014D   2401         ADD       A,#0x1
   \   00014F   FA           MOV       R2,A
   \   000150   E4           CLR       A
   \   000151   39           ADDC      A,R1
   \   000152   FB           MOV       R3,A
   \   000153   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000156   8A..         MOV       ?V8,R2
   \   000158   8B..         MOV       ?V9,R3
   3801            writeCmd->numAttr = numAttr;
   \   00015A   8A82         MOV       DPL,R2
   \   00015C   8B83         MOV       DPH,R3
   \   00015E   E5..         MOV       A,?V6
   \   000160   F0           MOVX      @DPTR,A
   3802            for ( i = 0; i < numAttr; i++) {
   \   000161   7E00         MOV       R6,#0x0
   \   000163   801B         SJMP      ??AT_Cmd_WriteAttr_16
   3803              writeCmd->attrList[i].attrID = AT_ChartoInt16(&cmdUnitArr[i*3+5]);
   3804              dataType = AT_ChartoInt16(&cmdUnitArr[i*3+6]);
   3805              writeCmd->attrList[i].dataType = dataType;
   3806              if(dataType == ZCL_DATATYPE_CHAR_STR) {
   3807                cmdUnitArr[i*3+7].unit--;
   3808                *(cmdUnitArr[i*3+7].unit) = cmdUnitArr[i*3+7].unitLen;
   3809                writeCmd->attrList[i].attrData = cmdUnitArr[i*3+7].unit;
   3810              } else if (dataType == ZCL_DATATYPE_DATA16||
   3811                        dataType == ZCL_DATATYPE_UINT16||
   3812                        dataType == ZCL_DATATYPE_INT16){
   3813                 *(uint16*)cmdUnitArr[i*3+7].unit = AT_ChartoInt16(&cmdUnitArr[i*3+7]);
   3814                 writeCmd->attrList[i].attrData = cmdUnitArr[i*3+7].unit;
   3815              } else {
   3816                 *(uint8*)cmdUnitArr[i*3+7].unit = AT_ChartoInt8(&cmdUnitArr[i*3+7]);
   \                     ??AT_Cmd_WriteAttr_17:
   \   000165                ; Setup parameters for call to function AT_ChartoInt8
   \   000165   12....       LCALL     `??AT_ChartoInt8::?relay`; Banked call to: AT_ChartoInt8
   \   000168   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   00016B   E9           MOV       A,R1
   \                     ??AT_Cmd_WriteAttr_18:
   \   00016C   F0           MOVX      @DPTR,A
   3817                 writeCmd->attrList[i].attrData = cmdUnitArr[i*3+7].unit;
   \   00016D   85..82       MOV       DPL,?V4
   \   000170   85..83       MOV       DPH,?V5
   \   000173   12....       LCALL     ?Subroutine46 & 0xFFFF
   3818              }
   \                     ??CrossCallReturnLabel_100:
   \   000176   85..82       MOV       DPL,?V2
   \   000179   85..83       MOV       DPH,?V3
   \   00017C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00017F   0E           INC       R6
   \                     ??AT_Cmd_WriteAttr_16:
   \   000180   EE           MOV       A,R6
   \   000181   C3           CLR       C
   \   000182   95..         SUBB      A,?V6
   \   000184   4003         JC        $+5
   \   000186   02....       LJMP      ??AT_Cmd_WriteAttr_19 & 0xFFFF
   \   000189   EE           MOV       A,R6
   \   00018A   F5..         MOV       ?V4,A
   \   00018C   75F003       MOV       B,#0x3
   \   00018F   A4           MUL       AB
   \   000190   F5..         MOV       ?V0,A
   \   000192   E5F0         MOV       A,B
   \   000194   F5..         MOV       ?V1,A
   \   000196   7402         MOV       A,#0x2
   \   000198   78..         MOV       R0,#?V0
   \   00019A   12....       LCALL     ?S_SHL
   \   00019D   7421         MOV       A,#0x21
   \   00019F   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A2   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0001A5   E5..         MOV       A,?V4
   \   0001A7   75F005       MOV       B,#0x5
   \   0001AA   A4           MUL       AB
   \   0001AB   F8           MOV       R0,A
   \   0001AC   A9F0         MOV       R1,B
   \   0001AE   E5..         MOV       A,?V8
   \   0001B0   28           ADD       A,R0
   \   0001B1   F5..         MOV       ?V2,A
   \   0001B3   E5..         MOV       A,?V9
   \   0001B5   39           ADDC      A,R1
   \   0001B6   F5..         MOV       ?V3,A
   \   0001B8                ; Setup parameters for call to function AT_ChartoInt16
   \   0001B8   E5..         MOV       A,?V0
   \   0001BA   2414         ADD       A,#0x14
   \   0001BC   FA           MOV       R2,A
   \   0001BD   E4           CLR       A
   \   0001BE   35..         ADDC      A,?V1
   \   0001C0   FB           MOV       R3,A
   \   0001C1   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   0001C4   85..82       MOV       DPL,?V2
   \   0001C7   85..83       MOV       DPH,?V3
   \   0001CA   A3           INC       DPTR
   \   0001CB   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   0001CE                ; Setup parameters for call to function AT_ChartoInt16
   \   0001CE   E5..         MOV       A,?V4
   \   0001D0   75F00C       MOV       B,#0xc
   \   0001D3   A4           MUL       AB
   \   0001D4   F5..         MOV       ?V4,A
   \   0001D6   E5F0         MOV       A,B
   \   0001D8   F5..         MOV       ?V5,A
   \   0001DA   7421         MOV       A,#0x21
   \   0001DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DF   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0001E2   2418         ADD       A,#0x18
   \   0001E4   FA           MOV       R2,A
   \   0001E5   E4           CLR       A
   \   0001E6   39           ADDC      A,R1
   \   0001E7   FB           MOV       R3,A
   \   0001E8   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   0001EB   EA           MOV       A,R2
   \   0001EC   F8           MOV       R0,A
   \   0001ED   85..82       MOV       DPL,?V2
   \   0001F0   85..83       MOV       DPH,?V3
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   F0           MOVX      @DPTR,A
   \   0001F7   E5..         MOV       A,?V0
   \   0001F9   241E         ADD       A,#0x1e
   \   0001FB   F5..         MOV       ?V4,A
   \   0001FD   E4           CLR       A
   \   0001FE   35..         ADDC      A,?V1
   \   000200   F5..         MOV       ?V5,A
   \   000202   E5..         MOV       A,?V2
   \   000204   2404         ADD       A,#0x4
   \   000206   F5..         MOV       ?V2,A
   \   000208   5002         JNC       ??AT_Cmd_WriteAttr_20
   \   00020A   05..         INC       ?V3
   \                     ??AT_Cmd_WriteAttr_20:
   \   00020C   7442         MOV       A,#0x42
   \   00020E   68           XRL       A,R0
   \   00020F   702E         JNZ       ??AT_Cmd_WriteAttr_21
   \   000211   85..82       MOV       DPL,?V4
   \   000214   85..83       MOV       DPH,?V5
   \   000217   E0           MOVX      A,@DPTR
   \   000218   24FF         ADD       A,#-0x1
   \   00021A   F8           MOV       R0,A
   \   00021B   A3           INC       DPTR
   \   00021C   E0           MOVX      A,@DPTR
   \   00021D   34FF         ADDC      A,#-0x1
   \   00021F   F9           MOV       R1,A
   \   000220   85..82       MOV       DPL,?V4
   \   000223   85..83       MOV       DPH,?V5
   \   000226   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000229   E5..         MOV       A,?V0
   \   00022B   241D         ADD       A,#0x1d
   \   00022D   F582         MOV       DPL,A
   \   00022F   E4           CLR       A
   \   000230   35..         ADDC      A,?V1
   \   000232   F583         MOV       DPH,A
   \   000234   E0           MOVX      A,@DPTR
   \   000235   C0E0         PUSH      A
   \   000237   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00023A   D0E0         POP       A
   \   00023C   02....       LJMP      ??AT_Cmd_WriteAttr_18 & 0xFFFF
   \                     ??AT_Cmd_WriteAttr_21:
   \   00023F   E5..         MOV       A,?V0
   \   000241   241C         ADD       A,#0x1c
   \   000243   FA           MOV       R2,A
   \   000244   E4           CLR       A
   \   000245   35..         ADDC      A,?V1
   \   000247   FB           MOV       R3,A
   \   000248   7409         MOV       A,#0x9
   \   00024A   68           XRL       A,R0
   \   00024B   600D         JZ        ??AT_Cmd_WriteAttr_22
   \   00024D   7421         MOV       A,#0x21
   \   00024F   68           XRL       A,R0
   \   000250   6008         JZ        ??AT_Cmd_WriteAttr_22
   \   000252   7429         MOV       A,#0x29
   \   000254   68           XRL       A,R0
   \   000255   6003         JZ        $+5
   \   000257   02....       LJMP      ??AT_Cmd_WriteAttr_17 & 0xFFFF
   \                     ??AT_Cmd_WriteAttr_22:
   \   00025A                ; Setup parameters for call to function AT_ChartoInt16
   \   00025A   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \   00025D   12....       LCALL     ?Subroutine39 & 0xFFFF
   3819            }
   \                     ??CrossCallReturnLabel_431:
   \   000260   EA           MOV       A,R2
   \   000261   F0           MOVX      @DPTR,A
   \   000262   A3           INC       DPTR
   \   000263   EB           MOV       A,R3
   \   000264   02....       LJMP      ??AT_Cmd_WriteAttr_18 & 0xFFFF
   3820          
   3821            //send zcl write
   3822            uint8 status;
   3823            status = zcl_SendWrite( ZCL_CONTROLLER_ENDPOINT, &dstAddr,
   3824                                         AT_ChartoInt16(&cmdUnitArr[4]), writeCmd,
   3825                                         ZCL_FRAME_CLIENT_SERVER_DIR, TRUE, bdb_getZCLFrameCounter() );
   \                     ??AT_Cmd_WriteAttr_19:
   \   000267                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000267   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   00026A   E9           MOV       A,R1
   \   00026B   FE           MOV       R6,A
   \   00026C                ; Setup parameters for call to function AT_ChartoInt16
   \   00026C   7431         MOV       A,#0x31
   \   00026E   12....       LCALL     ?XSTACK_DISP0_8
   \   000271   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000274   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000277   75..01       MOV       ?V0,#0x1
   \   00027A   78..         MOV       R0,#?V0
   \   00027C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00027F   75..00       MOV       ?V0,#0x0
   \   000282   78..         MOV       R0,#?V0
   \   000284   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000287   75..02       MOV       ?V0,#0x2
   \   00028A   78..         MOV       R0,#?V0
   \   00028C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00028F   78..         MOV       R0,#?V8
   \   000291   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000294   7406         MOV       A,#0x6
   \   000296   12....       LCALL     ?XSTACK_DISP101_8
   \   000299   7964         MOV       R1,#0x64
   \   00029B   12....       LCALL     `??zcl_SendWriteRequest::?relay`; Banked call to: zcl_SendWriteRequest
   \   00029E   7406         MOV       A,#0x6
   \   0002A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A3   E9           MOV       A,R1
   \   0002A4   FE           MOV       R6,A
   3826            osal_mem_free ( writeCmd );
   \   0002A5                ; Setup parameters for call to function osal_mem_free
   \   0002A5   AA..         MOV       R2,?V8
   \   0002A7   AB..         MOV       R3,?V9
   \   0002A9   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   3827            if(status!=afStatus_SUCCESS) AT_SEND_ERROR(status);
   \                     ??CrossCallReturnLabel_371:
   \   0002AC   6008         JZ        ??AT_Cmd_WriteAttr_23
   \   0002AE                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0002AE   7A02         MOV       R2,#0x2
   \   0002B0   F9           MOV       R1,A
   \                     ??AT_Cmd_WriteAttr_5:
   \   0002B1   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   0002B4   800B         SJMP      ??AT_Cmd_WriteAttr_24
   3828            else AT_OK();
   \                     ??AT_Cmd_WriteAttr_23:
   \   0002B6                ; Setup parameters for call to function AT_Uart0_Send
   \   0002B6   7C06         MOV       R4,#0x6
   \   0002B8   7D00         MOV       R5,#0x0
   \   0002BA   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0002BC   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0002BE   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   3829          }
   \                     ??AT_Cmd_WriteAttr_24:
   \   0002C1   02....       LJMP      ?Subroutine9 & 0xFFFF
   3830          #endif // ZCL_WRITE
   3831          
   3832          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3833          /*******************************************************************************
   3834           * @fn      AT_Cmd_READRCFG
   3835           *
   3836           * @brief   +READRCFG - Read Reportiong Configuration From Remote Node
   3837           *          Format: AT+READRCFG:<Address>,[<EP>],<ClusterID>,
   3838           *                  <Direction1>,<AttrID1>,-,<Direction10>,<AttrID10>
   3839           *          Use on: All Devices
   3840           *
   3841           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3842           * @param   uint8* msg_ptr - the message pointer
   3843           *
   3844           * @return  None
   3845           ******************************************************************************/
   3846          void AT_Cmd_READRCFG( uint8 cmd_ptr, uint8* msg_ptr )
   3847          {
   3848            AT_CmdUnit cmdUnitArr[23];
   3849            uint8 i;
   3850            uint8 status;
   3851            uint16 address;
   3852            uint8 parameterN = 1;
   3853            char pattern[24];
   3854            for(i = 0; i < 23; i++){
   3855              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   3856              if(cmdUnitArr[i].symbol == ',') parameterN++;
   3857            }
   3858          
   3859            #if AT_CMD_PATTERN_CHECK
   3860            //built check pattern
   3861            pattern[0] = ':';
   3862            for(i = 1; i < parameterN; i++) pattern[i] = ',';
   3863            pattern[i] = '\r';
   3864            pattern[i+1] = '\0';
   3865            if((parameterN-3)%2 != 0) {
   3866              AT_ERROR(AT_LACK_PARA);
   3867              return;
   3868            }
   3869            #endif
   3870          
   3871            //check pattern
   3872            AT_PARSE_CMD_PATTERN_ERROR( pattern, cmdUnitArr );
   3873          
   3874            address = AT_ChartoInt16(&cmdUnitArr[0]);
   3875          
   3876            // build destination address
   3877            afAddrType_t dstAddr;
   3878            dstAddr.addr.shortAddr = address;
   3879            if (cmdUnitArr[1].unitLen != 0) {
   3880              dstAddr.endPoint = AT_ChartoInt8(&cmdUnitArr[1]);
   3881              if ((address == NWK_BROADCAST_SHORTADDR_DEVALL)
   3882                    || (address == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   3883                    || (address == NWK_BROADCAST_SHORTADDR_DEVRXON)) {
   3884                  dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   3885              } else {
   3886                  dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   3887              }
   3888            } else {
   3889              dstAddr.endPoint = ZCL_CONTROLLER_ENDPOINT;
   3890              dstAddr.addrMode = (afAddrMode_t)AddrGroup;
   3891            }
   3892          
   3893            // build zclReadReportCfgCmd
   3894            zclReadReportCfgCmd_t* readReportCfgCmd = (zclReadReportCfgCmd_t*) osal_mem_alloc(
   3895                              sizeof(uint8)+sizeof(zclReadReportCfgRec_t)*(parameterN-3));
   3896            readReportCfgCmd->numAttr = (parameterN-3)/2;
   3897            for(i = 0; i < (parameterN-3)/2; i++) {
   3898              readReportCfgCmd->attrList[i].direction = AT_ChartoInt8(&cmdUnitArr[3+i*2]);
   3899              readReportCfgCmd->attrList[i].attrID = AT_ChartoInt16(&cmdUnitArr[3+i*2+1]);
   3900            }
   3901          
   3902            // Send Read Reporting Configuration command
   3903            status = zcl_SendReadReportCfgCmd( ZCL_CONTROLLER_ENDPOINT, &dstAddr,
   3904                                         AT_ChartoInt16(&cmdUnitArr[2]), readReportCfgCmd,
   3905                                         ZCL_FRAME_CLIENT_SERVER_DIR, TRUE, bdb_getZCLFrameCounter() );
   3906          
   3907            osal_mem_free(readReportCfgCmd);
   3908            if(status != afStatus_SUCCESS)
   3909              AT_SEND_ERROR(status);
   3910            else
   3911              AT_OK();
   3912          }
   3913          
   3914          /*******************************************************************************
   3915           * @fn      AT_Cmd_CFGRPT
   3916           *
   3917           * @brief   +CFGRPT - Configure Attribute Reporting
   3918           *          Format: AT+CFGRPT:<Address>,[<EP>],<ClusterID>,
   3919           *                  <Direction>,<AttrID>,[<DataType>,<MinimumReportionInterval>,
   3920           *                  <MaximumReporingInterval>,<ReportableChange>][Timeout]
   3921           *
   3922           *                  AT+CFGRPT:<Address>,[<EP>],<ClusterID>,0,<AttrID>,[<DataType>,<MinimumReportionInterval>,<MaximumReporingInterval>,<ReportableChange>]
   3923           *                  AT+CFGRPT:<Address>,[<EP>],<ClusterID>,1,<AttrID>,[Timeout]
   3924           *
   3925           *          Use on: All Devices
   3926           *
   3927           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   3928           * @param   uint8* msg_ptr - the message pointer
   3929           *
   3930           * @return  None
   3931           ******************************************************************************/
   3932          void AT_Cmd_CFGRPT( uint8 cmd_ptr, uint8* msg_ptr )
   3933          {
   3934            uint8 i;
   3935            uint8 status;
   3936            AT_CmdUnit cmdUnitArr[10];
   3937            uint16 address;
   3938            uint8 direction;
   3939            zclCfgReportCmd_t* cfgReportCmd;
   3940          
   3941            for(i = 0; i < 5; i++){
   3942              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   3943            }
   3944            AT_PARSE_CMD_PATTERN_ERROR( ":,,,,", cmdUnitArr );
   3945          
   3946            address = AT_ChartoInt16(&cmdUnitArr[0]);
   3947            // build destination address
   3948            afAddrType_t dstAddr;
   3949            dstAddr.addr.shortAddr = address;
   3950            if (cmdUnitArr[1].unitLen != 0) {
   3951              dstAddr.endPoint = AT_ChartoInt8(&cmdUnitArr[1]);
   3952              if ((address == NWK_BROADCAST_SHORTADDR_DEVALL)
   3953                    || (address == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   3954                    || (address == NWK_BROADCAST_SHORTADDR_DEVRXON)) {
   3955                  dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   3956              } else {
   3957                  dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   3958              }
   3959            } else {
   3960              dstAddr.endPoint = ZCL_CONTROLLER_ENDPOINT;
   3961              dstAddr.addrMode = (afAddrMode_t)AddrGroup;
   3962            }
   3963          
   3964            direction = AT_ChartoInt8(&cmdUnitArr[3]);
   3965            if (direction == 0) {
   3966              for(i = 5; i < 10; i++){
   3967                cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   3968              }
   3969              AT_PARSE_CMD_PATTERN_ERROR( ":,,,,,,,,\r", cmdUnitArr );
   3970          
   3971              // build zclCfgReportCmd
   3972              cfgReportCmd = (zclCfgReportCmd_t*) osal_mem_alloc(
   3973                                                sizeof(uint8)+sizeof(zclCfgReportRec_t));
   3974              cfgReportCmd->numAttr = 1;
   3975              cfgReportCmd->attrList[0].direction = direction;
   3976              cfgReportCmd->attrList[0].attrID = AT_ChartoInt16(&cmdUnitArr[4]);
   3977              cfgReportCmd->attrList[0].dataType = AT_ChartoInt8(&cmdUnitArr[5]);
   3978              cfgReportCmd->attrList[0].minReportInt = AT_ChartoInt16(&cmdUnitArr[6]);
   3979              cfgReportCmd->attrList[0].maxReportInt = AT_ChartoInt16(&cmdUnitArr[7]);
   3980              if ( zclAnalogDataType( cfgReportCmd->attrList[0].dataType ) )
   3981              {
   3982                cfgReportCmd->attrList[0].reportableChange = AT_AttrData_ChartoInt(
   3983                                    cfgReportCmd->attrList[0].dataType, &cmdUnitArr[8] );
   3984              }
   3985            } else {
   3986              for(i = 5; i < 7; i++){
   3987                cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   3988              }
   3989              AT_PARSE_CMD_PATTERN_ERROR( ":,,,,,\r", cmdUnitArr );
   3990          
   3991              // build zclCfgReportCmd
   3992              cfgReportCmd = (zclCfgReportCmd_t*) osal_mem_alloc(
   3993                                                sizeof(uint8)+sizeof(zclCfgReportRec_t));
   3994              cfgReportCmd->numAttr = 1;
   3995              cfgReportCmd->attrList[0].direction = direction;
   3996              cfgReportCmd->attrList[0].timeoutPeriod = AT_ChartoInt16(&cmdUnitArr[5]);
   3997            }
   3998          
   3999            // Send a Configure Reporting command
   4000            status = zcl_SendConfigReportCmd( ZCL_CONTROLLER_ENDPOINT, &dstAddr,
   4001                                         AT_ChartoInt16(&cmdUnitArr[2]), cfgReportCmd,
   4002                                         ZCL_FRAME_CLIENT_SERVER_DIR, TRUE, bdb_getZCLFrameCounter() );
   4003          
   4004            osal_mem_free(cfgReportCmd);
   4005            if(status != afStatus_SUCCESS)
   4006              AT_SEND_ERROR(status);
   4007            else
   4008              AT_OK();
   4009          }
   4010          #endif // ZCL_REPORT_CONFIGURING_DEVICE
   4011          
   4012          /*******************************************************************************
   4013           * @fn      AT_Cmd_Help
   4014           *
   4015           * @brief   AT+HELP - show all the AT commands
   4016           *
   4017           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   4018           * @param   uint8* msg_ptr - the message pointer
   4019           *
   4020           * @return  None
   4021           ******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4022          void AT_Cmd_Help( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_Help:
   4023          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   4024            AT_CmdUnit cmdUnitArr[1];
   4025            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
   4026            AT_PARSE_CMD_PATTERN_ERROR("\r",cmdUnitArr);
   \                     ??CrossCallReturnLabel_126:
   \   00000D   6008         JZ        ??AT_Cmd_Help_0
   \   00000F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000014   02....       LJMP      ??CrossCallReturnLabel_527 & 0xFFFF
   4027          
   4028            uint8 i;
   4029            AT_NEW_LINE();
   \                     ??AT_Cmd_Help_0:
   \   000017                ; Setup parameters for call to function AT_Uart0_Send
   \   000017   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   4030            AT_RESP("ATI", 3);
   \                     ??CrossCallReturnLabel_505:
   \   00001A   7A..         MOV       R2,#`?<Constant "ATI">` & 0xff
   \   00001C   7B..         MOV       R3,#(`?<Constant "ATI">` >> 8) & 0xff
   \   00001E   12....       LCALL     ?Subroutine77 & 0xFFFF
   4031            for(i = 0; i < AT_CMD_HELP_DESC_OFFSET-3; i++)
   \                     ??CrossCallReturnLabel_152:
   \   000021   75....       MOV       ?V0,#`?<Constant ".">` & 0xff
   \   000024   75....       MOV       ?V1,#(`?<Constant ".">` >> 8) & 0xff
   4032              AT_RESP(".", 1);
   \                     ??AT_Cmd_Help_1:
   \   000027                ; Setup parameters for call to function AT_Uart0_Send
   \   000027   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00002A   70FB         JNZ       ??AT_Cmd_Help_1
   4033            AT_RESP("Display Product Identification Information", sizeof("Display Product Identification Information")-1);
   \   00002C                ; Setup parameters for call to function AT_Uart0_Send
   \   00002C   7C2A         MOV       R4,#0x2a
   \   00002E   7D00         MOV       R5,#0x0
   \   000030   7A..         MOV       R2,#`?<Constant "Display Product Ident...">` & 0xff
   \   000032   7B..         MOV       R3,#(`?<Constant "Display Product Ident...">` >> 8) & 0xff
   \   000034   12....       LCALL     ?Subroutine73 & 0xFFFF
   4034            AT_NEXT_LINE();
   4035          
   4036            AT_RESP("ATZ",3);
   \                     ??CrossCallReturnLabel_503:
   \   000037   7A..         MOV       R2,#`?<Constant "ATZ">` & 0xff
   \   000039   7B..         MOV       R3,#(`?<Constant "ATZ">` >> 8) & 0xff
   \   00003B   12....       LCALL     ?Subroutine77 & 0xFFFF
   4037            for(i = 0; i < AT_CMD_HELP_DESC_OFFSET-3; i++)
   4038              AT_RESP(".", 1);
   \                     ??CrossCallReturnLabel_153:
   \   00003E                ; Setup parameters for call to function AT_Uart0_Send
   \   00003E   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000041   70FB         JNZ       ??CrossCallReturnLabel_153
   4039            AT_RESP("Software Reset", sizeof("Software Reset")-1);
   \   000043                ; Setup parameters for call to function AT_Uart0_Send
   \   000043   7C0E         MOV       R4,#0xe
   \   000045   7D00         MOV       R5,#0x0
   \   000047   7A..         MOV       R2,#`?<Constant "Software Reset">` & 0xff
   \   000049   7B..         MOV       R3,#(`?<Constant "Software Reset">` >> 8) & 0xff
   \   00004B   12....       LCALL     ?Subroutine73 & 0xFFFF
   4040            AT_NEXT_LINE();
   4041          
   4042            AT_RESP("ATF", 3);
   \                     ??CrossCallReturnLabel_504:
   \   00004E   7A..         MOV       R2,#`?<Constant "ATF">` & 0xff
   \   000050   7B..         MOV       R3,#(`?<Constant "ATF">` >> 8) & 0xff
   \   000052   12....       LCALL     ?Subroutine77 & 0xFFFF
   4043            for(i = 0; i < AT_CMD_HELP_DESC_OFFSET-3; i++)
   4044              AT_RESP(".", 1);
   \                     ??CrossCallReturnLabel_154:
   \   000055                ; Setup parameters for call to function AT_Uart0_Send
   \   000055   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000058   70FB         JNZ       ??CrossCallReturnLabel_154
   4045            AT_RESP("Restore Local Device's Factory Defaults", sizeof("Restore Local Device's Factory Defaults")-1);
   \   00005A                ; Setup parameters for call to function AT_Uart0_Send
   \   00005A   7C27         MOV       R4,#0x27
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7A..         MOV       R2,#`?<Constant "Restore Local Device\\'...">` & 0xff
   \   000060   7B..         MOV       R3,#(`?<Constant "Restore Local Device\\'...">` >> 8) & 0xff
   \   000062   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4046          
   4047            for(i = 0; i < AT_CMD_SZ; i++) {
   \   000065   75..00       MOV       ?V3,#0x0
   4048              // uint8 j;
   4049              AT_NEXT_LINE();
   \                     ??AT_Cmd_Help_2:
   \   000068                ; Setup parameters for call to function AT_Uart0_Send
   \   000068   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   4050              AT_RESP("AT+", 3);
   \                     ??CrossCallReturnLabel_506:
   \   00006B   7A..         MOV       R2,#`?<Constant "AT+">` & 0xff
   \   00006D   7B..         MOV       R3,#(`?<Constant "AT+">` >> 8) & 0xff
   \   00006F   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4051              AT_RESP(AT_Cmd_Arr[i].AT_Cmd_str, strlen(AT_Cmd_Arr[i].AT_Cmd_str));
   \   000072   E5..         MOV       A,?V3
   \   000074   75F006       MOV       B,#0x6
   \   000077   A4           MUL       AB
   \   000078   F8           MOV       R0,A
   \   000079   A9F0         MOV       R1,B
   \   00007B   74..         MOV       A,#AT_Cmd_Arr & 0xff
   \   00007D   28           ADD       A,R0
   \   00007E   F5..         MOV       ?V0,A
   \   000080   74..         MOV       A,#(AT_Cmd_Arr >> 8) & 0xff
   \   000082   39           ADDC      A,R1
   \   000083   F5..         MOV       ?V1,A
   \   000085   85..82       MOV       DPL,?V0
   \   000088   F583         MOV       DPH,A
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F5..         MOV       ?V4,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F5..         MOV       ?V5,A
   \   000091                ; Setup parameters for call to function strlen
   \   000091   AA..         MOV       R2,?V4
   \   000093   FB           MOV       R3,A
   \   000094   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000097   8A..         MOV       ?V6,R2
   \   000099   8B..         MOV       ?V7,R3
   \   00009B   AC..         MOV       R4,?V6
   \   00009D   AD..         MOV       R5,?V7
   \   00009F                ; Setup parameters for call to function AT_Uart0_Send
   \   00009F   AA..         MOV       R2,?V4
   \   0000A1   AB..         MOV       R3,?V5
   \   0000A3   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4052              //for(j = 0; j < AT_CMD_HELP_DESC_OFFSET-strlen(AT_Cmd_Arr[i].AT_Cmd_str)-3; j++)
   4053              //  AT_RESP(".",1);
   4054              AT_RESP(".................", AT_CMD_HELP_DESC_OFFSET-getLength((uint8 *)AT_Cmd_Arr[i].AT_Cmd_str, 1)-3);
   \   0000A6   7800         MOV       R0,#0x0
   \                     ??AT_Cmd_Help_3:
   \   0000A8   E8           MOV       A,R0
   \   0000A9   FA           MOV       R2,A
   \   0000AA   E5..         MOV       A,?V4
   \   0000AC   2A           ADD       A,R2
   \   0000AD   F582         MOV       DPL,A
   \   0000AF   E4           CLR       A
   \   0000B0   35..         ADDC      A,?V5
   \   0000B2   F583         MOV       DPH,A
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   6006         JZ        ??AT_Cmd_Help_4
   \   0000B7   08           INC       R0
   \   0000B8   74FF         MOV       A,#-0x1
   \   0000BA   68           XRL       A,R0
   \   0000BB   70EB         JNZ       ??AT_Cmd_Help_3
   \                     ??AT_Cmd_Help_4:
   \   0000BD                ; Setup parameters for call to function AT_Uart0_Send
   \   0000BD   740E         MOV       A,#0xe
   \   0000BF   C3           CLR       C
   \   0000C0   98           SUBB      A,R0
   \   0000C1   FC           MOV       R4,A
   \   0000C2   95E0         SUBB      A,0xE0 /* A   */
   \   0000C4   FD           MOV       R5,A
   \   0000C5   7A..         MOV       R2,#`?<Constant ".................">` & 0xff
   \   0000C7   7B..         MOV       R3,#(`?<Constant ".................">` >> 8) & 0xff
   \   0000C9   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4055              // AT_RESP(AT_Cmd_Arr[i].ATCmdDescription, strlen(AT_Cmd_Arr[i].ATCmdDescription));
   4056              printf(AT_Cmd_Arr[i].ATCmdDescription);
   \   0000CC                ; Setup parameters for call to function printf
   \   0000CC   85..82       MOV       DPL,?V0
   \   0000CF   85..83       MOV       DPH,?V1
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   12....       LCALL     ?Subroutine47 & 0xFFFF
   4057            }
   \                     ??CrossCallReturnLabel_318:
   \   0000D7   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000DA   05..         INC       ?V3
   \   0000DC   E5..         MOV       A,?V3
   \   0000DE   C3           CLR       C
   \   0000DF   9425         SUBB      A,#0x25
   \   0000E1   4085         JC        ??AT_Cmd_Help_2
   4058            AT_NEW_LINE();
   \   0000E3                ; Setup parameters for call to function AT_Uart0_Send
   \   0000E3   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   4059            AT_OK();
   4060          }
   \                     ??CrossCallReturnLabel_527:
   \   0000E6   7404         MOV       A,#0x4
   \   0000E8   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003   75..0E       MOV       ?V3,#0xe
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   7C01         MOV       R4,#0x1
   \   000002   7D00         MOV       R5,#0x0
   \   000004   AA..         MOV       R2,?V0
   \   000006   AB..         MOV       R3,?V1
   \   000008   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   00000B   15..         DEC       ?V3
   \   00000D   E5..         MOV       A,?V3
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                ; Setup parameters for call to function AT_Uart0_Send
   \   000003                REQUIRE ??Subroutine191_0
   \   000003                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   7C02         MOV       R4,#0x2
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000006   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine192_0
   \   000008                ; // Fall through to label ??Subroutine192_0
   4061          
   4062          /*******************************************************************************
   4063           * @fn      AT_Cmd_GetAddr
   4064           *
   4065           * @brief   AT+GETADDR - show self short address and IEEE address
   4066           *
   4067           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   4068           * @param   uint8* msg_ptr - the message pointer
   4069           *
   4070           * @return  None
   4071           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4072          void AT_Cmd_GetAddr( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_GetAddr:
   4073          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   4074            AT_CmdUnit cmdUnitArr[1];
   4075            cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[0], cmd_ptr, msg_ptr);
   \   00000A                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
   4076            AT_PARSE_CMD_PATTERN_ERROR("\r",cmdUnitArr);
   \                     ??CrossCallReturnLabel_127:
   \   00000D   6007         JZ        ??AT_Cmd_GetAddr_0
   \   00000F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000014   804D         SJMP      ??CrossCallReturnLabel_524
   4077          
   4078            char addrbuff[20] = {0};
   \                     ??AT_Cmd_GetAddr_0:
   \   000016   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000019   7404         MOV       A,#0x4
   \   00001B   12....       LCALL     ?XSTACK_DISP102_8
   \   00001E   7414         MOV       A,#0x14
   \   000020   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   4079            sprintf(addrbuff, "SelfshortAddr:%04X", NLME_GetShortAddr());
   \   000023                ; Setup parameters for call to function NLME_GetShortAddr
   \   000023   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A                ; Setup parameters for call to function sprintf
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7C..         MOV       R4,#`?<Constant "SelfshortAddr:%04X">` & 0xff
   \   000031   7D..         MOV       R5,#(`?<Constant "SelfshortAddr:%04X">` >> 8) & 0xff
   \   000033   7406         MOV       A,#0x6
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   4080            AT_NEW_LINE();
   \   000040                ; Setup parameters for call to function AT_Uart0_Send
   \   000040   7C02         MOV       R4,#0x2
   \   000042   7D00         MOV       R5,#0x0
   \   000044   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000046   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000048   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4081            AT_RESP(addrbuff, strlen(addrbuff));
   \   00004B                ; Setup parameters for call to function strlen
   \   00004B   7404         MOV       A,#0x4
   \   00004D   12....       LCALL     ?XSTACK_DISP101_8
   \   000050   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000053   8A..         MOV       ?V0,R2
   \   000055   8B..         MOV       ?V1,R3
   \   000057   AC..         MOV       R4,?V0
   \   000059   AD..         MOV       R5,?V1
   \   00005B                ; Setup parameters for call to function AT_Uart0_Send
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?XSTACK_DISP101_8
   \   000060   12....       LCALL     ?Subroutine71 & 0xFFFF
   4082            AT_NEW_LINE();
   4083            AT_OK();
   4084          }
   \                     ??CrossCallReturnLabel_524:
   \   000063   02....       LJMP      ?Subroutine3 & 0xFFFF
   4085          
   4086          /*******************************************************************************
   4087           * @fn      AT_Cmd_EpCtrl
   4088           *
   4089           * @brief   AT+EPCTRL - Control the local endpoint
   4090           *                      AT+EPCTRL:<Enable/Disable>,<EP>
   4091           *                            <Enable/Disable> - 0 for Disable; 1 for Enable
   4092           *                            <EP> - 8 bit hexadecimal number Endpoint
   4093           *
   4094           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   4095           * @param   uint8* msg_ptr - the message pointer
   4096           *
   4097           * @return  None
   4098           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4099          void AT_Cmd_EpCtrl( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_EpCtrl:
   4100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   4101            AT_CmdUnit cmdUnitArr[3];
   4102            uint8 i;
   4103            for ( i = 0; i < 3; i++) {
   \   000010   75..00       MOV       ?V1,#0x0
   4104              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_EpCtrl_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   E5..         MOV       A,?V1
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine194_0 & 0xFFFF
   4105            }
   \                     ??CrossCallReturnLabel_517:
   \   00002F   40E2         JC        ??AT_Cmd_EpCtrl_0
   4106            AT_PARSE_CMD_PATTERN_ERROR(":,\r", cmdUnitArr);
   \   000031                ; Setup parameters for call to function AT_Pattern_Check
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000039   6007         JZ        ??AT_Cmd_EpCtrl_1
   \   00003B                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00003B   7A01         MOV       R2,#0x1
   \   00003D   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000040   8049         SJMP      ??CrossCallReturnLabel_525
   4107          
   4108            uint8 isEnable = AT_ChartoInt8(&cmdUnitArr[0]);
   \                     ??AT_Cmd_EpCtrl_1:
   \   000042                ; Setup parameters for call to function AT_ChartoInt8
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?XSTACK_DISP101_8
   \   000047   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   00004A   F5..         MOV       ?V2,A
   4109            uint8 ep = AT_ChartoInt8(&cmdUnitArr[1]);
   \   00004C                ; Setup parameters for call to function AT_ChartoInt8
   \   00004C   7406         MOV       A,#0x6
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine101 & 0xFFFF
   4110            uint8 str[2];
   4111            if (isEnable != 0) isEnable = 1;
   \                     ??CrossCallReturnLabel_321:
   \   000054   E5..         MOV       A,?V2
   \   000056   7C02         MOV       R4,#0x2
   \   000058   7D00         MOV       R5,#0x0
   \   00005A   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00005C   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00005E   700D         JNZ       ??AT_Cmd_EpCtrl_2
   4112          
   4113            if (isEnable == 0 || isEnable == 1) {
   4114              if (isEnable) {
   4115                AT_NEW_LINE();
   4116                AT_RESP("ENABLED:", sizeof("ENABLED:")-1);
   4117                AT_Int8toChar(ep, str);
   4118                AT_RESP(str, 2);
   4119                AT_NEW_LINE();
   4120              } else {
   4121                AT_NEW_LINE();
   \   000060                ; Setup parameters for call to function AT_Uart0_Send
   \   000060   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4122                AT_RESP("DISABLED:", sizeof("DISABLED:")-1);
   \   000063                ; Setup parameters for call to function AT_Uart0_Send
   \   000063   7C09         MOV       R4,#0x9
   \   000065   7D00         MOV       R5,#0x0
   \   000067   7A..         MOV       R2,#`?<Constant "DISABLED:">` & 0xff
   \   000069   7B..         MOV       R3,#(`?<Constant "DISABLED:">` >> 8) & 0xff
   \   00006B   8007         SJMP      ??AT_Cmd_EpCtrl_3
   4123                AT_Int8toChar(ep, str);
   4124                AT_RESP(str, 2);
   4125                AT_NEW_LINE();
   4126              }
   \                     ??AT_Cmd_EpCtrl_2:
   \   00006D                ; Setup parameters for call to function AT_Uart0_Send
   \   00006D   12....       LCALL     ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000070   7A..         MOV       R2,#`?<Constant "ENABLED:">` & 0xff
   \   000072   7B..         MOV       R3,#(`?<Constant "ENABLED:">` >> 8) & 0xff
   \                     ??AT_Cmd_EpCtrl_3:
   \   000074   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   \   000077                ; Setup parameters for call to function AT_Int8toChar
   \   000077   AA..         MOV       R2,?XSP + 0
   \   000079   AB..         MOV       R3,?XSP + 1
   \   00007B   A9..         MOV       R1,?V1
   \   00007D   12....       LCALL     `??AT_Int8toChar::?relay`; Banked call to: AT_Int8toChar
   \   000080                ; Setup parameters for call to function AT_Uart0_Send
   \   000080   7C02         MOV       R4,#0x2
   \   000082   7D00         MOV       R5,#0x0
   \   000084   AA..         MOV       R2,?XSP + 0
   \   000086   AB..         MOV       R3,?XSP + 1
   \   000088   12....       LCALL     ?Subroutine71 & 0xFFFF
   4127            } else {
   4128              AT_NEW_LINE();
   4129              AT_RESP("UNKNOWNEP ERROR", sizeof("UNKNOWNEP ERROR")-1);
   4130              AT_NEW_LINE();
   4131              return;
   4132            }
   4133            AT_OK();
   4134          }
   \                     ??CrossCallReturnLabel_525:
   \   00008B   740E         MOV       A,#0xe
   \   00008D   02....       LJMP      ??Subroutine165_0 & 0xFFFF
   4135          
   4136          /*******************************************************************************
   4137           * @fn      AT_Cmd_REpCtrl
   4138           *
   4139           * @brief   AT+REPCTRL - Control the remote endpoint
   4140           *                      AT+REPCTRL:<shortAddr>,<Enable/Disable>,<EP>
   4141           *                            <shortAddr> - remote device's short address
   4142           *                            <Enable/Disable> - 0 for Disable; 1 for Enable
   4143           *                            <EP> - 8 bit hexadecimal number Endpoint
   4144           *
   4145           * @param   uint8 cmd_ptr  - the point show the place we start scan the command
   4146           * @param   uint8* msg_ptr - the message pointer
   4147           *
   4148           * @return  None
   4149           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4150          void AT_Cmd_REpCtrl( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_REpCtrl:
   4151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV       A,#-0x1e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   4152            uint8 status;
   4153          
   4154            AT_CmdUnit cmdUnitArr[4];
   4155            uint8 i;
   4156            for ( i = 0; i < 4; i++) {
   \   000010   75..00       MOV       ?V1,#0x0
   4157              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_REpCtrl_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   E5..         MOV       A,?V1
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   740E         MOV       A,#0xe
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine159_0 & 0xFFFF
   4158            }
   \                     ??CrossCallReturnLabel_307:
   \   00002F   40E2         JC        ??AT_Cmd_REpCtrl_0
   4159            AT_PARSE_CMD_PATTERN_ERROR(":,,\r", cmdUnitArr);
   \   000031                ; Setup parameters for call to function AT_Pattern_Check
   \   000031   740E         MOV       A,#0xe
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   7A..         MOV       R2,#`?<Constant ":,,\\r">` & 0xff
   \   000038   7B..         MOV       R3,#(`?<Constant ":,,\\r">` >> 8) & 0xff
   \   00003A   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   00003D   6004         JZ        ??AT_Cmd_REpCtrl_1
   \   00003F                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   00003F   7A01         MOV       R2,#0x1
   \   000041   8078         SJMP      ??AT_Cmd_REpCtrl_2
   4160          
   4161            uint8 isEnable = AT_ChartoInt8(&cmdUnitArr[1]);
   \                     ??AT_Cmd_REpCtrl_1:
   \   000043                ; Setup parameters for call to function AT_ChartoInt8
   \   000043   7412         MOV       A,#0x12
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?Subroutine102 & 0xFFFF
   4162            uint8 ep = AT_ChartoInt8(&cmdUnitArr[2]);
   \                     ??CrossCallReturnLabel_378:
   \   00004B                ; Setup parameters for call to function AT_ChartoInt8
   \   00004B   7416         MOV       A,#0x16
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000053   FF           MOV       R7,A
   4163            if (isEnable != 0) isEnable = 1;
   \   000054   EE           MOV       A,R6
   \   000055   6002         JZ        ??AT_Cmd_REpCtrl_3
   \   000057   7E01         MOV       R6,#0x1
   4164          
   4165            // build destination address
   4166            afAddrType_t dstAddr;
   4167            dstAddr.endPoint = ATApp_ENDPOINT;
   \                     ??AT_Cmd_REpCtrl_3:
   \   000059   740B         MOV       A,#0xb
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   7496         MOV       A,#-0x6a
   \   000060   F0           MOVX      @DPTR,A
   4168            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000061   740A         MOV       A,#0xa
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   7402         MOV       A,#0x2
   \   000068   F0           MOVX      @DPTR,A
   4169            if (cmdUnitArr[0].unitLen == 0) {
   \   000069   740F         MOV       A,#0xf
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   7005         JNZ       ??AT_Cmd_REpCtrl_4
   4170              dstAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000071                ; Setup parameters for call to function NLME_GetShortAddr
   \   000071   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000074   8008         SJMP      ??AT_Cmd_REpCtrl_5
   4171            } else {
   4172              dstAddr.addr.shortAddr = AT_ChartoInt16(&cmdUnitArr[0]);
   \                     ??AT_Cmd_REpCtrl_4:
   \   000076                ; Setup parameters for call to function AT_ChartoInt16
   \   000076   740E         MOV       A,#0xe
   \   000078   12....       LCALL     ?XSTACK_DISP101_8
   \   00007B   12....       LCALL     `??AT_ChartoInt16::?relay`; Banked call to: AT_ChartoInt16
   \                     ??AT_Cmd_REpCtrl_5:
   \   00007E   7402         MOV       A,#0x2
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   4173            }
   \   000083   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   4174          
   4175            // buile endPoint control command
   4176            EPCtrlCmd_t epCtrlCmd;
   4177            epCtrlCmd.ep = ep;
   \                     ??CrossCallReturnLabel_501:
   \   000086   EF           MOV       A,R7
   \   000087   85..82       MOV       DPL,?XSP + 0
   \   00008A   85..83       MOV       DPH,?XSP + 1
   \   00008D   F0           MOVX      @DPTR,A
   4178            epCtrlCmd.isEnable = isEnable;
   \   00008E   7401         MOV       A,#0x1
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   EE           MOV       A,R6
   \   000094   F0           MOVX      @DPTR,A
   4179          
   4180            status = AT_SendEPCtrl(ATApp_ENDPOINT, &dstAddr, ATApp_GENERIC_CLUSTER, &epCtrlCmd);
   \   000095                ; Setup parameters for call to function AT_SendEPCtrl
   \   000095   A8..         MOV       R0,?XSP + 0
   \   000097   A9..         MOV       R1,?XSP + 1
   \   000099   88..         MOV       ?V2,R0
   \   00009B   89..         MOV       ?V3,R1
   \   00009D   78..         MOV       R0,#?V2
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A2   7C00         MOV       R4,#0x0
   \   0000A4   7D20         MOV       R5,#0x20
   \   0000A6   7404         MOV       A,#0x4
   \   0000A8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000AB   7996         MOV       R1,#-0x6a
   \   0000AD   12....       LCALL     `??AT_SendEPCtrl::?relay`; Banked call to: AT_SendEPCtrl
   \   0000B0   7402         MOV       A,#0x2
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV       A,R1
   \   0000B6   F9           MOV       R1,A
   4181            if(status!=afStatus_SUCCESS) AT_SEND_ERROR(status);
   \   0000B7   6007         JZ        ??AT_Cmd_REpCtrl_6
   \   0000B9                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   0000B9   7A02         MOV       R2,#0x2
   \                     ??AT_Cmd_REpCtrl_2:
   \   0000BB   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   0000BE   800B         SJMP      ??AT_Cmd_REpCtrl_7
   4182            else AT_OK();
   \                     ??AT_Cmd_REpCtrl_6:
   \   0000C0                ; Setup parameters for call to function AT_Uart0_Send
   \   0000C0   7C06         MOV       R4,#0x6
   \   0000C2   7D00         MOV       R5,#0x0
   \   0000C4   7A..         MOV       R2,#`?<Constant "\\r\\nOK\\r\\n">` & 0xff
   \   0000C6   7B..         MOV       R3,#(`?<Constant "\\r\\nOK\\r\\n">` >> 8) & 0xff
   \   0000C8   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4183          }
   \                     ??AT_Cmd_REpCtrl_7:
   \   0000CB   741E         MOV       A,#0x1e
   \   0000CD   02....       LJMP      ??Subroutine165_0 & 0xFFFF
   4184          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4185          void AT_Cmd_Test( uint8 cmd_ptr, uint8* msg_ptr )
   \                     AT_Cmd_Test:
   4186          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   4187            AT_CmdUnit cmdUnitArr[3];
   4188            uint8 i;
   4189            for ( i = 0; i < 3; i++) {
   \   000010   75..00       MOV       ?V0,#0x0
   4190              cmd_ptr = AT_get_next_cmdUnit(&cmdUnitArr[i], cmd_ptr, msg_ptr);
   \                     ??AT_Cmd_Test_0:
   \   000013                ; Setup parameters for call to function AT_get_next_cmdUnit
   \   000013   EE           MOV       A,R6
   \   000014   FC           MOV       R4,A
   \   000015   EF           MOV       A,R7
   \   000016   FD           MOV       R5,A
   \   000017   A9..         MOV       R1,?V2
   \   000019   E5..         MOV       A,?V0
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   75..00       MOV       ?V5,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?S_SHL
   \   000027   12....       LCALL     ?Subroutine60 & 0xFFFF
   4191            }
   \                     ??CrossCallReturnLabel_346:
   \   00002A   40E7         JC        ??AT_Cmd_Test_0
   4192            AT_PARSE_CMD_PATTERN_ERROR(":,\r", cmdUnitArr);
   \   00002C                ; Setup parameters for call to function AT_Pattern_Check
   \   00002C   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   00002F   6008         JZ        ??AT_Cmd_Test_1
   \   000031                ; Setup parameters for call to function AT_UARTWriteErrMsg
   \   000031   7A01         MOV       R2,#0x1
   \   000033   12....       LCALL     `??AT_UARTWriteErrMsg::?relay`; Banked call to: AT_UARTWriteErrMsg
   \   000036   02....       LJMP      ??CrossCallReturnLabel_528 & 0xFFFF
   4193          
   4194            AT_NEW_LINE();
   \                     ??AT_Cmd_Test_1:
   \   000039                ; Setup parameters for call to function AT_Uart0_Send
   \   000039   7C02         MOV       R4,#0x2
   \   00003B   7D00         MOV       R5,#0x0
   \   00003D   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00003F   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000041   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4195            int8 sign = (AT_ChartoInt8(&cmdUnitArr[0]) == 1) ? 1 : -1;
   \   000044                ; Setup parameters for call to function AT_ChartoInt8
   \   000044   AA..         MOV       R2,?XSP + 0
   \   000046   AB..         MOV       R3,?XSP + 1
   \   000048   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   00004B   6401         XRL       A,#0x1
   \   00004D   7005         JNZ       ??AT_Cmd_Test_2
   \   00004F   75..01       MOV       ?V1,#0x1
   \   000052   8003         SJMP      ??AT_Cmd_Test_3
   \                     ??AT_Cmd_Test_2:
   \   000054   75..FF       MOV       ?V1,#-0x1
   4196            uint8 data = AT_ChartoInt8(&cmdUnitArr[1])/16*10+AT_ChartoInt8(&cmdUnitArr[1])%16;
   \                     ??AT_Cmd_Test_3:
   \   000057                ; Setup parameters for call to function AT_ChartoInt8
   \   000057   7404         MOV       A,#0x4
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00005F                ; Setup parameters for call to function AT_ChartoInt8
   \   00005F   7404         MOV       A,#0x4
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   AA82         MOV       R2,DPL
   \   000066   AB83         MOV       R3,DPH
   \   000068   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00006B   E5..         MOV       A,?V0
   \   00006D   C4           SWAP      A
   \   00006E   540F         ANL       A,#0xf
   \   000070   A4           MUL       AB
   \   000071   28           ADD       A,R0
   \   000072   F5..         MOV       ?V0,A
   4197            AT_RESP("Result:", sizeof("Result:")-1);
   \   000074                ; Setup parameters for call to function AT_Uart0_Send
   \   000074   7C07         MOV       R4,#0x7
   \   000076   7D00         MOV       R5,#0x0
   \   000078   7A..         MOV       R2,#`?<Constant "Result:">` & 0xff
   \   00007A   7B..         MOV       R3,#(`?<Constant "Result:">` >> 8) & 0xff
   \   00007C   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4198            data = sign * data;
   \   00007F   E5..         MOV       A,?V0
   \   000081   F5F0         MOV       B,A
   \   000083   E5..         MOV       A,?V1
   \   000085   A4           MUL       AB
   \   000086   F5..         MOV       ?V3,A
   4199            if ((int8)data >= 0) {
   \   000088   75....       MOV       ?V0,#`?<Constant "%02d,">` & 0xff
   \   00008B   75....       MOV       ?V1,#(`?<Constant "%02d,">` >> 8) & 0xff
   \   00008E   9400         SUBB      A,#0x0
   \   000090   65D0         XRL       A,PSW
   \   000092   33           RLC       A
   \   000093   7C01         MOV       R4,#0x1
   \   000095   7D00         MOV       R5,#0x0
   \   000097   4010         JC        ??AT_Cmd_Test_4
   4200              AT_RESP("+", 1);
   \   000099                ; Setup parameters for call to function AT_Uart0_Send
   \   000099   7A..         MOV       R2,#`?<Constant "+">` & 0xff
   \   00009B   7B..         MOV       R3,#(`?<Constant "+">` >> 8) & 0xff
   \   00009D   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4201              printf("%02d,", data);
   \   0000A0                ; Setup parameters for call to function printf
   \   0000A0   E5..         MOV       A,?V3
   \   0000A2   F5..         MOV       ?V4,A
   \   0000A4   75..00       MOV       ?V5,#0x0
   \   0000A7   8017         SJMP      ??AT_Cmd_Test_5
   4202            } else {
   4203              AT_RESP("-", 1);
   \                     ??AT_Cmd_Test_4:
   \   0000A9                ; Setup parameters for call to function AT_Uart0_Send
   \   0000A9   7A..         MOV       R2,#`?<Constant "-">` & 0xff
   \   0000AB   7B..         MOV       R3,#(`?<Constant "-">` >> 8) & 0xff
   \   0000AD   12....       LCALL     `??AT_Uart0_Send::?relay`; Banked call to: AT_Uart0_Send
   4204              printf("%02d,", ((int8)data)*-1);
   \   0000B0                ; Setup parameters for call to function printf
   \   0000B0   E5..         MOV       A,?V3
   \   0000B2   F8           MOV       R0,A
   \   0000B3   33           RLC       A
   \   0000B4   95E0         SUBB      A,0xE0 /* A   */
   \   0000B6   F9           MOV       R1,A
   \   0000B7   C3           CLR       C
   \   0000B8   E4           CLR       A
   \   0000B9   98           SUBB      A,R0
   \   0000BA   F5..         MOV       ?V4,A
   \   0000BC   E4           CLR       A
   \   0000BD   99           SUBB      A,R1
   \   0000BE   F5..         MOV       ?V5,A
   \                     ??AT_Cmd_Test_5:
   \   0000C0   78..         MOV       R0,#?V4
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C5   AA..         MOV       R2,?V0
   \   0000C7   AB..         MOV       R3,?V1
   4205            }
   \   0000C9   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
   4206            AT_NEW_LINE();
   \   0000CF                ; Setup parameters for call to function AT_Uart0_Send
   \   0000CF   12....       LCALL     ??Subroutine195_0 & 0xFFFF
   4207            AT_OK();
   4208          }
   \                     ??CrossCallReturnLabel_528:
   \   0000D2   740C         MOV       A,#0xc
   \   0000D4   02....       LJMP      ??Subroutine176_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for notdoFNCmd>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for notdoJNCmd>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for notdoSCANCmd>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for notdoEUIREQcmd>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for notdoSIMPLEDESCcmd>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for notdoNODEDESEcmd>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for keySeqNum>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devStates_str>`:
   \   000000   ....         DW `?<Constant "DEV_HOLD">`
   \   000002   ....         DW `?<Constant "DEV_INIT">`
   \   000004   ....         DW `?<Constant "DEV_NWK_DISC">`
   \   000006   ....         DW `?<Constant "DEV_NWK_JOINING">`
   \   000008   ....         DW `?<Constant "DEV_NWK_SEC_REJOIN_CU...">`
   \   00000A   ....         DW `?<Constant "DEV_END_DEVICE_UNAUTH">`
   \   00000C   ....         DW `?<Constant "DEV_END_DEVICE">`
   \   00000E   ....         DW `?<Constant "DEV_ROUTER">`
   \   000010   ....         DW `?<Constant "DEV_COORD_STARTING">`
   \   000012   ....         DW `?<Constant "DEV_ZB_COORD">`
   \   000014   ....         DW `?<Constant "DEV_NWK_ORPHAN">`
   \   000016   ....         DW `?<Constant "DEV_NWK_KA">`
   \   000018   ....         DW `?<Constant "DEV_NWK_BACKOFF">`
   \   00001A   ....         DW `?<Constant "DEV_NWK_SEC_REJOIN_AL...">`
   \   00001C   ....         DW `?<Constant "DEV_NWK_TC_REJOIN_CUR...">`
   \   00001E   ....         DW `?<Constant "DEV_NWK_TC_REJOIN_ALL...">`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for FWReversion>`:
   \   000000   41542D43     DB "AT-Command 1.0"
   \            6F6D6D61
   \            6E642031
   \            2E3000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BLOAD">`:
   \   000000   424C4F41     DB "BLOAD"
   \            4400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter The Boot Loader...">`:
   \   000000   456E7465     DB "Enter The Boot Loader Menu"
   \            72205468
   \            6520426F
   \            6F74204C
   \            6F616465
   \            72204D65
   \            6E7500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TIME">`:
   \   000000   54494D45     DB "TIME"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Get or Set Local Time">`:
   \   000000   47657420     DB "Get or Set Local Time"
   \            6F722053
   \            6574204C
   \            6F63616C
   \            2054696D
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RAWZCL">`:
   \   000000   5241575A     DB "RAWZCL"
   \            434C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Send A Raw ZCL Messag...">`:
   \   000000   53656E64     DB 53H, 65H, 6EH, 64H, 20H, 41H, 20H, 52H
   \            20412052
   \   000008   6177205A     DB 61H, 77H, 20H, 5AH, 43H, 4CH, 20H, 4DH
   \            434C204D
   \   000010   65737361     DB 65H, 73H, 73H, 61H, 67H, 65H, 20H, 57H
   \            67652057
   \   000018   69746820     DB 69H, 74H, 68H, 20H, 53H, 70H, 65H, 63H
   \            53706563
   \   000020   69666965     DB 69H, 66H, 69H, 65H, 64H, 20H, 50H, 72H
   \            64205072
   \   000028   6F66696C     DB 6FH, 66H, 69H, 6CH, 65H, 49H, 44H, 20H
   \            65494420
   \   000030   416E6420     DB 41H, 6EH, 64H, 20H, 53H, 6FH, 75H, 72H
   \            536F7572
   \   000038   63652045     DB 63H, 65H, 20H, 45H, 6EH, 64H, 70H, 6FH
   \            6E64706F
   \   000040   696E7400     DB 69H, 6EH, 74H, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RAWZDO">`:
   \   000000   5241575A     DB "RAWZDO"
   \            444F00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Construct A Raw ZDO M...">`:
   \   000000   436F6E73     DB "Construct A Raw ZDO Message And Send To Target"
   \            74727563
   \            74204120
   \            52617720
   \            5A444F20
   \            4D657373
   \            61676520
   \            416E6420
   \            53656E64
   \            20546F20
   \            54617267
   \            657400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "INTERPAN">`:
   \   000000   494E5445     DB "INTERPAN"
   \            5250414E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Send an Interpan Command">`:
   \   000000   53656E64     DB "Send an Interpan Command"
   \            20616E20
   \            496E7465
   \            7270616E
   \            20436F6D
   \            6D616E64
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SCAN">`:
   \   000000   5343414E     DB "SCAN"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Scan The Energy Of Al...">`:
   \   000000   5363616E     DB 53H, 63H, 61H, 6EH, 20H, 54H, 68H, 65H
   \            20546865
   \   000008   20456E65     DB 20H, 45H, 6EH, 65H, 72H, 67H, 79H, 20H
   \            72677920
   \   000010   4F662041     DB 4FH, 66H, 20H, 41H, 6CH, 6CH, 20H, 43H
   \            6C6C2043
   \   000018   68616E6E     DB 68H, 61H, 6EH, 6EH, 65H, 6CH, 73H, 20H
   \            656C7320
   \   000020   6F722053     DB 6FH, 72H, 20H, 53H, 63H, 61H, 6EH, 20H
   \            63616E20
   \   000028   466F7220     DB 46H, 6FH, 72H, 20H, 41H, 63H, 74H, 69H
   \            41637469
   \   000030   76652050     DB 76H, 65H, 20H, 50H, 41H, 4EH, 73H, 0
   \            414E7300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "JN">`:
   \   000000   4A4E00       DB "JN"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Join Network">`:
   \   000000   4A6F696E     DB "Join Network"
   \            204E6574
   \            776F726B
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LN">`:
   \   000000   4C4E00       DB "LN"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Make Local Device Lea...">`:
   \   000000   4D616B65     DB "Make Local Device Leave PAN"
   \            204C6F63
   \            616C2044
   \            65766963
   \            65204C65
   \            61766520
   \            50414E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "N">`:
   \   000000   4E00         DB "N"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Display Network Infor...">`:
   \   000000   44697370     DB "Display Network Information"
   \            6C617920
   \            4E657477
   \            6F726B20
   \            496E666F
   \            726D6174
   \            696F6E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RJ">`:
   \   000000   524A00       DB "RJ"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rejoin the network">`:
   \   000000   52656A6F     DB "Rejoin the network"
   \            696E2074
   \            6865206E
   \            6574776F
   \            726B00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEYTAB">`:
   \   000000   4B455954     DB "KEYTAB"
   \            414200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Print Local Key And L...">`:
   \   000000   5072696E     DB "Print Local Key And Link Key Table"
   \            74204C6F
   \            63616C20
   \            4B657920
   \            416E6420
   \            4C696E6B
   \            204B6579
   \            20546162
   \            6C6500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IDREQ">`:
   \   000000   49445245     DB "IDREQ"
   \            5100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Request Node\\'s NodeID">`:
   \   000000   52657175     DB "Request Node's NodeID"
   \            65737420
   \            4E6F6465
   \            2773204E
   \            6F646549
   \            4400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EUIREQ">`:
   \   000000   45554952     DB "EUIREQ"
   \            455100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Request Node\\'s EUI64">`:
   \   000000   52657175     DB "Request Node's EUI64"
   \            65737420
   \            4E6F6465
   \            27732045
   \            55493634
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NODEDESC">`:
   \   000000   4E4F4445     DB "NODEDESC"
   \            44455343
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Request Node\\'s Descri...">`:
   \   000000   52657175     DB "Request Node's Descriptor"
   \            65737420
   \            4E6F6465
   \            27732044
   \            65736372
   \            6970746F
   \            7200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "POWERDESC">`:
   \   000000   504F5745     DB "POWERDESC"
   \            52444553
   \            4300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Request Node\\'s Power ...">`:
   \   000000   52657175     DB "Request Node's Power Descriptor"
   \            65737420
   \            4E6F6465
   \            27732050
   \            6F776572
   \            20446573
   \            63726970
   \            746F7200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ACTEPDESC">`:
   \   000000   41435445     DB "ACTEPDESC"
   \            50444553
   \            4300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Request Node\\'s Active...">`:
   \   000000   52657175     DB "Request Node's Active EndPoint List"
   \            65737420
   \            4E6F6465
   \            27732041
   \            63746976
   \            6520456E
   \            64506F69
   \            6E74204C
   \            69737400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SIMPLEDESC">`:
   \   000000   53494D50     DB "SIMPLEDESC"
   \            4C454445
   \            534300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Request Node\\'s Simple...">`:
   \   000000   52657175     DB "Request Node's Simple Descriptor"
   \            65737420
   \            4E6F6465
   \            27732053
   \            696D706C
   \            65204465
   \            73637269
   \            70746F72
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MATCHREQ">`:
   \   000000   4D415443     DB "MATCHREQ"
   \            48524551
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Find Nodes which Matc...">`:
   \   000000   46696E64     DB "Find Nodes which Match a Specific Descriptor"
   \            204E6F64
   \            65732077
   \            68696368
   \            204D6174
   \            63682061
   \            20537065
   \            63696669
   \            63204465
   \            73637269
   \            70746F72
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ANNCE">`:
   \   000000   414E4E43     DB "ANNCE"
   \            4500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Anounce Local Device ...">`:
   \   000000   416E6F75     DB "Anounce Local Device In The Network"
   \            6E636520
   \            4C6F6361
   \            6C204465
   \            76696365
   \            20496E20
   \            54686520
   \            4E657477
   \            6F726B00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BTABLE">`:
   \   000000   42544142     DB "BTABLE"
   \            4C4500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Display Binding Table">`:
   \   000000   44697370     DB "Display Binding Table"
   \            6C617920
   \            42696E64
   \            696E6720
   \            5461626C
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BSET">`:
   \   000000   42534554     DB "BSET"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Set local Binding Tab...">`:
   \   000000   53657420     DB "Set local Binding Table Entry"
   \            6C6F6361
   \            6C204269
   \            6E64696E
   \            67205461
   \            626C6520
   \            456E7472
   \            7900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BCLR">`:
   \   000000   42434C52     DB "BCLR"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Clear local Binding T...">`:
   \   000000   436C6561     DB "Clear local Binding Table Entry"
   \            72206C6F
   \            63616C20
   \            42696E64
   \            696E6720
   \            5461626C
   \            6520456E
   \            74727900

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BIND">`:
   \   000000   42494E44     DB "BIND"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Create Binding on Rem...">`:
   \   000000   43726561     DB "Create Binding on Remote Device"
   \            74652042
   \            696E6469
   \            6E67206F
   \            6E205265
   \            6D6F7465
   \            20446576
   \            69636500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UNBIND">`:
   \   000000   554E4249     DB "UNBIND"
   \            4E4400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Delete Binding on Rem...">`:
   \   000000   44656C65     DB "Delete Binding on Remote Device"
   \            74652042
   \            696E6469
   \            6E67206F
   \            6E205265
   \            6D6F7465
   \            20446576
   \            69636500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EBIND">`:
   \   000000   4542494E     DB "EBIND"
   \            4400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DASSR">`:
   \   000000   44415353     DB "DASSR"
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Disassociate Remote N...">`:
   \   000000   44697361     DB "Disassociate Remote Node from PAN"
   \            73736F63
   \            69617465
   \            2052656D
   \            6F746520
   \            4E6F6465
   \            2066726F
   \            6D205041
   \            4E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RADIOCH">`:
   \   000000   52414449     DB "RADIOCH"
   \            4F434800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Set or get local radi...">`:
   \   000000   53657420     DB "Set or get local radio channel"
   \            6F722067
   \            6574206C
   \            6F63616C
   \            20726164
   \            696F2063
   \            68616E6E
   \            656C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATABLE">`:
   \   000000   41544142     DB "ATABLE"
   \            4C4500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Display Address Table">`:
   \   000000   44697370     DB "Display Address Table"
   \            6C617920
   \            41646472
   \            65737320
   \            5461626C
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ASET">`:
   \   000000   41534554     DB "ASET"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Set Address Table Entry">`:
   \   000000   53657420     DB "Set Address Table Entry"
   \            41646472
   \            65737320
   \            5461626C
   \            6520456E
   \            74727900

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATRDISC">`:
   \   000000   41545244     DB "ATRDISC"
   \            49534300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Find Supported Define...">`:
   \   000000   46696E64     DB 46H, 69H, 6EH, 64H, 20H, 53H, 75H, 70H
   \            20537570
   \   000008   706F7274     DB 70H, 6FH, 72H, 74H, 65H, 64H, 20H, 44H
   \            65642044
   \   000010   6566696E     DB 65H, 66H, 69H, 6EH, 65H, 64H, 20H, 41H
   \            65642041
   \   000018   74747269     DB 74H, 74H, 72H, 69H, 62H, 75H, 74H, 65H
   \            62757465
   \   000020   73204F6E     DB 73H, 20H, 4FH, 6EH, 20H, 41H, 20H, 52H
   \            20412052
   \   000028   656D6F74     DB 65H, 6DH, 6FH, 74H, 65H, 20H, 44H, 65H
   \            65204465
   \   000030   76696365     DB 76H, 69H, 63H, 65H, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "READATTR">`:
   \   000000   52454144     DB "READATTR"
   \            41545452
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "read the attribute da...">`:
   \   000000   72656164     DB "read the attribute data by attrID"
   \            20746865
   \            20617474
   \            72696275
   \            74652064
   \            61746120
   \            62792061
   \            74747249
   \            4400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WRITEATTR">`:
   \   000000   57524954     DB "WRITEATTR"
   \            45415454
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "write the attribute d...">`:
   \   000000   77726974     DB "write the attribute data by attrID"
   \            65207468
   \            65206174
   \            74726962
   \            75746520
   \            64617461
   \            20627920
   \            61747472
   \            494400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HELP">`:
   \   000000   48454C50     DB "HELP"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "show all the AT commands">`:
   \   000000   73686F77     DB "show all the AT commands"
   \            20616C6C
   \            20746865
   \            20415420
   \            636F6D6D
   \            616E6473
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GETADDR">`:
   \   000000   47455441     DB "GETADDR"
   \            44445200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "show self short address">`:
   \   000000   73686F77     DB "show self short address"
   \            2073656C
   \            66207368
   \            6F727420
   \            61646472
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EPCTRL">`:
   \   000000   45504354     DB "EPCTRL"
   \            524C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "control the local end...">`:
   \   000000   636F6E74     DB "control the local endpoint"
   \            726F6C20
   \            74686520
   \            6C6F6361
   \            6C20656E
   \            64706F69
   \            6E7400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "REPCTRL">`:
   \   000000   52455043     DB "REPCTRL"
   \            54524C00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "control the remote en...">`:
   \   000000   636F6E74     DB "control the remote endpoint"
   \            726F6C20
   \            74686520
   \            72656D6F
   \            74652065
   \            6E64706F
   \            696E7400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEST">`:
   \   000000   54455354     DB "TEST"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Debug test">`:
   \   000000   44656275     DB "Debug test"
   \            67207465
   \            737400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_HOLD">`:
   \   000000   4445565F     DB "DEV_HOLD"
   \            484F4C44
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_INIT">`:
   \   000000   4445565F     DB "DEV_INIT"
   \            494E4954
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_DISC">`:
   \   000000   4445565F     DB "DEV_NWK_DISC"
   \            4E574B5F
   \            44495343
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_JOINING">`:
   \   000000   4445565F     DB "DEV_NWK_JOINING"
   \            4E574B5F
   \            4A4F494E
   \            494E4700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_SEC_REJOIN_CU...">`:
   \   000000   4445565F     DB "DEV_NWK_SEC_REJOIN_CURR_CHANNEL"
   \            4E574B5F
   \            5345435F
   \            52454A4F
   \            494E5F43
   \            5552525F
   \            4348414E
   \            4E454C00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_END_DEVICE_UNAUTH">`:
   \   000000   4445565F     DB "DEV_END_DEVICE_UNAUTH"
   \            454E445F
   \            44455649
   \            43455F55
   \            4E415554
   \            4800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_END_DEVICE">`:
   \   000000   4445565F     DB "DEV_END_DEVICE"
   \            454E445F
   \            44455649
   \            434500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_ROUTER">`:
   \   000000   4445565F     DB "DEV_ROUTER"
   \            524F5554
   \            455200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_COORD_STARTING">`:
   \   000000   4445565F     DB "DEV_COORD_STARTING"
   \            434F4F52
   \            445F5354
   \            41525449
   \            4E4700  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_ZB_COORD">`:
   \   000000   4445565F     DB "DEV_ZB_COORD"
   \            5A425F43
   \            4F4F5244
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_ORPHAN">`:
   \   000000   4445565F     DB "DEV_NWK_ORPHAN"
   \            4E574B5F
   \            4F525048
   \            414E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_KA">`:
   \   000000   4445565F     DB "DEV_NWK_KA"
   \            4E574B5F
   \            4B4100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_BACKOFF">`:
   \   000000   4445565F     DB "DEV_NWK_BACKOFF"
   \            4E574B5F
   \            4241434B
   \            4F464600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_SEC_REJOIN_AL...">`:
   \   000000   4445565F     DB "DEV_NWK_SEC_REJOIN_ALL_CHANNEL"
   \            4E574B5F
   \            5345435F
   \            52454A4F
   \            494E5F41
   \            4C4C5F43
   \            48414E4E
   \            454C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_TC_REJOIN_CUR...">`:
   \   000000   4445565F     DB "DEV_NWK_TC_REJOIN_CURR_CHANNEL"
   \            4E574B5F
   \            54435F52
   \            454A4F49
   \            4E5F4355
   \            52525F43
   \            48414E4E
   \            454C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_TC_REJOIN_ALL...">`:
   \   000000   4445565F     DB "DEV_NWK_TC_REJOIN_ALL_CHANNEL"
   \            4E574B5F
   \            54435F52
   \            454A4F49
   \            4E5F414C
   \            4C5F4348
   \            414E4E45
   \            4C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nOK\\r\\n">`:
   \   000000   0D0A4F4B     DB "\015\012OK\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I">`:
   \   000000   4900         DB "I"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Z">`:
   \   000000   5A00         DB "Z"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "F">`:
   \   000000   4600         DB "F"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nERROR:XX\\r\\n">`:
   \   000000   0D0A4552     DB "\015\012ERROR:XX\015\012"
   \            524F523A
   \            58580D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nSENDERROR:XX\\r\\n">`:
   \   000000   0D0A5345     DB "\015\012SENDERROR:XX\015\012"
   \            4E444552
   \            524F523A
   \            58580D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nZDOERROR:XX\\r\\n">`:
   \   000000   0D0A5A44     DB "\015\012ZDOERROR:XX\015\012"
   \            4F455252
   \            4F523A58
   \            580D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r">`:
   \   000000   0D00         DB "\015"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ENDDEVICE">`:
   \   000000   454E4444     DB "ENDDEVICE"
   \            45564943
   \            4500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EUI64:">`:
   \   000000   45554936     DB "EUI64:"
   \            343A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ":,\\r">`:
   \   000000   3A2C0D00     DB ":,\015"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter BootLoader">`:
   \   000000   456E7465     DB "Enter BootLoader"
   \            7220426F
   \            6F744C6F
   \            61646572
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TIME:">`:
   \   000000   54494D45     DB "TIME:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ":\\r">`:
   \   000000   3A0D00       DB ":\015"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ":,,,,,\\r">`:
   \   000000   3A2C2C2C     DB ":,,,,,\015"
   \            2C2C0D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ":,,\\r">`:
   \   000000   3A2C2C0D     DB ":,,\015"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CMD:">`:
   \   000000   434D443A     DB "CMD:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",">`:
   \   000000   2C00         DB ","

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PAYLOAD:">`:
   \   000000   5041594C     DB "PAYLOAD:"
   \            4F41443A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ":,,,\\r">`:
   \   000000   3A2C2C2C     DB ":,,,\015"
   \            0D00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\000\\000\\000\\000\\000\\000\\000\\000">`:
   \   000000   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000008   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+N=NoPAN">`:
   \   000000   2B4E3D4E     DB "+N=NoPAN"
   \            6F50414E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+N=">`:
   \   000000   2B4E3D00     DB "+N="

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COO">`:
   \   000000   434F4F00     DB "COO"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ROUTER">`:
   \   000000   524F5554     DB "ROUTER"
   \            455200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZED">`:
   \   000000   5A454400     DB "ZED"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02d\\n">`:
   \   000000   25303264     DB "%02d\012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+">`:
   \   000000   2B00         DB "+"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02d,">`:
   \   000000   25303264     DB "%02d,"
   \            2C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "-">`:
   \   000000   2D00         DB "-"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LOSTPAN">`:
   \   000000   4C4F5354     DB "LOSTPAN"
   \            50414E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NWK:">`:
   \   000000   4E574B3A     DB "NWK:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%08X">`:
   \   000000   25303858     DB "%08X"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LINKFF:">`:
   \   000000   4C494E4B     DB "LINKFF:"
   \            46463A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LINK%02X:">`:
   \   000000   4C494E4B     DB "LINK%02X:"
   \            25303258
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\nSEQ:%02X\\r\\n">`:
   \   000000   0D0A5345     DB "\015\012SEQ:%02X\015\012"
   \            513A2530
   \            32580D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ":,,,,\\r">`:
   \   000000   3A2C2C2C     DB ":,,,,\015"
   \            2C0D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ":,,,,,,\\r">`:
   \   000000   3A2C2C2C     DB ":,,,,,,\015"
   \            2C2C2C0D
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "channel: %02X">`:
   \   000000   6368616E     DB "channel: %02X"
   \            6E656C3A
   \            20253032
   \            5800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "No. | Active |  ID  |...">`:
   \   000000   4E6F2E20     DB "No. | Active |  ID  | EUI"
   \            7C204163
   \            74697665
   \            207C2020
   \            49442020
   \            7C204555
   \            4900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02X. |  %02X    | %0...">`:
   \   000000   25303258     DB "%02X. |  %02X    | %04X | %04X%04X%04X%04X"
   \            2E207C20
   \            20253032
   \            58202020
   \            207C2025
   \            30345820
   \            7C202530
   \            34582530
   \            34582530
   \            34582530
   \            345800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EntryStoreIn: %02X">`:
   \   000000   456E7472     DB "EntryStoreIn: %02X"
   \            7953746F
   \            7265496E
   \            3A202530
   \            325800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATI">`:
   \   000000   41544900     DB "ATI"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ".">`:
   \   000000   2E00         DB "."

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Display Product Ident...">`:
   \   000000   44697370     DB "Display Product Identification Information"
   \            6C617920
   \            50726F64
   \            75637420
   \            4964656E
   \            74696669
   \            63617469
   \            6F6E2049
   \            6E666F72
   \            6D617469
   \            6F6E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATZ">`:
   \   000000   41545A00     DB "ATZ"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Software Reset">`:
   \   000000   536F6674     DB "Software Reset"
   \            77617265
   \            20526573
   \            657400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATF">`:
   \   000000   41544600     DB "ATF"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Restore Local Device\\'...">`:
   \   000000   52657374     DB "Restore Local Device's Factory Defaults"
   \            6F726520
   \            4C6F6361
   \            6C204465
   \            76696365
   \            27732046
   \            6163746F
   \            72792044
   \            65666175
   \            6C747300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+">`:
   \   000000   41542B00     DB "AT+"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ".................">`:
   \   000000   2E2E2E2E     DB "................."
   \            2E2E2E2E
   \            2E2E2E2E
   \            2E2E2E2E
   \            2E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SelfshortAddr:%04X">`:
   \   000000   53656C66     DB "SelfshortAddr:%04X"
   \            73686F72
   \            74416464
   \            723A2530
   \            345800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ENABLED:">`:
   \   000000   454E4142     DB "ENABLED:"
   \            4C45443A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DISABLED:">`:
   \   000000   44495341     DB "DISABLED:"
   \            424C4544
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \   000000   554E4B4E     DB "UNKNOWNEP ERROR"
   \            4F574E45
   \            50204552
   \            524F5200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Result:">`:
   \   000000   52657375     DB "Result:"
   \            6C743A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff800:
   \   000000   00F8FF07     DD 134215680

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000
   4209          
   4210          /******************************************************************************
   4211           ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     20   AT_ChartoInt
      0    145   AT_ChartoInt16
        0     14   -> AT_ChartoInt
      0     52   AT_ChartoInt32
        0     20   -> AT_ChartoInt
      0    143   AT_ChartoInt8
        0     12   -> AT_ChartoInt
      0     99   AT_ChartoIntx
        0     19   -> AT_ChartoInt
      0     27   AT_CmdCmp
      0     41   AT_Cmd_ACTEPDESC
        0     39   -> AT_ChartoInt16
        0     39   -> AT_ChartoInt8
        0     39   -> AT_ChartoIntx
        0     39   -> AT_Pattern_Check
        0     39   -> AT_UARTWriteErrMsg
        0     39   -> AT_Uart0_Send
        0     39   -> AT_get_next_cmdUnit
        0     39   -> AddrMgrEntryGet
        0     39   -> StoreSeqNumInBuffer
        0     40   -> ZDP_NWKAddrOfInterestReq
        0     39   -> osal_mem_alloc
        0     39   -> osal_mem_free
        0     41   -> printf
      0     17   AT_Cmd_ANNCE
        0     16   -> AT_Pattern_Check
        0     16   -> AT_UARTWriteErrMsg
        0     16   -> AT_Uart0_Send
        0     16   -> AT_get_next_cmdUnit
        0     16   -> NLME_GetExtAddr
        0     16   -> NLME_GetShortAddr
        0     17   -> ZDP_DeviceAnnce
      0     47   AT_Cmd_ASET
        0     45   -> AT_ChartoInt16
        0     45   -> AT_ChartoIntx
        0     45   -> AT_Pattern_Check
        0     45   -> AT_UARTWriteErrMsg
        0     45   -> AT_Uart0_Send
        0     45   -> AT_get_next_cmdUnit
        0     45   -> AddrMgrEntryUpdate
        0     45   -> AddrMgrExtAddrSet
        0     47   -> printf
      0     43   AT_Cmd_ATABLE
        0     29   -> AT_Pattern_Check
        0     29   -> AT_UARTWriteErrMsg
        0     29   -> AT_Uart0_Send
        0     29   -> AT_get_next_cmdUnit
        0     29   -> AddrMgrEntryGet
        0     29   -> printf
        0     43   -> printf
      1     66   AT_Cmd_ATF
        0     38   -> AT_ChartoInt16
        0     38   -> AT_ChartoInt8
        0     38   -> AT_Pattern_Check
        0     38   -> AT_UARTWriteErrMsg
        0     38   -> AT_Uart0_Send
        0     38   -> AT_get_next_cmdUnit
        0     38   -> bdb_getZCLFrameCounter
        0     38   -> bdb_resetLocalAction
        0     49   -> zcl_SendCommand
      0     52   AT_Cmd_ATI
        0     35   -> AT_GetIEEEAddrStr
        0     35   -> AT_Int8toChar
        0     35   -> AT_Pattern_Check
        0     35   -> AT_UARTWriteErrMsg
        0     35   -> AT_Uart0_Send
        0     35   -> AT_get_next_cmdUnit
        0     35   -> NLME_GetExtAddr
        0     35   -> printf
      1     66   AT_Cmd_ATRDISC
        0     61   -> AT_ChartoInt16
        0     61   -> AT_ChartoInt8
        0     61   -> AT_Pattern_Check
        0     61   -> AT_UARTWriteErrMsg
        0     61   -> AT_Uart0_Send
        0     61   -> AT_get_next_cmdUnit
        0     61   -> bdb_getZCLFrameCounter
        0     66   -> zcl_SendDiscoverAttrsCmd
      0     34   AT_Cmd_ATZ
        0     13   -> AT_Pattern_Check
        0     13   -> AT_UARTWriteErrMsg
        0     13   -> AT_Uart0_Send
        0     13   -> AT_get_next_cmdUnit
        0     17   -> osal_start_timerEx
      0     54   AT_Cmd_AddKey
        0     52   -> AT_ChartoIntx
        0     52   -> AT_Pattern_Check
        0     52   -> AT_UARTWriteErrMsg
        0     52   -> AT_Uart0_Send
        0     52   -> AT_get_next_cmdUnit
        0     52   -> AddrMgrNwkAddrLookup
        0     54   -> ZDSecMgrAddLinkKey
        0     52   -> ZDSecMgrDeviceRemoveByExtAddr
      0     17   AT_Cmd_BCLR
        0     17   -> AT_ChartoInt8
        0     17   -> AT_Pattern_Check
        0     17   -> AT_UARTWriteErrMsg
        0     17   -> AT_Uart0_Send
        0     17   -> AT_get_next_cmdUnit
        0     17   -> bindRemoveEntry
      0     88   AT_Cmd_BIND
        0     80   -> AT_ChartoInt16
        0     80   -> AT_ChartoInt8
        0     80   -> AT_ChartoIntx
        0     80   -> AT_Pattern_Check
        0     80   -> AT_UARTWriteErrMsg
        0     80   -> AT_Uart0_Send
        0     80   -> AT_get_next_cmdUnit
        0     80   -> AddrMgrEntryGet
        0     80   -> NLME_GetExtAddr
        0     80   -> NLME_GetShortAddr
        0     80   -> StoreSeqNumInBuffer
        0     88   -> ZDP_BindUnbindReq
        0     80   -> osal_mem_alloc
        0     80   -> osal_mem_free
        0     83   -> osal_memcpy
        0     82   -> printf
      0     17   AT_Cmd_BLoad
        0     13   -> AT_Pattern_Check
        0     13   -> AT_UARTWriteErrMsg
        0     13   -> AT_Uart0_Send
        0     13   -> AT_get_next_cmdUnit
        0     17   -> osal_start_timerEx
      0     51   AT_Cmd_BSET
        0     49   -> AT_ChartoInt16
        0     49   -> AT_ChartoInt8
        0     49   -> AT_ChartoIntx
        0     49   -> AT_Pattern_Check
        0     49   -> AT_UARTWriteErrMsg
        0     49   -> AT_Uart0_Send
        0     49   -> AT_get_next_cmdUnit
      1     45   AT_Cmd_BTABLE
        0     40   -> AT_ChartoInt16
        0     40   -> AT_ChartoInt8
        0     40   -> AT_ChartoIntx
        0     40   -> AT_Pattern_Check
        0     40   -> AT_UARTWriteErrMsg
        0     40   -> AT_Uart0_Send
        0     40   -> AT_get_next_cmdUnit
        0     40   -> AddrMgrEntryGet
        0     40   -> NLME_GetShortAddr
        0     40   -> StoreSeqNumInBuffer
        0     45   -> ZDP_SendData
        0     40   -> osal_mem_alloc
        0     40   -> osal_mem_free
        0     42   -> printf
      0     45   AT_Cmd_DASSR
        0     43   -> AT_ChartoInt16
        0     43   -> AT_ChartoInt8
        0     43   -> AT_ChartoIntx
        0     43   -> AT_Pattern_Check
        0     43   -> AT_UARTWriteErrMsg
        0     43   -> AT_Uart0_Send
        0     43   -> AT_get_next_cmdUnit
        0     43   -> AddrMgrEntryGet
        0     43   -> NLME_GetShortAddr
        0     43   -> StoreSeqNumInBuffer
        0     45   -> ZDP_MgmtLeaveReq
        0     43   -> osal_mem_alloc
        0     43   -> osal_mem_free
        0     45   -> printf
      0     38   AT_Cmd_EBIND
        0     29   -> AT_ChartoInt8
        0     29   -> AT_UARTWriteErrMsg
        0     29   -> AT_Uart0_Send
        0     29   -> AT_get_next_cmdUnit
        0     29   -> NLME_GetShortAddr
        0     38   -> ZDP_EndDeviceBindReq
        0     29   -> afFindEndPointDesc
      0     43   AT_Cmd_EUIREQ
        0     41   -> AT_ChartoInt16
        0     41   -> AT_ChartoInt8
        0     41   -> AT_Pattern_Check
        0     41   -> AT_UARTWriteErrMsg
        0     41   -> AT_Uart0_Send
        0     41   -> AT_get_next_cmdUnit
        0     41   -> AddrMgrEntryGet
        0     41   -> StoreSeqNumInBuffer
        0     43   -> ZDP_IEEEAddrReq
        0     43   -> printf
      0     26   AT_Cmd_EpCtrl
        0     26   -> AT_ChartoInt8
        0     26   -> AT_Int8toChar
        0     26   -> AT_Pattern_Check
        0     26   -> AT_UARTWriteErrMsg
        0     26   -> AT_Uart0_Send
        0     26   -> AT_get_next_cmdUnit
      0     40   AT_Cmd_FN
        0     36   -> AT_ChartoInt16
        0     36   -> AT_ChartoInt8
        0     36   -> AT_Pattern_Check
        0     36   -> AT_UARTWriteErrMsg
        0     36   -> AT_get_next_cmdUnit
        0     36   -> bdb_StartCommissioning
        0     36   -> bdb_setChannelAttribute
        0     38   -> osal_nv_item_init
        0     40   -> osal_nv_read
        0     40   -> osal_nv_write
        0     40   -> osal_start_timerEx
      0     40   AT_Cmd_GetAddr
        0     38   -> AT_Pattern_Check
        0     38   -> AT_UARTWriteErrMsg
        0     38   -> AT_Uart0_Send
        0     38   -> AT_get_next_cmdUnit
        0     38   -> NLME_GetShortAddr
        0     40   -> sprintf
        0     38   -> strlen
      0     20   AT_Cmd_Help
        0     20   -> AT_Pattern_Check
        0     20   -> AT_UARTWriteErrMsg
        0     20   -> AT_Uart0_Send
        0     20   -> AT_get_next_cmdUnit
        0     20   -> printf
        0     20   -> strlen
      0     51   AT_Cmd_IDREQ
        0     48   -> AT_ChartoInt8
        0     48   -> AT_ChartoIntx
        0     48   -> AT_Pattern_Check
        0     48   -> AT_UARTWriteErrMsg
        0     48   -> AT_Uart0_Send
        0     48   -> AT_get_next_cmdUnit
        0     48   -> AddrMgrEntryGet
        0     48   -> ZDP_NwkAddrReq
        0     51   -> osal_memcpy
      0     59   AT_Cmd_InterPAN
        0     56   -> AT_ChartoInt16
        0     56   -> AT_ChartoInt8
        0     56   -> AT_Pattern_Check
        0     56   -> AT_UARTWriteErrMsg
        0     56   -> AT_Uart0_Send
        0     56   -> AT_get_next_cmdUnit
        0     59   -> InterPAN_Send
      0     39   AT_Cmd_JN
        0     35   -> AT_ChartoInt16
        0     35   -> AT_ChartoInt8
        0     35   -> AT_ChartoIntx
        0     35   -> AT_Pattern_Check
        0     35   -> AT_UARTWriteErrMsg
        0     35   -> AT_get_next_cmdUnit
        0     35   -> ZDO_RegisterForZdoCB
        0     35   -> bdb_StartCommissioning
        0     35   -> bdb_setChannelAttribute
        0     38   -> osal_memcpy
        0     37   -> osal_nv_item_init
        0     39   -> osal_nv_read
        0     39   -> osal_nv_write
        0     39   -> osal_start_timerEx
      0     66   AT_Cmd_KeyTab
        0     62   -> AT_GetIEEEAddrStr
        0     62   -> AT_Int8toChar
        0     62   -> AT_Pattern_Check
        0     62   -> AT_UARTWriteErrMsg
        0     62   -> AT_Uart0_Send
        0     62   -> AT_get_next_cmdUnit
        0     62   -> AddrMgrEntryGet
        0     62   -> SSP_ReadNwkActiveKey
        0     62   -> ZDSecMgrReadKeyFromNv
        0     64   -> printf
        0     66   -> printf
      0     27   AT_Cmd_LN
        0     23   -> AT_Pattern_Check
        0     23   -> AT_UARTWriteErrMsg
        0     23   -> AT_Uart0_Send
        0     23   -> AT_get_next_cmdUnit
        0     23   -> NLME_GetExtAddr
        0     23   -> NLME_GetShortAddr
        0     25   -> ZDP_MgmtLeaveReq
        0     27   -> osal_nv_read
      0     41   AT_Cmd_MATCHREQ
        0     33   -> AT_ChartoInt16
        0     33   -> AT_ChartoInt8
        0     33   -> AT_UARTWriteErrMsg
        0     33   -> AT_Uart0_Send
        0     33   -> AT_get_next_cmdUnit
        0     41   -> ZDP_MatchDescReq
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
      0     46   AT_Cmd_N
        0     42   -> AT_GetIEEEAddrStr
        0     42   -> AT_Int16toChar
        0     42   -> AT_Pattern_Check
        0     42   -> AT_UARTWriteErrMsg
        0     42   -> AT_Uart0_Send
        0     42   -> AT_get_next_cmdUnit
        0     46   -> osal_nv_read
        0     44   -> printf
      0     41   AT_Cmd_NODEDESC
        0     39   -> AT_ChartoInt16
        0     39   -> AT_ChartoInt8
        0     39   -> AT_ChartoIntx
        0     39   -> AT_Pattern_Check
        0     39   -> AT_UARTWriteErrMsg
        0     39   -> AT_Uart0_Send
        0     39   -> AT_get_next_cmdUnit
        0     39   -> AddrMgrEntryGet
        0     39   -> StoreSeqNumInBuffer
        0     40   -> ZDP_NWKAddrOfInterestReq
        0     39   -> osal_mem_alloc
        0     39   -> osal_mem_free
        0     41   -> printf
      0     33   AT_Cmd_PJ
        0     33   -> AT_ChartoInt16
        0     33   -> AT_ChartoInt8
        0     33   -> AT_Pattern_Check
        0     33   -> AT_UARTWriteErrMsg
        0     33   -> AT_Uart0_Send
        0     33   -> AT_get_next_cmdUnit
        0     33   -> ZDP_MgmtPermitJoinReq
      0     41   AT_Cmd_POWERDESC
        0     39   -> AT_ChartoInt16
        0     39   -> AT_ChartoInt8
        0     39   -> AT_ChartoIntx
        0     39   -> AT_Pattern_Check
        0     39   -> AT_UARTWriteErrMsg
        0     39   -> AT_Uart0_Send
        0     39   -> AT_get_next_cmdUnit
        0     39   -> AddrMgrEntryGet
        0     39   -> StoreSeqNumInBuffer
        0     40   -> ZDP_NWKAddrOfInterestReq
        0     39   -> osal_mem_alloc
        0     39   -> osal_mem_free
        0     41   -> printf
      1     27   AT_Cmd_RADIOCH
        0     25   -> AT_ChartoInt8
        0     25   -> AT_Pattern_Check
        0     25   -> AT_UARTWriteErrMsg
        0     25   -> AT_Uart0_Send
        0     25   -> AT_get_next_cmdUnit
        0     25   -> ZDApp_NwkStateUpdateCB
        0     25   -> ZMacGetReq
        0     25   -> ZMacSetReq
        0     27   -> printf
      1     44   AT_Cmd_REpCtrl
        0     42   -> AT_ChartoInt16
        0     42   -> AT_ChartoInt8
        0     42   -> AT_Pattern_Check
        0     44   -> AT_SendEPCtrl
        0     42   -> AT_UARTWriteErrMsg
        0     42   -> AT_Uart0_Send
        0     42   -> AT_get_next_cmdUnit
        0     42   -> NLME_GetShortAddr
      0     18   AT_Cmd_RJ
        0     18   -> AT_Pattern_Check
        0     18   -> AT_UARTWriteErrMsg
        0     18   -> AT_Uart0_Send
        0     18   -> AT_get_next_cmdUnit
        0     18   -> ZDO_RegisterForZdoCB
        0     18   -> bdb_setChannel
        0     18   -> nwk_setStateIdle
        0     18   -> osal_set_event
        0     18   -> sAddrExtCpy
      1     79   AT_Cmd_RawZCL
        0     68   -> AT_ChartoInt16
        0     68   -> AT_ChartoInt8
        0     68   -> AT_Pattern_Check
        0     68   -> AT_UARTWriteErrMsg
        0     68   -> AT_Uart0_Send
        0     68   -> AT_get_next_cmdUnit
        0     68   -> osal_mem_alloc
        0     68   -> osal_mem_free
        0     79   -> zcl_SendCommand
      1     77   AT_Cmd_RawZDO
        0     72   -> AT_ChartoInt16
        0     72   -> AT_ChartoInt8
        0     72   -> AT_Pattern_Check
        0     72   -> AT_UARTWriteErrMsg
        0     72   -> AT_Uart0_Send
        0     72   -> AT_get_next_cmdUnit
        0     77   -> ZDP_SendData
        0     72   -> osal_mem_alloc
        0     72   -> osal_mem_free
        0     75   -> osal_memcpy
      1    136   AT_Cmd_ReadAttr
        0    131   -> AT_ChartoInt16
        0    131   -> AT_ChartoInt8
        0    131   -> AT_Pattern_Check
        0    131   -> AT_UARTWriteErrMsg
        0    131   -> AT_Uart0_Send
        0    131   -> AT_get_next_cmdUnit
        0    131   -> NLME_GetShortAddr
        0    131   -> bdb_getZCLFrameCounter
        0    131   -> osal_mem_alloc
        0    131   -> osal_mem_free
        0    136   -> zcl_SendRead
      0     45   AT_Cmd_SIMPLEDESC
        0     43   -> AT_ChartoInt16
        0     43   -> AT_ChartoInt8
        0     43   -> AT_ChartoIntx
        0     43   -> AT_Pattern_Check
        0     43   -> AT_UARTWriteErrMsg
        0     43   -> AT_Uart0_Send
        0     43   -> AT_get_next_cmdUnit
        0     43   -> AddrMgrEntryGet
        0     43   -> StoreSeqNumInBuffer
        0     44   -> ZDP_SimpleDescReq
        0     43   -> osal_mem_alloc
        0     43   -> osal_mem_free
        0     45   -> printf
      0     37   AT_Cmd_Scan
        0     33   -> AT_ChartoInt8
        0     33   -> AT_Pattern_Check
        0     33   -> AT_UARTWriteErrMsg
        0     33   -> AT_get_next_cmdUnit
        0     33   -> NLME_GetShortAddr
        0     33   -> NLME_NwkDiscReq2
        0     33   -> NLME_NwkDiscTerm
        0     37   -> ZDP_MgmtNwkDiscReq
      0     28   AT_Cmd_Test
        0     26   -> AT_ChartoInt8
        0     26   -> AT_Pattern_Check
        0     26   -> AT_UARTWriteErrMsg
        0     26   -> AT_Uart0_Send
        0     26   -> AT_get_next_cmdUnit
        0     28   -> printf
      0     34   AT_Cmd_Time
        0     32   -> AT_ChartoInt32
        0     34   -> AT_Int32toChar
        0     32   -> AT_Pattern_Check
        0     32   -> AT_UARTWriteErrMsg
        0     32   -> AT_Uart0_Send
        0     32   -> AT_get_next_cmdUnit
        0     32   -> osal_getClock
        0     32   -> osal_setClock
      0     88   AT_Cmd_UNBIND
        0     80   -> AT_ChartoInt16
        0     80   -> AT_ChartoInt8
        0     80   -> AT_ChartoIntx
        0     80   -> AT_Pattern_Check
        0     80   -> AT_UARTWriteErrMsg
        0     80   -> AT_Uart0_Send
        0     80   -> AT_get_next_cmdUnit
        0     80   -> AddrMgrEntryGet
        0     80   -> NLME_GetExtAddr
        0     80   -> NLME_GetShortAddr
        0     80   -> StoreSeqNumInBuffer
        0     88   -> ZDP_BindUnbindReq
        0     80   -> osal_mem_alloc
        0     80   -> osal_mem_free
        0     83   -> osal_memcpy
        0     82   -> printf
      1    137   AT_Cmd_WriteAttr
        0    131   -> AT_ChartoInt16
        0    131   -> AT_ChartoInt8
        0    131   -> AT_Pattern_Check
        0    131   -> AT_UARTWriteErrMsg
        0    131   -> AT_Uart0_Send
        0    131   -> AT_get_next_cmdUnit
        0    131   -> NLME_GetShortAddr
        0    131   -> bdb_getZCLFrameCounter
        0    131   -> osal_mem_alloc
        0    131   -> osal_mem_free
        0    137   -> zcl_SendWriteRequest
      1     71   AT_GetIEEEAddrStr
      0     14   AT_HalUARTWrite
        0     14   -> HalUARTPoll
        0     14   -> HalUARTWrite
      0     28   AT_HandleCMD
        0     17   -> AT_CmdCmp
        0     17   -> AT_Cmd_ATF
        0     17   -> AT_Cmd_ATI
        0     17   -> AT_Cmd_ATZ
        0     17   -> AT_UARTWriteErrMsg
        0     17   -> AT_Uart0_Send
        0     17   -> AT_get_next_cmdUnit
      1     51   AT_Int16toChar
      1     50   AT_Int32toChar
      3     62   AT_Int8toChar
      1     13   AT_IntxtoChar
      0    141   AT_Pattern_Check
      1    188   AT_UARTWriteErrMsg
        0     57   -> AT_Uart0_Send
      0     38   AT_UART_Init
        0     38   -> HalUARTOpen
      1     11   AT_UartProcess
        0     11   -> AT_HandleCMD
        0     11   -> HalUARTRead
        0     11   -> Hal_UART_RxBufLen
        0     11   -> osal_memset
      1    141   AT_get_next_cmdUnit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
      43  ?<Constant "%02X. |  %02X    | %0...">
       6  ?<Constant "%02d,">
       6  ?<Constant "%02d\n">
       5  ?<Constant "%08X">
       2  ?<Constant "+">
       4  ?<Constant "+N=">
       9  ?<Constant "+N=NoPAN">
       2  ?<Constant ",">
       2  ?<Constant "-">
       2  ?<Constant ".">
      18  ?<Constant ".................">
       9  ?<Constant ":,,,,,,\r">
       8  ?<Constant ":,,,,,\r">
       7  ?<Constant ":,,,,\r">
       6  ?<Constant ":,,,\r">
       5  ?<Constant ":,,\r">
       4  ?<Constant ":,\r">
       3  ?<Constant ":\r">
      10  ?<Constant "ACTEPDESC">
       6  ?<Constant "ANNCE">
       5  ?<Constant "ASET">
       4  ?<Constant "AT+">
       7  ?<Constant "ATABLE">
       4  ?<Constant "ATF">
       4  ?<Constant "ATI">
       8  ?<Constant "ATRDISC">
       4  ?<Constant "ATZ">
      36  ?<Constant "Anounce Local Device ...">
       5  ?<Constant "BCLR">
       5  ?<Constant "BIND">
       6  ?<Constant "BLOAD">
       5  ?<Constant "BSET">
       7  ?<Constant "BTABLE">
       5  ?<Constant "CMD:">
       4  ?<Constant "COO">
      32  ?<Constant "Clear local Binding T...">
      47  ?<Constant "Construct A Raw ZDO M...">
      32  ?<Constant "Create Binding on Rem...">
       6  ?<Constant "DASSR">
      19  ?<Constant "DEV_COORD_STARTING">
      15  ?<Constant "DEV_END_DEVICE">
      22  ?<Constant "DEV_END_DEVICE_UNAUTH">
       9  ?<Constant "DEV_HOLD">
       9  ?<Constant "DEV_INIT">
      16  ?<Constant "DEV_NWK_BACKOFF">
      13  ?<Constant "DEV_NWK_DISC">
      16  ?<Constant "DEV_NWK_JOINING">
      11  ?<Constant "DEV_NWK_KA">
      15  ?<Constant "DEV_NWK_ORPHAN">
      31  ?<Constant "DEV_NWK_SEC_REJOIN_AL...">
      32  ?<Constant "DEV_NWK_SEC_REJOIN_CU...">
      30  ?<Constant "DEV_NWK_TC_REJOIN_ALL...">
      31  ?<Constant "DEV_NWK_TC_REJOIN_CUR...">
      11  ?<Constant "DEV_ROUTER">
      13  ?<Constant "DEV_ZB_COORD">
      10  ?<Constant "DISABLED:">
      11  ?<Constant "Debug test">
      32  ?<Constant "Delete Binding on Rem...">
      34  ?<Constant "Disassociate Remote N...">
      22  ?<Constant "Display Address Table">
      22  ?<Constant "Display Binding Table">
      28  ?<Constant "Display Network Infor...">
      43  ?<Constant "Display Product Ident...">
       6  ?<Constant "EBIND">
       9  ?<Constant "ENABLED:">
      10  ?<Constant "ENDDEVICE">
       7  ?<Constant "EPCTRL">
       7  ?<Constant "EUI64:">
       7  ?<Constant "EUIREQ">
      16  ?<Constant "End Device Bind">
      17  ?<Constant "Enter BootLoader">
      27  ?<Constant "Enter The Boot Loader...">
      19  ?<Constant "EntryStoreIn: %02X">
       2  ?<Constant "F">
      45  ?<Constant "Find Nodes which Matc...">
      53  ?<Constant "Find Supported Define...">
       8  ?<Constant "GETADDR">
      22  ?<Constant "Get or Set Local Time">
       5  ?<Constant "HELP">
       2  ?<Constant "I">
       6  ?<Constant "IDREQ">
       9  ?<Constant "INTERPAN">
       3  ?<Constant "JN">
      13  ?<Constant "Join Network">
       7  ?<Constant "KEYTAB">
      10  ?<Constant "LINK%02X:">
       8  ?<Constant "LINKFF:">
       3  ?<Constant "LN">
       8  ?<Constant "LOSTPAN">
       9  ?<Constant "MATCHREQ">
      28  ?<Constant "Make Local Device Lea...">
       2  ?<Constant "N">
       9  ?<Constant "NODEDESC">
       5  ?<Constant "NWK:">
      26  ?<Constant "No. | Active |  ID  |...">
       9  ?<Constant "PAYLOAD:">
      10  ?<Constant "POWERDESC">
      35  ?<Constant "Print Local Key And L...">
       8  ?<Constant "RADIOCH">
       7  ?<Constant "RAWZCL">
       7  ?<Constant "RAWZDO">
       9  ?<Constant "READATTR">
       8  ?<Constant "REPCTRL">
       3  ?<Constant "RJ">
       7  ?<Constant "ROUTER">
      19  ?<Constant "Rejoin the network">
      36  ?<Constant "Request Node\'s Active...">
      26  ?<Constant "Request Node\'s Descri...">
      21  ?<Constant "Request Node\'s EUI64">
      22  ?<Constant "Request Node\'s NodeID">
      32  ?<Constant "Request Node\'s Power ...">
      33  ?<Constant "Request Node\'s Simple...">
      40  ?<Constant "Restore Local Device\'...">
       8  ?<Constant "Result:">
       5  ?<Constant "SCAN">
      11  ?<Constant "SIMPLEDESC">
      56  ?<Constant "Scan The Energy Of Al...">
      19  ?<Constant "SelfshortAddr:%04X">
      68  ?<Constant "Send A Raw ZCL Messag...">
      25  ?<Constant "Send an Interpan Command">
      24  ?<Constant "Set Address Table Entry">
      30  ?<Constant "Set local Binding Tab...">
      31  ?<Constant "Set or get local radi...">
      15  ?<Constant "Software Reset">
       5  ?<Constant "TEST">
       5  ?<Constant "TIME">
       6  ?<Constant "TIME:">
       7  ?<Constant "UNBIND">
      16  ?<Constant "UNKNOWNEP ERROR">
      10  ?<Constant "WRITEATTR">
       2  ?<Constant "Z">
       4  ?<Constant "ZED">
       9  ?<Constant "\000\000\000\000\000\000\000\000">
       2  ?<Constant "\r">
       3  ?<Constant "\r\n">
      13  ?<Constant "\r\nERROR:XX\r\n">
       7  ?<Constant "\r\nOK\r\n">
      17  ?<Constant "\r\nSENDERROR:XX\r\n">
      13  ?<Constant "\r\nSEQ:%02X\r\n">
      16  ?<Constant "\r\nZDOERROR:XX\r\n">
      14  ?<Constant "channel: %02X">
      27  ?<Constant "control the local end...">
      28  ?<Constant "control the remote en...">
      34  ?<Constant "read the attribute da...">
      25  ?<Constant "show all the AT commands">
      24  ?<Constant "show self short address">
      35  ?<Constant "write the attribute d...">
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
       9  ?<Constant {{0}, 2}>
       9  ?<Constant {{0}, 2}>_1
       9  ?<Constant {{65532}, 15}>
      15  ?<Initializer for FWReversion>
      32  ?<Initializer for devStates_str>
       1  ?<Initializer for keySeqNum>
       1  ?<Initializer for notdoEUIREQcmd>
       1  ?<Initializer for notdoFNCmd>
       1  ?<Initializer for notdoJNCmd>
       1  ?<Initializer for notdoNODEDESEcmd>
       1  ?<Initializer for notdoSCANCmd>
       1  ?<Initializer for notdoSIMPLEDESCcmd>
       6  ??Subroutine145_0
      12  ??Subroutine146_0
       2  ??Subroutine147_0
       8  ??Subroutine148_0
       9  ??Subroutine149_0
       8  ??Subroutine150_0
      13  ??Subroutine151_0
       6  ??Subroutine152_0
       8  ??Subroutine153_0
       8  ??Subroutine154_0
       4  ??Subroutine155_0
       3  ??Subroutine156_0
       5  ??Subroutine157_0
       8  ??Subroutine158_0
       6  ??Subroutine159_0
       8  ??Subroutine160_0
       6  ??Subroutine161_0
       5  ??Subroutine162_0
       5  ??Subroutine163_0
       6  ??Subroutine164_0
       3  ??Subroutine165_0
       5  ??Subroutine166_0
      17  ??Subroutine167_0
       6  ??Subroutine168_0
      16  ??Subroutine169_0
       6  ??Subroutine170_0
       8  ??Subroutine171_0
      10  ??Subroutine172_0
       4  ??Subroutine173_0
       5  ??Subroutine174_0
       8  ??Subroutine175_0
       3  ??Subroutine176_0
       5  ??Subroutine177_0
       5  ??Subroutine178_0
       4  ??Subroutine179_0
       6  ??Subroutine180_0
       6  ??Subroutine181_0
       9  ??Subroutine182_0
       4  ??Subroutine183_0
       5  ??Subroutine184_0
       6  ??Subroutine185_0
       8  ??Subroutine186_0
       8  ??Subroutine187_0
       4  ??Subroutine188_0
       6  ??Subroutine189_0
       6  ??Subroutine190_0
       8  ??Subroutine191_0
       8  ??Subroutine192_0
       8  ??Subroutine193_0
       6  ??Subroutine194_0
       8  ??Subroutine195_0
      15  ??Subroutine196_0
       2  ?Subroutine0
       3  ?Subroutine1
       5  ?Subroutine10
      17  ?Subroutine100
       4  ?Subroutine101
       4  ?Subroutine102
       4  ?Subroutine103
       6  ?Subroutine104
       6  ?Subroutine105
       4  ?Subroutine106
      12  ?Subroutine107
       4  ?Subroutine108
       6  ?Subroutine109
       5  ?Subroutine11
       7  ?Subroutine110
      18  ?Subroutine111
       6  ?Subroutine112
       6  ?Subroutine113
      14  ?Subroutine114
       2  ?Subroutine115
       5  ?Subroutine116
      12  ?Subroutine117
      10  ?Subroutine118
      12  ?Subroutine119
       8  ?Subroutine12
       4  ?Subroutine120
       9  ?Subroutine121
       6  ?Subroutine122
       5  ?Subroutine123
       6  ?Subroutine124
      10  ?Subroutine125
      10  ?Subroutine126
      10  ?Subroutine127
       5  ?Subroutine128
      15  ?Subroutine129
      11  ?Subroutine13
      11  ?Subroutine130
      11  ?Subroutine131
      11  ?Subroutine132
       4  ?Subroutine133
       5  ?Subroutine134
       5  ?Subroutine135
       4  ?Subroutine136
       8  ?Subroutine137
      16  ?Subroutine138
       8  ?Subroutine139
      10  ?Subroutine14
      13  ?Subroutine140
      11  ?Subroutine141
      11  ?Subroutine142
       2  ?Subroutine143
      11  ?Subroutine144
       8  ?Subroutine15
       2  ?Subroutine16
       6  ?Subroutine17
      43  ?Subroutine18
      11  ?Subroutine19
       5  ?Subroutine2
       8  ?Subroutine20
      13  ?Subroutine21
       8  ?Subroutine22
       8  ?Subroutine23
       5  ?Subroutine24
       8  ?Subroutine25
       3  ?Subroutine26
       7  ?Subroutine27
      11  ?Subroutine28
      12  ?Subroutine29
       2  ?Subroutine3
      10  ?Subroutine30
      21  ?Subroutine31
      13  ?Subroutine32
      12  ?Subroutine33
      16  ?Subroutine34
      41  ?Subroutine35
       7  ?Subroutine36
       6  ?Subroutine37
      21  ?Subroutine38
       6  ?Subroutine39
       3  ?Subroutine4
      21  ?Subroutine40
       6  ?Subroutine41
      16  ?Subroutine42
      29  ?Subroutine43
      14  ?Subroutine44
      14  ?Subroutine45
       4  ?Subroutine46
       2  ?Subroutine47
       2  ?Subroutine48
      13  ?Subroutine49
       2  ?Subroutine5
      16  ?Subroutine50
       4  ?Subroutine51
       7  ?Subroutine52
       6  ?Subroutine53
       9  ?Subroutine54
      11  ?Subroutine55
      16  ?Subroutine56
       6  ?Subroutine57
      25  ?Subroutine58
       6  ?Subroutine59
       5  ?Subroutine6
       6  ?Subroutine60
      21  ?Subroutine61
      15  ?Subroutine62
       6  ?Subroutine63
       4  ?Subroutine64
       6  ?Subroutine65
      16  ?Subroutine66
      18  ?Subroutine67
       4  ?Subroutine68
      12  ?Subroutine69
       5  ?Subroutine7
       4  ?Subroutine70
       3  ?Subroutine71
       8  ?Subroutine72
       3  ?Subroutine73
      15  ?Subroutine74
       8  ?Subroutine75
      16  ?Subroutine76
       7  ?Subroutine77
       3  ?Subroutine78
      12  ?Subroutine79
       2  ?Subroutine8
       4  ?Subroutine80
       7  ?Subroutine81
       1  ?Subroutine82
      10  ?Subroutine83
       1  ?Subroutine84
       9  ?Subroutine85
      13  ?Subroutine86
       4  ?Subroutine87
       4  ?Subroutine88
       4  ?Subroutine89
       5  ?Subroutine9
      13  ?Subroutine90
       9  ?Subroutine91
      12  ?Subroutine92
       4  ?Subroutine93
       4  ?Subroutine94
       9  ?Subroutine95
       8  ?Subroutine96
      12  ?Subroutine97
       4  ?Subroutine98
      16  ?Subroutine99
       2  AT_CMD_SZ
      42  AT_ChartoInt
     126  AT_ChartoInt16
     305  AT_ChartoInt32
      41  AT_ChartoInt8
     181  AT_ChartoIntx
      90  AT_CmdCmp
     164  AT_Cmd_ACTEPDESC
      81  AT_Cmd_ANNCE
     193  AT_Cmd_ASET
     228  AT_Cmd_ATABLE
     238  AT_Cmd_ATF
     127  AT_Cmd_ATI
     286  AT_Cmd_ATRDISC
      48  AT_Cmd_ATZ
     220  AT_Cmd_AddKey
     222  AT_Cmd_Arr
      80  AT_Cmd_BCLR
     390  AT_Cmd_BIND
      59  AT_Cmd_BLoad
     283  AT_Cmd_BSET
     301  AT_Cmd_BTABLE
     217  AT_Cmd_DASSR
     226  AT_Cmd_EBIND
     226  AT_Cmd_EUIREQ
     144  AT_Cmd_EpCtrl
     280  AT_Cmd_FN
     102  AT_Cmd_GetAddr
     235  AT_Cmd_Help
     225  AT_Cmd_IDREQ
     242  AT_Cmd_InterPAN
     339  AT_Cmd_JN
     444  AT_Cmd_KeyTab
     147  AT_Cmd_LN
     314  AT_Cmd_MATCHREQ
     374  AT_Cmd_N
     166  AT_Cmd_NODEDESC
     225  AT_Cmd_PJ
     164  AT_Cmd_POWERDESC
     252  AT_Cmd_RADIOCH
     208  AT_Cmd_REpCtrl
     166  AT_Cmd_RJ
     536  AT_Cmd_RawZCL
     419  AT_Cmd_RawZDO
     422  AT_Cmd_ReadAttr
     210  AT_Cmd_SIMPLEDESC
     199  AT_Cmd_Scan
     215  AT_Cmd_Test
     142  AT_Cmd_Time
     390  AT_Cmd_UNBIND
     708  AT_Cmd_WriteAttr
     105  AT_GetIEEEAddrStr
      77  AT_HalUARTWrite
     325  AT_HandleCMD
      88  AT_Int16toChar
     203  AT_Int32toChar
      53  AT_Int8toChar
     150  AT_IntxtoChar
      93  AT_Pattern_Check
     100  AT_RxBuffer
     345  AT_UARTWriteErrMsg
     109  AT_UART_Init
       1  AT_UART_TaskID
     258  AT_UartProcess
     169  AT_get_next_cmdUnit
       1  AT_templen
      15  FWReversion
       4  __Constant_1388
       4  __Constant_32
       4  __Constant_64
       4  __Constant_7fff800
       1  at_state
      32  devStates_str
       1  isProcessing
       1  keySeqNum
       1  notdoEUIREQcmd
       1  notdoFNCmd
       1  notdoJNCmd
       1  notdoNODEDESEcmd
       1  notdoSCANCmd
       1  notdoSIMPLEDESCcmd
       1  startMode
     366  -- Other

 
 15 068 bytes in segment BANKED_CODE
    366 bytes in segment BANK_RELAYS
     54 bytes in segment XDATA_I
     54 bytes in segment XDATA_ID
  2 528 bytes in segment XDATA_ROM_C
    105 bytes in segment XDATA_Z
 
    420 bytes of CODE     memory
  2 512 bytes of CONST    memory (+ 16 bytes shared)
 15 068 bytes of HUGECODE memory
    159 bytes of XDATA    memory

Errors: none
Warnings: none
