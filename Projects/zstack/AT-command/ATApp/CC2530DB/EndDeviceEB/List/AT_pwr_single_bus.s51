///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              24/Feb/2022  09:44:41
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_pwr_single_bus.c
//    Command line       =  
//        -f C:\Users\Administrator\AppData\Local\Temp\EW66E1.tmp
//        (D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_pwr_single_bus.c
//        -D WDT_IN_PM1 -D ZIGBEEPRO -D INTER_PAN -D ZIGBEE_FREQ_AGILITY -D
//        DISABLE_GREENPOWER_BASIC_PROXY -D REFLECTOR -D HAL_UART=FALSE -D
//        HAL_LED=FALSE -D HAL_KEY=FALSE -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D xLEGACY_LCD_DEBUG -D
//        xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_DISCOVER -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_SCENES
//        -D ZCL_GROUPS -D BDB_REPORTING -D ZCL_DOORLOCK -D ZCL_DOORLOCK_EXT -D
//        ISR_KEYINTERRUPT -lC
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        -lA
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=10 -DMAX_RTG_ENTRIES=15 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=300 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\ZCL\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\UserAPI\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\Source\Controller\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\CC2530DB\EndDeviceEB\List\AT_pwr_single_bus.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AT_pwr_single_bus

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_ADD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??AT_DoorLock_SendOperationEventNotification::?`,0203H
        PUBLIC `??AT_pwr_single_bus_init::?relay`
        FUNCTION `??AT_pwr_single_bus_init::?relay`,0203H
        PUBLIC `??AT_pwr_single_bus_input::?relay`
        FUNCTION `??AT_pwr_single_bus_input::?relay`,0203H
        PUBLIC `??AT_pwr_single_bus_output::?relay`
        FUNCTION `??AT_pwr_single_bus_output::?relay`,0203H
        PUBLIC `??AT_pwr_single_bus_send_buf::?relay`
        FUNCTION `??AT_pwr_single_bus_send_buf::?relay`,0203H
        PUBLIC `??AT_pwr_single_bus_send_byte::?relay`
        FUNCTION `??AT_pwr_single_bus_send_byte::?relay`,0203H
        PUBWEAK `??pwr_single_bus_Isr::??INTVEC 51`
        FUNCTION AT_DoorLock_SendOperationEventNotification,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC AT_pwr_single_bus_init
        FUNCTION AT_pwr_single_bus_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AT_pwr_single_bus_input
        FUNCTION AT_pwr_single_bus_input,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC AT_pwr_single_bus_output
        FUNCTION AT_pwr_single_bus_output,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC AT_pwr_single_bus_send_buf
        FUNCTION AT_pwr_single_bus_send_buf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC AT_pwr_single_bus_send_byte
        FUNCTION AT_pwr_single_bus_send_byte,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK IEN2
        PUBWEAK IP0
        PUBWEAK IP1
        PUBWEAK P2DIR
        PUBWEAK P2IEN
        PUBWEAK P2IFG
        PUBWEAK P2INP
        PUBWEAK P2SEL
        PUBWEAK PICTL
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P2
        PUBLIC pwr_single_bus_Isr
        FUNCTION pwr_single_bus_Isr,0a1233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC pwr_single_bus_rcv_bit
        PUBLIC pwr_single_bus_rcv_buf
        PUBLIC pwr_single_bus_rcv_high
        PUBLIC pwr_single_bus_rcv_len
        PUBLIC pwr_single_bus_rcv_low
        PUBLIC pwr_single_bus_rcv_total
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AT_Timer1_Set_Clear_Start_US SYMBOL "AT_Timer1_Set_Clear_Start_US"
`??AT_Timer1_Set_Clear_Start_US::?relay` SYMBOL "?relay", AT_Timer1_Set_Clear_Start_US
AT_Timer1_Stop_Get  SYMBOL "AT_Timer1_Stop_Get"
`??AT_Timer1_Stop_Get::?relay` SYMBOL "?relay", AT_Timer1_Stop_Get
Onboard_wait        SYMBOL "Onboard_wait"
`??Onboard_wait::?relay` SYMBOL "?relay", Onboard_wait
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
zclClosures_SendDoorLockOperationEventNotification SYMBOL "zclClosures_SendDoorLockOperationEventNotification"
??zclClosures_SendDoorLockOperationEventNotific SYMBOL "?relay", zclClosures_SendDoorLockOperationEventNotification
AT_pwr_single_bus_init SYMBOL "AT_pwr_single_bus_init"
`??AT_pwr_single_bus_init::?relay` SYMBOL "?relay", AT_pwr_single_bus_init
AT_pwr_single_bus_input SYMBOL "AT_pwr_single_bus_input"
`??AT_pwr_single_bus_input::?relay` SYMBOL "?relay", AT_pwr_single_bus_input
AT_pwr_single_bus_output SYMBOL "AT_pwr_single_bus_output"
`??AT_pwr_single_bus_output::?relay` SYMBOL "?relay", AT_pwr_single_bus_output
AT_pwr_single_bus_send_buf SYMBOL "AT_pwr_single_bus_send_buf"
`??AT_pwr_single_bus_send_buf::?relay` SYMBOL "?relay", AT_pwr_single_bus_send_buf
AT_pwr_single_bus_send_byte SYMBOL "AT_pwr_single_bus_send_byte"
`??AT_pwr_single_bus_send_byte::?relay` SYMBOL "?relay", AT_pwr_single_bus_send_byte
pwr_single_bus_Isr  SYMBOL "pwr_single_bus_Isr"
`??pwr_single_bus_Isr::??INTVEC 51` SYMBOL "??INTVEC 51", pwr_single_bus_Isr

        EXTERN `??AT_Timer1_Set_Clear_Start_US::?relay`
        FUNCTION `??AT_Timer1_Set_Clear_Start_US::?relay`,00H
        EXTERN `??AT_Timer1_Stop_Get::?relay`
        FUNCTION `??AT_Timer1_Stop_Get::?relay`,00H
        EXTERN `??Onboard_wait::?relay`
        FUNCTION `??Onboard_wait::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN ??zclClosures_SendDoorLockOperationEventNotific
        FUNCTION ??zclClosures_SendDoorLockOperationEventNotific,00H
        EXTERN AT_Timer1_Set_Clear_Start_US
        FUNCTION AT_Timer1_Set_Clear_Start_US,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Timer1_Stop_Get
        FUNCTION AT_Timer1_Stop_Get,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZclTransactionSequenceNumber
        EXTERN halSleepPconValue
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclClosures_SendDoorLockOperationEventNotification
        FUNCTION zclClosures_SendDoorLockOperationEventNotification,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDoorLock_TaskID

// D:\A_proj\A_Cproj\Zigbee\ZigBee-DoorLock-2021.09.27\Projects\zstack\AT-command\ATApp\Source\Controller\AT_pwr_single_bus.c
//    1 /******************************************************************************
//    2   Filename:       AT_pwr_single_bus.c
//    3   Author:         Jinhui Li
//    4 ******************************************************************************/
//    5 #include "AT_pwr_single_bus.h"

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a9H
// unsigned char volatile __sfr IP0
IP0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0acH
// unsigned char volatile __sfr P2IEN
P2IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b9H
// unsigned char volatile __sfr IP1
IP1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//    6 #include "AT_doorlock.h"
//    7 #include "AT_timer1.h"
//    8 #include "zcl_doorlock.h"
//    9 #include "OnBoard.h"
//   10 #include "AT_printf.h"
//   11 #include "AF.h"
//   12 #include "zcl_closures.h"
//   13 #include "hal_defs.h"
//   14 #include "bdb.h"
//   15 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   16 uint8 pwr_single_bus_rcv_buf[PWR_SINGLE_BUS_RCV_MAX] = {0x00};
pwr_single_bus_rcv_buf:
        DS 100
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   17 uint8 pwr_single_bus_rcv_len = 0;
pwr_single_bus_rcv_len:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   18 uint8 pwr_single_bus_rcv_bit = 0;
pwr_single_bus_rcv_bit:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   19 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   20 uint16 pwr_single_bus_rcv_total = 0;
pwr_single_bus_rcv_total:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   21 uint16 pwr_single_bus_rcv_high = 0;
pwr_single_bus_rcv_high:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   22 uint16 pwr_single_bus_rcv_low = 0;
pwr_single_bus_rcv_low:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   23 
//   24 
//   25 static ZStatus_t AT_DoorLock_SendOperationEventNotification_pwr(uint8 *buf);

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   26 void AT_pwr_single_bus_input(void)
AT_pwr_single_bus_input:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function AT_pwr_single_bus_input
        CODE
//   27 {
        ; Saved register size: 0
        ; Auto size: 0
//   28   PWR_SINGLE_BUS_SEL &= ~PWR_SINGLE_BUS_BV;
        ANL       0xf5,#0xfe
//   29   PWR_SINGLE_BUS_DIR &= ~PWR_SINGLE_BUS_BV;
        ANL       0xff,#0xfe
//   30   PWR_SINGLE_BUS_INP &= ~PWR_SINGLE_BUS_BV;
        ANL       0xf7,#0xfe
//   31 
//   32   P2IFG = 0x00;
        MOV       0x8b,#0x0
//   33   P2IF  = 0x00;
        CLR       0xe8.0
//   34 
//   35   
//   36   IEN2  |= BV(1); // enable port interrupt
        ORL       0x9a,#0x2
//   37   P2IEN |= PWR_SINGLE_BUS_BV; // enable pin interrupt
        ORL       0xac,#0x1
//   38 
//   39   P2INP &= ~BV(7); // pull up
        ANL       0xf7,#0x7f
//   40   PICTL |=  PWR_SINGLE_BUS_EDGE_BV; // falling edge
        ORL       0x8c,#0x8
//   41 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE P2INP
        REQUIRE P2IFG
        REQUIRE _A_IRCON2
        REQUIRE IEN2
        REQUIRE P2IEN
        REQUIRE PICTL

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   42 void AT_pwr_single_bus_output(void)
AT_pwr_single_bus_output:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function AT_pwr_single_bus_output
        CODE
//   43 {
        ; Saved register size: 0
        ; Auto size: 0
//   44   PWR_SINGLE_BUS_SEL &= ~PWR_SINGLE_BUS_BV;
        ANL       0xf5,#0xfe
//   45   PWR_SINGLE_BUS_DIR |=  PWR_SINGLE_BUS_BV;
        ORL       0xff,#0x1
//   46 
//   47   IEN2  &= ~BV(1); // disable port interrupt
        ANL       0x9a,#0xfd
//   48   P2IEN &= ~PWR_SINGLE_BUS_BV; // disable pin interrupt
        ANL       0xac,#0xfe
//   49 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE IEN2
        REQUIRE P2IEN

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   50 void AT_pwr_single_bus_init(void)
AT_pwr_single_bus_init:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function AT_pwr_single_bus_init
        CODE
//   51 {
        FUNCALL AT_pwr_single_bus_init, AT_pwr_single_bus_input
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   52   AT_pwr_single_bus_input();
        ; Setup parameters for call to function AT_pwr_single_bus_input
        LCALL     `??AT_pwr_single_bus_input::?relay`; Banked call to: AT_pwr_single_bus_input
//   53 
//   54   // set IPG1(ADC/T1/P2INT) to the highest priority
//   55   IP0 |= BV(1);
        ORL       0xa9,#0x2
//   56   IP1 |= BV(1);
        ORL       0xb9,#0x2
//   57 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock2
        REQUIRE IP0
        REQUIRE IP1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   58 void AT_pwr_single_bus_send_byte(uint8 dataByte)
AT_pwr_single_bus_send_byte:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function AT_pwr_single_bus_send_byte
        CODE
//   59 {
        FUNCALL AT_pwr_single_bus_send_byte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_byte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_byte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_byte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
//   60   uint8 i;
//   61 
//   62   for(i=0; i<8; i++)
        MOV       R6,#0x8
//   63   {
//   64     if(dataByte & 0x01)
??AT_pwr_single_bus_send_byte_0:
        MOV       A,R7
        MOV       C,0xE0 /* A   */.0
        SETB      0xa0.0
        JNC       ??AT_pwr_single_bus_send_byte_1
//   65     {
//   66       PWR_SINGLE_BUS_PIN = PWR_SINGLE_BUS_HIGH;
//   67       MicroWait(191); // more close to 160 us
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#-0x41
        MOV       R3,#0x0
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   68 
//   69       PWR_SINGLE_BUS_PIN = PWR_SINGLE_BUS_LOW;
        CLR       0xa0.0
//   70       MicroWait(92); // more close to 80 us
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#0x5c
        SJMP      ??AT_pwr_single_bus_send_byte_2
//   71     }
//   72     else
//   73     {
//   74       PWR_SINGLE_BUS_PIN = PWR_SINGLE_BUS_HIGH;
//   75       MicroWait(92); // more close to 80 us
??AT_pwr_single_bus_send_byte_1:
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#0x5c
        MOV       R3,#0x0
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   76 
//   77       PWR_SINGLE_BUS_PIN = PWR_SINGLE_BUS_LOW;
        CLR       0xa0.0
//   78       MicroWait(191); // more close to 160 us
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#-0x41
??AT_pwr_single_bus_send_byte_2:
        MOV       R3,#0x0
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   79     }
//   80 
//   81     dataByte >>= 1;
        MOV       A,R7
        CLR       C
        RRC       A
        MOV       R7,A
//   82   }
        DEC       R6
        MOV       A,R6
        JNZ       ??AT_pwr_single_bus_send_byte_0
//   83 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
        REQUIRE _A_P2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   84 void AT_pwr_single_bus_send_buf(uint8 *buf, uint8 len)
AT_pwr_single_bus_send_buf:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function AT_pwr_single_bus_send_buf
        CODE
//   85 {
        FUNCALL AT_pwr_single_bus_send_buf, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_buf, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_buf, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_buf, AT_pwr_single_bus_output
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_buf, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_buf, AT_pwr_single_bus_send_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_pwr_single_bus_send_buf, AT_pwr_single_bus_input
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V1,R1
//   86   uint8 i;
//   87 
//   88   printf("|down|-----|%02d bytes|: ", len);
        ; Setup parameters for call to function printf
        MOV       A,R1
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R2,#`?<Constant "|down|-----|%02d byte...">` & 0xff
        MOV       R3,#(`?<Constant "|down|-----|%02d byte...">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//   89   for(i=0; i<len; i++)
        MOV       ?V0,#0x0
        SJMP      ??AT_pwr_single_bus_send_buf_0
//   90   {
//   91     printf("%02X ", buf[i]);
??AT_pwr_single_bus_send_buf_1:
        ; Setup parameters for call to function printf
        LCALL     ?Subroutine0 & 0xFFFF
//   92   }
??CrossCallReturnLabel_0:
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R2,#`?<Constant "%02X ">` & 0xff
        MOV       R3,#(`?<Constant "%02X ">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        INC       ?V0
??AT_pwr_single_bus_send_buf_0:
        MOV       A,?V0
        CLR       C
        SUBB      A,?V1
        JC        ??AT_pwr_single_bus_send_buf_1
//   93   printf("\r\n");
        ; Setup parameters for call to function printf
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     `??printf::?relay`; Banked call to: printf
//   94 
//   95   AT_pwr_single_bus_output();
        ; Setup parameters for call to function AT_pwr_single_bus_output
        LCALL     `??AT_pwr_single_bus_output::?relay`; Banked call to: AT_pwr_single_bus_output
//   96 
//   97   PWR_SINGLE_BUS_PIN = PWR_SINGLE_BUS_LOW;
        CLR       0xa0.0
//   98   MicroWait(4900); // more close to 4 ms
        ; Setup parameters for call to function Onboard_wait
        MOV       R2,#0x24
        MOV       R3,#0x13
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   99 
//  100   for(i=0; i<len; i++)
        MOV       ?V0,#0x0
        SJMP      ??AT_pwr_single_bus_send_buf_2
//  101   {
//  102     AT_pwr_single_bus_send_byte(buf[i]);
??AT_pwr_single_bus_send_buf_3:
        ; Setup parameters for call to function AT_pwr_single_bus_send_byte
        LCALL     ?Subroutine0 & 0xFFFF
//  103   }
??CrossCallReturnLabel_1:
        MOV       R1,A
        LCALL     `??AT_pwr_single_bus_send_byte::?relay`; Banked call to: AT_pwr_single_bus_send_byte
        INC       ?V0
??AT_pwr_single_bus_send_buf_2:
        MOV       A,?V0
        CLR       C
        SUBB      A,?V1
        JC        ??AT_pwr_single_bus_send_buf_3
//  104 
//  105   PWR_SINGLE_BUS_PIN = PWR_SINGLE_BUS_HIGH;
        SETB      0xa0.0
//  106 
//  107   AT_pwr_single_bus_input();
        ; Setup parameters for call to function AT_pwr_single_bus_input
        LCALL     `??AT_pwr_single_bus_input::?relay`; Banked call to: AT_pwr_single_bus_input
//  108 }
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
        REQUIRE _A_P2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function AT_pwr_single_bus_send_buf
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function AT_pwr_single_bus_send_buf
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV       R0,?V0
        MOV       A,R6
        ADD       A,R0
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  109 static ZStatus_t AT_DoorLock_SendOperationEventNotification(uint8 *buf)
AT_DoorLock_SendOperationEventNotification:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function AT_DoorLock_SendOperationEventNotification
        CODE
//  110 {
        FUNCALL AT_DoorLock_SendOperationEventNotification, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SendOperationEventNotification, zclClosures_SendDoorLockOperationEventNotification
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_DoorLock_SendOperationEventNotification, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 23
        MOV       A,#-0x17
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  111     ZStatus_t status;
//  112 
//  113   // build destination address
//  114   afAddrType_t dstAddr;
//  115   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  116   dstAddr.addr.shortAddr = NWK_PAN_COORD_ADDR;// default send to Coordinator
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  117   dstAddr.endPoint = 0x0B;//GENERIC_ENDPOINT on Coordinator
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xb
        MOVX      @DPTR,A
//  118 
//  119   //build DoorLock Operation Event Notification
//  120   zclDoorLockOperationEventNotification_t pPayload;
//  121   pPayload.operationEventSource = 0xFE;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x2
        LCALL     ?Subroutine2 & 0xFFFF
//  122   pPayload.operationEventCode = buf[0];
??CrossCallReturnLabel_4:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine2 & 0xFFFF
//  123   pPayload.userID = BUILD_UINT16(buf[1],buf[2]);
??CrossCallReturnLabel_5:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine1 & 0xFFFF
//  124   pPayload.pin = buf[3]; // it is battery level actually
??CrossCallReturnLabel_2:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine1 & 0xFFFF
//  125   pPayload.zigBeeLocalTime = BUILD_UINT32(buf[4],buf[5],buf[6],buf[7]);
??CrossCallReturnLabel_3:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        CLR       A
        MOV       ?V1,A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V5,A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       A,#0x8
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V5,A
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V6,A
        MOV       A,#0x18
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
//  126 
//  127   pPayload.pData = (uint8 *)osal_mem_alloc(1);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine2 & 0xFFFF
//  128   pPayload.pData[0] = 0;
??CrossCallReturnLabel_6:
        CLR       A
        MOVX      @DPTR,A
//  129 
//  130   status = zclClosures_SendDoorLockOperationEventNotification( DOORLOCK_ENDPOINT,//uint8 srcEP,
//  131                                                                &dstAddr,//afAddrType_t *dstAddr,
//  132                                                                &pPayload,//zclDoorLockOperationEventNotification_t *pPayload,
//  133                                                                TRUE,//uint8 disableDefaultRsp,
//  134                                                                bdb_ZclTransactionSequenceNumber++);//uint8 seqNum
        MOV       DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x1
        ADD       A,R0
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclClosures_SendDoorLockOperationEventNotification
        MOV       A,R0
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0xa
        LCALL     ??zclClosures_SendDoorLockOperationEventNotific; Banked call to: zclClosures_SendDoorLockOperationEventNotification
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       A,R1
        MOV       R6,A
//  135 
//  136   osal_mem_free( pPayload.pData );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  137 
//  138   return status;
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x17
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//  139 }
          CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function AT_DoorLock_SendOperationEventNotification
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function AT_DoorLock_SendOperationEventNotification
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_7:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function AT_DoorLock_SendOperationEventNotification
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function AT_DoorLock_SendOperationEventNotification
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function AT_DoorLock_SendOperationEventNotification
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function AT_DoorLock_SendOperationEventNotification
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_2
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-4
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function AT_DoorLock_SendOperationEventNotification
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_3
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  140 HAL_ISR_FUNCTION( pwr_single_bus_Isr, P2INT_VECTOR )
pwr_single_bus_Isr:
          CFI Block cfiBlock18 Using cfiCommon1
          CFI Function pwr_single_bus_Isr
        CODE
//  141 {
        FUNCALL pwr_single_bus_Isr, AT_Timer1_Set_Clear_Start_US
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pwr_single_bus_Isr, AT_Timer1_Stop_Get
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pwr_single_bus_Isr, AT_Timer1_Set_Clear_Start_US
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pwr_single_bus_Isr, AT_DoorLock_SendOperationEventNotification
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pwr_single_bus_Isr, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pwr_single_bus_Isr, AT_Timer1_Stop_Get
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pwr_single_bus_Isr, AT_Timer1_Set_Clear_Start_US
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL pwr_single_bus_Isr, AT_Timer1_Stop_Get
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        PUSH      A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV       A,#-0xf
        LCALL     ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  142   HAL_ENTER_ISR();
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R6,A
        SETB      0xa8.7
//  143 
//  144   IEN2  &= ~BV(1); // disable port interrupt
        ANL       0x9a,#0xfd
//  145   P2IEN &= ~PWR_SINGLE_BUS_BV; // disable pin interrupt
        ANL       0xac,#0xfe
//  146 
//  147   if(PWR_SINGLE_BUS_PIN)
        MOV       C,0xa0.0
        JNC       $+5
        LJMP      ??pwr_single_bus_Isr_0
//  148   {
//  149     goto isr_exit;
//  150   }
//  151 
//  152   // start to capture the head (4 ms)
//  153   AT_Timer1_Set_Clear_Start_US(7000); 
        ; Setup parameters for call to function AT_Timer1_Set_Clear_Start_US
        MOV       R2,#0x58
        MOV       R3,#0x1b
        LCALL     `??AT_Timer1_Set_Clear_Start_US::?relay`; Banked call to: AT_Timer1_Set_Clear_Start_US
//  154   while(1)
//  155   {
//  156 #ifdef WDT_IN_PM1
//  157     WatchDogClear();
??pwr_single_bus_Isr_1:
        LCALL     ?Subroutine3
//  158 #endif
//  159     if(T1IF)
??CrossCallReturnLabel_8:
        MOV       C,0xc0.1
        JNC       $+5
        LJMP      ??pwr_single_bus_Isr_2
//  160     {
//  161       T1IF = 0;
//  162       goto isr_exit;
//  163     }
//  164     if(PWR_SINGLE_BUS_PIN)
        MOV       C,0xa0.0
        JNC       ??pwr_single_bus_Isr_1
//  165       break;
//  166   }
//  167   pwr_single_bus_rcv_low = AT_Timer1_Stop_Get();
        ; Setup parameters for call to function AT_Timer1_Stop_Get
        LCALL     ?Subroutine4
//  168   if(pwr_single_bus_rcv_low < 2000)
??CrossCallReturnLabel_10:
        MOV       DPTR,#pwr_single_bus_rcv_low
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x30
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x7
        JC        ??pwr_single_bus_Isr_0
//  169   {
//  170     goto isr_exit;
//  171   }
//  172 
//  173   pwr_single_bus_rcv_len = 0;
        MOV       DPTR,#pwr_single_bus_rcv_len
        CLR       A
        MOVX      @DPTR,A
//  174   pwr_single_bus_rcv_bit = 0;
        MOV       DPTR,#pwr_single_bus_rcv_bit
        SJMP      ??pwr_single_bus_Isr_3
//  175 
//  176   // start to capture data
//  177   while(1)
//  178   {
//  179 #ifdef WDT_IN_PM1
//  180     WatchDogClear();
//  181 #endif
//  182 
//  183     // get high level time
//  184     AT_Timer1_Set_Clear_Start_US(400);
//  185     while(PWR_SINGLE_BUS_PIN)
//  186     {
//  187       if(T1IF)
//  188       {
//  189         T1IF = 0;
//  190 
//  191         if((pwr_single_bus_rcv_len > 0) && (pwr_single_bus_rcv_bit == 0))
//  192         {
//  193           if(pwr_single_bus_rcv_len==8)
//  194           AT_DoorLock_SendOperationEventNotification(pwr_single_bus_rcv_buf);
//  195           osal_set_event(zclDoorLock_TaskID, DOORLOCK_HANDLE_RSP_EVT);
//  196           goto isr_exit;
//  197         }
//  198 
//  199         goto isr_exit;
//  200       }
//  201     }
//  202     pwr_single_bus_rcv_high = AT_Timer1_Stop_Get();
//  203 
//  204     // get low level time
//  205     AT_Timer1_Set_Clear_Start_US(400);
//  206     while(!PWR_SINGLE_BUS_PIN)
//  207     {
//  208       if(T1IF)
//  209       {
//  210         T1IF = 0;
//  211         goto isr_exit;
//  212       }
//  213     }
//  214     pwr_single_bus_rcv_low = AT_Timer1_Stop_Get();
//  215 
//  216     // check the total time
//  217     pwr_single_bus_rcv_total = pwr_single_bus_rcv_high + pwr_single_bus_rcv_low;
//  218     if ((pwr_single_bus_rcv_total < 120) || (pwr_single_bus_rcv_total > 350)) //120/4|350/4
//  219       goto isr_exit; // tolerance of 30%
//  220 
//  221     // save the data bit
//  222     if(pwr_single_bus_rcv_high > pwr_single_bus_rcv_low)
//  223       pwr_single_bus_rcv_buf[pwr_single_bus_rcv_len] |= BV(pwr_single_bus_rcv_bit++);
//  224     else
//  225       pwr_single_bus_rcv_buf[pwr_single_bus_rcv_len] &= ~BV(pwr_single_bus_rcv_bit++);
??pwr_single_bus_Isr_4:
        MOV       A,R4
        CPL       A
        MOV       R2,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        ANL       A,R2
??pwr_single_bus_Isr_5:
        MOVX      @DPTR,A
        MOV       DPTR,#pwr_single_bus_rcv_bit
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  226 
//  227     // increase the index
//  228     if(pwr_single_bus_rcv_bit == 8) // get a whole byte (8 bits)
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??pwr_single_bus_Isr_6
//  229     {
//  230       pwr_single_bus_rcv_bit = 0;
        CLR       A
        MOVX      @DPTR,A
//  231       pwr_single_bus_rcv_len++;
        MOV       DPTR,#pwr_single_bus_rcv_len
        MOVX      A,@DPTR
        INC       A
??pwr_single_bus_Isr_3:
        MOVX      @DPTR,A
//  232     }
??pwr_single_bus_Isr_6:
        LCALL     ?Subroutine3
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function AT_Timer1_Set_Clear_Start_US
        MOV       R2,#-0x70
        MOV       R3,#0x1
        LCALL     `??AT_Timer1_Set_Clear_Start_US::?relay`; Banked call to: AT_Timer1_Set_Clear_Start_US
??pwr_single_bus_Isr_7:
        MOV       C,0xa0.0
        JNC       ??pwr_single_bus_Isr_8
        MOV       C,0xc0.1
        JNC       ??pwr_single_bus_Isr_7
        CLR       0xc0.1
        MOV       DPTR,#pwr_single_bus_rcv_len
        MOVX      A,@DPTR
        JZ        ??pwr_single_bus_Isr_0
        MOV       DPTR,#pwr_single_bus_rcv_bit
        MOVX      A,@DPTR
        JNZ       ??pwr_single_bus_Isr_0
        MOV       DPTR,#pwr_single_bus_rcv_len
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??pwr_single_bus_Isr_9
        ; Setup parameters for call to function AT_DoorLock_SendOperationEventNotification
        MOV       R2,#pwr_single_bus_rcv_buf & 0xff
        MOV       R3,#(pwr_single_bus_rcv_buf >> 8) & 0xff
        LCALL     `??AT_DoorLock_SendOperationEventNotification::?`; Banked call to: AT_DoorLock_SendOperationEventNotification
??pwr_single_bus_Isr_9:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x20
        MOV       R3,#0x0
        MOV       DPTR,#zclDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  233   }
//  234 
//  235 isr_exit:
//  236   IEN2  |= BV(1); // enable port interrupt
??pwr_single_bus_Isr_0:
        ORL       0x9a,#0x2
//  237   P2IEN |= PWR_SINGLE_BUS_BV; // enable pin interrupt
        ORL       0xac,#0x1
//  238   P2IFG = 0x00;
        MOV       0x8b,#0x0
//  239   P2IF  = 0x00;
        CLR       0xe8.0
//  240 
//  241   CLEAR_SLEEP_MODE();
        MOV       halSleepPconValue,#0x0
//  242   HAL_EXIT_ISR();
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        MOV       0xa8.7,C
//  243 }
        MOV       R7,#0x2
        LJMP      ?INTERRUPT_LEAVE_XSP
??pwr_single_bus_Isr_8:
        ; Setup parameters for call to function AT_Timer1_Stop_Get
        LCALL     `??AT_Timer1_Stop_Get::?relay`; Banked call to: AT_Timer1_Stop_Get
        MOV       DPTR,#pwr_single_bus_rcv_high
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function AT_Timer1_Set_Clear_Start_US
        MOV       R2,#-0x70
        MOV       R3,#0x1
        LCALL     `??AT_Timer1_Set_Clear_Start_US::?relay`; Banked call to: AT_Timer1_Set_Clear_Start_US
??pwr_single_bus_Isr_10:
        MOV       C,0xa0.0
        JC        ??pwr_single_bus_Isr_11
        MOV       C,0xc0.1
        JNC       ??pwr_single_bus_Isr_10
??pwr_single_bus_Isr_2:
        CLR       0xc0.1
        SJMP      ??pwr_single_bus_Isr_0
??pwr_single_bus_Isr_11:
        ; Setup parameters for call to function AT_Timer1_Stop_Get
        LCALL     ?Subroutine4
??CrossCallReturnLabel_11:
        MOV       DPTR,#pwr_single_bus_rcv_high
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pwr_single_bus_rcv_low
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       DPTR,#pwr_single_bus_rcv_total
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPTR,#pwr_single_bus_rcv_total
        MOVX      A,@DPTR
        ADD       A,#-0x78
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,#-0x19
        MOV       A,R1
        SUBB      A,#0x0
        JNC       ??pwr_single_bus_Isr_0
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       DPTR,#pwr_single_bus_rcv_bit
        MOVX      A,@DPTR
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        MOV       R4,A
        MOV       DPTR,#pwr_single_bus_rcv_len
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#pwr_single_bus_rcv_buf & 0xff
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,#(pwr_single_bus_rcv_buf >> 8) & 0xff
        MOV       R1,A
        MOV       DPTR,#pwr_single_bus_rcv_low
        PUSH      DPL
          CFI CFA_SP SP+-4
        MOV       DPTR,#pwr_single_bus_rcv_high
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPH,#(pwr_single_bus_rcv_low >> 8) & 0xff
        POP       DPL
          CFI CFA_SP SP+-3
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,R2
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R3
        JC        $+5
        LJMP      ??pwr_single_bus_Isr_4
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        ORL       A,R4
        LJMP      ??pwr_single_bus_Isr_5
          CFI EndBlock cfiBlock18
        REQUIRE _A_IEN0
        REQUIRE IEN2
        REQUIRE P2IEN
        REQUIRE _A_P2
        REQUIRE WDCTL
        REQUIRE _A_IRCON
        REQUIRE P2IFG
        REQUIRE _A_IRCON2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond19 Using cfiCommon1
          CFI Function pwr_single_bus_Isr
          CFI Conditional ??CrossCallReturnLabel_10
          CFI A Frame(CFA_SP, 3)
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond20 Using cfiCommon1
          CFI (cfiCond20) Function pwr_single_bus_Isr
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond20) A Frame(CFA_SP, 3)
          CFI (cfiCond20) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-5
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        LCALL     `??AT_Timer1_Stop_Get::?relay`; Banked call to: AT_Timer1_Stop_Get
        MOV       DPTR,#pwr_single_bus_rcv_low
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond22 Using cfiCommon1
          CFI Function pwr_single_bus_Isr
          CFI Conditional ??CrossCallReturnLabel_8
          CFI A Frame(CFA_SP, 3)
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond23 Using cfiCommon1
          CFI (cfiCond23) Function pwr_single_bus_Isr
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond23) A Frame(CFA_SP, 3)
          CFI (cfiCond23) R0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) R1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) R2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) R3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-5
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOV       A,0xc9
        ANL       A,#0xf
        ORL       A,#0xa0
        MOV       0xc9,A
        MOV       A,0xc9
        ANL       A,#0xf
        ORL       A,#0x50
        MOV       0xc9,A
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        COMMON INTVEC:CODE:ROOT(0)
        ORG 51
`??pwr_single_bus_Isr::??INTVEC 51`:
        LJMP       (pwr_single_bus_Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_pwr_single_bus_input::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_pwr_single_bus_input

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_pwr_single_bus_output::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_pwr_single_bus_output

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_pwr_single_bus_init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_pwr_single_bus_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_pwr_single_bus_send_byte::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_pwr_single_bus_send_byte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_pwr_single_bus_send_buf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_pwr_single_bus_send_buf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AT_DoorLock_SendOperationEventNotification::?`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AT_DoorLock_SendOperationEventNotification

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "|down|-----|%02d byte...">`:
        DB "|down|-----|%02d bytes|: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%02X ">`:
        DB "%02X "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        END
// 
// 570 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
// 364 bytes in segment NEAR_CODE
//  14 bytes in segment SFR_AN
//  35 bytes in segment XDATA_ROM_C
// 108 bytes in segment XDATA_Z
// 
// 400 bytes of CODE     memory (+  3 bytes shared)
//  35 bytes of CONST    memory
//   0 bytes of DATA     memory (+ 14 bytes shared)
// 570 bytes of HUGECODE memory
// 108 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
